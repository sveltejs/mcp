{
  "generated_at": "2025-10-12T22:23:00.902Z",
  "model": "claude-sonnet-4-5-20250929",
  "total_sections": 173,
  "successful_summaries": 173,
  "summaries": {
    "cli/overview": "# Svelte CLI (`sv`)\n\nToolkit for creating and maintaining Svelte applications.\n\n## Usage\n\n```sh\nnpx sv <command> <args>\n```\n\nUses local installation if available, otherwise downloads latest version. Works with other package managers (`pnpx` for pnpm, etc.).",
    "cli/faq": "# Svelte CLI (`sv`)\n\n## Running `sv` CLI\n\n```bash\nnpm:  npx sv create\npnpm: pnpx sv create / pnpm dlx sv create\nbun:  bunx sv create\ndeno: deno run npm:sv create\nyarn: yarn dlx sv create\n```\n\n## Troubleshooting\n\n**`npx sv` not working**: Package managers may run local tools instead of registry packages (common with npm/yarn).\n\n**Known issues**:\n- `npx sv create` does nothing\n- `sv` name collision with `runit` \n- Windows PowerShell conflict with `Set-Variable`\n\nSee: [GitHub issues #472, #259, #317](https://github.com/sveltejs/cli/issues)",
    "cli/sv-create": "# sv create\n\nSets up a new SvelteKit project with optional add-ons.\n\n## Usage\n\n```sh\nnpx sv create [options] [path]\n```\n\n## Options\n\n### `--from-playground <url>`\nCreate project from a [playground](/playground) URL. Downloads files, detects dependencies, sets up complete project structure.\n\n```sh\nnpx sv create --from-playground=\"https://svelte.dev/playground/hello-world\"\n```\n\n### `--template <name>`\n- `minimal` — barebones scaffolding\n- `demo` — showcase app with word guessing game (works without JS)\n- `library` — Svelte library template with `svelte-package`\n\n### `--types <option>`\n- `ts` — `.ts` files and `lang=\"ts\"` in `.svelte` components\n- `jsdoc` — [JSDoc syntax](https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html) for types\n\n### `--no-types`\nDisable typechecking (not recommended)\n\n### `--no-add-ons`\nSkip interactive add-ons prompt\n\n### `--install <package-manager>`\nInstall dependencies with: `npm`, `pnpm`, `yarn`, `bun`, or `deno`\n\n### `--no-install`\nSkip dependency installation",
    "cli/sv-add": "# sv add\n\nAdds functionality to existing projects.\n\n## Usage\n\n```sh\nnpx sv add\nnpx sv add [add-ons]\n```\n\nSelect multiple space-separated add-ons or use interactive prompt.\n\n## Options\n\n- `-C`, `--cwd` — project root path\n- `--no-git-check` — skip dirty files check\n- `--install` — install deps with specified package manager\n- `--no-install` — skip dependency installation\n\n## Official add-ons\n\n- `devtools-json`\n- `drizzle`\n- `eslint`\n- `lucia`\n- `mdsvex`\n- `paraglide`\n- `playwright`\n- `prettier`\n- `storybook`\n- `sveltekit-adapter`\n- `tailwindcss`\n- `vitest`",
    "cli/sv-check": "# sv check\n\nFinds errors and warnings: unused CSS, a11y hints, JS/TS compiler errors. Requires Node 16+.\n\n## Installation\n\n```sh\nnpm i -D svelte-check\n```\n\n## Usage\n\n```sh\nnpx sv check\n```\n\n## Options\n\n### `--workspace <path>`\nPath to workspace. Checks all subdirectories except `node_modules` and `--ignore` paths.\n\n### `--output <format>`\nDisplay format: `human`, `human-verbose`, `machine`, `machine-verbose`\n\n### `--watch`\nWatch mode for changes.\n\n### `--preserveWatchOutput`\nDon't clear screen in watch mode.\n\n### `--tsconfig <path>`\nPath to `tsconfig`/`jsconfig`. Only checks files matched by config's `files`/`include`/`exclude`. Reports TS/JS errors. If omitted, searches upward from project directory.\n\n### `--no-tsconfig`\nOnly check `.svelte` files, ignore `.js`/`.ts` files.\n\n### `--ignore <paths>`\nComma-separated quoted paths relative to workspace root:\n```sh\nnpx sv check --ignore \"dist,build\"\n```\n\n### `--fail-on-warnings`\nExit with error code on warnings.\n\n### `--compiler-warnings <warnings>`\nComma-separated `code:behaviour` pairs (`ignore` or `error`):\n```sh\nnpx sv check --compiler-warnings \"css_unused_selector:ignore,a11y_missing_attribute:error\"\n```\n\n### `--diagnostic-sources <sources>`\nComma-separated sources (default: all active):\n- `js` (includes TypeScript)\n- `svelte`\n- `css`\n\n```sh\nnpx sv check --diagnostic-sources \"js,svelte\"\n```\n\n### `--threshold <level>`\nFilter diagnostics:\n- `warning` (default) — errors and warnings\n- `error` — errors only\n\n## Machine-readable output\n\n`--output machine` or `machine-verbose` formats output for CI/automation.\n\n**machine format:**\n```\n1590680325583 START \"/home/user/project\"\n1590680326283 ERROR \"file.svelte\" 1:16 \"Cannot find module 'blubb'.\"\n1590680326778 WARNING \"file.svelte\" 0:37 \"Component has unused export property.\"\n1590680326807 COMPLETED 20 FILES 21 ERRORS 1 WARNINGS 3 FILES_WITH_PROBLEMS\n1590680328921 FAILURE \"Connection closed\"\n```\n\n**machine-verbose format (ndjson):**\n```\n1590680326283 {\"type\":\"ERROR\",\"fn\":\"file.svelte\",\"start\":{\"line\":1,\"character\":16},\"end\":{\"line\":1,\"character\":23},\"message\":\"Cannot find module 'blubb'.\",\"code\":2307,\"source\":\"js\"}\n```\n\n## FAQ\n\n**Why no option to check only specific files?**\n`svelte-check` needs the full project for valid checks. Partial checks miss errors in unchanged files (e.g., renamed prop not updated at usage sites).",
    "cli/sv-migrate": "# sv migrate\n\nCLI tool for migrating Svelte(Kit) codebases. Uses [`svelte-migrate`](https://www.npmjs.com/package/svelte-migrate) package.\n\nMigrations may add `@migration` task annotations in your code.\n\n## Usage\n\n```sh\nnpx sv migrate\n```\n\nOr specify migration:\n```sh\nnpx sv migrate [migration]\n```\n\n## Migrations\n\n### `app-state`\nMigrates `$app/stores` → `$app/state` in `.svelte` files. [Details](/docs/kit/migrating-to-sveltekit-2#SvelteKit-2.12:-$app-stores-deprecated)\n\n### `svelte-5`\nUpgrades Svelte 4 → 5, converts components to [runes](../svelte/what-are-runes). [Migration guide](../svelte/v5-migration-guide)\n\n### `self-closing-tags`\nFixes self-closing non-void elements in `.svelte` files. [PR](https://github.com/sveltejs/kit/pull/12128)\n\n### `svelte-4`\nUpgrades Svelte 3 → 4. [Migration guide](../svelte/v4-migration-guide)\n\n### `sveltekit-2`\nUpgrades SvelteKit 1 → 2. [Migration guide](../kit/migrating-to-sveltekit-2)\n\n### `package`\nUpgrades `@sveltejs/package` v1 → v2. [PR](https://github.com/sveltejs/kit/pull/8922)\n\n### `routes`\nUpgrades pre-release SvelteKit to v1 filesystem routing. [Discussion](https://github.com/sveltejs/kit/discussions/5774)",
    "cli/devtools-json": "# devtools-json Add-on\n\nInstalls [`vite-plugin-devtools-json`](https://github.com/ChromeDevTools/vite-plugin-devtools-json/) - generates Chromium DevTools project settings file at `/.well-known/appspecific/com.chrome.devtools.json`. Enables [workspaces feature](https://developer.chrome.com/docs/devtools/workspaces) to edit source files directly in browser.\n\n> [!NOTE]\n> Enables feature for all dev server users. Allows browser to read/write all files in directory. Chrome's AI Assistance may send data to Google.\n\n## Alternatives\n\n**Disable in browser:** Visit `chrome://flags`, disable \"DevTools Project Settings\" and \"DevTools Automatic Workspace Folders\".\n\n**Handle request manually** in [`handle`](https://svelte.dev/docs/kit/hooks#Server-hooks-handle) hook:\n\n```js\n/// file: src/hooks.server.js\nimport { dev } from '$app/environment';\n\nexport function handle({ event, resolve }) {\n\tif (dev && event.url.pathname === '/.well-known/appspecific/com.chrome.devtools.json') {\n\t\treturn new Response(undefined, { status: 404 });\n\t}\n\n\treturn resolve(event);\n}\n```\n\n## Usage\n\n```sh\nnpx sv add devtools-json\n```",
    "cli/drizzle": "# Drizzle ORM\n\nTypeScript ORM with relational and SQL-like APIs, serverless-ready.\n\n## Setup\n\n```sh\nnpx sv add drizzle\n```\n\nProvides:\n- Database access in server files\n- `.env` for credentials\n- Lucia auth compatibility\n- Optional Docker config for local DB\n\n## Options\n\n### database\nChoose DB variant:\n- `postgresql` — popular open source\n- `mysql` — popular open source  \n- `sqlite` — file-based, no server needed\n\n```sh\nnpx sv add drizzle=database:postgresql\n```\n\n### client\nSQL client (depends on `database`):\n- `postgresql`: `postgres.js`, `neon`\n- `mysql`: `mysql2`, `planetscale`\n- `sqlite`: `better-sqlite3`, `libsql`, `turso`\n\n```sh\nnpx sv add drizzle=database:postgresql+client:postgres.js\n```\n\nCan swap for [other Drizzle-compatible drivers](https://orm.drizzle.team/docs/connect-overview#next-steps) after setup.\n\n### docker\nAdd Docker Compose config (only for `postgresql`/`mysql`):\n\n```sh\nnpx sv add drizzle=database:postgresql+client:postgres.js+docker:yes\n```",
    "cli/eslint": "# ESLint\n\nFinds and fixes problems in your code.\n\n## Usage\n\n```sh\nnpx sv add eslint\n```\n\n## What you get\n\n- `eslint-plugin-svelte` + dependencies installed\n- `eslint.config.js` file\n- Updated `.vscode/settings.json`\n- Auto-configured for TypeScript and Prettier if present",
    "cli/lucia": "# Lucia Auth\n\nAuth setup following [Lucia auth guide](https://lucia-auth.com/).\n\n## Usage\n\n```sh\nnpx sv add lucia\n```\n\n## What you get\n\n- Auth setup for SvelteKit + Drizzle following Lucia best practices\n- Optional demo registration/login pages\n\n## Options\n\n### demo\n\nInclude demo registration and login pages.\n\n```sh\nnpx sv add lucia=demo:yes\n```",
    "cli/mdsvex": "# mdsvex\n\n[mdsvex](https://mdsvex.pngwn.io) - markdown preprocessor for Svelte (MDX for Svelte). Use Svelte components in markdown or markdown in Svelte components.\n\n## Usage\n\n```sh\nnpx sv add mdsvex\n```\n\nInstalls and configures mdsvex in `svelte.config.js`.",
    "cli/paraglide": "# Paraglide i18n\n\nCompiler-based i18n library with tree-shakable message functions, small bundles, type-safety.\n\n## Setup\n\n```sh\nnpx sv add paraglide\n```\n\nAdds:\n- Inlang project settings\n- Paraglide Vite plugin\n- SvelteKit `reroute` and `handle` hooks\n- `text-direction` and `lang` attributes in `app.html`\n- Updated `.gitignore`\n- Optional demo page\n\n## Options\n\n**languageTags** - IETF BCP 47 language tags:\n```sh\nnpx sv add paraglide=\"languageTags:en,es\"\n```\n\n**demo** - Generate demo page:\n```sh\nnpx sv add paraglide=\"demo:yes\"\n```",
    "cli/playwright": "# Playwright\n\nBrowser testing with [Playwright](https://playwright.dev).\n\n## Usage\n\n```sh\nnpx sv add playwright\n```\n\n## What you get\n\n- Scripts in `package.json`\n- Playwright config file\n- Updated `.gitignore`\n- Demo test",
    "cli/prettier": "# Prettier\n\nOpinionated code formatter for Svelte projects.\n\n## Usage\n\n```sh\nnpx sv add prettier\n```\n\n## What you get\n\n- Scripts in `package.json`\n- `.prettierignore` and `.prettierrc` files\n- ESLint config updates (if using ESLint)",
    "cli/storybook": "# Storybook\n\nComponent workshop for Svelte/SvelteKit.\n\n## Setup\n\n```sh\nnpx sv add storybook\n```\n\nInstalls [Storybook for SvelteKit](https://storybook.js.org/docs/get-started/frameworks/sveltekit) or [Storybook for Svelte & Vite](https://storybook.js.org/docs/get-started/frameworks/svelte-vite) with default config, SvelteKit module mocking, and automatic link handling.",
    "cli/sveltekit-adapter": "# SvelteKit Adapters\n\nAdapters deploy your site to various platforms. Community adapters also available at [sveltesociety.dev](https://www.sveltesociety.dev/packages?category=sveltekit-adapters).\n\n## Usage\n\n```sh\nnpx sv add sveltekit-adapter\n```\n\nInstalls and configures chosen adapter in `svelte.config.js`.\n\n## Adapter Options\n\n- `auto` — [`@sveltejs/adapter-auto`](/docs/kit/adapter-auto) - auto-selects adapter, less configurable\n- `node` — [`@sveltejs/adapter-node`](/docs/kit/adapter-node) - standalone Node server\n- `static` — [`@sveltejs/adapter-static`](/docs/kit/adapter-static) - static site generator (SSG)\n- `vercel` — [`@sveltejs/adapter-vercel`](/docs/kit/adapter-vercel) - Vercel deployment\n- `cloudflare` — [`@sveltejs/adapter-cloudflare`](/docs/kit/adapter-cloudflare) - Cloudflare deployment\n- `netlify` — [`@sveltejs/adapter-netlify`](/docs/kit/adapter-netlify) - Netlify deployment\n\n```sh\nnpx sv add sveltekit-adapter=adapter:node\n```",
    "cli/tailwind": "# Tailwind CSS\n\n## Setup\n\n```sh\nnpx sv add tailwindcss\n```\n\n## What's Installed\n\n- Tailwind config following [official SvelteKit guide](https://tailwindcss.com/docs/installation/framework-guides/sveltekit)\n- Tailwind Vite plugin\n- Updated `app.css` and `+layout.svelte` (SvelteKit) or `App.svelte` (Vite)\n- Prettier integration (if installed)\n\n## Options\n\nAdd plugins via CLI:\n\n```sh\nnpx sv add tailwindcss=\"plugins:typography\"\n```\n\nAvailable plugins:\n- `typography` — [@tailwindcss/typography](https://github.com/tailwindlabs/tailwindcss-typography)\n- `forms` — [@tailwindcss/forms](https://github.com/tailwindlabs/tailwindcss-forms)",
    "cli/vitest": "# Vitest\n\n[Vitest](https://vitest.dev/) is a Vite-native testing framework.\n\n## Usage\n\n```sh\nnpx sv add vitest\n```\n\nInstalls packages, adds scripts to `package.json`, configures client/server-aware Svelte testing in Vite config, and includes demo tests.",
    "kit/introduction": "# SvelteKit Introduction\n\n## What is SvelteKit?\n\nFramework for building robust, performant web apps using Svelte. Similar to Next (React) or Nuxt (Vue).\n\n## SvelteKit vs Svelte\n\n**Svelte**: UI component compiler that renders components to JavaScript/CSS.\n\n**SvelteKit**: Full app framework providing:\n- Router\n- [Build optimizations](https://vitejs.dev/guide/features.html#build-optimizations)\n- [Offline support](service-workers)\n- [Preloading](link-options#data-sveltekit-preload-data)\n- [Configurable rendering](page-options): SSR, CSR, or prerendering\n- [Image optimization](images)\n- HMR via Vite\n\nSee [project types](project-types) for what you can build.",
    "kit/creating-a-project": "# SvelteKit Quick Start\n\n## Setup\n\n```sh\nnpx sv create my-app\ncd my-app\nnpm run dev\n```\n\nScaffolds project in `my-app`, starts dev server on `localhost:5173`.\n\n## Core Concepts\n\n- Each page = Svelte component\n- Add files to `src/routes` to create pages\n- Server-rendered first visit, then client-side app takes over\n\n## Editor\n\nVS Code + [Svelte extension](https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode) recommended.",
    "kit/project-types": "# SvelteKit Rendering & Deployment\n\n## Default Rendering\n\nFirst page: SSR (server-side rendering)  \nSubsequent pages: CSR (client-side rendering)  \nImproves SEO and eliminates page flash on navigation.\n\n## Static Site Generation (SSG)\n\nUse [`adapter-static`](adapter-static) to prerender entire site, or use [prerender option](page-options#prerender) for specific pages with another adapter.\n\nFor large sites: Use [ISR with `adapter-vercel`](adapter-vercel#Incremental-Static-Regeneration) to avoid long builds.\n\n## Single-Page App (SPA)\n\nCSR only. [Build SPAs](single-page-apps) with SvelteKit. Skip `server` file docs if using separate backend.\n\n## Multi-Page App (MPA)\n\nNot typical for SvelteKit. Use [`csr = false`](page-options#csr) to remove JS or [`data-sveltekit-reload`](link-options#data-sveltekit-reload) for server-rendered links.\n\n## Separate Backend\n\nDeploy frontend separately using `adapter-node` or serverless adapter. Skip `server` file docs. See [FAQ on backend API calls](faq#How-do-I-use-a-different-backend-API-server).\n\n## Serverless\n\n[`adapter-auto`](adapter-auto): Zero-config for supported platforms  \nPlatform-specific: [`adapter-vercel`](adapter-vercel), [`adapter-netlify`](adapter-netlify), [`adapter-cloudflare`](adapter-cloudflare)  \nSome support `edge` option for [edge rendering](glossary#Edge).\n\n## Own Server / Container\n\nUse [`adapter-node`](adapter-node) for VPS, Docker, or LXC.\n\n## Library\n\nUse [`@sveltejs/package`](packaging) add-on. Choose library option in [`sv create`](/docs/cli/sv-create).\n\n## Offline / PWA\n\nFull [service worker](service-workers) support for offline apps and [PWAs](glossary#PWA).\n\n## Mobile App\n\nTurn [SPA](single-page-apps) into mobile app with [Tauri](https://v2.tauri.app/start/frontend/sveltekit/) or [Capacitor](https://capacitorjs.com/solution/svelte).\n\nUse [`bundleStrategy: 'single'`](configuration#output) to limit requests (helpful for HTTP/1 servers).\n\n## Desktop App\n\nTurn [SPA](single-page-apps) into desktop app with [Tauri](https://v2.tauri.app/start/frontend/sveltekit/), [Wails](https://wails.io/docs/guides/sveltekit/), or [Electron](https://www.electronjs.org/).\n\n## Browser Extension\n\nUse [`adapter-static`](adapter-static) or [community adapters](/packages#sveltekit-adapters).\n\n## Embedded Device\n\nUse [`bundleStrategy: 'single'`](configuration#output) to reduce concurrent requests on low-power devices.",
    "kit/project-structure": "# SvelteKit Project Structure\n\n## Directory Structure\n\n```tree\nmy-project/\n├ src/\n│ ├ lib/\n│ │ ├ server/          # Server-only code\n│ │ └ [lib files]      # Utilities/components\n│ ├ params/            # Param matchers\n│ ├ routes/            # App routes\n│ ├ app.html           # Page template\n│ ├ error.html         # Error page\n│ ├ hooks.client.js\n│ ├ hooks.server.js\n│ ├ service-worker.js\n│ └ instrumentation.server.js\n├ static/              # Static assets\n├ tests/\n├ package.json\n├ svelte.config.js\n├ tsconfig.json\n└ vite.config.js\n```\n\n## Key Directories\n\n### src/lib\n- Import via `$lib` alias\n- `lib/server`: Server-only code, import via `$lib/server`. Client imports are blocked.\n\n### src/routes\nContains app routes and colocated components.\n\n### src/params\nParam matchers for advanced routing.\n\n## Key Files\n\n### app.html\nPage template with placeholders:\n- `%sveltekit.head%` - `<link>`, `<script>`, `<svelte:head>` content\n- `%sveltekit.body%` - Rendered markup (must be inside `<div>`, not directly in `<body>`)\n- `%sveltekit.assets%` - `paths.assets` or relative to `paths.base`\n- `%sveltekit.nonce%` - CSP nonce\n- `%sveltekit.env.[NAME]%` - Environment variables (must start with `publicPrefix`, usually `PUBLIC_`)\n- `%sveltekit.version%` - App version\n\n### error.html\nFallback error page with placeholders:\n- `%sveltekit.status%` - HTTP status\n- `%sveltekit.error.message%` - Error message\n\n### hooks.client.js / hooks.server.js\nClient and server hooks.\n\n### service-worker.js\nService worker code.\n\n### instrumentation.server.js\nObservability setup. Runs before app code (requires adapter support).\n\n### package.json\nMust include `@sveltejs/kit`, `svelte`, `vite` as `devDependencies`.\nMust have `\"type\": \"module\"` (`.cjs` for CommonJS).\n\n### svelte.config.js\nSvelte and SvelteKit configuration.\n\n### tsconfig.json\nTypeScript config. Extends generated `.svelte-kit/tsconfig.json`. Use `typescript.config` setting for top-level changes.\n\n### vite.config.js\nVite config using `@sveltejs/kit/vite` plugin.\n\n## Other\n\n### static/\nStatic assets served as-is (e.g., `robots.txt`, `favicon.png`).\n\n### .svelte-kit/\nGenerated files (configurable via `outDir`). Can be deleted and regenerated.",
    "kit/web-standards": "# Web Standards\n\nSvelteKit builds on standard Web APIs available in modern browsers and non-browser environments.\n\n## Fetch APIs\n\n`fetch` available in hooks, server routes, and browser.\n\n**Special server-side `fetch`:**\n- In `load` functions, server hooks, and API routes: invokes endpoints directly during SSR without HTTP calls\n- Preserves credentials automatically\n- Allows relative requests\n- Outside `load`: must explicitly pass `cookie`/`authorization` headers\n\n### Request\n\nAccess via `event.request` in hooks and server routes.\n\n```js\n// Get posted data\nrequest.json()\nrequest.formData()\n```\n\n### Response\n\nReturned from `await fetch(...)` and `+server.js` handlers.\n\n### Headers\n\nRead `request.headers`, set `response.headers`:\n\n```js\n/// file: src/routes/what-is-my-user-agent/+server.js\nimport { json } from '@sveltejs/kit';\n\n/** @type {import('./$types').RequestHandler} */\nexport function GET({ request }) {\n\t// log all headers\n\tconsole.log(...request.headers);\n\n\t// create a JSON Response using a header we received\n\treturn json({\n\t\t// retrieve a specific header\n\t\tuserAgent: request.headers.get('user-agent')\n\t}, {\n\t\t// set a header on the response\n\t\theaders: { 'x-custom-header': 'potato' }\n\t});\n}\n```\n\n## FormData\n\nHandle HTML form submissions:\n\n```js\n/// file: src/routes/hello/+server.js\nimport { json } from '@sveltejs/kit';\n\n/** @type {import('./$types').RequestHandler} */\nexport async function POST(event) {\n\tconst body = await event.request.formData();\n\n\t// log all fields\n\tconsole.log([...body]);\n\n\treturn json({\n\t\t// get a specific field's value\n\t\tname: body.get('name') ?? 'world'\n\t});\n}\n```\n\n## Stream APIs\n\nFor large/chunked responses: `ReadableStream`, `WritableStream`, `TransformStream`.\n\n## URL APIs\n\n`URL` interface available in:\n- `event.url` (hooks, server routes)\n- `page.url` (pages)\n- `from`/`to` (`beforeNavigate`, `afterNavigate`)\n\nProperties: `origin`, `pathname`, `hash` (browser only)\n\n### URLSearchParams\n\nAccess query parameters:\n\n```js\nconst foo = url.searchParams.get('foo');\n```\n\n## Web Crypto\n\nAvailable via `crypto` global:\n\n```js\nconst uuid = crypto.randomUUID();\n```",
    "kit/routing": "# SvelteKit Routing\n\n## Filesystem-based Router\n\nRoutes defined by directories in `src/routes`:\n- `src/routes` → root route\n- `src/routes/about` → `/about`\n- `src/routes/blog/[slug]` → `/blog/hello-world` (dynamic parameter)\n\n**Key rules:**\n- All files run on server\n- All files run on client except `+server`\n- `+layout` and `+error` apply to subdirectories\n\n## +page\n\n### +page.svelte\n\nDefines a page. Renders on server (SSR) initially, then client (CSR) for navigation.\n\n```svelte\n<!--- file: src/routes/+page.svelte --->\n<h1>Hello and welcome to my site!</h1>\n<a href=\"/about\">About my site</a>\n```\n\nReceives data from `load` via `data` prop:\n\n```svelte\n<!--- file: src/routes/blog/[slug]/+page.svelte --->\n<script>\n\t/** @type {import('./$types').PageProps} */\n\tlet { data } = $props();\n</script>\n\n<h1>{data.title}</h1>\n<div>{@html data.content}</div>\n```\n\n### +page.js\n\nExports `load` function for data fetching. Runs on server and client.\n\n```js\n/// file: src/routes/blog/[slug]/+page.js\nimport { error } from '@sveltejs/kit';\n\n/** @type {import('./$types').PageLoad} */\nexport function load({ params }) {\n\tif (params.slug === 'hello-world') {\n\t\treturn {\n\t\t\ttitle: 'Hello world!',\n\t\t\tcontent: 'Welcome to our blog. Lorem ipsum dolor sit amet...'\n\t\t};\n\t}\n\n\terror(404, 'Not found');\n}\n```\n\nCan export page options: `prerender`, `ssr`, `csr`\n\n### +page.server.js\n\nServer-only `load` function. Use for database access, private env vars, etc. Returns must be serializable.\n\n```js\n/// file: src/routes/blog/[slug]/+page.server.js\nimport { error } from '@sveltejs/kit';\n\n/** @type {import('./$types').PageServerLoad} */\nexport async function load({ params }) {\n\tconst post = await getPostFromDatabase(params.slug);\n\n\tif (post) {\n\t\treturn post;\n\t}\n\n\terror(404, 'Not found');\n}\n```\n\nCan also export actions for form submissions.\n\n## +error\n\nCustom error page per route:\n\n```svelte\n<!--- file: src/routes/blog/[slug]/+error.svelte --->\n<script>\n\timport { page } from '$app/state';\n</script>\n\n<h1>{page.status}: {page.error.message}</h1>\n```\n\nSvelteKit walks up tree to find closest error boundary. Root fallback: `src/error.html`.\n\n**Note:** Not used for errors in `handle` hook or `+server.js` handlers.\n\n## +layout\n\n### +layout.svelte\n\nShared UI across pages. Must include `{@render children()}`.\n\n```svelte\n<!--- file: src/routes/+layout.svelte --->\n<script>\n\tlet { children } = $props();\n</script>\n\n<nav>\n\t<a href=\"/\">Home</a>\n\t<a href=\"/about\">About</a>\n\t<a href=\"/settings\">Settings</a>\n</nav>\n\n{@render children()}\n```\n\nLayouts nest. Child layouts inherit parent layouts.\n\n```svelte\n<!--- file: src/routes/settings/+layout.svelte --->\n<script>\n\t/** @type {import('./$types').LayoutProps} */\n\tlet { data, children } = $props();\n</script>\n\n<h1>Settings</h1>\n\n<div class=\"submenu\">\n\t{#each data.sections as section}\n\t\t<a href=\"/settings/{section.slug}\">{section.title}</a>\n\t{/each}\n</div>\n\n{@render children()}\n```\n\n### +layout.js\n\nLoad data for layouts:\n\n```js\n/// file: src/routes/settings/+layout.js\n/** @type {import('./$types').LayoutLoad} */\nexport function load() {\n\treturn {\n\t\tsections: [\n\t\t\t{ slug: 'profile', title: 'Profile' },\n\t\t\t{ slug: 'notifications', title: 'Notifications' }\n\t\t]\n\t};\n}\n```\n\nLayout data available to all child pages. Can export page options as defaults.\n\n### +layout.server.js\n\nServer-only layout load. Change `LayoutLoad` to `LayoutServerLoad`.\n\n## +server\n\nAPI routes with HTTP verb handlers. Returns `Response` objects.\n\n```js\n/// file: src/routes/api/random-number/+server.js\nimport { error } from '@sveltejs/kit';\n\n/** @type {import('./$types').RequestHandler} */\nexport function GET({ url }) {\n\tconst min = Number(url.searchParams.get('min') ?? '0');\n\tconst max = Number(url.searchParams.get('max') ?? '1');\n\n\tconst d = max - min;\n\n\tif (isNaN(d) || d < 0) {\n\t\terror(400, 'min and max must be numbers, and min must be less than max');\n\t}\n\n\tconst random = min + Math.random() * d;\n\n\treturn new Response(String(random));\n}\n```\n\n### Receiving data\n\n```svelte\n<!--- file: src/routes/add/+page.svelte --->\n<script>\n\tlet a = 0;\n\tlet b = 0;\n\tlet total = 0;\n\n\tasync function add() {\n\t\tconst response = await fetch('/api/add', {\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify({ a, b }),\n\t\t\theaders: {\n\t\t\t\t'content-type': 'application/json'\n\t\t\t}\n\t\t});\n\n\t\ttotal = await response.json();\n\t}\n</script>\n\n<input type=\"number\" bind:value={a}> +\n<input type=\"number\" bind:value={b}> =\n{total}\n\n<button onclick={add}>Calculate</button>\n```\n\n```js\n/// file: src/routes/api/add/+server.js\nimport { json } from '@sveltejs/kit';\n\n/** @type {import('./$types').RequestHandler} */\nexport async function POST({ request }) {\n\tconst { a, b } = await request.json();\n\treturn json(a + b);\n}\n```\n\n### Fallback handler\n\nCatches unhandled methods:\n\n```js\n/// file: src/routes/api/add/+server.js\nimport { json, text } from '@sveltejs/kit';\n\n/** @type {import('./$types').RequestHandler} */\nexport async function POST({ request }) {\n\tconst { a, b } = await request.json();\n\treturn json(a + b);\n}\n\n// This handler will respond to PUT, PATCH, DELETE, etc.\n/** @type {import('./$types').RequestHandler} */\nexport async function fallback({ request }) {\n\treturn text(`I caught your ${request.method} request!`);\n}\n```\n\n### Content negotiation\n\n`+server.js` can coexist with `+page` files:\n- `PUT`/`PATCH`/`DELETE`/`OPTIONS` → always `+server.js`\n- `GET`/`POST`/`HEAD` → page if `accept` header prioritizes `text/html`, else `+server.js`\n- `GET` responses include `Vary: Accept` header\n\n**Notes:**\n- `+layout` files don't affect `+server.js`\n- Errors return JSON or fallback HTML (not `+error.svelte`)\n\n## $types\n\nSvelteKit generates `$types.d.ts` for type safety:\n\n```svelte\n<!--- file: src/routes/blog/[slug]/+page.svelte --->\n<script>\n\t/** @type {import('./$types').PageProps} */\n\tlet { data } = $props();\n</script>\n```\n\nTypes: `PageProps`, `LayoutProps`, `PageLoad`, `PageServerLoad`, `LayoutLoad`, `LayoutServerLoad`, `RequestHandler`\n\n**Note:** IDE tooling auto-inserts types - manual annotation optional.\n\n## Other files\n\nNon-route files in route directories are ignored. Colocate components with routes or use `$lib` for shared modules.",
    "kit/load": "# Load Functions\n\n## Page Data\n\n`+page.js` exports a `load` function whose return value is available to `+page.svelte` via `data` prop:\n\n```js\n/// file: src/routes/blog/[slug]/+page.js\n/** @type {import('./$types').PageLoad} */\nexport function load({ params }) {\n\treturn {\n\t\tpost: {\n\t\t\ttitle: `Title for ${params.slug} goes here`,\n\t\t\tcontent: `Content for ${params.slug} goes here`\n\t\t}\n\t};\n}\n```\n\n```svelte\n<!--- file: src/routes/blog/[slug]/+page.svelte --->\n<script>\n\t/** @type {import('./$types').PageProps} */\n\tlet { data } = $props();\n</script>\n\n<h1>{data.post.title}</h1>\n<div>{@html data.post.content}</div>\n```\n\n`+page.server.js` runs only on server (for private env vars, database access):\n\n```js\n/// file: src/routes/blog/[slug]/+page.server.js\nimport * as db from '$lib/server/database';\n\n/** @type {import('./$types').PageServerLoad} */\nexport async function load({ params }) {\n\treturn {\n\t\tpost: await db.getPost(params.slug)\n\t};\n}\n```\n\n## Layout Data\n\n`+layout.js` or `+layout.server.js` loads data for layouts:\n\n```js\n/// file: src/routes/blog/[slug]/+layout.server.js\nimport * as db from '$lib/server/database';\n\n/** @type {import('./$types').LayoutServerLoad} */\nexport async function load() {\n\treturn {\n\t\tposts: await db.getPostSummaries()\n\t};\n}\n```\n\n```svelte\n<!--- file: src/routes/blog/[slug]/+layout.svelte --->\n<script>\n\t/** @type {import('./$types').LayoutProps} */\n\tlet { data, children } = $props();\n</script>\n\n<main>\n\t{@render children()}\n</main>\n\n<aside>\n\t<h2>More posts</h2>\n\t<ul>\n\t\t{#each data.posts as post}\n\t\t\t<li>\n\t\t\t\t<a href=\"/blog/{post.slug}\">\n\t\t\t\t\t{post.title}\n\t\t\t\t</a>\n\t\t\t</li>\n\t\t{/each}\n\t</ul>\n</aside>\n```\n\nChild components access parent layout data. If multiple `load` functions return same key, last one wins.\n\n## page.data\n\nAccess page data from parent layouts via `page.data`:\n\n```svelte\n<!--- file: src/routes/+layout.svelte --->\n<script>\n\timport { page } from '$app/state';\n</script>\n\n<svelte:head>\n\t<title>{page.data.title}</title>\n</svelte:head>\n```\n\n## Universal vs Server\n\n**Server load** (`+page.server.js`, `+layout.server.js`):\n- Always runs on server\n- Access to `clientAddress`, `cookies`, `locals`, `platform`, `request`\n- Must return serializable data (devalue format)\n\n**Universal load** (`+page.js`, `+layout.js`):\n- Runs on server during SSR, then in browser during hydration\n- Subsequent runs in browser only\n- Can return custom classes, component constructors\n- Has `data` property containing server load return value\n\n**When to use:**\n- Server: database access, private env vars\n- Universal: external API calls without credentials, non-serializable returns\n- Both: pass server data to universal via `data` property\n\n## Using URL Data\n\n### url\n`URL` instance with `origin`, `hostname`, `pathname`, `searchParams`. `url.hash` unavailable during load.\n\n### route\nCurrent route directory relative to `src/routes`:\n\n```js\n/// file: src/routes/a/[b]/[...c]/+page.js\n/** @type {import('./$types').PageLoad} */\nexport function load({ route }) {\n\tconsole.log(route.id); // '/a/[b]/[...c]'\n}\n```\n\n### params\nDerived from `url.pathname` and `route.id`. For `/a/[b]/[...c]` and `/a/x/y/z`:\n\n```json\n{\n\t\"b\": \"x\",\n\t\"c\": \"y/z\"\n}\n```\n\n## Making fetch Requests\n\nProvided `fetch` function:\n- Inherits `cookie` and `authorization` headers on server\n- Makes relative requests on server\n- Internal requests go directly to handler (no HTTP overhead)\n- Response captured and inlined during SSR\n- Response read from HTML during hydration\n\n```js\n/// file: src/routes/items/[id]/+page.js\n/** @type {import('./$types').PageLoad} */\nexport async function load({ fetch, params }) {\n\tconst res = await fetch(`/api/items/${params.id}`);\n\tconst item = await res.json();\n\n\treturn { item };\n}\n```\n\n## Cookies\n\nServer `load` functions can get/set cookies:\n\n```js\n/// file: src/routes/+layout.server.js\nimport * as db from '$lib/server/database';\n\n/** @type {import('./$types').LayoutServerLoad} */\nexport async function load({ cookies }) {\n\tconst sessionid = cookies.get('sessionid');\n\n\treturn {\n\t\tuser: await db.getUser(sessionid)\n\t};\n}\n```\n\nCookies passed through `fetch` only if target host is same or more specific subdomain.\n\n## Headers\n\n`setHeaders` sets response headers (server only):\n\n```js\n/// file: src/routes/products/+page.js\n/** @type {import('./$types').PageLoad} */\nexport async function load({ fetch, setHeaders }) {\n\tconst url = `https://cms.example.com/products.json`;\n\tconst response = await fetch(url);\n\n\tsetHeaders({\n\t\tage: response.headers.get('age'),\n\t\t'cache-control': response.headers.get('cache-control')\n\t});\n\n\treturn response.json();\n}\n```\n\nCannot set same header multiple times. Use `cookies.set()` for `set-cookie`.\n\n## Using Parent Data\n\n`await parent()` accesses parent `load` data:\n\n```js\n/// file: src/routes/+layout.js\n/** @type {import('./$types').LayoutLoad} */\nexport function load() {\n\treturn { a: 1 };\n}\n```\n\n```js\n/// file: src/routes/abc/+layout.js\n/** @type {import('./$types').LayoutLoad} */\nexport async function load({ parent }) {\n\tconst { a } = await parent();\n\treturn { b: a + 1 };\n}\n```\n\n```js\n/// file: src/routes/abc/+page.js\n/** @type {import('./$types').PageLoad} */\nexport async function load({ parent }) {\n\tconst { a, b } = await parent();\n\treturn { c: a + b };\n}\n```\n\nAvoid waterfalls - call independent operations before `await parent()`.\n\n## Errors\n\nThrow expected errors with `error` helper:\n\n```js\n/// file: src/routes/admin/+layout.server.js\nimport { error } from '@sveltejs/kit';\n\n/** @type {import('./$types').LayoutServerLoad} */\nexport function load({ locals }) {\n\tif (!locals.user) {\n\t\terror(401, 'not logged in');\n\t}\n\n\tif (!locals.user.isAdmin) {\n\t\terror(403, 'not an admin');\n\t}\n}\n```\n\nUnexpected errors invoke `handleError` and treated as 500.\n\n## Redirects\n\nUse `redirect` helper with 3xx status code:\n\n```js\n/// file: src/routes/user/+layout.server.js\nimport { redirect } from '@sveltejs/kit';\n\n/** @type {import('./$types').LayoutServerLoad} */\nexport function load({ locals }) {\n\tif (!locals.user) {\n\t\tredirect(307, '/login');\n\t}\n}\n```\n\nDon't use inside `try {...}` blocks.\n\n## Streaming with Promises\n\nServer `load` promises stream to browser as they resolve:\n\n```js\n/// file: src/routes/blog/[slug]/+page.server.js\n/** @type {import('./$types').PageServerLoad} */\nexport async function load({ params }) {\n\treturn {\n\t\tcomments: loadComments(params.slug), // not awaited\n\t\tpost: await loadPost(params.slug)\n\t};\n}\n```\n\n```svelte\n<!--- file: src/routes/blog/[slug]/+page.svelte --->\n<script>\n\t/** @type {import('./$types').PageProps} */\n\tlet { data } = $props();\n</script>\n\n<h1>{data.post.title}</h1>\n<div>{@html data.post.content}</div>\n\n{#await data.comments}\n\tLoading comments...\n{:then comments}\n\t{#each comments as comment}\n\t\t<p>{comment.content}</p>\n\t{/each}\n{:catch error}\n\t<p>error loading comments: {error.message}</p>\n{/await}\n```\n\nHandle promise rejections to avoid unhandled errors. Attach noop-`catch` or use SvelteKit's `fetch`.\n\n**Limitations:**\n- Doesn't work without JavaScript\n- Can't `setHeaders` or redirect inside streamed promise\n- Not supported on some platforms (AWS Lambda, Firebase)\n\n## Parallel Loading\n\nAll `load` functions run concurrently. Server `load` results grouped into single response during client navigation.\n\n## Rerunning Load Functions\n\nSvelteKit tracks dependencies to avoid unnecessary reruns.\n\n**Load reruns when:**\n- Referenced `params` property changes\n- Referenced `url` property changes (`pathname`, `search`, etc.)\n- Calls `url.searchParams.get/getAll/has` and parameter changes\n- Calls `await parent()` and parent reran\n- Declared dependency via `fetch` or `depends` and URL invalidated\n- `invalidateAll()` called\n\n### Untracking Dependencies\n\n```js\n/// file: src/routes/+page.js\n/** @type {import('./$types').PageLoad} */\nexport async function load({ untrack, url }) {\n\tif (untrack(() => url.pathname === '/')) {\n\t\treturn { message: 'Welcome!' };\n\t}\n}\n```\n\n### Manual Invalidation\n\n- `invalidate(url)` - reruns `load` functions depending on `url`\n- `invalidateAll()` - reruns all `load` functions\n- `depends(url)` - declares dependency on custom identifier\n\n```js\n/// file: src/routes/random-number/+page.js\n/** @type {import('./$types').PageLoad} */\nexport async function load({ fetch, depends }) {\n\tconst response = await fetch('https://api.example.com/random-number');\n\tdepends('app:random');\n\n\treturn {\n\t\tnumber: await response.json()\n\t};\n}\n```\n\n```svelte\n<!--- file: src/routes/random-number/+page.svelte --->\n<script>\n\timport { invalidate, invalidateAll } from '$app/navigation';\n\n\t/** @type {import('./$types').PageProps} */\n\tlet { data } = $props();\n\n\tfunction rerunLoadFunction() {\n\t\tinvalidate('app:random');\n\t\tinvalidate('https://api.example.com/random-number');\n\t\tinvalidate(url => url.href.includes('random-number'));\n\t\tinvalidateAll();\n\t}\n</script>\n\n<p>random number: {data.number}</p>\n<button onclick={rerunLoadFunction}>Update random number</button>\n```\n\n## Authentication Implications\n\n- Layout `load` doesn't run on every request (e.g., client-side navigation)\n- Layout and page `load` run concurrently unless `await parent()` called\n- If layout `load` throws, page `load` runs but client won't receive data\n\n**Strategies:**\n- Use hooks to protect routes before `load` runs\n- Put auth guards in `+page.server.js` for route-specific protection\n- Avoid auth guards in `+layout.server.js` unless all children call `await parent()`\n\n## Using getRequestEvent\n\nAccess request event in shared logic:\n\n```js\n/// file: src/lib/server/auth.js\nimport { redirect } from '@sveltejs/kit';\nimport { getRequestEvent } from '$app/server';\n\nexport function requireLogin() {\n\tconst { locals, url } = getRequestEvent();\n\n\tif (!locals.user) {\n\t\tconst redirectTo = url.pathname + url.search;\n\t\tconst params = new URLSearchParams({ redirectTo });\n\n\t\tredirect(307, `/login?${params}`);\n\t}\n\n\treturn locals.user;\n}\n```\n\n```js\n/// file: +page.server.js\nimport { requireLogin } from '$lib/server/auth';\n\nexport function load() {\n\tconst user = requireLogin();\n\n\treturn {\n\t\tmessage: `hello ${user.name}!`\n\t};\n}\n```",
    "kit/form-actions": "# Form Actions\n\n## Default Actions\n\nExport `default` action from `+page.server.js`:\n\n```js\n/// file: src/routes/login/+page.server.js\n/** @satisfies {import('./$types').Actions} */\nexport const actions = {\n\tdefault: async (event) => {\n\t\t// TODO log the user in\n\t}\n};\n```\n\nInvoke with `<form>` (no JS needed):\n\n```svelte\n<!--- file: src/routes/login/+page.svelte --->\n<form method=\"POST\">\n\t<label>\n\t\tEmail\n\t\t<input name=\"email\" type=\"email\">\n\t</label>\n\t<label>\n\t\tPassword\n\t\t<input name=\"password\" type=\"password\">\n\t</label>\n\t<button>Log in</button>\n</form>\n```\n\nFrom other pages, use `action` attribute:\n\n```html\n/// file: src/routes/+layout.svelte\n<form method=\"POST\" action=\"/login\">\n\t<!-- content -->\n</form>\n```\n\n> Actions always use `POST` requests.\n\n## Named Actions\n\nMultiple actions per page:\n\n```js\n/// file: src/routes/login/+page.server.js\n/** @satisfies {import('./$types').Actions} */\nexport const actions = {\n\tlogin: async (event) => {\n\t\t// TODO log the user in\n\t},\n\tregister: async (event) => {\n\t\t// TODO register the user\n\t}\n};\n```\n\nInvoke with `?/actionName`:\n\n```svelte\n<!--- file: src/routes/login/+page.svelte --->\n<form method=\"POST\" action=\"?/register\">\n```\n\n```svelte\n<!--- file: src/routes/+layout.svelte --->\n<form method=\"POST\" action=\"/login?/register\">\n```\n\nUse `formaction` on buttons:\n\n```svelte\n/// file: src/routes/login/+page.svelte\n<form method=\"POST\" action=\"?/login\">\n\t<label>\n\t\tEmail\n\t\t<input name=\"email\" type=\"email\">\n\t</label>\n\t<label>\n\t\tPassword\n\t\t<input name=\"password\" type=\"password\">\n\t</label>\n\t<button>Log in</button>\n\t<button formaction=\"?/register\">Register</button>\n</form>\n```\n\n> Can't mix default and named actions - query params persist after POST.\n\n## Action Anatomy\n\nActions receive `RequestEvent`, return data available via `form` prop:\n\n```js\n/// file: src/routes/login/+page.server.js\nimport * as db from '$lib/server/db';\n\n/** @type {import('./$types').PageServerLoad} */\nexport async function load({ cookies }) {\n\tconst user = await db.getUserFromSession(cookies.get('sessionid'));\n\treturn { user };\n}\n\n/** @satisfies {import('./$types').Actions} */\nexport const actions = {\n\tlogin: async ({ cookies, request }) => {\n\t\tconst data = await request.formData();\n\t\tconst email = data.get('email');\n\t\tconst password = data.get('password');\n\n\t\tconst user = await db.getUser(email);\n\t\tcookies.set('sessionid', await db.createSession(user), { path: '/' });\n\n\t\treturn { success: true };\n\t},\n\tregister: async (event) => {\n\t\t// TODO register the user\n\t}\n};\n```\n\n```svelte\n<!--- file: src/routes/login/+page.svelte --->\n<script>\n\t/** @type {import('./$types').PageProps} */\n\tlet { data, form } = $props();\n</script>\n\n{#if form?.success}\n\t<!-- this message is ephemeral; it exists because the page was rendered in\n\t       response to a form submission. it will vanish if the user reloads -->\n\t<p>Successfully logged in! Welcome back, {data.user.name}</p>\n{/if}\n```\n\n### Validation Errors\n\nUse `fail()` to return validation errors with HTTP status:\n\n```js\n/// file: src/routes/login/+page.server.js\nimport { fail } from '@sveltejs/kit';\nimport * as db from '$lib/server/db';\n\n/** @satisfies {import('./$types').Actions} */\nexport const actions = {\n\tlogin: async ({ cookies, request }) => {\n\t\tconst data = await request.formData();\n\t\tconst email = data.get('email');\n\t\tconst password = data.get('password');\n\n\t\tif (!email) {\n\t\t\treturn fail(400, { email, missing: true });\n\t\t}\n\n\t\tconst user = await db.getUser(email);\n\n\t\tif (!user || user.password !== db.hash(password)) {\n\t\t\treturn fail(400, { email, incorrect: true });\n\t\t}\n\n\t\tcookies.set('sessionid', await db.createSession(user), { path: '/' });\n\n\t\treturn { success: true };\n\t},\n\tregister: async (event) => {\n\t\t// TODO register the user\n\t}\n};\n```\n\n```svelte\n/// file: src/routes/login/+page.svelte\n<form method=\"POST\" action=\"?/login\">\n\t{#if form?.missing}<p class=\"error\">The email field is required</p>{/if}\n\t{#if form?.incorrect}<p class=\"error\">Invalid credentials!</p>{/if}\n\t<label>\n\t\tEmail\n\t\t<input name=\"email\" type=\"email\" value={form?.email ?? ''}>\n\t</label>\n\t<label>\n\t\tPassword\n\t\t<input name=\"password\" type=\"password\">\n\t</label>\n\t<button>Log in</button>\n\t<button formaction=\"?/register\">Register</button>\n</form>\n```\n\n### Redirects\n\nUse `redirect()` like in `load`:\n\n```js\n// @errors: 2345\n/// file: src/routes/login/+page.server.js\nimport { fail, redirect } from '@sveltejs/kit';\nimport * as db from '$lib/server/db';\n\n/** @satisfies {import('./$types').Actions} */\nexport const actions = {\n\tlogin: async ({ cookies, request, url }) => {\n\t\tconst data = await request.formData();\n\t\tconst email = data.get('email');\n\t\tconst password = data.get('password');\n\n\t\tconst user = await db.getUser(email);\n\t\tif (!user) {\n\t\t\treturn fail(400, { email, missing: true });\n\t\t}\n\n\t\tif (user.password !== db.hash(password)) {\n\t\t\treturn fail(400, { email, incorrect: true });\n\t\t}\n\n\t\tcookies.set('sessionid', await db.createSession(user), { path: '/' });\n\n\t\tif (url.searchParams.has('redirectTo')) {\n\t\t\tredirect(303, url.searchParams.get('redirectTo'));\n\t\t}\n\n\t\treturn { success: true };\n\t},\n\tregister: async (event) => {\n\t\t// TODO register the user\n\t}\n};\n```\n\n## Loading Data\n\nPage re-renders after action runs. `load` functions run after action completes.\n\n`handle` runs before action and doesn't rerun. Update `event.locals` in actions if needed:\n\n```js\n/// file: src/hooks.server.js\n/** @type {import('@sveltejs/kit').Handle} */\nexport async function handle({ event, resolve }) {\n\tevent.locals.user = await getUser(event.cookies.get('sessionid'));\n\treturn resolve(event);\n}\n```\n\n```js\n/// file: src/routes/account/+page.server.js\n/** @type {import('./$types').PageServerLoad} */\nexport function load(event) {\n\treturn {\n\t\tuser: event.locals.user\n\t};\n}\n\n/** @satisfies {import('./$types').Actions} */\nexport const actions = {\n\tlogout: async (event) => {\n\t\tevent.cookies.delete('sessionid', { path: '/' });\n\t\tevent.locals.user = null;\n\t}\n};\n```\n\n## Progressive Enhancement\n\n### use:enhance\n\nAdd `use:enhance` for client-side enhancement:\n\n```svelte\n/// file: src/routes/login/+page.svelte\n<script>\n\timport { enhance } from '$app/forms';\n\n\t/** @type {import('./$types').PageProps} */\n\tlet { form } = $props();\n</script>\n\n<form method=\"POST\" use:enhance>\n```\n\n> Only works with `method=\"POST\"` and `+page.server.js` actions.\n\nWithout arguments, `use:enhance`:\n- Updates `form`, `page.form`, `page.status` on success/failure (same page only)\n- Resets `<form>` element\n- Calls `invalidateAll()` on success\n- Calls `goto()` on redirect\n- Renders nearest `+error` on error\n- Resets focus\n\n### Customising use:enhance\n\nProvide `SubmitFunction` for custom behavior:\n\n```svelte\n<form\n\tmethod=\"POST\"\n\tuse:enhance={({ formElement, formData, action, cancel, submitter }) => {\n\t\t// `formElement` is this `<form>` element\n\t\t// `formData` is its `FormData` object that's about to be submitted\n\t\t// `action` is the URL to which the form is posted\n\t\t// calling `cancel()` will prevent the submission\n\t\t// `submitter` is the `HTMLElement` that caused the form to be submitted\n\n\t\treturn async ({ result, update }) => {\n\t\t\t// `result` is an `ActionResult` object\n\t\t\t// `update` is a function which triggers the default logic that would be triggered if this callback wasn't set\n\t\t};\n\t}}\n>\n```\n\nUse `applyAction` to manually apply result:\n\n```svelte\n/// file: src/routes/login/+page.svelte\n<script>\n\timport { enhance, applyAction } from '$app/forms';\n\n\t/** @type {import('./$types').PageProps} */\n\tlet { form } = $props();\n</script>\n\n<form\n\tmethod=\"POST\"\n\tuse:enhance={({ formElement, formData, action, cancel }) => {\n\t\treturn async ({ result }) => {\n\t\t\t// `result` is an `ActionResult` object\n\t\t\tif (result.type === 'redirect') {\n\t\t\t\tgoto(result.location);\n\t\t\t} else {\n\t\t\t\tawait applyAction(result);\n\t\t\t}\n\t\t};\n\t}}\n>\n```\n\n`applyAction(result)` behavior:\n- `success`/`failure`: Sets `page.status`, updates `form` and `page.form`\n- `redirect`: Calls `goto(result.location, { invalidateAll: true })`\n- `error`: Renders nearest `+error` boundary\n\n### Custom Event Listener\n\nManual implementation without `use:enhance`:\n\n```svelte\n<!--- file: src/routes/login/+page.svelte --->\n<script>\n\timport { invalidateAll, goto } from '$app/navigation';\n\timport { applyAction, deserialize } from '$app/forms';\n\n\t/** @type {import('./$types').PageProps} */\n\tlet { form } = $props();\n\n\t/** @param {SubmitEvent & { currentTarget: EventTarget & HTMLFormElement}} event */\n\tasync function handleSubmit(event) {\n\t\tevent.preventDefault();\n\t\tconst data = new FormData(event.currentTarget, event.submitter);\n\n\t\tconst response = await fetch(event.currentTarget.action, {\n\t\t\tmethod: 'POST',\n\t\t\tbody: data\n\t\t});\n\n\t\t/** @type {import('@sveltejs/kit').ActionResult} */\n\t\tconst result = deserialize(await response.text());\n\n\t\tif (result.type === 'success') {\n\t\t\t// rerun all `load` functions, following the successful update\n\t\t\tawait invalidateAll();\n\t\t}\n\n\t\tapplyAction(result);\n\t}\n</script>\n\n<form method=\"POST\" onsubmit={handleSubmit}>\n\t<!-- content -->\n</form>\n```\n\nUse `deserialize()` not `JSON.parse()` - supports `Date`/`BigInt`.\n\nWith `+server.js` alongside `+page.server.js`, add header to POST to action:\n\n```js\n// @errors: 2532 2304\nconst response = await fetch(this.action, {\n\tmethod: 'POST',\n\tbody: data,\n\theaders: {\n\t\t'x-sveltekit-action': 'true'\n\t}\n});\n```\n\n## Alternatives\n\nUse `+server.js` for JSON APIs:\n\n```svelte\n<!--- file: src/routes/send-message/+page.svelte --->\n<script>\n\tfunction rerun() {\n\t\tfetch('/api/ci', {\n\t\t\tmethod: 'POST'\n\t\t});\n\t}\n</script>\n\n<button onclick={rerun}>Rerun CI</button>\n```\n\n```js\n// @errors: 2355 1360 2322\n/// file: src/routes/api/ci/+server.js\n/** @type {import('./$types').RequestHandler} */\nexport function POST() {\n\t// do something\n}\n```\n\n## GET vs POST\n\nUse `method=\"GET\"` for forms that don't POST data (e.g., search). SvelteKit uses client-side router:\n\n```html\n<form action=\"/search\">\n\t<label>\n\t\tSearch\n\t\t<input name=\"q\">\n\t</label>\n</form>\n```\n\nSubmits to `/search?q=...`, invokes `load` but not action. Supports `data-sveltekit-*` attributes like `<a>` elements.",
    "kit/page-options": "# Page Options\n\nSvelteKit renders components server-side first, sends HTML to client, then hydrates for interactivity. Components must run in both environments. Options control rendering behavior per page/layout.\n\nExport options from `+page.js`, `+page.server.js`, `+layout.js`, or `+layout.server.js`. Child layouts/pages override parent values.\n\n## prerender\n\nGenerate static HTML at build time.\n\n```js\n/// file: +page.js/+page.server.js/+server.js\nexport const prerender = true;\n```\n\nOr set in root layout and opt-out specific pages:\n\n```js\n/// file: +page.js/+page.server.js/+server.js\nexport const prerender = false;\n```\n\nThird option includes route in manifest for dynamic SSR:\n\n```js\n/// file: +page.js/+page.server.js/+server.js\nexport const prerender = 'auto';\n```\n\nPrerenderer starts at root, follows `<a>` links. Configure entry points via [`config.kit.prerender.entries`](configuration#prerender) or [`entries`](#entries) function.\n\nDuring prerendering, `building` from `$app/environment` is `true`.\n\n### Prerendering server routes\n\n`prerender` applies to `+server.js`. They inherit defaults from pages that fetch from them:\n\n```js\n/// file: +page.js\nexport const prerender = true;\n\n/** @type {import('./$types').PageLoad} */\nexport async function load({ fetch }) {\n\tconst res = await fetch('/my-server-route.json');\n\treturn await res.json();\n}\n```\n\n### When not to prerender\n\n**Rule:** Two users hitting a page directly must get identical server content.\n\n- Don't prerender personalized content\n- Can fetch personalized data in `onMount` (causes loading indicators)\n- Can prerender pages with route parameters like `[slug]`\n- `url.searchParams` forbidden during prerender (use in browser only)\n- Pages with actions cannot be prerendered\n\n### Route conflicts\n\nAvoid directory/file name conflicts. Use file extensions: `foo.json/+server.js` and `foo/bar.json/+server.js` create `foo.json` and `foo/bar.json`. Pages write `foo/index.html`.\n\n### Troubleshooting\n\nError \"routes marked as prerenderable, but were not prerendered\" means crawler didn't reach the route.\n\n**Fixes:**\n- Add links from `config.kit.prerender.entries` or `entries` option\n- Ensure links exist on prerendered pages\n- Change to `export const prerender = 'auto'`\n\n## entries\n\nDefine entry points for prerendering dynamic routes:\n\n```js\n/// file: src/routes/blog/[slug]/+page.server.js\n/** @type {import('./$types').EntryGenerator} */\nexport function entries() {\n\treturn [\n\t\t{ slug: 'hello-world' },\n\t\t{ slug: 'another-blog-post' }\n\t];\n}\n\nexport const prerender = true;\n```\n\n`entries` can be `async` to fetch from CMS/database.\n\n## ssr\n\nDisable server-side rendering (renders empty shell):\n\n```js\n/// file: +page.js\nexport const ssr = false;\n// If both `ssr` and `csr` are `false`, nothing will be rendered!\n```\n\nIn root `+layout.js`, turns app into SPA.\n\n**Note:** If options are boolean/string literals, SvelteKit evaluates statically. Otherwise imports file on server. Browser-only code must not run on module load—import in `+page.svelte` or `+layout.svelte` instead.\n\n## csr\n\nDisable client-side rendering (no JavaScript shipped):\n\n```js\n/// file: +page.js\nexport const csr = false;\n// If both `csr` and `ssr` are `false`, nothing will be rendered!\n```\n\n**Effects:**\n- Page works with HTML/CSS only\n- `<script>` tags removed from components\n- `<form>` can't be progressively enhanced\n- Full-page browser navigation\n- HMR disabled\n\nEnable in dev only:\n\n```js\n/// file: +page.js\nimport { dev } from '$app/environment';\n\nexport const csr = dev;\n```\n\n## trailingSlash\n\nControl trailing slash behavior: `'never'` (default), `'always'`, or `'ignore'`.\n\n```js\n/// file: src/routes/+layout.js\nexport const trailingSlash = 'always';\n```\n\nAffects prerendering: `'always'` creates `about/index.html`, otherwise `about.html`.\n\n**Note:** Don't use `'ignore'`—harms SEO and changes relative path semantics.\n\n## config\n\nAdapter-specific deployment configuration:\n\n```js\n/// file: src/routes/+page.js\n/** @type {import('some-adapter').Config} */\nexport const config = {\n\truntime: 'edge'\n};\n```\n\nConfigs merge at top level only:\n\n```js\n/// file: src/routes/+layout.js\nexport const config = {\n\truntime: 'edge',\n\tregions: 'all',\n\tfoo: {\n\t\tbar: true\n\t}\n}\n```\n\n```js\n/// file: src/routes/+page.js\nexport const config = {\n\tregions: ['us1', 'us2'],\n\tfoo: {\n\t\tbaz: true\n\t}\n}\n```\n\nResult: `{ runtime: 'edge', regions: ['us1', 'us2'], foo: { baz: true } }`",
    "kit/state-management": "# State Management\n\n## Avoid shared state on the server\n\nServers are shared by multiple users. **Never store data in shared variables.**\n\n```js\n// @errors: 7034 7005\n/// file: +page.server.js\nlet user; // NEVER DO THIS!\n\n/** @type {import('./$types').PageServerLoad} */\nexport function load() {\n\treturn { user };\n}\n\n/** @satisfies {import('./$types').Actions} */\nexport const actions = {\n\tdefault: async ({ request }) => {\n\t\tconst data = await request.formData();\n\n\t\t// NEVER DO THIS!\n\t\tuser = {\n\t\t\tname: data.get('name'),\n\t\t\tembarrassingSecret: data.get('secret')\n\t\t};\n\t}\n}\n```\n\n**Solution:** Authenticate using [`cookies`](load#Cookies) and persist to a database.\n\n## No side-effects in load\n\n`load` functions must be **pure** - no side-effects.\n\n```js\n/// file: +page.js\n// @filename: ambient.d.ts\ndeclare module '$lib/user' {\n\texport const user: { set: (value: any) => void };\n}\n\n// @filename: index.js\n// ---cut---\nimport { user } from '$lib/user';\n\n/** @type {import('./$types').PageLoad} */\nexport async function load({ fetch }) {\n\tconst response = await fetch('/api/user');\n\n\t// NEVER DO THIS!\n\tuser.set(await response.json());\n}\n```\n\n**Solution:** Return data instead:\n\n```js\n/// file: +page.js\n/** @type {import('./$types').PageServerLoad} */\nexport async function load({ fetch }) {\n\tconst response = await fetch('/api/user');\n\n\treturn {\n\t\tuser: await response.json()\n\t};\n}\n```\n\nPass data to components or use [`page.data`](load#page.data).\n\n## Using state with context\n\nUse Svelte's context API for server-safe state:\n\n```svelte\n<!--- file: src/routes/+layout.svelte --->\n<script>\n\timport { setContext } from 'svelte';\n\n\t/** @type {import('./$types').LayoutProps} */\n\tlet { data } = $props();\n\n\t// Pass a function referencing our state\n\t// to the context for child components to access\n\tsetContext('user', () => data.user);\n</script>\n```\n\n```svelte\n<!--- file: src/routes/user/+page.svelte --->\n<script>\n\timport { getContext } from 'svelte';\n\n\t// Retrieve user store from context\n\tconst user = getContext('user');\n</script>\n\n<p>Welcome {user().name}</p>\n```\n\n> **Note:** Pass a function to `setContext` to maintain reactivity. See [$state#Passing-state-into-functions](/docs/svelte/$state#Passing-state-into-functions)\n\n**Gotcha:** Updating context state in child components during SSR won't affect parent components (already rendered). Recommend passing state down, not up.\n\n**Without SSR:** Can use shared module state without context API.\n\n## Component state is preserved\n\nComponents are reused during navigation. State doesn't automatically reset.\n\n```svelte\n<!--- file: src/routes/blog/[slug]/+page.svelte --->\n<script>\n\t/** @type {import('./$types').PageProps} */\n\tlet { data } = $props();\n\n\t// THIS CODE IS BUGGY!\n\tconst wordCount = data.content.split(' ').length;\n\tconst estimatedReadingTime = wordCount / 250;\n</script>\n\n<header>\n\t<h1>{data.title}</h1>\n\t<p>Reading time: {Math.round(estimatedReadingTime)} minutes</p>\n</header>\n\n<div>{@html data.content}</div>\n```\n\n**Solution:** Make values reactive:\n\n```svelte\n/// file: src/routes/blog/[slug]/+page.svelte\n<script>\n\t/** @type {import('./$types').PageProps} */\n\tlet { data } = $props();\n\n\tlet wordCount = $derived(data.content.split(' ').length);\n\tlet estimatedReadingTime = $derived(wordCount / 250);\n</script>\n```\n\n> **Note:** Use [afterNavigate]($app-navigation#afterNavigate) and [beforeNavigate]($app-navigation#beforeNavigate) if you need `onMount`/`onDestroy` behavior on navigation.\n\n**Force remount:**\n\n```svelte\n<script>\n\timport { page } from '$app/state';\n</script>\n\n{#key page.url.pathname}\n\t<BlogPost title={data.title} content={data.title} />\n{/key}\n```\n\n## State storage patterns\n\n- **URL search params** (`?sort=price`): For state that should survive reload/affect SSR. Access via `url` in `load` or `page.url.searchParams` in components.\n- **Snapshots**: For ephemeral UI state (e.g., \"is accordion open?\") that should persist across navigation but not reload. See [snapshots](snapshots).",
    "kit/remote-functions": "# Remote Functions\n\n**Available since 2.27** - Experimental feature requiring opt-in:\n\n```js\n/// file: svelte.config.js\nconst config = {\n\tkit: {\n\t\texperimental: {\n\t\t\tremoteFunctions: true\n\t\t}\n\t},\n\tcompilerOptions: {\n\t\texperimental: {\n\t\t\tasync: true // optional, for await in components\n\t\t}\n\t}\n};\n```\n\nType-safe client-server communication. Functions always run on server, can access server-only modules. Export from `.remote.js` or `.remote.ts` files in `src` directory.\n\nFour types: `query`, `form`, `command`, `prerender`.\n\n## query\n\nRead dynamic data from server:\n\n```js\n/// file: src/routes/blog/data.remote.js\nimport { query } from '$app/server';\nimport * as db from '$lib/server/database';\n\nexport const getPosts = query(async () => {\n\tconst posts = await db.sql`\n\t\tSELECT title, slug FROM post\n\t\tORDER BY published_at DESC\n\t`;\n\treturn posts;\n});\n```\n\nUse with `await` in components:\n\n```svelte\n<!--- file: src/routes/blog/+page.svelte --->\n<script>\n\timport { getPosts } from './data.remote';\n</script>\n\n<ul>\n\t{#each await getPosts() as { title, slug }}\n\t\t<li><a href=\"/blog/{slug}\">{title}</a></li>\n\t{/each}\n</ul>\n```\n\nAlternative: use `loading`, `error`, `current` properties instead of `await`.\n\n### Query arguments\n\nValidate with Standard Schema (Zod, Valibot):\n\n```js\nimport * as v from 'valibot';\nimport { error } from '@sveltejs/kit';\nimport { query } from '$app/server';\n\nexport const getPost = query(v.string(), async (slug) => {\n\tconst [post] = await db.sql`\n\t\tSELECT * FROM post WHERE slug = ${slug}\n\t`;\n\tif (!post) error(404, 'Not found');\n\treturn post;\n});\n```\n\n```svelte\n<script>\n\timport { getPost } from '../data.remote';\n\tlet { params } = $props();\n\tconst post = $derived(await getPost(params.slug));\n</script>\n\n<h1>{post.title}</h1>\n```\n\nArguments and return values serialized with devalue (handles Date, Map, custom types).\n\n### Refreshing queries\n\n```svelte\n<button onclick={() => getPosts().refresh()}>\n\tCheck for new posts\n</button>\n```\n\nQueries cached while on page: `getPosts() === getPosts()`.\n\n## query.batch\n\nBatches requests in same macrotask (solves n+1 problem):\n\n```js\nimport * as v from 'valibot';\nimport { query } from '$app/server';\n\nexport const getWeather = query.batch(v.string(), async (cities) => {\n\tconst weather = await db.sql`\n\t\tSELECT * FROM weather WHERE city = ANY(${cities})\n\t`;\n\tconst lookup = new Map(weather.map(w => [w.city, w]));\n\treturn (city) => lookup.get(city);\n});\n```\n\nServer callback receives array of inputs, returns function `(input, index) => output`.\n\n## form\n\nWrite data to server:\n\n```js\nimport * as v from 'valibot';\nimport { error, redirect } from '@sveltejs/kit';\nimport { form } from '$app/server';\nimport * as auth from '$lib/server/auth';\n\nexport const createPost = form(\n\tv.object({\n\t\ttitle: v.pipe(v.string(), v.nonEmpty()),\n\t\tcontent: v.pipe(v.string(), v.nonEmpty())\n\t}),\n\tasync ({ title, content }) => {\n\t\tconst user = await auth.getUser();\n\t\tif (!user) error(401, 'Unauthorized');\n\t\t\n\t\tconst slug = title.toLowerCase().replace(/ /g, '-');\n\t\tawait db.sql`\n\t\t\tINSERT INTO post (slug, title, content)\n\t\t\tVALUES (${slug}, ${title}, ${content})\n\t\t`;\n\t\tredirect(303, `/blog/${slug}`);\n\t}\n);\n```\n\n```svelte\n<script>\n\timport { createPost } from '../data.remote';\n</script>\n\n<form {...createPost}>\n\t<button>Publish!</button>\n</form>\n```\n\nWorks without JS (submits and reloads). Progressive enhancement via attachment when JS available.\n\n### Fields\n\nUse `.as(type)` to get field attributes:\n\n```svelte\n<form {...createPost}>\n\t<label>\n\t\t<h2>Title</h2>\n\t\t<input {...createPost.fields.title.as('text')} />\n\t</label>\n\t\n\t<label>\n\t\t<h2>Content</h2>\n\t\t<textarea {...createPost.fields.content.as('text')}></textarea>\n\t</label>\n\t\n\t<button>Publish!</button>\n</form>\n```\n\nSupports nested objects/arrays, strings, numbers, booleans, File objects.\n\nFor radio/checkbox with same field, pass value as second arg:\n\n```svelte\n{#each ['windows', 'mac', 'linux'] as os}\n\t<label>\n\t\t<input {...survey.fields.operatingSystem.as('radio', os)}>\n\t\t{os}\n\t</label>\n{/each}\n```\n\nOr use `select`:\n\n```svelte\n<select {...survey.fields.operatingSystem.as('select')}>\n\t<option>windows</option>\n\t<option>mac</option>\n\t<option>linux</option>\n</select>\n```\n\n**Note:** Unchecked checkboxes and empty selects are `undefined`, use `v.optional(v.boolean(), false)` or `v.optional(v.array(...), [])`.\n\n### Programmatic validation\n\nUse `invalid` function in handler:\n\n```js\nexport const buyHotcakes = form(\n\tv.object({\n\t\tqty: v.pipe(v.number(), v.minValue(1, 'you must buy at least one hotcake'))\n\t}),\n\tasync (data, invalid) => {\n\t\ttry {\n\t\t\tawait db.buy(data.qty);\n\t\t} catch (e) {\n\t\t\tif (e.code === 'OUT_OF_STOCK') {\n\t\t\t\tinvalid(invalid.qty(`we don't have enough hotcakes`));\n\t\t\t}\n\t\t}\n\t}\n);\n```\n\n- `invalid(issue1, issue2, ...)` - throws validation error\n- String issues apply to whole form\n- `invalid.fieldName(message)` - field-specific issues\n\n### Validation\n\nDisplay issues:\n\n```svelte\n<form {...createPost}>\n\t<label>\n\t\t<h2>Title</h2>\n\t\t{#each createPost.fields.title.issues() as issue}\n\t\t\t<p class=\"issue\">{issue.message}</p>\n\t\t{/each}\n\t\t<input {...createPost.fields.title.as('text')} />\n\t</label>\n</form>\n```\n\nValidate programmatically:\n\n```svelte\n<form {...createPost} oninput={() => createPost.validate()}>\n```\n\nUse `validate({ includeUntouched: true })` to validate all inputs.\n\nClient-side preflight validation:\n\n```svelte\n<script>\n\timport * as v from 'valibot';\n\tconst schema = v.object({\n\t\ttitle: v.pipe(v.string(), v.nonEmpty()),\n\t\tcontent: v.pipe(v.string(), v.nonEmpty())\n\t});\n</script>\n\n<form {...createPost.preflight(schema)}>\n```\n\nGet all issues: `createPost.fields.allIssues()`.\n\n### Getting/setting inputs\n\nGet current value:\n\n```svelte\n<div class=\"preview\">\n\t<h2>{createPost.fields.title.value()}</h2>\n</div>\n```\n\nSet values:\n\n```svelte\n<script>\n\tcreatePost.fields.set({\n\t\ttitle: 'My new blog post',\n\t\tcontent: 'Lorem ipsum...'\n\t});\n\t\n\t// or individually:\n\tcreatePost.fields.title.set('My new blog post');\n</script>\n```\n\n### Handling sensitive data\n\nPrefix with underscore to prevent sending back to user:\n\n```svelte\n<input {...register.fields._password.as('password')} />\n```\n\n### Single-flight mutations\n\nRefresh specific queries instead of all:\n\n```js\nexport const createPost = form(\n\tv.object({/* ... */}),\n\tasync (data) => {\n\t\t// form logic...\n\t\tawait getPosts().refresh();\n\t\tredirect(303, `/blog/${slug}`);\n\t}\n);\n\nexport const updatePost = form(\n\tv.object({/* ... */}),\n\tasync (data) => {\n\t\tconst result = externalApi.update(post);\n\t\tawait getPost(post.id).set(result);\n\t}\n);\n```\n\n### Returns and redirects\n\nReturn data instead of redirecting:\n\n```js\nexport const createPost = form(\n\tv.object({/* ... */}),\n\tasync (data) => {\n\t\t// ...\n\t\treturn { success: true };\n\t}\n);\n```\n\n```svelte\n{#if createPost.result?.success}\n\t<p>Successfully published!</p>\n{/if}\n```\n\nResult is ephemeral (vanishes on resubmit/navigate/reload).\n\n### enhance\n\nCustomize submission:\n\n```svelte\n<form {...createPost.enhance(async ({ form, data, submit }) => {\n\ttry {\n\t\tawait submit();\n\t\tform.reset();\n\t\tshowToast('Successfully published!');\n\t} catch (error) {\n\t\tshowToast('Oh no! Something went wrong');\n\t}\n})}>\n```\n\n**Note:** Must call `form.reset()` manually when using `enhance`.\n\nClient-driven single-flight mutations:\n\n```ts\nawait submit().updates(getPosts());\n```\n\nOptimistic updates:\n\n```ts\nawait submit().updates(\n\tgetPosts().withOverride((posts) => [newPost, ...posts])\n);\n```\n\n### Multiple instances\n\nIsolate repeated forms:\n\n```svelte\n{#each await getTodos() as todo}\n\t{@const modify = modifyTodo.for(todo.id)}\n\t<form {...modify}>\n\t\t<button disabled={!!modify.pending}>save changes</button>\n\t</form>\n{/each}\n```\n\n### buttonProps\n\nDifferent submit URLs per button:\n\n```svelte\n<form {...login}>\n\t<button>login</button>\n\t<button {...register.buttonProps}>register</button>\n</form>\n```\n\n`buttonProps` also has `enhance` method.\n\n## command\n\nWrite data from anywhere (not element-specific):\n\n```js\nimport * as v from 'valibot';\nimport { query, command } from '$app/server';\n\nexport const getLikes = query(v.string(), async (id) => {\n\tconst [row] = await db.sql`\n\t\tSELECT likes FROM item WHERE id = ${id}\n\t`;\n\treturn row.likes;\n});\n\nexport const addLike = command(v.string(), async (id) => {\n\tawait db.sql`\n\t\tUPDATE item SET likes = likes + 1 WHERE id = ${id}\n\t`;\n});\n```\n\n```svelte\n<button\n\tonclick={async () => {\n\t\ttry {\n\t\t\tawait addLike(item.id);\n\t\t} catch (error) {\n\t\t\tshowToast('Something went wrong!');\n\t\t}\n\t}}\n>\n\tadd like\n</button>\n```\n\n**Note:** Cannot call during render. Prefer `form` where possible (graceful degradation).\n\n### Updating queries\n\nIn command:\n\n```js\nexport const addLike = command(v.string(), async (id) => {\n\tawait db.sql`UPDATE item SET likes = likes + 1 WHERE id = ${id}`;\n\tgetLikes(id).refresh();\n\t// or getLikes(id).set(...)\n});\n```\n\nOr when calling:\n\n```ts\nawait addLike(item.id).updates(getLikes(item.id));\n```\n\nOptimistic updates:\n\n```ts\nawait addLike(item.id).updates(\n\tgetLikes(item.id).withOverride((n) => n + 1)\n);\n```\n\n## prerender\n\nInvoked at build time for static data:\n\n```js\nimport { prerender } from '$app/server';\n\nexport const getPosts = prerender(async () => {\n\tconst posts = await db.sql`\n\t\tSELECT title, slug FROM post\n\t\tORDER BY published_at DESC\n\t`;\n\treturn posts;\n});\n```\n\nUse on dynamic pages for partial prerendering. Data cached using Cache API, survives reloads, cleared on new deployment.\n\n**Note:** Cannot use queries on pages with `export const prerender = true`.\n\n### Prerender arguments\n\n```js\nimport * as v from 'valibot';\nimport { prerender } from '$app/server';\n\nexport const getPost = prerender(v.string(), async (slug) => {\n\tconst [post] = await db.sql`\n\t\tSELECT * FROM post WHERE slug = ${slug}\n\t`;\n\tif (!post) error(404, 'Not found');\n\treturn post;\n});\n```\n\nSpecify inputs:\n\n```js\nexport const getPost = prerender(\n\tv.string(),\n\tasync (slug) => { /* ... */ },\n\t{\n\t\tinputs: () => ['first-post', 'second-post', 'third-post']\n\t}\n);\n```\n\nAllow dynamic calls:\n\n```js\nexport const getPost = prerender(\n\tv.string(),\n\tasync (slug) => { /* ... */ },\n\t{\n\t\tdynamic: true,\n\t\tinputs: () => ['first-post', 'second-post', 'third-post']\n\t}\n);\n```\n\n## Handling validation errors\n\nImplement `handleValidationError` hook:\n\n```js\n/// file: src/hooks.server.ts\nexport function handleValidationError({ event, issues }) {\n\treturn {\n\t\tmessage: 'Nice try, hacker!'\n\t};\n}\n```\n\nOpt out of validation:\n\n```ts\nimport { query } from '$app/server';\n\nexport const getStuff = query('unchecked', async ({ id }: { id: string }) => {\n\t// shape might not match TypeScript\n});\n```\n\n## Using getRequestEvent\n\nAccess RequestEvent in `query`, `form`, `command`:\n\n```ts\nimport { getRequestEvent, query } from '$app/server';\n\nexport const getProfile = query(async () => {\n\tconst user = await getUser();\n\treturn { name: user.name, avatar: user.avatar };\n});\n\nconst getUser = query(() => {\n\tconst { cookies } = getRequestEvent();\n\treturn await findUser(cookies.get('session_id'));\n});\n```\n\n**Limitations:**\n- Cannot set headers (except cookies in `form`/`command`)\n- `route`, `params`, `url` relate to calling page, not endpoint\n- Never use these for authorization checks\n\n## Redirects\n\nUse `redirect(...)` in `query`, `form`, `prerender`. **Not** in `command` (return `{ redirect: location }` and handle client-side if needed).",
    "kit/building-your-app": "# Building\n\nBuild happens in two stages via `vite build`:\n1. Vite creates optimized production build (server, browser, service worker). Prerendering executes here.\n2. Adapter tunes build for target environment.\n\n## During build\n\nCode in `+page/layout(.server).js` executes during build. Prevent execution with `building` check:\n\n```js\nimport { building } from '$app/environment';\nimport { setupMyDatabase } from '$lib/server/database';\n\nif (!building) {\n\tsetupMyDatabase();\n}\n\nexport function load() {\n\t// ...\n}\n```\n\n## Preview\n\n`vite preview` runs production build locally in Node. Not perfect reproduction - adapter-specific features like `platform` object don't apply.",
    "kit/adapters": "# Adapters\n\nAdapters are plugins that transform your built SvelteKit app for specific deployment targets.\n\n## Official Adapters\n\n- `@sveltejs/adapter-cloudflare` - Cloudflare Workers/Pages\n- `@sveltejs/adapter-netlify` - Netlify\n- `@sveltejs/adapter-node` - Node servers\n- `@sveltejs/adapter-static` - Static site generation (SSG)\n- `@sveltejs/adapter-vercel` - Vercel\n\nCommunity adapters available at `/packages#sveltekit-adapters`.\n\n## Usage\n\nConfigure in `svelte.config.js`:\n\n```js\n/// file: svelte.config.js\n// @filename: ambient.d.ts\ndeclare module 'svelte-adapter-foo' {\n\tconst adapter: (opts: any) => import('@sveltejs/kit').Adapter;\n\texport default adapter;\n}\n\n// @filename: index.js\n// ---cut---\nimport adapter from 'svelte-adapter-foo';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\t// adapter options go here\n\t\t})\n\t}\n};\n\nexport default config;\n```\n\n## Platform-Specific Context\n\nAdapters may provide platform-specific data (e.g., Cloudflare KV namespaces) via `platform` property in `RequestEvent` (available in hooks and server routes). See adapter docs for details.",
    "kit/adapter-auto": "# adapter-auto\n\nAuto-installs correct adapter for supported environments on deploy.\n\n## Supported Platforms\n\n- `@sveltejs/adapter-cloudflare` - Cloudflare Pages\n- `@sveltejs/adapter-netlify` - Netlify\n- `@sveltejs/adapter-vercel` - Vercel\n- `svelte-adapter-azure-swa` - Azure Static Web Apps\n- `svelte-kit-sst` - AWS via SST\n- `@sveltejs/adapter-node` - Google Cloud Run\n\n## Best Practices\n\n**Install specific adapter once deployed** - Add to `devDependencies` for lockfile benefits and faster CI installs.\n\n**For adapter config** - Install underlying adapter directly. `adapter-auto` takes no options.",
    "kit/adapter-node": "# adapter-node\n\nGenerates standalone Node server. Install: `npm i -D @sveltejs/adapter-node`\n\n## Usage\n\n```js\n// @errors: 2307\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-node';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter()\n\t}\n};\n\nexport default config;\n```\n\n## Deploying\n\nBuild with `npm run build` (creates `build/` by default).\n\nDeploy: output directory + `package.json` + production `node_modules`. Generate prod deps: `npm ci --omit dev`\n\nStart: `node build`\n\n**Dev dependencies** are bundled via Rollup. **Dependencies** are externalized. Control via `package.json` placement.\n\n### Compressing responses\n\nUse reverse proxy compression for better performance (Node is single-threaded). If using custom server middleware, use `@polka/compression` (supports streaming, unlike `compression` package).\n\n## Environment variables\n\n**Dev/preview**: reads `.env` files per [Vite rules](https://vitejs.dev/guide/env-and-mode.html#env-files)\n\n**Production**: `.env` NOT auto-loaded. Load manually:\n\n```sh\n# Option 1: dotenv (any Node version)\nnode -r dotenv/config build\n\n# Option 2: Node 20.6+ flag\nnode --env-file=.env build\n```\n\n### `PORT`, `HOST`, `SOCKET_PATH`\n\nDefault: `0.0.0.0:3000`\n\n```sh\nHOST=127.0.0.1 PORT=4000 node build\n```\n\nSocket path (ignores HOST/PORT):\n\n```sh\nSOCKET_PATH=/tmp/socket node build\n```\n\n### `ORIGIN`, `PROTOCOL_HEADER`, `HOST_HEADER`, `PORT_HEADER`\n\nSet origin directly:\n\n```sh\nORIGIN=https://my.site node build\n```\n\nOr via headers (only behind trusted reverse proxy):\n\n```sh\nPROTOCOL_HEADER=x-forwarded-proto HOST_HEADER=x-forwarded-host node build\n```\n\nStandard headers: `x-forwarded-proto`, `x-forwarded-host`, `x-forwarded-port`\n\n**Missing origin causes form action error**: \"Cross-site POST form submissions are forbidden\"\n\n### `ADDRESS_HEADER`, `XFF_DEPTH`\n\n`event.getClientAddress()` returns connecting IP by default. Behind proxies, set header:\n\n```sh\nADDRESS_HEADER=True-Client-IP node build\n```\n\nFor `X-Forwarded-For`, set `XFF_DEPTH` to number of trusted proxies (reads from right to avoid spoofing):\n\n```sh\nXFF_DEPTH=3\n```\n\n### `BODY_SIZE_LIMIT`\n\nMax request body size. Default: `512K`. Supports units: `K`, `M`, `G`. Disable: `Infinity`\n\n### `SHUTDOWN_TIMEOUT`\n\nSeconds to wait before force-closing connections on `SIGTERM`/`SIGINT`. Default: `30`\n\n### `IDLE_TIMEOUT`\n\nWith systemd socket activation: seconds of inactivity before auto-sleep. Unset = runs continuously.\n\n## Options\n\n```js\n// @errors: 2307\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-node';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\t// default options are shown\n\t\t\tout: 'build',\n\t\t\tprecompress: true,\n\t\t\tenvPrefix: ''\n\t\t})\n\t}\n};\n\nexport default config;\n```\n\n- **`out`**: Build directory (default: `build`)\n- **`precompress`**: Gzip/brotli precompress assets (default: `true`)\n- **`envPrefix`**: Prefix for env vars (e.g., `MY_CUSTOM_` → `MY_CUSTOM_PORT`)\n\n## Graceful shutdown\n\nOn `SIGTERM`/`SIGINT`:\n1. Reject new requests\n2. Wait for pending requests to finish\n3. Close remaining connections after `SHUTDOWN_TIMEOUT`\n\nListen to shutdown event:\n\n```js\n// @errors: 2304\nprocess.on('sveltekit:shutdown', async (reason) => {\n  await jobs.stop();\n  await db.close();\n});\n```\n\n`reason`: `SIGINT` | `SIGTERM` | `IDLE`\n\n## Socket activation\n\nsystemd can start app on-demand via socket activation. Reads `LISTEN_PID`/`LISTEN_FDS` (no prefix), listens on file descriptor 3.\n\n**Setup:**\n\n1. Create service (with optional `IDLE_TIMEOUT`):\n\n```ini\n/// file: /etc/systemd/system/myapp.service\n[Service]\nEnvironment=NODE_ENV=production IDLE_TIMEOUT=60\nExecStart=/usr/bin/node /usr/bin/myapp/build\n```\n\n2. Create socket:\n\n```ini\n/// file: /etc/systemd/system/myapp.socket\n[Socket]\nListenStream=3000\n\n[Install]\nWantedBy=sockets.target\n```\n\n3. Enable: `sudo systemctl daemon-reload && sudo systemctl enable --now myapp.socket`\n\n## Custom server\n\nAdapter creates `index.js` (server) and `handler.js` (middleware). Use `handler.js` with Express/Connect/Polka:\n\n```js\n// @errors: 2307 7006\n/// file: my-server.js\nimport { handler } from './build/handler.js';\nimport express from 'express';\n\nconst app = express();\n\n// add a route that lives separately from the SvelteKit app\napp.get('/healthcheck', (req, res) => {\n\tres.end('ok');\n});\n\n// let SvelteKit handle everything else, including serving prerendered pages and static assets\napp.use(handler);\n\napp.listen(3000, () => {\n\tconsole.log('listening on port 3000');\n});\n```",
    "kit/adapter-static": "# adapter-static\n\nPrerender entire site as static files for SSG. For mixed prerender/SSR, use different adapter with [`prerender` option](page-options#prerender).\n\n## Usage\n\n```bash\nnpm i -D @sveltejs/adapter-static\n```\n\n```js\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-static';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\tpages: 'build',        // output directory for pages\n\t\t\tassets: 'build',       // output directory for assets\n\t\t\tfallback: undefined,   // SPA fallback page (e.g. '404.html')\n\t\t\tprecompress: false,    // generate .br and .gz files\n\t\t\tstrict: true          // error if pages not prerendered\n\t\t})\n\t}\n};\n\nexport default config;\n```\n\n```js\n/// file: src/routes/+layout.js\n// If you're using a fallback (i.e. SPA mode) you don't need to prerender all\n// pages by setting this here, but should prerender as many as possible to\n// avoid large performance and SEO impacts\nexport const prerender = true;\n```\n\n> **Note:** Set [`trailingSlash`](page-options#trailingSlash) appropriately. If host doesn't render `/a.html` for `/a` requests, use `trailingSlash: 'always'` to create `/a/index.html`.\n\n## Zero-config\n\nVercel has zero-config support. Omit options:\n\n```js\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-static';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter()\n\t}\n};\n\nexport default config;\n```\n\n## Options\n\n- **pages**: Output directory for prerendered pages (default: `build`)\n- **assets**: Output directory for static assets. Defaults to `pages` value. Rarely needs separate location.\n- **fallback**: Filename for SPA entry point (e.g. `200.html`, `404.html`). Avoid `index.html`. Has large performance/SEO impact - see [single page apps](single-page-apps) docs.\n- **precompress**: Generate `.br` and `.gz` files\n- **strict**: Check all pages prerendered or fallback set. Set `false` to disable.\n\n## GitHub Pages\n\nFor repos not named `your-username.github.io`, set [`config.kit.paths.base`](configuration#paths) to repo name.\n\n```js\n// @errors: 2322\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-static';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\tfallback: '404.html'\n\t\t}),\n\t\tpaths: {\n\t\t\tbase: process.argv.includes('dev') ? '' : process.env.BASE_PATH\n\t\t}\n\t}\n};\n\nexport default config;\n```\n\n### GitHub Actions workflow\n\n```yaml\n### file: .github/workflows/deploy.yml\nname: Deploy to GitHub Pages\n\non:\n  push:\n    branches: 'main'\n\njobs:\n  build_site:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      # If you're using pnpm, add this step then change the commands and cache key below to use `pnpm`\n      # - name: Install pnpm\n      #   uses: pnpm/action-setup@v3\n      #   with:\n      #     version: 8\n\n      - name: Install Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: 20\n          cache: npm\n\n      - name: Install dependencies\n        run: npm i\n\n      - name: build\n        env:\n          BASE_PATH: '/${{ github.event.repository.name }}'\n        run: |\n          npm run build\n\n      - name: Upload Artifacts\n        uses: actions/upload-pages-artifact@v3\n        with:\n          # this should match the `pages` option in your adapter-static options\n          path: 'build/'\n\n  deploy:\n    needs: build_site\n    runs-on: ubuntu-latest\n\n    permissions:\n      pages: write\n      id-token: write\n\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n\n    steps:\n      - name: Deploy\n        id: deployment\n        uses: actions/deploy-pages@v4\n```\n\nAdd empty `.nojekyll` file to `static/` if not using GitHub Actions to prevent Jekyll interference.",
    "kit/single-page-apps": "# Single-page apps (SPA)\n\n## Overview\n\nCreate a fully client-rendered SPA by specifying a fallback page that serves any non-prerendered URLs.\n\n> [!NOTE] **Performance Impact**: SPA mode forces multiple network round trips (HTML → JS → data) before showing content. This delays startup, harms SEO/Core Web Vitals, and breaks without JavaScript. **Mitigation**: Prerender as many pages as possible, especially homepage. If all pages can be prerendered, use static site generation instead.\n\n## Usage\n\n**1. Disable SSR** for pages served via fallback:\n\n```js\n/// file: src/routes/+layout.js\nexport const ssr = false;\n```\n\n**2. Configure adapter** (if no server-side logic exists):\n\n```js\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-static';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\tfallback: '200.html' // may differ from host to host\n\t\t})\n\t}\n};\n\nexport default config;\n```\n\nThe `fallback` page is an HTML file that loads your app and navigates to the correct route. Consult your platform's docs for the correct filename (e.g. `200.html` for Surge). Avoid `index.html` as it may conflict with prerendering.\n\n> [!NOTE] Fallback page always uses absolute asset paths (`/`) regardless of `paths.relative` config.\n\n## Prerendering individual pages\n\nRe-enable SSR + prerendering for specific pages:\n\n```js\n/// file: src/routes/my-prerendered-page/+page.js\nexport const prerender = true;\nexport const ssr = true;\n```\n\nNo Node server needed—pages are server-rendered at build time to static `.html` files.\n\n## Apache\n\nAdd `static/.htaccess` to route requests to fallback:\n\n```\n<IfModule mod_rewrite.c>\n\tRewriteEngine On\n\tRewriteBase /\n\tRewriteRule ^200\\.html$ - [L]\n\tRewriteCond %{REQUEST_FILENAME} !-f\n\tRewriteCond %{REQUEST_FILENAME} !-d\n\tRewriteRule . /200.html [L]\n</IfModule>\n```",
    "kit/adapter-cloudflare": "# Cloudflare Adapter\n\nDeploy to Cloudflare Workers or Pages using `adapter-cloudflare`.\n\n## Comparisons\n\n- `adapter-cloudflare` – all features; builds for Workers Static Assets & Pages\n- `adapter-cloudflare-workers` – deprecated\n- `adapter-static` – client-only; compatible with Workers & Pages\n\n## Usage\n\n```bash\nnpm i -D @sveltejs/adapter-cloudflare\n```\n\n```js\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-cloudflare';\n\nexport default {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\tconfig: undefined,\n\t\t\tplatformProxy: {\n\t\t\t\tconfigPath: undefined,\n\t\t\t\tenvironment: undefined,\n\t\t\t\tpersist: undefined\n\t\t\t},\n\t\t\tfallback: 'plaintext',\n\t\t\troutes: {\n\t\t\t\tinclude: ['/*'],\n\t\t\t\texclude: ['<all>']\n\t\t\t}\n\t\t})\n\t}\n};\n```\n\n## Options\n\n### config\nPath to Wrangler config file (if not default `wrangler.jsonc/json/toml`).\n\n### platformProxy\nEmulated `platform.env` local bindings. See [getPlatformProxy docs](https://developers.cloudflare.com/workers/wrangler/api/#parameters-1).\n\n### fallback\n- `plaintext` (default): null-body 404 response\n- `spa`: rendered SPA fallback page\n\nFor Workers: served when `assets.not_found_handling` is `\"404-page\"`. Ignored if set to `\"single-page-application\"`.\n\nFor Pages: served when `routes.exclude` request fails to match asset.\n\n### routes\n**Pages only.** Customizes `_routes.json`:\n- `include`: routes invoking functions (default `['/*']`)\n- `exclude`: routes serving static assets. Special values:\n  - `<build>`: Vite build artifacts\n  - `<files>`: `static` directory\n  - `<prerendered>`: prerendered pages\n  - `<all>`: all above (default)\n\nMax 100 combined rules. Use to avoid exceeding limits (e.g., `'/articles/*'` vs individual paths).\n\n## Cloudflare Workers\n\n### Configuration\n\n```jsonc\n/// file: wrangler.jsonc\n{\n\t\"name\": \"<any-name-you-want>\",\n\t\"main\": \".svelte-kit/cloudflare/_worker.js\",\n\t\"compatibility_date\": \"2025-01-01\",\n\t\"assets\": {\n\t\t\"binding\": \"ASSETS\",\n\t\t\"directory\": \".svelte-kit/cloudflare\"\n\t}\n}\n```\n\n### Deployment\nFollow [Cloudflare Workers framework guide](https://developers.cloudflare.com/workers/frameworks/framework-guides/svelte/).\n\n## Cloudflare Pages\n\n### Deployment\nFollow [Get Started Guide](https://developers.cloudflare.com/pages/get-started/).\n\n**Git integration settings:**\n- Framework preset: SvelteKit\n- Build command: `npm run build` or `vite build`\n- Build output: `.svelte-kit/cloudflare`\n\n### Notes\nFunctions in `/functions` directory are ignored. Use [server endpoints](routing#server) instead (compiled to single `_worker.js`).\n\n## Runtime APIs\n\nAccess `env` (bindings), `ctx`, `caches`, `cf` via `platform` in hooks/endpoints:\n\n```js\n// @filename: ambient.d.ts\nimport { DurableObjectNamespace } from '@cloudflare/workers-types';\n\ndeclare global {\n\tnamespace App {\n\t\tinterface Platform {\n\t\t\tenv: {\n\t\t\t\tYOUR_DURABLE_OBJECT_NAMESPACE: DurableObjectNamespace;\n\t\t\t};\n\t\t}\n\t}\n}\n// @filename: +server.js\n// ---cut---\n// @errors: 2355 2322\n/// file: +server.js\n/** @type {import('./$types').RequestHandler} */\nexport async function POST({ request, platform }) {\n\tconst x = platform?.env.YOUR_DURABLE_OBJECT_NAMESPACE.idFromName('x');\n}\n```\n\n> Use SvelteKit's `$env` module for environment variables.\n\n**Type definitions:**\n\n```bash\nnpm i -D @cloudflare/workers-types\n```\n\n```ts\n/// file: src/app.d.ts\n+++import { KVNamespace, DurableObjectNamespace } from '@cloudflare/workers-types';+++\n\ndeclare global {\n\tnamespace App {\n\t\tinterface Platform {\n+++\t\t\tenv: {\n\t\t\t\tYOUR_KV_NAMESPACE: KVNamespace;\n\t\t\t\tYOUR_DURABLE_OBJECT_NAMESPACE: DurableObjectNamespace;\n\t\t\t};+++\n\t\t}\n\t}\n}\n\nexport {};\n```\n\n### Testing Locally\n\n`platform` values emulated in dev/preview. Local bindings from Wrangler config populate `platform.env`. Configure via `platformProxy` option.\n\n**Test build:**\n- Workers: `wrangler dev .svelte-kit/cloudflare`\n- Pages: `wrangler pages dev .svelte-kit/cloudflare`\n\n## Headers & Redirects\n\n`_headers` and `_redirects` files (in project root) only affect static assets, not SvelteKit responses. Use [server endpoints](routing#server) or [`handle` hook](hooks#Server-hooks-handle) for dynamic responses.\n\n## Troubleshooting\n\n### Node.js Compatibility\n\n```jsonc\n/// file: wrangler.jsonc\n{\n\t\"compatibility_flags\": [\"nodejs_compat\"]\n}\n```\n\n### Worker Size Limits\n\nIf exceeding [size limits](https://developers.cloudflare.com/workers/platform/limits/#worker-size), import large libraries client-side only. See [FAQ](./faq#How-do-I-use-a-client-side-library-accessing-document-or-window).\n\n### File System Access\n\n`fs` unavailable. Use [`read()`]($app-server#read) from `$app/server` to fetch from deployed assets, or [prerender](page-options#prerender) routes.\n\n## Migrating from Workers Sites\n\nReplace `adapter-cloudflare-workers` with `adapter-cloudflare`. Update config:\n\n```js\n// @errors: 2307\n/// file: svelte.config.js\n---import adapter from '@sveltejs/adapter-cloudflare-workers';---\n+++import adapter from '@sveltejs/adapter-cloudflare';+++\n\nexport default {\n\tkit: {\n\t\tadapter: adapter()\n\t}\n};\n```\n\n```toml\n/// file: wrangler.toml\n---site.bucket = \".cloudflare/public\"---\n+++assets.directory = \".cloudflare/public\"\nassets.binding = \"ASSETS\" # Exclude if no `main` key+++\n```\n\n```jsonc\n/// file: wrangler.jsonc\n{\n---\t\"site\": {\n\t\t\"bucket\": \".cloudflare/public\"\n\t},---\n+++\t\"assets\": {\n\t\t\"directory\": \".cloudflare/public\",\n\t\t\"binding\": \"ASSETS\" // Exclude if no `main` key\n\t}+++\n}\n```",
    "kit/adapter-cloudflare-workers": "# adapter-cloudflare-workers\n\n> **DEPRECATED**: Use [`adapter-cloudflare`](adapter-cloudflare) instead. Cloudflare Workers Sites is being deprecated in favor of Workers with Static Assets.\n\nDeploys to [Cloudflare Workers](https://workers.cloudflare.com/) with [Workers Sites](https://developers.cloudflare.com/workers/configuration/sites/).\n\n## Usage\n\n```js\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-cloudflare-workers';\n\nexport default {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\t// options\n\t\t})\n\t}\n};\n```\n\n## Options\n\n- **config**: Path to Wrangler config file (if not using default `wrangler.jsonc`, `wrangler.json`, or `wrangler.toml`)\n- **platformProxy**: Preferences for emulated `platform.env` local bindings. See [getPlatformProxy docs](https://developers.cloudflare.com/workers/wrangler/api/#parameters-1)\n\n## Configuration\n\nCreate Wrangler config in project root:\n\n```jsonc\n/// file: wrangler.jsonc\n{\n\t\"name\": \"<your-service-name>\",\n\t\"account_id\": \"<your-account-id>\",\n\t\"main\": \"./.cloudflare/worker.js\",\n\t\"site\": {\n\t\t\"bucket\": \"./.cloudflare/public\"\n\t},\n\t\"build\": {\n\t\t\"command\": \"npm run build\"\n\t},\n\t\"compatibility_date\": \"2021-11-12\"\n}\n```\n\nGet `<your-account-id>` from `wrangler whoami` or Cloudflare dashboard URL.\n\nAdd `.cloudflare` and `.wrangler` to `.gitignore`.\n\n## Deploy\n\n```sh\nnpm i -D wrangler\nwrangler login\nwrangler deploy\n```\n\n## Runtime APIs\n\nAccess `env`, `ctx`, `caches`, and `cf` via `platform` in hooks and endpoints:\n\n```js\n/// file: +server.js\nexport async function POST({ request, platform }) {\n\tconst x = platform?.env.YOUR_DURABLE_OBJECT_NAMESPACE.idFromName('x');\n}\n```\n\nUse SvelteKit's `$env` module for environment variables.\n\n### Types\n\n```ts\n/// file: src/app.d.ts\nimport { KVNamespace, DurableObjectNamespace } from '@cloudflare/workers-types';\n\ndeclare global {\n\tnamespace App {\n\t\tinterface Platform {\n\t\t\tenv?: {\n\t\t\t\tYOUR_KV_NAMESPACE: KVNamespace;\n\t\t\t\tYOUR_DURABLE_OBJECT_NAMESPACE: DurableObjectNamespace;\n\t\t\t};\n\t\t}\n\t}\n}\n\nexport {};\n```\n\n### Local Testing\n\n`platform` values are emulated during dev/preview using Wrangler config bindings. Configure via `platformProxy` option.\n\nFor testing builds, use Wrangler 4: `wrangler dev`\n\n## Troubleshooting\n\n**Node.js compatibility**: Add to Wrangler config:\n```jsonc\n/// file: wrangler.jsonc\n{\n\t\"compatibility_flags\": [\"nodejs_compat\"]\n}\n```\n\n**Worker size limits**: If bundle exceeds [size limits](https://developers.cloudflare.com/workers/platform/limits/#worker-size), import large libraries client-side only. See [FAQ](./faq#How-do-I-use-a-client-side-library-accessing-document-or-window).\n\n**File system**: `fs` unavailable — [prerender](page-options#prerender) routes that need it.",
    "kit/adapter-netlify": "# Netlify Adapter\n\nDeploy to Netlify using [`adapter-netlify`](https://github.com/sveltejs/kit/tree/main/packages/adapter-netlify). Auto-installed with `adapter-auto`.\n\n## Usage\n\nInstall: `npm i -D @sveltejs/adapter-netlify`\n\n```js\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-netlify';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\t// if true, creates Netlify Edge Function (Deno)\n\t\t\t// if false, creates Node-based function\n\t\t\tedge: false,\n\n\t\t\t// if true, splits app into multiple functions\n\t\t\t// cannot be used with edge: true\n\t\t\tsplit: false\n\t\t})\n\t}\n};\n\nexport default config;\n```\n\nCreate `netlify.toml` in project root:\n\n```toml\n[build]\n\tcommand = \"npm run build\"\n\tpublish = \"build\"\n```\n\nMissing `netlify.toml` or `build.publish` defaults to `\"build\"`.\n\n### Node version\n\nNew projects use current Node LTS. Older projects may need [manual Node version update](https://docs.netlify.com/configure-builds/manage-dependencies/#node-js-and-javascript).\n\n## Edge Functions\n\nSet `edge: true` for Deno-based edge functions deployed close to visitors. Default `false` uses Node-based functions.\n\n```js\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-netlify';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\tedge: true\n\t\t})\n\t}\n};\n\nexport default config;\n```\n\n## Netlify-Specific Features\n\n### `_headers` and `_redirects`\n\nPlace [`_headers`](https://docs.netlify.com/routing/headers/#syntax-for-the-headers-file) and [`_redirects`](https://docs.netlify.com/routing/redirects/redirect-options/) files in project root for static assets.\n\n**Gotchas:**\n- `_redirects` has higher priority than `[[redirects]]` in `netlify.toml`\n- Don't add catch-all rules like `/* /foobar/:splat` - they prevent auto-appended rules from working\n- Netlify processes only first matching rule\n\n### Netlify Forms\n\n1. Create HTML form per [Netlify docs](https://docs.netlify.com/forms/setup/#html-forms) (include hidden `form-name` input)\n2. Must [prerender](page-options#prerender) as HTML - add `export const prerender = true` or set `kit.prerender.force: true`\n3. Custom success pages must exist and be prerendered\n\n### Netlify Functions\n\nAccess Netlify context (including Identity) via `event.platform.context`:\n\n```js\n// @errors: 2339\n// @filename: ambient.d.ts\n/// <reference types=\"@sveltejs/adapter-netlify\" />\n// @filename: +page.server.js\n// ---cut---\n/// file: +page.server.js\n/** @type {import('./$types').PageServerLoad} */\nexport const load = async (event) => {\n\tconst context = event.platform?.context;\n\tconsole.log(context); // shows up in your functions log in the Netlify app\n};\n```\n\nAdd custom functions via directory + `netlify.toml`:\n\n```toml\n[build]\n\tcommand = \"npm run build\"\n\tpublish = \"build\"\n\n[functions]\n\tdirectory = \"functions\"\n```\n\n## Troubleshooting\n\n### File System Access\n\n- **Edge deployments:** Can't use `fs`\n- **Serverless deployments:** `fs` won't work as expected (files not copied). Use [`read`]($app-server#read) from `$app/server` instead (works in both edge and serverless)\n- Alternative: [Prerender](page-options#prerender) the routes",
    "kit/adapter-vercel": "# Vercel Adapter\n\n## Installation & Setup\n\n```bash\nnpm i -D @sveltejs/adapter-vercel\n```\n\n```js\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-vercel';\n\nexport default {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\t// options here\n\t\t})\n\t}\n};\n```\n\nAuto-installed with `adapter-auto`.\n\n## Deployment Configuration\n\nConfigure via adapter options or `export const config` in `+server.js`, `+page(.server).js`, `+layout(.server).js`:\n\n```js\n/// file: about/+page.js\n/** @type {import('@sveltejs/adapter-vercel').Config} */\nexport const config = {\n\tsplit: true\n};\n```\n\n### All Functions\n- `runtime`: `'edge'` | `'nodejs18.x'` | `'nodejs20.x'` | `'nodejs22.x'` (deprecated, use Vercel dashboard)\n- `regions`: array of [regions](https://vercel.com/docs/concepts/edge-network/regions) or `'all'` for edge (default `[\"iad1\"]` for serverless)\n- `split`: `true` deploys route as individual function\n\n### Edge Functions Only\n- `external`: dependencies to exclude from bundling\n\n### Serverless Functions Only\n- `memory`: 128-3008 Mb (default 1024, increments of 64)\n- `maxDuration`: seconds (10 Hobby, 15 Pro, 900 Enterprise)\n- `isr`: ISR config (see below)\n\nConfig in layouts applies to child routes unless overridden.\n\n## Image Optimization\n\n```js\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-vercel';\n\nexport default {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\timages: {\n\t\t\t\tsizes: [640, 828, 1200, 1920, 3840],\n\t\t\t\tformats: ['image/avif', 'image/webp'],\n\t\t\t\tminimumCacheTTL: 300,\n\t\t\t\tdomains: ['example-app.vercel.app'],\n\t\t\t}\n\t\t})\n\t}\n};\n```\n\nSee [image config reference](https://vercel.com/docs/build-output-api/v3/configuration#images).\n\n## Incremental Static Regeneration (ISR)\n\nUse for content that's same for all visitors (no user-specific data).\n\n```js\nimport { BYPASS_TOKEN } from '$env/static/private';\n\n/** @type {import('@sveltejs/adapter-vercel').Config} */\nexport const config = {\n\tisr: {\n\t\texpiration: 60,\n\t\tbypassToken: BYPASS_TOKEN,\n\t\tallowQuery: ['search']\n\t}\n};\n```\n\n**Note:** No effect on routes with `export const prerender = true`.\n\n### Options\n- `expiration` (required): seconds before re-generation, or `false` for never\n- `bypassToken`: ≥32 char string for cache bypass via `__prerender_bypass=<token>` cookie or `x-prerender-revalidate: <token>` header\n- `allowQuery`: query params that affect cache key (others ignored)\n\nGenerate token: `crypto.randomUUID()`. Set as env var on Vercel. Pull locally: `vercel env pull .env.development.local`.\n\n## Environment Variables\n\nAccess [Vercel system env vars](https://vercel.com/docs/concepts/projects/environment-variables#system-environment-variables) from `$env/static/private` or `$env/dynamic/private`:\n\n```js\n/// file: +layout.server.js\nimport { VERCEL_COMMIT_REF } from '$env/static/private';\n\nexport function load() {\n\treturn {\n\t\tdeploymentGitBranch: VERCEL_COMMIT_REF\n\t};\n}\n```\n\n```svelte\n<!--- file: +layout.svelte --->\n<script>\n\tlet { data } = $props();\n</script>\n\n<p>Deployed from {data.deploymentGitBranch}.</p>\n```\n\nUse `$env/static/private` over `$env/dynamic/private` for static replacement & dead code elimination.\n\n## Skew Protection\n\n[Skew protection](https://vercel.com/docs/deployments/skew-protection) routes users to their original deployment via cookie. Enable in project settings > Advanced.\n\n**Caveat:** Multiple tabs with different versions route to newest, falling back to SvelteKit's built-in protection.\n\nMonitor new deployments: `updated.current` from `$app/state`.\n\n## Notes\n\n### Vercel Functions\n`/api/*` requests bypass SvelteKit if `api` directory exists at project root. Use [API routes](routing#server) instead.\n\n### Node Version\nUpdate in [project settings](https://vercel.com/docs/concepts/functions/serverless-functions/runtimes/node-js#node.js-version) if needed.\n\n## Troubleshooting\n\n### File System Access\n- **Edge functions:** Can't use `fs`. Use [`read`]($app-server#read) from `$app/server` or prerender.\n- **Serverless functions:** `fs` won't work as expected. Use `read` instead.\n\n### Deployment Protection\nEnable [Protection Bypass for Automation](https://vercel.com/docs/deployment-protection/methods-to-bypass-deployment-protection/protection-bypass-automation) when using `read` in edge functions with [Deployment Protection](https://vercel.com/docs/deployment-protection).",
    "kit/writing-adapters": "# Building Adapters\n\n## Adapter API\n\nAdapters implement this structure:\n\n```js\n// @errors: 2322\n// @filename: ambient.d.ts\ntype AdapterSpecificOptions = any;\n\n// @filename: index.js\n// ---cut---\n/** @param {AdapterSpecificOptions} options */\nexport default function (options) {\n\t/** @type {import('@sveltejs/kit').Adapter} */\n\tconst adapter = {\n\t\tname: 'adapter-package-name',\n\t\tasync adapt(builder) {\n\t\t\t// adapter implementation\n\t\t},\n\t\tasync emulate() {\n\t\t\treturn {\n\t\t\t\tasync platform({ config, prerender }) {\n\t\t\t\t\t// the returned object becomes `event.platform` during dev, build and\n\t\t\t\t\t// preview. Its shape is that of `App.Platform`\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tsupports: {\n\t\t\tread: ({ config, route }) => {\n\t\t\t\t// Return `true` if the route with the given `config` can use `read`\n\t\t\t\t// from `$app/server` in production, return `false` if it can't.\n\t\t\t\t// Or throw a descriptive error describing how to configure the deployment\n\t\t\t},\n\t\t\ttracing: () => {\n\t\t\t\t// Return `true` if this adapter supports loading `tracing.server.js`.\n\t\t\t\t// Return `false if it can't, or throw a descriptive error.\n\t\t\t}\n\t\t}\n\t};\n\n\treturn adapter;\n}\n```\n\n**Required:** `name`, `adapt`  \n**Optional:** `emulate`, `supports`\n\n## `adapt` Method Tasks\n\n1. Clear build directory\n2. Write output: `builder.writeClient`, `builder.writeServer`, `builder.writePrerendered`\n3. Output code that:\n   - Imports `Server` from `${builder.getServerDirectory()}/index.js`\n   - Instantiates app with `builder.generateManifest({ relativePath })`\n   - Converts platform requests to standard `Request`\n   - Calls `server.respond(request, { getClientAddress })` to generate `Response`\n   - Exposes platform info via `platform` option in `server.respond`\n   - Shims `fetch` if needed (use `@sveltejs/kit/node/polyfills` for undici-compatible platforms)\n4. Bundle output to avoid dependencies on target platform\n5. Place static files and JS/CSS in correct locations\n\n**Best practice:** Output to `build/`, intermediate files to `.svelte-kit/[adapter-name]`\n\n**Tip:** Copy an [existing adapter](https://github.com/sveltejs/kit/tree/main/packages) as starting point",
    "kit/advanced-routing": "# Advanced Routing\n\n## Rest Parameters\n\nUse `[...param]` for unknown number of segments:\n\n```sh\n/[org]/[repo]/tree/[branch]/[...file]\n```\n\nRequest `/sveltejs/kit/tree/main/documentation/docs/04-advanced-routing.md` gives:\n\n```js\n// @noErrors\n{\n\torg: 'sveltejs',\n\trepo: 'kit',\n\tbranch: 'main',\n\tfile: 'documentation/docs/04-advanced-routing.md'\n}\n```\n\n**Note:** `src/routes/a/[...rest]/z/+page.svelte` matches `/a/z` (empty param), `/a/b/z`, etc. Validate rest params using matchers.\n\n### 404 Pages\n\nCreate catch-all route for custom 404s:\n\n```tree\nsrc/routes/\n├ marx-brothers/\n│ ├ [...path]/\n│ ├ chico/\n│ ├ harpo/\n│ ├ groucho/\n│ └ +error.svelte\n└ +error.svelte\n```\n\n```js\n/// file: src/routes/marx-brothers/[...path]/+page.js\nimport { error } from '@sveltejs/kit';\n\n/** @type {import('./$types').PageLoad} */\nexport function load(event) {\n\terror(404, 'Not Found');\n}\n```\n\n## Optional Parameters\n\nWrap in double brackets: `[[lang]]/home` matches both `/home` and `/en/home`.\n\n**Note:** Can't follow rest params: `[...rest]/[[optional]]` won't work.\n\n## Matching\n\nAdd matchers to validate params:\n\n```js\n/// file: src/params/fruit.js\n/**\n * @param {string} param\n * @return {param is ('apple' | 'orange')}\n * @satisfies {import('@sveltejs/kit').ParamMatcher}\n */\nexport function match(param) {\n\treturn param === 'apple' || param === 'orange';\n}\n```\n\nUse in routes: `src/routes/fruits/[page=fruit]`\n\nMatchers run on server and browser. Files named `*.test.js` and `*.spec.js` are ignored.\n\n## Sorting\n\nMultiple routes can match same path. Priority rules:\n\n- More specific routes rank higher\n- Params with matchers `[name=type]` beat `[name]`\n- `[[optional]]` and `[...rest]` have lowest priority\n- Ties resolved alphabetically\n\nExample order for `/foo-abc`:\n\n```sh\nsrc/routes/foo-abc/+page.svelte\nsrc/routes/foo-[c]/+page.svelte\nsrc/routes/[[a=x]]/+page.svelte\nsrc/routes/[b]/+page.svelte\nsrc/routes/[...catchall]/+page.svelte\n```\n\n## Encoding\n\nUse hex escapes `[x+nn]` for special characters:\n\n- `\\` — `[x+5c]`, `/` — `[x+2f]`, `:` — `[x+3a]`, `*` — `[x+2a]`\n- `?` — `[x+3f]`, `\"` — `[x+22]`, `<` — `[x+3c]`, `>` — `[x+3e]`\n- `|` — `[x+7c]`, `#` — `[x+23]`, `%` — `[x+25]`\n- `[` — `[x+5b]`, `]` — `[x+5d]`, `(` — `[x+28]`, `)` — `[x+29]`\n\nExample: `/smileys/:-)` → `src/routes/smileys/[x+3a]-[x+29]/+page.svelte`\n\nUnicode escapes `[u+nnnn]` also work:\n```\nsrc/routes/[u+d83e][u+dd2a]/+page.svelte\nsrc/routes/🤪/+page.svelte\n```\n\n## Advanced Layouts\n\n### (group)\n\nParentheses create layout groups without affecting URLs:\n\n```tree\nsrc/routes/\n│ (app)/\n│ ├ dashboard/\n│ ├ item/\n│ └ +layout.svelte\n│ (marketing)/\n│ ├ about/\n│ ├ testimonials/\n│ └ +layout.svelte\n├ admin/\n└ +layout.svelte\n```\n\n`/admin` doesn't inherit `(app)` or `(marketing)` layouts.\n\n### +page@\n\nBreak out of layouts with `@segment`:\n\n```tree\nsrc/routes/\n├ (app)/\n│ ├ item/\n│ │ ├ [id]/\n│ │ │ ├ embed/\n│ │ │ │ └ +page@(app).svelte\n│ │ │ └ +layout.svelte\n│ │ └ +layout.svelte\n│ └ +layout.svelte\n└ +layout.svelte\n```\n\nOptions:\n- `+page@[id].svelte` - inherits from `[id]/+layout.svelte`\n- `+page@item.svelte` - inherits from `item/+layout.svelte`\n- `+page@(app).svelte` - inherits from `(app)/+layout.svelte`\n- `+page@.svelte` - inherits from root layout\n\n### +layout@\n\nLayouts can also break out:\n\n```\nsrc/routes/\n├ (app)/\n│ ├ item/\n│ │ ├ [id]/\n│ │ │ ├ embed/\n│ │ │ │ └ +page.svelte  // uses (app)/item/[id]/+layout.svelte\n│ │ │ ├ +layout.svelte  // inherits from (app)/item/+layout@.svelte\n│ │ │ └ +page.svelte    // uses (app)/item/+layout@.svelte\n│ │ └ +layout@.svelte   // inherits from root layout, skipping (app)/+layout.svelte\n│ └ +layout.svelte\n└ +layout.svelte\n```\n\n### When to Use Layout Groups\n\nDon't overuse groups. Alternatives include reusable components/functions:\n\n```svelte\n<!--- file: src/routes/nested/route/+layout@.svelte --->\n<script>\n\timport ReusableLayout from '$lib/ReusableLayout.svelte';\n\tlet { data, children } = $props();\n</script>\n\n<ReusableLayout {data}>\n\t{@render children()}\n</ReusableLayout>\n```\n\n```js\n/// file: src/routes/nested/route/+layout.js\n// @filename: ambient.d.ts\ndeclare module \"$lib/reusable-load-function\" {\n\texport function reusableLoad(event: import('@sveltejs/kit').LoadEvent): Promise<Record<string, any>>;\n}\n// @filename: index.js\n// ---cut---\nimport { reusableLoad } from '$lib/reusable-load-function';\n\n/** @type {import('./$types').PageLoad} */\nexport function load(event) {\n\t// Add additional logic here, if needed\n\treturn reusableLoad(event);\n}\n```",
    "kit/hooks": "# Hooks\n\nApp-wide functions that SvelteKit calls in response to specific events.\n\nThree optional files:\n- `src/hooks.server.js` — server hooks\n- `src/hooks.client.js` — client hooks  \n- `src/hooks.js` — universal hooks (both client and server)\n\nCode runs at app startup, useful for initializing database clients.\n\n> Configure location with [`config.kit.files.hooks`](configuration#files).\n\n## Server hooks\n\n### handle\n\nRuns on every server [request](web-standards#Fetch-APIs-Request) (including [prerendering](page-options#prerender)). Receives `event` and `resolve` function. Modify response or bypass SvelteKit entirely.\n\n```js\n/// file: src/hooks.server.js\n/** @type {import('@sveltejs/kit').Handle} */\nexport async function handle({ event, resolve }) {\n\tif (event.url.pathname.startsWith('/custom')) {\n\t\treturn new Response('custom response');\n\t}\n\n\tconst response = await resolve(event);\n\treturn response;\n}\n```\n\n> Static assets and prerendered pages are _not_ handled by SvelteKit.\n\nDefault: `({ event, resolve }) => resolve(event)`\n\n**locals**: Add custom data to `event.locals` for handlers and server `load` functions:\n\n```js\n/// file: src/hooks.server.js\n// @filename: ambient.d.ts\ntype User = {\n\tname: string;\n}\n\ndeclare namespace App {\n\tinterface Locals {\n\t\tuser: User;\n\t}\n}\n\nconst getUserInformation: (cookie: string | void) => Promise<User>;\n\n// @filename: index.js\n// ---cut---\n/** @type {import('@sveltejs/kit').Handle} */\nexport async function handle({ event, resolve }) {\n\tevent.locals.user = await getUserInformation(event.cookies.get('sessionid'));\n\n\tconst response = await resolve(event);\n\n\t// Note that modifying response headers isn't always safe.\n\t// Response objects can have immutable headers\n\t// (e.g. Response.redirect() returned from an endpoint).\n\t// Modifying immutable headers throws a TypeError.\n\t// In that case, clone the response or avoid creating a\n\t// response object with immutable headers.\n\tresponse.headers.set('x-custom-header', 'potato');\n\n\treturn response;\n}\n```\n\nChain multiple `handle` functions with `sequence` helper.\n\n**resolve options** (second parameter):\n\n- `transformPageChunk(opts: { html: string, done: boolean })` — transform HTML chunks\n- `filterSerializedResponseHeaders(name, value)` — filter headers in serialized responses (default: none)\n- `preload(input: { type, path })` — determine files to preload in `<head>` (default: `js` and `css`)\n\n```js\n/// file: src/hooks.server.js\n/** @type {import('@sveltejs/kit').Handle} */\nexport async function handle({ event, resolve }) {\n\tconst response = await resolve(event, {\n\t\ttransformPageChunk: ({ html }) => html.replace('old', 'new'),\n\t\tfilterSerializedResponseHeaders: (name) => name.startsWith('x-'),\n\t\tpreload: ({ type, path }) => type === 'js' || path.includes('/important/')\n\t});\n\n\treturn response;\n}\n```\n\n`resolve(...)` never throws — always returns `Promise<Response>`. Errors elsewhere in `handle` are fatal. Customize error page via `src/error.html`.\n\n### handleFetch\n\nModify/replace `event.fetch` calls on server (or during prerendering) inside endpoints, `load`, `action`, `handle`, `handleError`, or `reroute`.\n\n```js\n/// file: src/hooks.server.js\n/** @type {import('@sveltejs/kit').HandleFetch} */\nexport async function handleFetch({ request, fetch }) {\n\tif (request.url.startsWith('https://api.yourapp.com/')) {\n\t\t// clone the original request, but change the URL\n\t\trequest = new Request(\n\t\t\trequest.url.replace('https://api.yourapp.com/', 'http://localhost:9999/'),\n\t\t\trequest\n\t\t);\n\t}\n\n\treturn fetch(request);\n}\n```\n\n`event.fetch` follows browser credentials model. For sibling subdomains, manually include cookies:\n\n```js\n/// file: src/hooks.server.js\n// @errors: 2345\n/** @type {import('@sveltejs/kit').HandleFetch} */\nexport async function handleFetch({ event, request, fetch }) {\n\tif (request.url.startsWith('https://api.my-domain.com/')) {\n\t\trequest.headers.set('cookie', event.request.headers.get('cookie'));\n\t}\n\n\treturn fetch(request);\n}\n```\n\n### handleValidationError\n\nCalled when remote function argument doesn't match [Standard Schema](https://standardschema.dev/). Must return object matching [`App.Error`](types#Error).\n\n```js\n/// file: src/hooks.server.js\n/** @type {import('@sveltejs/kit').HandleValidationError} */\nexport function handleValidationError({ issues }) {\n\treturn {\n\t\tmessage: 'No thank you'\n\t};\n}\n```\n\nBe careful exposing information — validation failures often indicate malicious requests.\n\n## Shared hooks\n\nAdd to both `src/hooks.server.js` _and_ `src/hooks.client.js`:\n\n### handleError\n\nCalled on [unexpected errors](errors#Unexpected-errors). Allows logging and generating safe error representations. Returned value becomes `$page.error`.\n\nCustomize `App.Error` interface for type-safe additional properties:\n\n```ts\n/// file: src/app.d.ts\ndeclare global {\n\tnamespace App {\n\t\tinterface Error {\n\t\t\tmessage: string;\n\t\t\terrorId: string;\n\t\t}\n\t}\n}\n\nexport {};\n```\n\n```js\n/// file: src/hooks.server.js\n// @errors: 2322 2353\n// @filename: ambient.d.ts\ndeclare module '@sentry/sveltekit' {\n\texport const init: (opts: any) => void;\n\texport const captureException: (error: any, opts: any) => void;\n}\n\n// @filename: index.js\n// ---cut---\nimport * as Sentry from '@sentry/sveltekit';\n\nSentry.init({/*...*/})\n\n/** @type {import('@sveltejs/kit').HandleServerError} */\nexport async function handleError({ error, event, status, message }) {\n\tconst errorId = crypto.randomUUID();\n\n\t// example integration with https://sentry.io/\n\tSentry.captureException(error, {\n\t\textra: { event, errorId, status }\n\t});\n\n\treturn {\n\t\tmessage: 'Whoops!',\n\t\terrorId\n\t};\n}\n```\n\n```js\n/// file: src/hooks.client.js\n// @errors: 2322 2353\n// @filename: ambient.d.ts\ndeclare module '@sentry/sveltekit' {\n\texport const init: (opts: any) => void;\n\texport const captureException: (error: any, opts: any) => void;\n}\n\n// @filename: index.js\n// ---cut---\nimport * as Sentry from '@sentry/sveltekit';\n\nSentry.init({/*...*/})\n\n/** @type {import('@sveltejs/kit').HandleClientError} */\nexport async function handleError({ error, event, status, message }) {\n\tconst errorId = crypto.randomUUID();\n\n\t// example integration with https://sentry.io/\n\tSentry.captureException(error, {\n\t\textra: { event, errorId, status }\n\t});\n\n\treturn {\n\t\tmessage: 'Whoops!',\n\t\terrorId\n\t};\n}\n```\n\n> Client: type is `HandleClientError`, `event` is `NavigationEvent`.\n\nNot called for expected errors (thrown with `error` from `@sveltejs/kit`).\n\n> `handleError` must never throw.\n\n### init\n\nRuns once at server creation or browser app start. Useful for async initialization (e.g., database connections).\n\n```js\n// @errors: 2307\n/// file: src/hooks.server.js\nimport * as db from '$lib/server/database';\n\n/** @type {import('@sveltejs/kit').ServerInit} */\nexport async function init() {\n\tawait db.connect();\n}\n```\n\n> In browser, async work in `init` delays hydration.\n\n## Universal hooks\n\nAdd to `src/hooks.js`. Runs on both server and client.\n\n### reroute\n\nRuns before `handle`. Changes how URLs translate to routes. Returned pathname selects route and parameters.\n\n```js\n// @errors: 2345 2304\n/// file: src/hooks.js\n\n/** @type {Record<string, string>} */\nconst translated = {\n\t'/en/about': '/en/about',\n\t'/de/ueber-uns': '/de/about',\n\t'/fr/a-propos': '/fr/about',\n};\n\n/** @type {import('@sveltejs/kit').Reroute} */\nexport function reroute({ url }) {\n\tif (url.pathname in translated) {\n\t\treturn translated[url.pathname];\n\t}\n}\n```\n\nDoesn't change browser address bar or `event.url`.\n\nCan be async (since v2.18) with provided `fetch`:\n\n```js\n// @errors: 2345 2304\n/// file: src/hooks.js\n\n/** @type {import('@sveltejs/kit').Reroute} */\nexport async function reroute({ url, fetch }) {\n\t// Ask a special endpoint within your app about the destination\n\tif (url.pathname === '/api/reroute') return;\n\n\tconst api = new URL('/api/reroute', url);\n\tapi.searchParams.set('pathname', url.pathname);\n\n\tconst result = await fetch(api).then(r => r.json());\n\treturn result.pathname;\n}\n```\n\n> `reroute` is pure/idempotent. SvelteKit caches results on client per unique URL.\n\n### transport\n\nTransporters for passing custom types across server/client boundary. Each has `encode` (server) and `decode` (client):\n\n```js\n// @errors: 2307\n/// file: src/hooks.js\nimport { Vector } from '$lib/math';\n\n/** @type {import('@sveltejs/kit').Transport} */\nexport const transport = {\n\tVector: {\n\t\tencode: (value) => value instanceof Vector && [value.x, value.y],\n\t\tdecode: ([x, y]) => new Vector(x, y)\n\t}\n};\n```",
    "kit/errors": "# Errors\n\n## Error Objects\n\nSvelteKit distinguishes between **expected** and **unexpected** errors. Both are `{ message: string }` objects by default.\n\n## Expected Errors\n\nCreated with `error()` helper from `@sveltejs/kit`:\n\n```js\n/// file: src/routes/blog/[slug]/+page.server.js\nimport { error } from '@sveltejs/kit';\nimport * as db from '$lib/server/database';\n\n/** @type {import('./$types').PageServerLoad} */\nexport async function load({ params }) {\n\tconst post = await db.getPost(params.slug);\n\n\tif (!post) {\n\t\terror(404, {\n\t\t\tmessage: 'Not found'\n\t\t});\n\t}\n\n\treturn { post };\n}\n```\n\nSets response status and renders nearest `+error.svelte`:\n\n```svelte\n<!--- file: src/routes/+error.svelte --->\n<script>\n\timport { page } from '$app/state';\n</script>\n\n<h1>{page.error.message}</h1>\n```\n\n**Add custom properties:**\n\n```js\nerror(404, {\n\tmessage: 'Not found',\n\tcode: 'NOT_FOUND'\n});\n```\n\n**String shorthand:**\n\n```js\nerror(404, 'Not found');\n```\n\n## Unexpected Errors\n\nAny other exception during request handling. Default shape: `{ \"message\": \"Internal Error\" }`. Sensitive info not exposed.\n\nLogged to console/server logs. Processed through `handleError` hook for custom handling.\n\n## Responses\n\n**In `handle` or `+server.js`:** Returns fallback error page or JSON based on `Accept` headers.\n\n**Custom fallback** (`src/error.html`):\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>%sveltekit.error.message%</title>\n\t</head>\n\t<body>\n\t\t<h1>My custom error page</h1>\n\t\t<p>Status: %sveltekit.status%</p>\n\t\t<p>Message: %sveltekit.error.message%</p>\n\t</body>\n</html>\n```\n\n**In `load` functions:** Renders nearest `+error.svelte` component.\n\n**Gotcha:** Errors in root `+layout(.server).js` use fallback error page (no `+error.svelte` above root layout).\n\n## Type Safety\n\nCustomize error shape via `App.Error` interface:\n\n```ts\n/// file: src/app.d.ts\ndeclare global {\n\tnamespace App {\n\t\tinterface Error {\n\t\t\tcode: string;\n\t\t\tid: string;\n\t\t}\n\t}\n}\n\nexport {};\n```\n\nAlways includes `message: string` property.",
    "kit/link-options": "# Link Options\n\nUse `<a>` elements for navigation. SvelteKit intercepts clicks on internal links and handles routing client-side.\n\nCustomize link behavior with `data-sveltekit-*` attributes on `<a>` or parent elements. Also applies to `<form method=\"GET\">`.\n\n## data-sveltekit-preload-data\n\nPreload page data before click by detecting hover/touch events.\n\n**Values:**\n- `\"hover\"` - preload on mouse hover (desktop) or `touchstart` (mobile)\n- `\"tap\"` - preload on `touchstart` or `mousedown` only\n\n```html\n<body data-sveltekit-preload-data=\"hover\">\n\t<div style=\"display: contents\">%sveltekit.body%</div>\n</body>\n```\n\n```html\n<a data-sveltekit-preload-data=\"tap\" href=\"/stonks\">\n\tGet current stonk values\n</a>\n```\n\n> Programmatically use `preloadData` from `$app/navigation`. Ignored if `navigator.connection.saveData` is `true`.\n\n## data-sveltekit-preload-code\n\nPreload route code without data.\n\n**Values (decreasing eagerness):**\n- `\"eager\"` - preload immediately\n- `\"viewport\"` - preload when entering viewport\n- `\"hover\"` - preload on hover (code only)\n- `\"tap\"` - preload on tap (code only)\n\n> Only affects links in DOM after navigation. More eager than `data-sveltekit-preload-data` to take effect. Ignored if `navigator.connection.saveData` is `true`.\n\n## data-sveltekit-reload\n\nForce full-page navigation (bypass SvelteKit routing).\n\n```html\n<a data-sveltekit-reload href=\"/path\">Path</a>\n```\n\n> Links with `rel=\"external\"` get same treatment and are ignored during prerendering.\n\n## data-sveltekit-replacestate\n\nReplace history entry instead of creating new one.\n\n```html\n<a data-sveltekit-replacestate href=\"/path\">Path</a>\n```\n\n## data-sveltekit-keepfocus\n\nPrevent focus reset after navigation.\n\n```html\n<form data-sveltekit-keepfocus>\n\t<input type=\"text\" name=\"query\">\n</form>\n```\n\n> Avoid on links. Only use on elements that persist after navigation.\n\n## data-sveltekit-noscroll\n\nPrevent scroll to top (or `#hash`) after navigation.\n\n```html\n<a href=\"path\" data-sveltekit-noscroll>Path</a>\n```\n\n## Disabling Options\n\nUse `\"false\"` value to disable inherited attributes:\n\n```html\n<div data-sveltekit-preload-data>\n\t<!-- these links will be preloaded -->\n\t<a href=\"/a\">a</a>\n\t<a href=\"/b\">b</a>\n\t<a href=\"/c\">c</a>\n\n\t<div data-sveltekit-preload-data=\"false\">\n\t\t<!-- these links will NOT be preloaded -->\n\t\t<a href=\"/d\">d</a>\n\t\t<a href=\"/e\">e</a>\n\t\t<a href=\"/f\">f</a>\n\t</div>\n</div>\n```\n\nConditional attributes:\n\n```svelte\n<div data-sveltekit-preload-data={condition ? 'hover' : false}>\n```",
    "kit/service-workers": "# Service Workers\n\nService workers proxy network requests, enabling offline support and faster navigation via precaching.\n\n## Setup\n\nCreate `src/service-worker.js` (or `src/service-worker/index.js`) - it's auto-bundled and registered.\n\nDefault registration (can be [disabled](configuration#serviceWorker)):\n\n```js\nif ('serviceWorker' in navigator) {\n\taddEventListener('load', function () {\n\t\tnavigator.serviceWorker.register('./path/to/service-worker.js');\n\t});\n}\n```\n\n## `$service-worker` Module\n\nProvides:\n- Paths to static assets, build files, prerendered pages\n- App version string (for cache naming)\n- Deployment `base` path\n- Vite `define` globals\n\n## Example: Offline Caching\n\nEagerly caches built app + static files, lazily caches other requests:\n\n```js\n/// file: src/service-worker.js\n/// <reference no-default-lib=\"true\"/>\n/// <reference lib=\"esnext\" />\n/// <reference lib=\"webworker\" />\n/// <reference types=\"@sveltejs/kit\" />\n/// <reference types=\"../.svelte-kit/ambient.d.ts\" />\n\nimport { build, files, version } from '$service-worker';\n\nconst self = /** @type {ServiceWorkerGlobalScope} */ (/** @type {unknown} */ (globalThis.self));\n\nconst CACHE = `cache-${version}`;\n\nconst ASSETS = [\n\t...build, // the app itself\n\t...files  // everything in `static`\n];\n\nself.addEventListener('install', (event) => {\n\tasync function addFilesToCache() {\n\t\tconst cache = await caches.open(CACHE);\n\t\tawait cache.addAll(ASSETS);\n\t}\n\n\tevent.waitUntil(addFilesToCache());\n});\n\nself.addEventListener('activate', (event) => {\n\tasync function deleteOldCaches() {\n\t\tfor (const key of await caches.keys()) {\n\t\t\tif (key !== CACHE) await caches.delete(key);\n\t\t}\n\t}\n\n\tevent.waitUntil(deleteOldCaches());\n});\n\nself.addEventListener('fetch', (event) => {\n\tif (event.request.method !== 'GET') return;\n\n\tasync function respond() {\n\t\tconst url = new URL(event.request.url);\n\t\tconst cache = await caches.open(CACHE);\n\n\t\t// `build`/`files` can always be served from the cache\n\t\tif (ASSETS.includes(url.pathname)) {\n\t\t\tconst response = await cache.match(url.pathname);\n\n\t\t\tif (response) {\n\t\t\t\treturn response;\n\t\t\t}\n\t\t}\n\n\t\t// for everything else, try the network first, but\n\t\t// fall back to the cache if we're offline\n\t\ttry {\n\t\t\tconst response = await fetch(event.request);\n\n\t\t\tif (!(response instanceof Response)) {\n\t\t\t\tthrow new Error('invalid response from fetch');\n\t\t\t}\n\n\t\t\tif (response.status === 200) {\n\t\t\t\tcache.put(event.request, response.clone());\n\t\t\t}\n\n\t\t\treturn response;\n\t\t} catch (err) {\n\t\t\tconst response = await cache.match(event.request);\n\n\t\t\tif (response) {\n\t\t\t\treturn response;\n\t\t\t}\n\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tevent.respondWith(respond());\n});\n```\n\n**Gotchas:**\n- Stale data may be worse than no data\n- Browsers empty full caches - avoid caching large assets (videos)\n\n## Development\n\nService worker bundled for production only. Dev requires [module support](https://web.dev/es-modules-in-sw).\n\nManual registration in dev:\n\n```js\nimport { dev } from '$app/environment';\n\nnavigator.serviceWorker.register('/service-worker.js', {\n\ttype: dev ? 'module' : 'classic'\n});\n```\n\n**Note:** `build` and `prerendered` are empty arrays in dev.\n\n## Alternatives\n\n- [Workbox](https://web.dev/learn/pwa/workbox)\n- [Vite PWA plugin](https://vite-pwa-org.netlify.app/frameworks/sveltekit.html)",
    "kit/server-only-modules": "# Server-only modules\n\nSvelteKit prevents accidental import of sensitive server code into client bundles.\n\n## Private environment variables\n\n`$env/static/private` and `$env/dynamic/private` can only be imported in server modules like `hooks.server.js` or `+page.server.js`.\n\n## Server-only utilities\n\n`$app/server` module (contains `read()` for filesystem access) only works on server.\n\n## Your modules\n\nMake modules server-only:\n- Add `.server` to filename: `secrets.server.js`\n- Place in `$lib/server`: `$lib/server/secrets.js`\n\n## How it works\n\n```js\n/// file: $lib/server/secrets.js\nexport const atlantisCoordinates = [/* redacted */];\n```\n\n```js\n/// file: src/routes/utils.js\nexport { atlantisCoordinates } from '$lib/server/secrets.js';\nexport const add = (a, b) => a + b;\n```\n\n```html\n/// file: src/routes/+page.svelte\n<script>\n\timport { add } from './utils.js';\n</script>\n```\n\n**Error:**\n```\nCannot import $lib/server/secrets.ts into code that runs in the browser\n\n src/routes/+page.svelte imports\n  src/routes/utils.js imports\n   $lib/server/secrets.ts\n```\n\nEven if only `add` is used, the entire import chain is unsafe. Works with dynamic imports including interpolated ones.\n\n> **Note:** Disabled when `process.env.TEST === 'true'` (e.g., Vitest).",
    "kit/snapshots": "# Snapshots\n\nPreserve ephemeral DOM state (scroll positions, input values) across navigation.\n\n## Usage\n\nExport `snapshot` object with `capture` and `restore` methods from `+page.svelte` or `+layout.svelte`:\n\n```svelte\n<!--- file: +page.svelte --->\n<script>\n\tlet comment = $state('');\n\n\t/** @type {import('./$types').Snapshot<string>} */\n\texport const snapshot = {\n\t\tcapture: () => comment,\n\t\trestore: (value) => comment = value\n\t};\n</script>\n\n<form method=\"POST\">\n\t<label for=\"comment\">Comment</label>\n\t<textarea id=\"comment\" bind:value={comment} />\n\t<button>Post comment</button>\n</form>\n```\n\n- `capture`: Called before page updates, returns value stored in history stack\n- `restore`: Called when navigating back, receives stored value\n\n## Constraints\n\n- Data must be JSON serializable (persisted to `sessionStorage`)\n- Avoid large objects (retained in memory for session duration)",
    "kit/shallow-routing": "# Shallow Routing\n\nCreate history entries without navigation. Useful for modals that users can dismiss by navigating back.\n\n## Basic Usage\n\n```svelte\n<!--- file: +page.svelte --->\n<script>\n\timport { pushState } from '$app/navigation';\n\timport { page } from '$app/state';\n\timport Modal from './Modal.svelte';\n\n\tfunction showModal() {\n\t\tpushState('', {\n\t\t\tshowModal: true\n\t\t});\n\t}\n</script>\n\n{#if page.state.showModal}\n\t<Modal close={() => history.back()} />\n{/if}\n```\n\nModal dismissed by back navigation or `history.back()` call.\n\n## API\n\n**`pushState(url, state)`**\n- First arg: URL relative to current (use `''` to stay on current URL)\n- Second arg: page state, accessible via `page.state`\n- Type-safe via `App.PageState` interface in `src/app.d.ts`\n\n**`replaceState(url, state)`** - Same as `pushState` but doesn't create new history entry\n\n## Loading Data for Routes\n\nUse `preloadData` to load data for another `+page.svelte` (e.g., modal with photo detail):\n\n```svelte\n<!--- file: src/routes/photos/+page.svelte --->\n<script>\n\timport { preloadData, pushState, goto } from '$app/navigation';\n\timport { page } from '$app/state';\n\timport Modal from './Modal.svelte';\n\timport PhotoPage from './[id]/+page.svelte';\n\n\tlet { data } = $props();\n</script>\n\n{#each data.thumbnails as thumbnail}\n\t<a\n\t\thref=\"/photos/{thumbnail.id}\"\n\t\tonclick={async (e) => {\n\t\t\tif (innerWidth < 640        // bail if the screen is too small\n\t\t\t\t|| e.shiftKey             // or the link is opened in a new window\n\t\t\t\t|| e.metaKey || e.ctrlKey // or a new tab (mac: metaKey, win/linux: ctrlKey)\n\t\t\t\t// should also consider clicking with a mouse scroll wheel\n\t\t\t) return;\n\n\t\t\t// prevent navigation\n\t\t\te.preventDefault();\n\n\t\t\tconst { href } = e.currentTarget;\n\n\t\t\t// run `load` functions (or rather, get the result of the `load` functions\n\t\t\t// that are already running because of `data-sveltekit-preload-data`)\n\t\t\tconst result = await preloadData(href);\n\n\t\t\tif (result.type === 'loaded' && result.status === 200) {\n\t\t\t\tpushState(href, { selected: result.data });\n\t\t\t} else {\n\t\t\t\t// something bad happened! try navigating\n\t\t\t\tgoto(href);\n\t\t\t}\n\t\t}}\n\t>\n\t\t<img alt={thumbnail.alt} src={thumbnail.src} />\n\t</a>\n{/each}\n\n{#if page.state.selected}\n\t<Modal onclose={() => history.back()}>\n\t\t<!-- pass page data to the +page.svelte component,\n\t\t     just like SvelteKit would on navigation -->\n\t\t<PhotoPage data={page.state.selected} />\n\t</Modal>\n{/if}\n```\n\n`preloadData` reuses requests from `data-sveltekit-preload-data`.\n\n## Caveats\n\n- `page.state` is empty object during SSR and on first page load\n- State not applied on page reload/return from another document until navigation\n- Requires JavaScript - provide fallback behavior",
    "kit/observability": "# OpenTelemetry Tracing\n\n**Available since 2.31** - Experimental feature\n\n## Setup\n\nEnable in `svelte.config.js`:\n\n```js\n/// file: svelte.config.js\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\texperimental: {\n\t\t\ttracing: {\n\t\t\t\tserver: true\n\t\t\t},\n\t\t\tinstrumentation: {\n\t\t\t\tserver: true\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport default config;\n```\n\n## What Gets Traced\n\n- `handle` hook and `sequence` functions\n- Server `load` functions (including universal `load` on server)\n- Form actions\n- Remote functions\n\n## Augmenting Spans\n\nAccess `root` and `current` spans via request event:\n\n```js\n/// file: $lib/authenticate.ts\nimport { getRequestEvent } from '$app/server';\nimport { getAuthenticatedUser } from '$lib/auth-core';\n\nasync function authenticate() {\n\tconst user = await getAuthenticatedUser();\n\tconst event = getRequestEvent();\n\tevent.tracing.root.setAttribute('userId', user.id);\n}\n```\n\n## Dev Quickstart (Jaeger)\n\nInstall dependencies:\n```sh\nnpm i @opentelemetry/sdk-node @opentelemetry/auto-instrumentations-node @opentelemetry/exporter-trace-otlp-proto import-in-the-middle\n```\n\nCreate `src/instrumentation.server.js`:\n\n```js\n/// file: src/instrumentation.server.js\nimport { NodeSDK } from '@opentelemetry/sdk-node';\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-proto';\nimport { createAddHookMessageChannel } from 'import-in-the-middle';\nimport { register } from 'node:module';\n\nconst { registerOptions } = createAddHookMessageChannel();\nregister('import-in-the-middle/hook.mjs', import.meta.url, registerOptions);\n\nconst sdk = new NodeSDK({\n\tserviceName: 'test-sveltekit-tracing',\n\ttraceExporter: new OTLPTraceExporter(),\n\tinstrumentations: [getNodeAutoInstrumentations()]\n});\n\nsdk.start();\n```\n\nView traces at [localhost:16686](http://localhost:16686).\n\n## Notes\n\n- `src/instrumentation.server.ts` runs before app code (platform/adapter dependent)\n- `@opentelemetry/api` is optional peer dependency - install if needed\n- Tracing has performance overhead - consider dev/preview only",
    "kit/packaging": "# Packaging Svelte Libraries\n\nUse `@sveltejs/package` to build component libraries. Structure is same as SvelteKit apps, but `src/lib` is public-facing (published), `src/routes` is for docs/demos.\n\n## Building\n\n`svelte-package` command generates `dist` directory containing:\n- All files from `src/lib` (Svelte preprocessed, TS transpiled to JS)\n- Type definitions (`d.ts`) generated for Svelte/JS/TS files (requires `typescript >= 4.0.0`)\n\n## package.json Configuration\n\n### name\n```json\n{\n\t\"name\": \"your-library\"\n}\n```\n\n### license\n```json\n{\n\t\"license\": \"MIT\"\n}\n```\nInclude `LICENSE` file.\n\n### files\n```json\n{\n\t\"files\": [\"dist\"]\n}\n```\nSpecifies what npm publishes. Use `.npmignore` to exclude unnecessary files.\n\n### exports\n```json\n{\n\t\"exports\": {\n\t\t\".\": {\n\t\t\t\"types\": \"./dist/index.d.ts\",\n\t\t\t\"svelte\": \"./dist/index.js\"\n\t\t}\n\t}\n}\n```\n\n- `types`: TypeScript type definitions\n- `svelte`: For Svelte-aware tooling (use `default` for non-Svelte libraries)\n\nMultiple entry points:\n```json\n{\n\t\"exports\": {\n\t\t\"./Foo.svelte\": {\n\t\t\t\"types\": \"./dist/Foo.svelte.d.ts\",\n\t\t\t\"svelte\": \"./dist/Foo.svelte\"\n\t\t}\n\t}\n}\n```\n\n### svelte\n```json\n{\n\t\"svelte\": \"./dist/index.js\"\n}\n```\nLegacy field for backwards compatibility.\n\n### sideEffects\n```json\n{\n\t\"sideEffects\": [\"**/*.css\"]\n}\n```\nHelps bundlers tree-shake. Mark CSS files as side effects for webpack compatibility. Add other side-effectful files as needed:\n```json\n{\n    \"sideEffects\": [\n    \t\"**/*.css\",\n    \t\"./dist/sideEffectfulFile.js\"\n    ]\n}\n```\n\n## TypeScript\n\nType definitions auto-generated by default. Ensure `types` condition in `exports` points to correct files.\n\n**For non-root exports** (e.g., `your-library/foo`), TypeScript won't resolve `types` condition by default. Two solutions:\n\n1. **Recommended**: Users set `\"moduleResolution\": \"bundler\"` (TS 5+), `\"node16\"`, or `\"nodenext\"` in `tsconfig.json`\n\n2. **Use `typesVersions`**:\n```json\n{\n\t\"exports\": {\n\t\t\"./foo\": {\n\t\t\t\"types\": \"./dist/foo.d.ts\",\n\t\t\t\"svelte\": \"./dist/foo.js\"\n\t\t}\n\t},\n\t\"typesVersions\": {\n\t\t\">4.0\": {\n\t\t\t\"foo\": [\"./dist/foo.d.ts\"]\n\t\t}\n\t}\n}\n```\n\n## Best Practices\n\n- Avoid SvelteKit-specific modules (`$app/*`) unless targeting only SvelteKit projects. Use `esm-env` instead\n- Add aliases via `svelte.config.js` (not `vite.config.js` or `tsconfig.json`)\n- Version carefully:\n  - Removing `exports` paths = breaking change\n  - Changing export conditions (e.g., `svelte` to `default`) = breaking change\n  - Adding new exports = OK\n\n## Source Maps\n\nEnable declaration maps in `tsconfig.json`:\n```json\n{\n\t\"declarationMap\": true\n}\n```\n\nPublish source files alongside dist:\n```json\n{\n\t\"files\": [\n\t\t\"dist\",\n\t\t\"!dist/**/*.test.*\",\n\t\t\"!dist/**/*.spec.*\",\n\t\t\"src/lib\",\n\t\t\"!src/lib/**/*.test.*\",\n\t\t\"!src/lib/**/*.spec.*\"\n\t]\n}\n```\n\n## Options\n\n- `-w`/`--watch` — rebuild on changes\n- `-i`/`--input` — input directory (default: `src/lib`)\n- `-o`/`--output` — output directory (default: `dist`)\n- `-p`/`--preserve-output` — don't empty output first (default: `false`)\n- `-t`/`--types` — generate type definitions (default: `true`)\n- `--tsconfig` — path to tsconfig/jsconfig\n\n## Publishing\n\n```sh\nnpm publish\n```\n\n## Caveats\n\n- **Fully specify relative imports** with extensions:\n```js\nimport { something } from './something/index.js';\n```\n\n- **TypeScript**: Import `.ts` files using `.js` extension. Set `\"moduleResolution\": \"NodeNext\"` in config\n- All files copied as-is except Svelte (preprocessed) and TS (transpiled)",
    "kit/auth": "# Auth\n\nAuthentication (verifying user identity) and authorization (determining allowed actions).\n\n## Sessions vs Tokens\n\n**Session IDs:**\n- Stored in database\n- Can be immediately revoked\n- Requires DB query per request\n\n**JWT:**\n- Not checked against datastore\n- Cannot be immediately revoked\n- Better latency, reduced DB load\n\n## Integration Points\n\nCheck auth [cookies](@sveltejs-kit#Cookies) in [server hooks](hooks#Server-hooks). Store user info in [`locals`](hooks#Server-hooks-locals).\n\n## Guides\n\n[Lucia](https://lucia-auth.com/) provides session-based auth examples for SvelteKit.\n\nAdd to project:\n- New project: `npx sv create`\n- Existing: `npx sv add lucia`",
    "kit/performance": "# Performance\n\n## Built-in Optimizations\n\nSvelteKit automatically provides:\n- Code-splitting\n- Asset preloading\n- File hashing for caching\n- Request coalescing (groups server `load` fetches into one HTTP request)\n- Parallel loading (universal `load` functions fetch simultaneously)\n- Data inlining (server `fetch` replays in browser without new request)\n- Conservative invalidation (only re-runs `load` when needed)\n- Prerendering\n- Link preloading\n\n## Diagnosing Issues\n\n**Tools:**\n- [PageSpeed Insights](https://pagespeed.web.dev/)\n- [WebPageTest](https://www.webpagetest.org/)\n- Browser devtools: Lighthouse, Network, Performance tabs\n\n**Important:** Test in preview mode after building, not dev mode.\n\n**Instrumenting:** Use [OpenTelemetry](https://opentelemetry.io/) or [Server-Timing headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Server-Timing) to debug slow API calls.\n\n## Optimizing Assets\n\n### Images\nUse `@sveltejs/enhanced-img` package (see [images](images) page).\n\n### Videos\n- Compress with [Handbrake](https://handbrake.fr/), convert to `.webm`/`.mp4`\n- Lazy-load with `preload=\"none\"` for below-fold videos\n- Strip audio from muted videos with [FFmpeg](https://ffmpeg.org/)\n\n### Fonts\nSvelteKit doesn't preload fonts by default. Preload in `handle` hook:\n\n```js\nexport async function handle({ event, resolve }) {\n  return resolve(event, {\n    preload: ({ type }) => type === 'font'\n  });\n}\n```\n\n[Subset fonts](https://web.dev/learn/performance/optimize-web-fonts#subset_your_web_fonts) to reduce size.\n\n## Reducing Code Size\n\n### Svelte Version\nUse latest (Svelte 5 < Svelte 4 < Svelte 3 in size/speed).\n\n### Packages\n- Use [`rollup-plugin-visualizer`](https://www.npmjs.com/package/rollup-plugin-visualizer)\n- Inspect build output (set `build: { minify: false }` in Vite config temporarily)\n\n### External Scripts\n- Minimize third-party scripts\n- Use server-side analytics (Cloudflare, Netlify, Vercel)\n- Run scripts in web worker with [Partytown](https://partytown.builder.io/sveltekit)\n\n### Selective Loading\nUse dynamic `import(...)` for conditional code instead of static imports.\n\n## Navigation\n\n### Preloading\nConfigure [link options](link-options) for eager preloading (default on `<body>`).\n\n### Non-essential Data\nReturn promises in `load` for slow data to [stream](load#Streaming-with-promises) after navigation:\n\n```js\nexport async function load() {\n  return {\n    critical: await getCriticalData(),\n    lazy: getLazyData() // promise streams in later\n  };\n}\n```\n\n### Preventing Waterfalls\n\n**Waterfalls** = sequential requests that kill performance.\n\n**Browser waterfalls:**\n- SvelteKit adds `modulepreload` tags automatically\n- Check devtools network tab for missing preloads\n- Manually handle [web fonts](#Optimizing-assets-Fonts)\n- Avoid [SPA mode](single-page-apps) (empty page → JS → render = extra round trips)\n\n**Backend waterfalls:**\n- Use [server `load` functions](load#Universal-vs-server) to make backend calls from server, not browser\n- Use database joins instead of sequential queries\n\n## Hosting\n\n- Colocate frontend with backend\n- Use edge deployment (many adapters support this)\n- Configure [per-route deployment](page-options#config)\n- Use CDN for images\n- Ensure HTTP/2+ for parallel file loading\n\n## Further Reading\n\n[Core Web Vitals](https://web.dev/explore/learn-core-web-vitals)",
    "kit/icons": "# CSS & Svelte Icons\n\n## CSS Icons\nUse [Iconify](https://icon-sets.iconify.design/) for CSS-based icons. Supports [Tailwind](https://iconify.design/docs/usage/css/tailwind/) and [UnoCSS](https://iconify.design/docs/usage/css/unocss/) plugins. No imports needed in `.svelte` files.\n\n## Svelte Icon Libraries\n**Avoid** libraries with one `.svelte` file per icon (thousands of files slow Vite's dependency optimization). Especially problematic with mixed umbrella + subpath imports. See [vite-plugin-svelte FAQ](https://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/faq.md#what-is-going-on-with-vite-and-pre-bundling-dependencies).",
    "kit/images": "# Svelte Images\n\n## Vite Built-in Handling\n\nVite auto-processes imported assets, adding hashes for caching and inlining small assets.\n\n```svelte\n<script>\n\timport logo from '$lib/assets/logo.png';\n</script>\n\n<img alt=\"The project logo\" src={logo} />\n```\n\n## @sveltejs/enhanced-img\n\nPlugin for automatic image optimization: generates `avif`/`webp`, sets `width`/`height`, creates multiple sizes, strips EXIF.\n\n**Note:** Only optimizes files available at build time, not dynamic/CMS images.\n\n### Setup\n\n```sh\nnpm i -D @sveltejs/enhanced-img\n```\n\n```js\nimport { sveltekit } from '@sveltejs/kit/vite';\nimport { enhancedImages } from '@sveltejs/enhanced-img';\nimport { defineConfig } from 'vite';\n\nexport default defineConfig({\n\tplugins: [\n\t\tenhancedImages(), // must come before SvelteKit\n\t\tsveltekit()\n\t]\n});\n```\n\nOutput cached in `./node_modules/.cache/imagetools`.\n\n### Basic Usage\n\n```svelte\n<enhanced:img src=\"./path/to/your/image.jpg\" alt=\"An alt text\" />\n```\n\nGenerates `<picture>` with multiple formats/sizes. Provide 2x resolution images for HiDPI displays.\n\n**CSS selector:** Use `enhanced\\:img` to escape colon.\n\n### Dynamic Images\n\n```svelte\n<script>\n\timport MyImage from './path/to/your/image.jpg?enhanced';\n</script>\n\n<enhanced:img src={MyImage} alt=\"some alt text\" />\n```\n\nWith `import.meta.glob`:\n\n```svelte\n<script>\n\tconst imageModules = import.meta.glob(\n\t\t'/path/to/assets/*.{avif,gif,heif,jpeg,jpg,png,tiff,webp,svg}',\n\t\t{\n\t\t\teager: true,\n\t\t\tquery: {\n\t\t\t\tenhanced: true\n\t\t\t}\n\t\t}\n\t)\n</script>\n\n{#each Object.entries(imageModules) as [_path, module]}\n\t<enhanced:img src={module.default} alt=\"some alt text\" />\n{/each}\n```\n\n### Dimensions\n\n`width`/`height` auto-inferred. Override with CSS:\n\n```svelte\n<style>\n\t.hero-image img {\n\t\twidth: var(--size);\n\t\theight: auto;\n\t}\n</style>\n```\n\n### srcset and sizes\n\nFor large images, specify `sizes` to serve smaller versions on smaller devices:\n\n```svelte\n<enhanced:img src=\"./image.png\" sizes=\"min(1280px, 100vw)\"/>\n```\n\nCustom widths with `w` parameter:\n\n```svelte\n<enhanced:img\n  src=\"./image.png?w=1280;640;400\"\n  sizes=\"(min-width:1920px) 1280px, (min-width:1080px) 640px, (min-width:768px) 400px\"\n/>\n```\n\nWithout `sizes`: generates 2x and 1x resolution images.\n\n### Per-image Transforms\n\nApply transforms via query string:\n\n```svelte\n<enhanced:img src=\"./path/to/your/image.jpg?blur=15\" alt=\"An alt text\" />\n```\n\n[Full directive list](https://github.com/JonasKruckenberg/imagetools/blob/main/docs/directives.md).\n\n## Dynamic CDN Images\n\nFor CMS/external images, use CDNs for dynamic optimization.\n\n**Libraries:**\n- [`@unpic/svelte`](https://unpic.pics/img/svelte/) - CDN-agnostic\n- [Cloudinary](https://svelte.cloudinary.dev/)\n- CMS-specific: Contentful, Storyblok, Contentstack\n\n## Best Practices\n\n- **Mix solutions:** Vite for `<meta>` tags, `enhanced-img` for static content, CDN for user content\n- **Use CDN** for all images to reduce latency\n- **2x resolution:** Provide images at 2x display width for HiDPI\n- **Specify `sizes`** for large images (>400px) to serve smaller versions on mobile\n- **LCP images:** Set `fetchpriority=\"high\"`, avoid `loading=\"lazy\"`\n- **Prevent layout shift:** `width`/`height` reserve space (auto-added by `enhanced-img`)\n- **Always provide `alt`** text (compiler warns if missing)\n- **Don't modify `em`/`rem`** in `sizes` or change default font-size (e.g., avoid `html { font-size: 62.5%; }`)",
    "kit/accessibility": "# Accessibility\n\nSvelteKit provides accessible defaults. Svelte's compile-time accessibility checks apply automatically.\n\n## Route Announcements\n\n**Problem**: Client-side routing doesn't reload pages, so screen readers don't announce navigation.\n\n**Solution**: SvelteKit injects a live region that announces the `<title>` after each navigation.\n\n**Required**: Every page needs a unique, descriptive title:\n\n```svelte\n<!--- file: src/routes/+page.svelte --->\n<svelte:head>\n\t<title>Todo List</title>\n</svelte:head>\n```\n\n## Focus Management\n\n**Default behavior**: SvelteKit focuses `<body>` after navigation and enhanced form submissions (simulating traditional page reloads).\n\n**Exception**: Elements with `autofocus` attribute are focused instead. Use carefully.\n\n**Custom focus**: Use `afterNavigate` hook:\n\n```js\nimport { afterNavigate } from '$app/navigation';\n\nafterNavigate(() => {\n\t/** @type {HTMLElement | null} */\n\tconst to_focus = document.querySelector('.focus-me');\n\tto_focus?.focus();\n});\n```\n\n**`goto` function**: Accepts `keepFocus` option to preserve current focus. Ensure the focused element still exists after navigation.\n\n## Lang Attribute\n\n**Default**: English. Update `src/app.html` for other languages:\n\n```html\n/// file: src/app.html\n<html lang=\"de\">\n```\n\n**Multiple languages**: Use `handle` hook with placeholder:\n\n```html\n/// file: src/app.html\n<html lang=\"%lang%\">\n```\n\n```js\n/// file: src/hooks.server.js\n/** @type {import('@sveltejs/kit').Handle} */\nexport function handle({ event, resolve }) {\n\treturn resolve(event, {\n\t\ttransformPageChunk: ({ html }) => html.replace('%lang%', get_lang(event))\n\t});\n}\n```\n\n## Resources\n\n- [MDN Web Docs: Accessibility](https://developer.mozilla.org/en-US/docs/Learn/Accessibility)\n- [The A11y Project](https://www.a11yproject.com/)\n- [WCAG Quick Reference](https://www.w3.org/WAI/WCAG21/quickref/)",
    "kit/seo": "# SEO\n\n## Out of the box\n\n### SSR\nSearch engines index SSR content more reliably. SvelteKit uses SSR by default—keep it enabled unless necessary.\n\n### Performance\n[Core Web Vitals](https://web.dev/vitals/#core-web-vitals) impact rankings. Use [hybrid rendering](glossary#Hybrid-app) and [optimize images](images). Test with [PageSpeed Insights](https://pagespeed.web.dev/) or [Lighthouse](https://developers.google.com/web/tools/lighthouse).\n\n### Normalized URLs\nSvelteKit redirects trailing slashes based on [`trailingSlash`](page-options#trailingSlash) config to avoid duplicate URLs.\n\n## Manual setup\n\n### &lt;title&gt; and &lt;meta&gt;\nEvery page needs unique `<title>` and `<meta name=\"description\">` in [`<svelte:head>`](../svelte/svelte-head). See [Lighthouse SEO audits](https://web.dev/lighthouse-seo/).\n\n**Pattern:** Return SEO data from [`load`](load), use as [`page.data`]($app-state) in root [layout](routing#layout)'s `<svelte:head>`.\n\n### Sitemaps\nCreate dynamic sitemaps via endpoints:\n\n```js\n/// file: src/routes/sitemap.xml/+server.js\nexport async function GET() {\n\treturn new Response(\n\t\t`\n\t\t<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t\t<urlset\n\t\t\txmlns=\"https://www.sitemaps.org/schemas/sitemap/0.9\"\n\t\t\txmlns:xhtml=\"https://www.w3.org/1999/xhtml\"\n\t\t\txmlns:mobile=\"https://www.google.com/schemas/sitemap-mobile/1.0\"\n\t\t\txmlns:news=\"https://www.google.com/schemas/sitemap-news/0.9\"\n\t\t\txmlns:image=\"https://www.google.com/schemas/sitemap-image/1.1\"\n\t\t\txmlns:video=\"https://www.google.com/schemas/sitemap-video/1.1\"\n\t\t>\n\t\t\t<!-- <url> elements go here -->\n\t\t</urlset>`.trim(),\n\t\t{\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/xml'\n\t\t\t}\n\t\t}\n\t);\n}\n```\n\n### AMP\nFor [AMP](https://amp.dev/) sites:\n\n1. Set [`inlineStyleThreshold`](configuration#inlineStyleThreshold):\n```js\n/// file: svelte.config.js\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tinlineStyleThreshold: Infinity\n\t}\n};\n\nexport default config;\n```\n\n2. Disable CSR:\n```js\n/// file: src/routes/+layout.server.js\nexport const csr = false;\n```\n\n3. Add `amp` to `app.html`:\n```html\n<html amp>\n```\n\n4. Transform HTML with `@sveltejs/amp`:\n```js\n/// file: src/hooks.server.js\nimport * as amp from '@sveltejs/amp';\n\n/** @type {import('@sveltejs/kit').Handle} */\nexport async function handle({ event, resolve }) {\n\tlet buffer = '';\n\treturn await resolve(event, {\n\t\ttransformPageChunk: ({ html, done }) => {\n\t\t\tbuffer += html;\n\t\t\tif (done) return amp.transform(buffer);\n\t\t}\n\t});\n}\n```\n\n5. Optional: Remove unused CSS with [`dropcss`](https://www.npmjs.com/package/dropcss):\n```js\n/// file: src/hooks.server.js\n// @errors: 2307\nimport * as amp from '@sveltejs/amp';\nimport dropcss from 'dropcss';\n\n/** @type {import('@sveltejs/kit').Handle} */\nexport async function handle({ event, resolve }) {\n\tlet buffer = '';\n\n\treturn await resolve(event, {\n\t\ttransformPageChunk: ({ html, done }) => {\n\t\t\tbuffer += html;\n\n\t\t\tif (done) {\n\t\t\t\tlet css = '';\n\t\t\t\tconst markup = amp\n\t\t\t\t\t.transform(buffer)\n\t\t\t\t\t.replace('⚡', 'amp') // dropcss can't handle this character\n\t\t\t\t\t.replace(/<style amp-custom([^>]*?)>([^]+?)<\\/style>/, (match, attributes, contents) => {\n\t\t\t\t\t\tcss = contents;\n\t\t\t\t\t\treturn `<style amp-custom${attributes}></style>`;\n\t\t\t\t\t});\n\n\t\t\t\tcss = dropcss({ css, html: markup }).css;\n\t\t\t\treturn markup.replace('</style>', `${css}</style>`);\n\t\t\t}\n\t\t}\n\t});\n}\n```\n\n> **Note:** Validate with `amphtml-validator` in `handle` hook only during prerendering (it's slow).",
    "kit/faq": "# SvelteKit FAQ\n\n## Resources\n\nSee [Svelte FAQ](../svelte/faq) and [`vite-plugin-svelte` FAQ](https://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/faq.md).\n\n## Project Types\n\nSee [project types documentation](project-types).\n\n## Include package.json Data\n\n```ts\n/// file: svelte.config.js\nimport pkg from './package.json' with { type: 'json' };\n```\n\n## Package Import Issues\n\nCheck library packaging at [publint.dev](https://publint.dev/).\n\n**Key packaging requirements:**\n- `exports` takes precedence over `main`/`module` (prevents deep imports)\n- ESM files: `.mjs` or use `\"type\": \"module\"` (then CJS needs `.cjs`)\n- `main` should be CJS or ESM if no `exports`\n- Svelte components: distribute as uncompiled `.svelte` files with ESM JS only. Preprocess TypeScript/SCSS to vanilla JS/CSS. Use [`svelte-package`](./packaging)\n\nESM versions work best. CJS dependencies are pre-bundled by [`vite-plugin-svelte`](https://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/faq.md#what-is-going-on-with-vite-and-pre-bundling-dependencies) via esbuild.\n\nSearch [Vite issues](https://github.com/vitejs/vite/issues) if problems persist. Try [`optimizeDeps`](https://vitejs.dev/config/#dep-optimization-options) or [`ssr`](https://vitejs.dev/config/#ssr-options) config as temporary workarounds.\n\n## View Transitions API\n\nUse `document.startViewTransition` in [`onNavigate`]($app-navigation#onNavigate):\n\n```js\nimport { onNavigate } from '$app/navigation';\n\nonNavigate((navigation) => {\n\tif (!document.startViewTransition) return;\n\n\treturn new Promise((resolve) => {\n\t\tdocument.startViewTransition(async () => {\n\t\t\tresolve();\n\t\t\tawait navigation.complete;\n\t\t});\n\t});\n});\n```\n\nSee [\"Unlocking view transitions\"](/blog/view-transitions).\n\n## Database Setup\n\nQuery databases in [server routes](./routing#server), not `.svelte` files. Create `db.js` for connection singleton. Run setup in `hooks.server.js`. Use [Svelte CLI](/docs/cli/overview) for automatic setup.\n\n## Client-Side Libraries (document/window)\n\n**Browser check:**\n```js\nimport { browser } from '$app/environment';\n\nif (browser) {\n\t// client-only code\n}\n```\n\n**onMount:**\n```js\nimport { onMount } from 'svelte';\n\nonMount(async () => {\n\tconst { method } = await import('some-browser-only-library');\n\tmethod('hello world');\n});\n```\n\n**Static import (side-effect free):**\n```js\nimport { onMount } from 'svelte';\nimport { method } from 'some-browser-only-library';\n\nonMount(() => {\n\tmethod('hello world');\n});\n```\n\n**Await block:**\n```svelte\n<script>\n\timport { browser } from '$app/environment';\n\n\tconst ComponentConstructor = browser ?\n\t\timport('some-browser-only-library').then((module) => module.Component) :\n\t\tnew Promise(() => {});\n</script>\n\n{#await ComponentConstructor}\n\t<p>Loading...</p>\n{:then component}\n\t<svelte:component this={component} />\n{:catch error}\n\t<p>Something went wrong: {error.message}</p>\n{/await}\n```\n\n## External API Server\n\nUse [`event.fetch`](./load#Making-fetch-requests) (handle CORS) or setup proxy to rewrite paths like `/api`. \n\n**Dev:** Use Vite's [`server.proxy`](https://vitejs.dev/config/server-options.html#server-proxy).\n\n**Production:** Platform-specific rewrites or create API route:\n\n```js\n/// file: src/routes/api/[...path]/+server.js\n/** @type {import('./$types').RequestHandler} */\nexport function GET({ params, url }) {\n\treturn fetch(`https://example.com/${params.path + url.search}`);\n}\n```\n\nMay need to proxy POST/PATCH and forward `request.headers`. See [`handleFetch`](./hooks#Server-hooks-handleFetch).\n\n## Middleware\n\n**Production:** `adapter-node` builds middleware for custom servers.\n\n**Dev:** Use Vite plugin:\n\n```js\nimport { sveltekit } from '@sveltejs/kit/vite';\n\n/** @type {import('vite').Plugin} */\nconst myPlugin = {\n\tname: 'log-request-middleware',\n\tconfigureServer(server) {\n\t\tserver.middlewares.use((req, res, next) => {\n\t\t\tconsole.log(`Got request ${req.url}`);\n\t\t\tnext();\n\t\t});\n\t}\n};\n\n/** @type {import('vite').UserConfig} */\nconst config = {\n\tplugins: [myPlugin, sveltekit()]\n};\n\nexport default config;\n```\n\nSee [Vite's `configureServer` docs](https://vitejs.dev/guide/api-plugin.html#configureserver).\n\n## Yarn\n\n**Yarn 2:** Plug'n'Play broken (incompatible with ESM). Disable with `nodeLinker: 'node-modules'` in `.yarnrc.yml` or use npm/pnpm.\n\n**Yarn 3:** ESM support [experimental](https://github.com/yarnpkg/berry/pull/2161). Add to `.yarnrc.yml`:\n\n```yaml\nnodeLinker: node-modules\n```\n\nSetup:\n```sh\nyarn create svelte myapp\ncd myapp\nyarn set version berry\nyarn install\n```",
    "kit/integrations": "# Integrations\n\n## `vitePreprocess`\n\nEnables Vite-supported CSS flavors: PostCSS, SCSS, Less, Stylus, SugarSS. Included by default in TypeScript projects.\n\n```js\n// svelte.config.js\nimport { vitePreprocess } from '@sveltejs/vite-plugin-svelte';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n  preprocess: [vitePreprocess()]\n};\n\nexport default config;\n```\n\n**TypeScript:** Svelte 5 supports type syntax natively. For complex TS syntax, use `vitePreprocess({ script: true })`. Svelte 4 requires preprocessor for all TS.\n\n## Add-ons\n\n`npx sv add` - Quick setup for:\n- prettier, eslint, vitest, playwright\n- lucia (auth), tailwind, drizzle (DB)\n- paraglide (i18n), mdsvex (markdown), storybook\n\n## Packages\n\nSee [packages page](/packages) and [sveltesociety.dev](https://sveltesociety.dev/) for libraries/templates.\n\n## `svelte-preprocess`\n\nAlternative to `vitePreprocess` with Pug, Babel, global styles support. Slower, needs more config. CoffeeScript not supported.\n\nInstall: `npm i -D svelte-preprocess` + add to `svelte.config.js` + install language library (e.g., `npm i -D sass`).\n\n## Vite Plugins\n\nUse any Vite plugin. See [`vitejs/awesome-vite`](https://github.com/vitejs/awesome-vite?tab=readme-ov-file#plugins).",
    "kit/debugging": "# Debugging\n\nUse [`@debug`](../svelte/@debug) tag or breakpoints in dev tools/IDEs to debug Svelte/SvelteKit (frontend & backend).\n\nAssumes Node.js runtime.\n\n## Visual Studio Code\n\n### Built-in Debug Terminal\n\n1. `CMD/Ctrl` + `Shift` + `P` → \"Debug: JavaScript Debug Terminal\"\n2. Run project: `npm run dev`\n3. Set breakpoints in source files\n4. Trigger breakpoints\n\n### Launch via Debug Pane\n\nCreate `.vscode/launch.json`:\n\n```json\n{\n\t\"version\": \"0.2.0\",\n\t\"configurations\": [\n\t\t{\n\t\t\t\"command\": \"npm run dev\",\n\t\t\t\"name\": \"Run development server\",\n\t\t\t\"request\": \"launch\",\n\t\t\t\"type\": \"node-terminal\"\n\t\t}\n\t]\n}\n\n```\n\nOr auto-generate: \"Run and Debug\" pane → \"Node.js...\" → select run script → `F5`\n\nDocs: <https://code.visualstudio.com/docs/editor/debugging>\n\n## Other Editors\n\n- [WebStorm](https://www.jetbrains.com/help/webstorm/svelte.html#ws_svelte_debug)\n- [Neovim](https://theosteiner.de/debugging-javascript-frameworks-in-neovim)\n\n## Chrome/Edge DevTools\n\n**Client-side only** (source maps):\n\n1. `NODE_OPTIONS=\"--inspect\" npm run dev`\n2. Open site (e.g., `localhost:5173`)\n3. DevTools → click Node.js icon (top-left)\n4. Set breakpoints\n\nOr navigate to `chrome://inspect` / `edge://inspect`\n\n## References\n\n- [Node.js Debugging](https://nodejs.org/en/learn/getting-started/debugging)",
    "kit/migrating-to-sveltekit-2": "# SvelteKit v2 Migration Guide\n\nUse `npx sv migrate sveltekit-2` to auto-migrate. Upgrade to latest 1.x first, then [Svelte 4](../svelte/v4-migration-guide).\n\n## `redirect` and `error` no longer thrown\n\nDon't `throw` these anymore — just call them:\n\n```js\nimport { error } from '@sveltejs/kit'\n\n// Before\nthrow error(500, 'something went wrong');\n// After\nerror(500, 'something went wrong');\n```\n\nInside `try` blocks, use [`isHttpError`](@sveltejs-kit#isHttpError) and [`isRedirect`](@sveltejs-kit#isRedirect) to distinguish from unexpected errors.\n\n## `path` required for cookies\n\nMust specify `path` when setting/deleting cookies. Usually `path: '/'`:\n\n```js\nexport function load({ cookies }) {\n\tcookies.set(name, value, { path: '/' });\n\treturn { response }\n}\n```\n\n## Top-level promises not auto-awaited\n\nManually `await` promises (use `Promise.all` to avoid waterfalls):\n\n```js\n// Single promise\nexport async function load({ fetch }) {\n\tconst response = await fetch(url).then(r => r.json());\n\treturn { response }\n}\n\n// Multiple promises\nexport async function load({ fetch }) {\n\tconst [a, b] = await Promise.all([\n\t  fetch(url1).then(r => r.json()),\n\t  fetch(url2).then(r => r.json()),\n\t]);\n\treturn { a, b };\n}\n```\n\n## `goto()` changes\n\n- No external URLs (use `window.location.href`)\n- `state` object sets `$page.state` and must match `App.PageState` interface\n\n## Paths relative by default\n\n[`paths.relative`](configuration#paths) defaults to `true`. All paths (including `%sveltekit.assets%`, `base`, `assets`) are consistently relative or absolute.\n\n## `preloadCode` requires `base` prefix\n\nBoth [`preloadCode`]($app-navigation#preloadCode) and [`preloadData`]($app-navigation#preloadData) need `base` prefix. `preloadCode` now takes single argument.\n\n## `resolvePath` → `resolveRoute`\n\n```js\n// Before\nimport { resolvePath } from '@sveltejs/kit';\nimport { base } from '$app/paths';\nconst path = base + resolvePath('/blog/[slug]', { slug });\n\n// After\nimport { resolveRoute } from '$app/paths';\nconst path = resolveRoute('/blog/[slug]', { slug });\n```\n\n## Improved error handling\n\n`handleError` now receives `status` and `message` properties. Errors from your code have `status: 500` and `message: \"Internal Error\"`.\n\n## No dynamic env vars during prerendering\n\nUse `$env/static/public` and `$env/static/private` during prerendering. `$env/dynamic/public` fetched from `/_app/env.js` on client.\n\n## `use:enhance` callback changes\n\n`form` and `data` removed. Use `formElement` and `formData`.\n\n## File inputs require `multipart/form-data`\n\nForms with `<input type=\"file\">` must have `enctype=\"multipart/form-data\"` or SvelteKit throws error.\n\n## Stricter `tsconfig.json`\n\nDon't use `paths` or `baseUrl` in `tsconfig.json`. Use [`alias` config](configuration#alias) in `svelte.config.js` instead.\n\n## `getRequest` error handling\n\nErrors for exceeding `Content-Length` thrown when reading body, not when calling `getRequest`.\n\n## `vitePreprocess` import\n\nImport from `@sveltejs/vite-plugin-svelte`, not `@sveltejs/kit/vite`.\n\n## Dependency requirements\n\n- Node `18.13+`\n- `svelte@4`\n- `vite@5`\n- `typescript@5`\n- `@sveltejs/vite-plugin-svelte@3` (peer dependency)\n- Adapter updates (see docs)\n\nGenerated `tsconfig.json` uses `\"moduleResolution\": \"bundler\"` and `verbatimModuleSyntax`.\n\n## SvelteKit 2.12: `$app/stores` deprecated\n\nUse `$app/state` (Svelte 5 runes-based). Fine-grained reactivity (e.g., `page.state` updates don't invalidate `page.data`).\n\n```svelte\n<script>\n\t// Before\n\timport { page } from '$app/stores';\n\t// After\n\timport { page } from '$app/state';\n</script>\n\n<!-- Before -->\n{$page.data}\n<!-- After -->\n{page.data}\n```\n\nUse `npx sv migrate app-state` to auto-migrate `.svelte` files.",
    "kit/migrating": "# Migrating from Sapper to SvelteKit\n\n## package.json\n\n### type: \"module\"\nAdd `\"type\": \"module\"` to `package.json`.\n\n### dependencies\nRemove `polka`, `express`, and middleware like `sirv` or `compression`.\n\n### devDependencies\nReplace `sapper` with `@sveltejs/kit` and an [adapter](adapters).\n\n### scripts\n- `sapper build` → `vite build` (with Node adapter)\n- `sapper export` → `vite build` (with static adapter)\n- `sapper dev` → `vite dev`\n- `node __sapper__/build` → `node build`\n\n## Project files\n\n### Configuration\nReplace `webpack.config.js`/`rollup.config.js` with `svelte.config.js`. Move preprocessor options to `config.preprocess`. Add an [adapter](adapters).\n\nFor non-Vite filetypes, add Vite equivalents to [Vite config](project-structure#Project-files-vite.config.js).\n\n### src/client.js\nNo equivalent. Move custom logic to `+layout.svelte` in `onMount`.\n\n### src/server.js\nUse [custom server](adapter-node#Custom-server) with `adapter-node`, otherwise no equivalent.\n\n### src/service-worker.js\nImport changes from `@sapper/service-worker` to [`$service-worker`]($service-worker):\n- `files` unchanged\n- `routes` removed\n- `shell` → `build`\n- `timestamp` → `version`\n\n### src/template.html\nRename to `src/app.html`.\n\nRemove `%sapper.base%`, `%sapper.scripts%`, `%sapper.styles%`.\n- `%sapper.head%` → `%sveltekit.head%`\n- `%sapper.html%` → `%sveltekit.body%`\n- Remove `<div id=\"sapper\">`\n\n### src/node_modules\nUse [`src/lib`]($lib) instead.\n\n## Pages and layouts\n\n### Renamed files\nRoutes use folder names. Comparison:\n\n| Old                       | New                       |\n| ------------------------- | ------------------------- |\n| routes/about/index.svelte | routes/about/+page.svelte |\n| routes/about.svelte       | routes/about/+page.svelte |\n\n- `_error.svelte` → `+error.svelte`\n- `_layout.svelte` → `+layout.svelte`\n\n### Imports\nFrom `@sapper/app`:\n- `goto`, `prefetch`, `prefetchRoutes` → `goto`, `preloadData`, `preloadCode` from [`$app/navigation`]($app-navigation)\n- `stores` → see Stores section\n\nReplace `src/node_modules` imports with [`$lib`]($lib).\n\n### Preload\n`preload` → [`load`](load), lives in `+page.js`/`+layout.js`.\n\nAPI changes:\n- Single `event` argument (not `page` and `session`)\n- No `this` object\n- `this.fetch` → `fetch` from input\n- `this.error`/`this.redirect` → throw [`error`](load#Errors)/[`redirect`](load#Redirects)\n\n### Stores\nOld:\n```js\n// @filename: ambient.d.ts\ndeclare module '@sapper/app';\n\n// @filename: index.js\n// ---cut---\nimport { stores } from '@sapper/app';\nconst { preloading, page, session } = stores();\n```\n\nNew: Import `navigating`, `page` directly from [`$app/stores`]($app-stores). For Svelte 5 + SvelteKit 2.12+, use [`$app/state`]($app-state).\n\nChanges:\n- `preloading` → `navigating` (with `from`/`to` properties)\n- `page` has `url`/`params` (not `path`/`query`)\n\n### Routing\nRegex routes removed. Use [advanced route matching](advanced-routing#Matching).\n\n### Segments\n`segment` prop removed. Use `$page.url.pathname`.\n\n### URLs\nRelative URLs now resolve against current page, not base URL. Use root-relative URLs (`/`) when possible.\n\n### &lt;a&gt; attributes\n- `sapper:prefetch` → `data-sveltekit-preload-data`\n- `sapper:noscroll` → `data-sveltekit-noscroll`\n\n## Endpoints\nNo direct `req`/`res` access. Update to new signature. `fetch` now globally available.\n\n## Integrations\n\n### HTML minifier\nNot included. Add as prod dependency and use via [hook](hooks#Server-hooks-handle):\n\n```js\n// @filename: ambient.d.ts\n/// <reference types=\"@sveltejs/kit\" />\ndeclare module 'html-minifier';\n\n// @filename: index.js\n// ---cut---\nimport { minify } from 'html-minifier';\nimport { building } from '$app/environment';\n\nconst minification_options = {\n\tcollapseBooleanAttributes: true,\n\tcollapseWhitespace: true,\n\tconservativeCollapse: true,\n\tdecodeEntities: true,\n\thtml5: true,\n\tignoreCustomComments: [/^#/],\n\tminifyCSS: true,\n\tminifyJS: false,\n\tremoveAttributeQuotes: true,\n\tremoveComments: false, // some hydration code needs comments, so leave them in\n\tremoveOptionalTags: true,\n\tremoveRedundantAttributes: true,\n\tremoveScriptTypeAttributes: true,\n\tremoveStyleLinkTypeAttributes: true,\n\tsortAttributes: true,\n\tsortClassName: true\n};\n\n/** @type {import('@sveltejs/kit').Handle} */\nexport async function handle({ event, resolve }) {\n\tlet page = '';\n\n\treturn resolve(event, {\n\t\ttransformPageChunk: ({ html, done }) => {\n\t\t\tpage += html;\n\t\t\tif (done) {\n\t\t\t\treturn building ? minify(page, minification_options) : page;\n\t\t\t}\n\t\t}\n\t});\n}\n```",
    "kit/additional-resources": "# FAQs & Resources\n\n## Support\n- **FAQs**: [SvelteKit FAQ](faq), [Svelte FAQ](../svelte/faq), [vite-plugin-svelte FAQ](https://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/faq.md)\n- **Help**: [Discord](/chat), [StackOverflow](https://stackoverflow.com/questions/tagged/sveltekit)\n- Search existing resources before asking\n\n## Examples\n- [`sveltejs/realworld`](https://github.com/sveltejs/realworld) - blog site\n- [HackerNews clone](https://github.com/sveltejs/sites/tree/master/sites/hn.svelte.dev)\n- [`svelte.dev`](https://github.com/sveltejs/svelte.dev)\n- Community: [#sveltekit](https://github.com/topics/sveltekit), [#sveltekit-template](https://github.com/topics/sveltekit-template), [Svelte Society](https://sveltesociety.dev/templates?category=sveltekit)",
    "kit/glossary": "# SvelteKit Rendering\n\n## Terms\n\n**CSR (Client-side rendering)** - Page generation in browser using JavaScript. Default on. Disable with `csr = false` page option.\n\n**SSR (Server-side rendering)** - Page generation on server. Default on. Improves performance and SEO. Disable with `ssr = false` page option.\n\n**Hybrid app** - SvelteKit default: initial HTML from server (SSR), then client-side updates (CSR) on navigation.\n\n**Hydration** - Process where Svelte attaches event listeners to server-rendered HTML and initializes components with transmitted data. Disabled when `csr = false`.\n\n**Prerendering** - Computing pages at build time, saving HTML. Users must get same content. Pages with actions cannot be prerendered. Control with `prerender` page option or config.\n\n**SSG (Static Site Generation)** - All pages prerendered. Use `adapter-static` or set all pages to prerender.\n\n**ISR (Incremental Static Regeneration)** - Generate static pages on-demand as visitors request them. Available with `adapter-vercel`.\n\n**Routing** - SvelteKit intercepts navigation and updates page client-side by default. Skip with `data-sveltekit-reload`.\n\n**SPA (Single-page app)** - Empty shell on initial request, all rendering client-side. Poor performance and SEO. Build with `adapter-static`.\n\n**PWA (Progressive web app)** - Web app functioning like native app. Can be installed, use service workers for offline capability.\n\n**Edge** - Rendering in CDN near user for lower latency.\n\n**MPA (Multi-page app)** - Traditional server-rendered apps (non-JavaScript).\n\n## Key Rules\n\n- Prerendering requires: same content for all users, no actions\n- SSR preferred for performance and SEO\n- SPA mode has \"large negative performance and SEO impacts\" - use sparingly",
    "kit/@sveltejs-kit": "# SvelteKit Server API Reference\n\n## Core Functions\n\n### error\nThrows HTTP error with status code and optional message. Stops request handling.\n\n```ts\nfunction error(status: number, body: App.Error): never;\nfunction error(status: number, body?: { message: string }): never;\n```\n\n### redirect\nRedirects a request. Common status codes:\n- `303`: GET redirect (after form POST)\n- `307`: Temporary, keeps method\n- `308`: Permanent, keeps method\n\n```ts\nfunction redirect(status: 300|301|302|303|304|305|306|307|308, location: string | URL): never;\n```\n\n### fail\nCreates `ActionFailure` for failed form submissions.\n\n```ts\nfunction fail(status: number): ActionFailure<undefined>;\nfunction fail<T>(status: number, data: T): ActionFailure<T>;\n```\n\n### json / text\nCreate Response objects.\n\n```ts\nfunction json(data: any, init?: ResponseInit): Response;\nfunction text(body: string, init?: ResponseInit): Response;\n```\n\n### normalizeUrl\nStrips SvelteKit-internal suffixes and trailing slashes.\n\n```ts\nconst { url, denormalize } = normalizeUrl('/blog/post/__data.json');\nconsole.log(url.pathname); // /blog/post\nconsole.log(denormalize('/blog/post/a')); // /blog/post/a/__data.json\n```\n\n## Type Checkers\n\n```ts\nfunction isActionFailure(e: unknown): e is ActionFailure;\nfunction isHttpError(e: unknown, status?: number): e is HttpError;\nfunction isRedirect(e: unknown): e is Redirect;\n```\n\n## Hooks\n\n### Handle\nRuns on every request. Receives `event` and `resolve` function.\n\n```ts\ntype Handle = (input: {\n  event: RequestEvent;\n  resolve: (event: RequestEvent, opts?: ResolveOptions) => MaybePromise<Response>;\n}) => MaybePromise<Response>;\n```\n\n### HandleFetch\nModifies `event.fetch` calls on server/during prerendering.\n\n```ts\ntype HandleFetch = (input: {\n  event: RequestEvent;\n  request: Request;\n  fetch: typeof fetch;\n}) => MaybePromise<Response>;\n```\n\n### HandleError\nRuns when unexpected errors occur.\n\n```ts\n// Server\ntype HandleServerError = (input: {\n  error: unknown;\n  event: RequestEvent;\n  status: number;\n  message: string;\n}) => MaybePromise<void | App.Error>;\n\n// Client\ntype HandleClientError = (input: {\n  error: unknown;\n  event: NavigationEvent;\n  status: number;\n  message: string;\n}) => MaybePromise<void | App.Error>;\n```\n\n### HandleValidationError\nRuns when remote function argument validation fails.\n\n```ts\ntype HandleValidationError = (input: {\n  issues: StandardSchemaV1.Issue[];\n  event: RequestEvent;\n}) => MaybePromise<App.Error>;\n```\n\n### Init\nRuns before first request (server) or on app start (client).\n\n```ts\ntype ServerInit = () => MaybePromise<void>;\ntype ClientInit = () => MaybePromise<void>;\n```\n\n### Reroute\nModifies URL before route determination.\n\n```ts\ntype Reroute = (event: { url: URL; fetch: typeof fetch }) => MaybePromise<void | string>;\n```\n\n### Transport\nTransports custom types across server/client boundary.\n\n```ts\ninterface Transporter<T, U> {\n  encode: (value: T) => false | U;\n  decode: (data: U) => T;\n}\n\ntype Transport = Record<string, Transporter>;\n```\n\n## RequestEvent\n\nAvailable in hooks, `load` functions, actions, and `+server.js` handlers.\n\n```ts\ninterface RequestEvent<Params, RouteId> {\n  cookies: Cookies;\n  fetch: typeof fetch;\n  getClientAddress: () => string;\n  locals: App.Locals;\n  params: Params;\n  platform: App.Platform | undefined;\n  request: Request;\n  route: { id: RouteId };\n  setHeaders: (headers: Record<string, string>) => void;\n  url: URL;\n  isDataRequest: boolean;\n  isSubRequest: boolean;\n  isRemoteRequest: boolean;\n  tracing: {\n    enabled: boolean;\n    root: Span;\n    current: Span;\n  };\n}\n```\n\n## Cookies\n\n```ts\ninterface Cookies {\n  get(name: string, opts?: CookieParseOptions): string | undefined;\n  getAll(opts?: CookieParseOptions): Array<{ name: string; value: string }>;\n  set(name: string, value: string, opts: CookieSerializeOptions & { path: string }): void;\n  delete(name: string, opts: CookieSerializeOptions & { path: string }): void;\n  serialize(name: string, value: string, opts: CookieSerializeOptions & { path: string }): string;\n}\n```\n\n**Defaults**: `httpOnly: true`, `secure: true` (except localhost), `sameSite: 'lax'`\n\n## Load Functions\n\n### LoadEvent (client/universal)\n\n```ts\ninterface LoadEvent<Params, Data, ParentData, RouteId> {\n  fetch: typeof fetch;\n  data: Data; // from +page/layout.server.js\n  params: Params;\n  route: { id: RouteId };\n  url: URL;\n  parent: () => Promise<ParentData>;\n  depends: (...deps: Array<`${string}:${string}`>) => void;\n  untrack: <T>(fn: () => T) => T;\n  setHeaders: (headers: Record<string, string>) => void;\n  tracing: { enabled: boolean; root: Span; current: Span };\n}\n```\n\n### ServerLoadEvent (server-only)\n\nExtends `RequestEvent` with:\n\n```ts\ninterface ServerLoadEvent extends RequestEvent {\n  parent: () => Promise<ParentData>;\n  depends: (...deps: string[]) => void;\n  untrack: <T>(fn: () => T) => T;\n}\n```\n\n## Actions\n\n```ts\ntype Action<Params, OutputData, RouteId> = (\n  event: RequestEvent<Params, RouteId>\n) => MaybePromise<OutputData>;\n\ntype Actions<Params, OutputData, RouteId> = Record<string, Action<Params, OutputData, RouteId>>;\n```\n\n### ActionResult\n\n```ts\ntype ActionResult<Success, Failure> =\n  | { type: 'success'; status: number; data?: Success }\n  | { type: 'failure'; status: number; data?: Failure }\n  | { type: 'redirect'; status: number; location: string }\n  | { type: 'error'; status?: number; error: any };\n```\n\n## Remote Functions\n\n### RemoteQuery\n\n```ts\ntype RemoteQuery<T> = RemoteResource<T> & {\n  set(value: T): void;\n  refresh(): Promise<void>;\n  withOverride(update: (current: Awaited<T>) => Awaited<T>): RemoteQueryOverride;\n};\n\ntype RemoteResource<T> = Promise<Awaited<T>> & {\n  get error(): any;\n  get loading(): boolean;\n} & ({ get current(): undefined; ready: false } | { get current(): Awaited<T>; ready: true });\n```\n\n### RemoteCommand\n\n```ts\ntype RemoteCommand<Input, Output> = {\n  (arg: Input): Promise<Awaited<Output>> & {\n    updates(...queries: Array<RemoteQuery<any> | RemoteQueryOverride>): Promise<Awaited<Output>>;\n  };\n  get pending(): number;\n};\n```\n\n### RemoteForm\n\n```ts\ntype RemoteForm<Input, Output> = {\n  [attachment: symbol]: (node: HTMLFormElement) => void;\n  method: 'POST';\n  action: string;\n  enhance(callback: (opts: {\n    form: HTMLFormElement;\n    data: Input;\n    submit: () => Promise<void> & { updates(...queries): Promise<void> };\n  }) => void | Promise<void>): { method: 'POST'; action: string; [attachment: symbol]: (node: HTMLFormElement) => void };\n  for(id: ExtractId<Input>): Omit<RemoteForm<Input, Output>, 'for'>;\n  preflight(schema: StandardSchemaV1<Input, any>): RemoteForm<Input, Output>;\n  validate(options?: { includeUntouched?: boolean; submitter?: HTMLButtonElement | HTMLInputElement }): Promise<void>;\n  get result(): Output | undefined;\n  get pending(): number;\n  fields: RemoteFormFields<Input>;\n  buttonProps: { type: 'submit'; formmethod: 'POST'; formaction: string; onclick: (event: Event) => void; enhance(...); get pending(): number };\n};\n```\n\n## Navigation\n\n### Navigation Types\n\n```ts\ntype NavigationType = 'enter' | 'form' | 'leave' | 'link' | 'goto' | 'popstate';\n\ninterface NavigationTarget<Params, RouteId> {\n  params: Params | null;\n  route: { id: RouteId | null };\n  url: URL;\n}\n```\n\n### BeforeNavigate\n\n```ts\ntype BeforeNavigate = Navigation & {\n  cancel: () => void;\n};\n```\n\n### AfterNavigate\n\n```ts\ntype AfterNavigate = (Navigation | NavigationEnter) & {\n  type: Exclude<NavigationType, 'leave'>;\n  willUnload: false;\n};\n```\n\n### OnNavigate\n\n```ts\ntype OnNavigate = Navigation & {\n  type: Exclude<NavigationType, 'enter' | 'leave'>;\n  willUnload: false;\n};\n```\n\n## Page\n\n```ts\ninterface Page<Params, RouteId> {\n  url: URL & { pathname: ResolvedPathname };\n  params: Params;\n  route: { id: RouteId };\n  status: number;\n  error: App.Error | null;\n  data: App.PageData & Record<string, any>;\n  state: App.PageState;\n  form: any; // filled after form submission\n}\n```\n\n## Adapter\n\n```ts\ninterface Adapter {\n  name: string;\n  adapt: (builder: Builder) => MaybePromise<void>;\n  supports?: {\n    read?: (details: { config: any; route: { id: string } }) => boolean;\n    instrumentation?: () => boolean;\n  };\n  emulate?: () => MaybePromise<Emulator>;\n}\n```\n\n### Builder\n\n```ts\ninterface Builder {\n  log: Logger;\n  rimraf: (dir: string) => void;\n  mkdirp: (dir: string) => void;\n  config: ValidatedConfig;\n  prerendered: Prerendered;\n  routes: RouteDefinition[];\n  findServerAssets: (routes: RouteDefinition[]) => string[];\n  generateFallback: (dest: string) => Promise<void>;\n  generateEnvModule: () => void;\n  generateManifest: (opts: { relativePath: string; routes?: RouteDefinition[] }) => string;\n  getBuildDirectory: (name: string) => string;\n  getClientDirectory: () => string;\n  getServerDirectory: () => string;\n  getAppPath: () => string;\n  writeClient: (dest: string) => string[];\n  writePrerendered: (dest: string) => string[];\n  writeServer: (dest: string) => string[];\n  copy: (from: string, to: string, opts?: { filter?(basename: string): boolean; replace?: Record<string, string> }) => string[];\n  hasServerInstrumentationFile: () => boolean;\n  instrument: (args: { entrypoint: string; instrumentation: string; start?: string; module?: ... }) => void;\n  compress: (directory: string) => Promise<void>;\n}\n```\n\n## Misc Types\n\n### ResolveOptions\n\n```ts\ninterface ResolveOptions {\n  transformPageChunk?: (input: { html: string; done: boolean }) => MaybePromise<string | undefined>;\n  filterSerializedResponseHeaders?: (name: string, value: string) => boolean;\n  preload?: (input: { type: 'font' | 'css' | 'js' | 'asset'; path: string }) => boolean;\n}\n```\n\n### Snapshot\n\n```ts\ninterface Snapshot<T> {\n  capture: () => T;\n  restore: (snapshot: T) => void;\n}\n```\n\n### ParamMatcher\n\n```ts\ntype ParamMatcher = (param: string) => boolean;\n```\n\n### Server\n\n```ts\nclass Server {\n  constructor(manifest: SSRManifest);\n  init(options: ServerInitOptions): Promise<void>;\n  respond(request: Request, options: RequestOptions): Promise<Response>;\n}\n```\n\n### VERSION\n\n```ts\nconst VERSION: string;\n```",
    "kit/@sveltejs-kit-hooks": "# sequence\n\nHelper for chaining multiple `handle` functions middleware-style.\n\n## Import\n\n```js\nimport { sequence } from '@sveltejs/kit/hooks';\n```\n\n## Behavior\n\n- `transformPageChunk`: applied in **reverse order**, merged\n- `preload`: applied in **forward order**, first wins (subsequent ignored)\n- `filterSerializedResponseHeaders`: same as `preload` (first wins)\n\n## Example\n\n```js\n/// file: src/hooks.server.js\nimport { sequence } from '@sveltejs/kit/hooks';\n\n/** @type {import('@sveltejs/kit').Handle} */\nasync function first({ event, resolve }) {\n\tconsole.log('first pre-processing');\n\tconst result = await resolve(event, {\n\t\ttransformPageChunk: ({ html }) => {\n\t\t\t// transforms are applied in reverse order\n\t\t\tconsole.log('first transform');\n\t\t\treturn html;\n\t\t},\n\t\tpreload: () => {\n\t\t\t// this one wins as it's the first defined in the chain\n\t\t\tconsole.log('first preload');\n\t\t\treturn true;\n\t\t}\n\t});\n\tconsole.log('first post-processing');\n\treturn result;\n}\n\n/** @type {import('@sveltejs/kit').Handle} */\nasync function second({ event, resolve }) {\n\tconsole.log('second pre-processing');\n\tconst result = await resolve(event, {\n\t\ttransformPageChunk: ({ html }) => {\n\t\t\tconsole.log('second transform');\n\t\t\treturn html;\n\t\t},\n\t\tpreload: () => {\n\t\t\tconsole.log('second preload');\n\t\t\treturn true;\n\t\t},\n\t\tfilterSerializedResponseHeaders: () => {\n\t\t\t// this one wins as it's the first defined in the chain\n\t\t\tconsole.log('second filterSerializedResponseHeaders');\n\t\t\treturn true;\n\t\t}\n\t});\n\tconsole.log('second post-processing');\n\treturn result;\n}\n\nexport const handle = sequence(first, second);\n```\n\n**Output:**\n```\nfirst pre-processing\nfirst preload\nsecond pre-processing\nsecond filterSerializedResponseHeaders\nsecond transform\nfirst transform\nsecond post-processing\nfirst post-processing\n```\n\n## Type\n\n```dts\nfunction sequence(...handlers: Handle[]): Handle;\n```",
    "kit/@sveltejs-kit-node-polyfills": "# Node Polyfills\n\n## installPolyfills\n\nMakes web APIs available as globals in Node.js: `crypto`, `File`\n\n```js\nimport { installPolyfills } from '@sveltejs/kit/node/polyfills';\n\ninstallPolyfills();\n```",
    "kit/@sveltejs-kit-node": "# @sveltejs/kit/node\n\nNode.js adapter utilities for converting between Node.js and Web APIs.\n\n## createReadableStream\n\n*Available since 2.4.0*\n\nConverts file on disk to ReadableStream.\n\n```ts\nfunction createReadableStream(file: string): ReadableStream;\n```\n\n## getRequest\n\nConverts Node.js IncomingMessage to Web Request.\n\n```ts\nfunction getRequest({\n\trequest,\n\tbase,\n\tbodySizeLimit\n}: {\n\trequest: import('http').IncomingMessage;\n\tbase: string;\n\tbodySizeLimit?: number;\n}): Promise<Request>;\n```\n\n## setResponse\n\nConverts Web Response to Node.js ServerResponse.\n\n```ts\nfunction setResponse(\n\tres: import('http').ServerResponse,\n\tresponse: Response\n): Promise<void>;\n```",
    "kit/@sveltejs-kit-vite": "# SvelteKit Vite Plugin\n\n## sveltekit\n\nReturns SvelteKit Vite plugins.\n\n```js\nimport { sveltekit } from '@sveltejs/kit/vite';\n```\n\n```ts\nfunction sveltekit(): Promise<import('vite').Plugin[]>;\n```",
    "kit/$app-environment": "# $app/environment\n\n```js\nimport { browser, building, dev, version } from '$app/environment';\n```\n\n## browser\n`true` if app runs in browser.\n\n```dts\nconst browser: boolean;\n```\n\n## building\n`true` during build step and prerendering.\n\n```dts\nconst building: boolean;\n```\n\n## dev\n`true` if dev server is running. Not guaranteed to match `NODE_ENV` or `MODE`.\n\n```dts\nconst dev: boolean;\n```\n\n## version\nValue of `config.kit.version.name`.\n\n```dts\nconst version: string;\n```",
    "kit/$app-forms": "# $app/forms\n\n```js\nimport { applyAction, deserialize, enhance } from '$app/forms';\n```\n\n## applyAction\n\nUpdates `form` property and `page.status` with given data. Redirects to error page on error.\n\n```dts\nfunction applyAction<\n\tSuccess extends Record<string, unknown> | undefined,\n\tFailure extends Record<string, unknown> | undefined\n>(\n\tresult: import('@sveltejs/kit').ActionResult<Success, Failure>\n): Promise<void>;\n```\n\n## deserialize\n\nDeserializes form submission response.\n\n```js\nimport { deserialize } from '$app/forms';\n\nasync function handleSubmit(event) {\n\tconst response = await fetch('/form?/action', {\n\t\tmethod: 'POST',\n\t\tbody: new FormData(event.target)\n\t});\n\n\tconst result = deserialize(await response.text());\n\t// ...\n}\n```\n\n```dts\nfunction deserialize<\n\tSuccess extends Record<string, unknown> | undefined,\n\tFailure extends Record<string, unknown> | undefined\n>(\n\tresult: string\n): import('@sveltejs/kit').ActionResult<Success, Failure>;\n```\n\n## enhance\n\nProgressive enhancement for `<form>` elements.\n\n**`submit` function:**\n- Called on submission with FormData and action\n- Call `cancel` to prevent submission\n- Use abort `controller` to cancel if another submission starts\n- Return function to handle response, or use default behavior\n\n**Default behavior:**\n- Updates `form` prop if action on same page\n- Updates `page.status`\n- Resets form and invalidates data on successful submission (no redirect)\n- Redirects on redirect response\n- Redirects to error page on unexpected error\n\n**Custom callback with `update()`:**\n- `reset: false` - don't reset form values after success\n- `invalidateAll: false` - don't call `invalidateAll` after submission\n\n```dts\nfunction enhance<\n\tSuccess extends Record<string, unknown> | undefined,\n\tFailure extends Record<string, unknown> | undefined\n>(\n\tform_element: HTMLFormElement,\n\tsubmit?: import('@sveltejs/kit').SubmitFunction<Success, Failure>\n): {\n\tdestroy(): void;\n};\n```",
    "kit/$app-navigation": "# $app/navigation\n\n```js\nimport {\n\tafterNavigate,\n\tbeforeNavigate,\n\tdisableScrollHandling,\n\tgoto,\n\tinvalidate,\n\tinvalidateAll,\n\tonNavigate,\n\tpreloadCode,\n\tpreloadData,\n\tpushState,\n\trefreshAll,\n\treplaceState\n} from '$app/navigation';\n```\n\n## afterNavigate\n\nRuns callback on mount and after every navigation. Must be called during component initialization. Active while component is mounted.\n\n```dts\nfunction afterNavigate(\n\tcallback: (navigation: import('@sveltejs/kit').AfterNavigate) => void\n): void;\n```\n\n## beforeNavigate\n\nIntercepts navigation before it happens. Call `cancel()` to prevent navigation. For `'leave'` navigations, `cancel()` triggers browser unload dialog. `navigation.to.route.id` is `null` for non-SvelteKit routes. `navigation.willUnload` is `true` for document unloads. Must be called during component initialization.\n\n```dts\nfunction beforeNavigate(\n\tcallback: (navigation: import('@sveltejs/kit').BeforeNavigate) => void\n): void;\n```\n\n## disableScrollHandling\n\nDisables SvelteKit's scroll handling when called during page update (in `onMount`, `afterNavigate`, or actions). Discouraged - breaks user expectations.\n\n```dts\nfunction disableScrollHandling(): void;\n```\n\n## goto\n\nNavigate programmatically. Returns Promise that resolves/rejects on navigation completion. Use `window.location = url` for external URLs.\n\n```dts\nfunction goto(\n\turl: string | URL,\n\topts?: {\n\t\treplaceState?: boolean | undefined;\n\t\tnoScroll?: boolean | undefined;\n\t\tkeepFocus?: boolean | undefined;\n\t\tinvalidateAll?: boolean | undefined;\n\t\tinvalidate?: (string | URL | ((url: URL) => boolean))[] | undefined;\n\t\tstate?: App.PageState | undefined;\n\t}\n): Promise<void>;\n```\n\n## invalidate\n\nRe-runs `load` functions that depend on the URL (via `fetch` or `depends`). String/URL must match exactly (including query params). Custom identifiers: `[a-z]+:` format (e.g. `custom:state`). Function predicate for pattern matching:\n\n```ts\n// Match '/path' regardless of query parameters\nimport { invalidate } from '$app/navigation';\n\ninvalidate((url) => url.pathname === '/path');\n```\n\n```dts\nfunction invalidate(\n\tresource: string | URL | ((url: URL) => boolean)\n): Promise<void>;\n```\n\n## invalidateAll\n\nRe-runs all `load` functions for current page.\n\n```dts\nfunction invalidateAll(): Promise<void>;\n```\n\n## onNavigate\n\nRuns callback before navigation (except full-page). Return Promise to delay navigation completion (e.g. for `document.startViewTransition`). Return function (or Promise resolving to function) to run after DOM updates. Must be called during component initialization.\n\n```dts\nfunction onNavigate(\n\tcallback: (navigation: import('@sveltejs/kit').OnNavigate) => \n\t\tMaybePromise<(() => void) | void>\n): void;\n```\n\n## preloadCode\n\nImports code for routes. Matches pathnames like `/about` or `/blog/*`. Doesn't call `load` functions.\n\n```dts\nfunction preloadCode(pathname: string): Promise<void>;\n```\n\n## preloadData\n\nPreloads page: imports code + calls `load` functions. Same as hovering `<a>` with `data-sveltekit-preload-data`. Makes next navigation to `href` instantaneous.\n\n```dts\nfunction preloadData(href: string): Promise<\n\t| { type: 'loaded'; status: number; data: Record<string, any>; }\n\t| { type: 'redirect'; location: string; }\n>;\n```\n\n## pushState\n\nCreates new history entry with `page.state`. Pass `''` for current URL. For [shallow routing](/docs/kit/shallow-routing).\n\n```dts\nfunction pushState(url: string | URL, state: App.PageState): void;\n```\n\n## refreshAll\n\nRefreshes all active remote functions and re-runs `load` functions (unless disabled).\n\n```dts\nfunction refreshAll({\n\tincludeLoadFunctions\n}?: {\n\tincludeLoadFunctions?: boolean;\n}): Promise<void>;\n```\n\n## replaceState\n\nReplaces current history entry with `page.state`. Pass `''` for current URL. For [shallow routing](/docs/kit/shallow-routing).\n\n```dts\nfunction replaceState(url: string | URL, state: App.PageState): void;\n```",
    "kit/$app-paths": "# $app/paths\n\n```js\nimport { asset, assets, base, resolve, resolveRoute } from '$app/paths';\n```\n\n## asset\n\nResolve URL of static assets by prefixing with `config.kit.paths.assets` or base path. During SSR, base path is relative to current page.\n\n```svelte\n<script>\n\timport { asset } from '$app/paths';\n</script>\n\n<img alt=\"a potato\" src={asset('/potato.jpg')} />\n```\n\n```dts\nfunction asset(file: Asset): string;\n```\n\n## assets\n\n**Deprecated:** Use `asset()` instead\n\nAbsolute path matching `config.kit.paths.assets`. Replaced with `'/_svelte_kit_assets'` during dev/preview.\n\n```dts\nlet assets: '' | `https://${string}` | `http://${string}` | '/_svelte_kit_assets';\n```\n\n## base\n\n**Deprecated:** Use `resolve()` instead\n\nString matching `config.kit.paths.base`.\n\n```dts\nlet base: '' | `/${string}`;\n```\n\n## resolve\n\nResolve pathname by prefixing with base path, or resolve route ID by populating params. During SSR, base path is relative to current page.\n\n```js\nimport { resolve } from '$app/paths';\n\n// using pathname\nconst resolved = resolve(`/blog/hello-world`);\n\n// using route ID + params\nconst resolved = resolve('/blog/[slug]', {\n\tslug: 'hello-world'\n});\n```\n\n```dts\nfunction resolve<T extends RouteId | Pathname>(\n\t...args: ResolveArgs<T>\n): ResolvedPathname;\n```\n\n## resolveRoute\n\n**Deprecated:** Use `resolve()` instead\n\n```dts\nfunction resolveRoute<T extends RouteId | Pathname>(\n\t...args: ResolveArgs<T>\n): ResolvedPathname;\n```",
    "kit/$app-server": "# $app/server\n\n```js\nimport {\n  command,\n  form,\n  getRequestEvent,\n  prerender,\n  query,\n  read\n} from '$app/server';\n```\n\n## command\n\nCreates a remote command. Called from browser, executes on server via `fetch`.\n\n```dts\n// No input\nfunction command<Output>(\n  fn: () => Output\n): RemoteCommand<void, Output>;\n\n// Unchecked validation\nfunction command<Input, Output>(\n  validate: 'unchecked',\n  fn: (arg: Input) => Output\n): RemoteCommand<Input, Output>;\n\n// Schema validation\nfunction command<Schema extends StandardSchemaV1, Output>(\n  validate: Schema,\n  fn: (arg: StandardSchemaV1.InferOutput<Schema>) => Output\n): RemoteCommand<StandardSchemaV1.InferInput<Schema>, Output>;\n```\n\nSee [Remote functions](/docs/kit/remote-functions#command).\n\n## form\n\nCreates a form object to spread onto `<form>` element.\n\n```dts\n// No input\nfunction form<Output>(\n  fn: (invalid: Invalid<void>) => MaybePromise<Output>\n): RemoteForm<void, Output>;\n\n// Unchecked validation\nfunction form<Input extends RemoteFormInput, Output>(\n  validate: 'unchecked',\n  fn: (data: Input, invalid: Invalid<Input>) => MaybePromise<Output>\n): RemoteForm<Input, Output>;\n\n// Schema validation\nfunction form<Schema extends StandardSchemaV1<RemoteFormInput, Record<string, any>>, Output>(\n  validate: Schema,\n  fn: (data: StandardSchemaV1.InferOutput<Schema>, invalid: Invalid<StandardSchemaV1.InferOutput<Schema>>) => MaybePromise<Output>\n): RemoteForm<StandardSchemaV1.InferInput<Schema>, Output>;\n```\n\nSee [Remote functions](/docs/kit/remote-functions#form).\n\n## getRequestEvent\n\nReturns current `RequestEvent`. Use in server hooks, server `load` functions, actions, endpoints.\n\n**Must be called synchronously** (before `await`) in environments without `AsyncLocalStorage`.\n\n```dts\nfunction getRequestEvent(): RequestEvent;\n```\n\n## prerender\n\nCreates a remote prerender function. Called from browser, executes on server via `fetch`.\n\n```dts\n// No input\nfunction prerender<Output>(\n  fn: () => MaybePromise<Output>,\n  options?: { inputs?: RemotePrerenderInputsGenerator<void>; dynamic?: boolean; }\n): RemotePrerenderFunction<void, Output>;\n\n// Unchecked validation\nfunction prerender<Input, Output>(\n  validate: 'unchecked',\n  fn: (arg: Input) => MaybePromise<Output>,\n  options?: { inputs?: RemotePrerenderInputsGenerator<Input>; dynamic?: boolean; }\n): RemotePrerenderFunction<Input, Output>;\n\n// Schema validation\nfunction prerender<Schema extends StandardSchemaV1, Output>(\n  schema: Schema,\n  fn: (arg: StandardSchemaV1.InferOutput<Schema>) => MaybePromise<Output>,\n  options?: { inputs?: RemotePrerenderInputsGenerator<StandardSchemaV1.InferInput<Schema>>; dynamic?: boolean; }\n): RemotePrerenderFunction<StandardSchemaV1.InferInput<Schema>, Output>;\n```\n\nSee [Remote functions](/docs/kit/remote-functions#prerender).\n\n## query\n\nCreates a remote query. Called from browser, executes on server via `fetch`.\n\n```dts\n// No input\nfunction query<Output>(\n  fn: () => MaybePromise<Output>\n): RemoteQueryFunction<void, Output>;\n\n// Unchecked validation\nfunction query<Input, Output>(\n  validate: 'unchecked',\n  fn: (arg: Input) => MaybePromise<Output>\n): RemoteQueryFunction<Input, Output>;\n\n// Schema validation\nfunction query<Schema extends StandardSchemaV1, Output>(\n  schema: Schema,\n  fn: (arg: StandardSchemaV1.InferOutput<Schema>) => MaybePromise<Output>\n): RemoteQueryFunction<StandardSchemaV1.InferInput<Schema>, Output>;\n```\n\n### query.batch\n\nBatches multiple calls into single request.\n\n```dts\n// Unchecked validation\nfunction batch<Input, Output>(\n  validate: 'unchecked',\n  fn: (args: Input[]) => MaybePromise<(arg: Input, idx: number) => Output>\n): RemoteQueryFunction<Input, Output>;\n\n// Schema validation\nfunction batch<Schema extends StandardSchemaV1, Output>(\n  schema: Schema,\n  fn: (args: StandardSchemaV1.InferOutput<Schema>[]) => MaybePromise<(arg: StandardSchemaV1.InferOutput<Schema>, idx: number) => Output>\n): RemoteQueryFunction<StandardSchemaV1.InferInput<Schema>, Output>;\n```\n\nSee [Remote functions](/docs/kit/remote-functions#query) and [query.batch](/docs/kit/remote-functions#query.batch).\n\n## read\n\nReads imported asset contents from filesystem.\n\n```js\n// @errors: 7031\nimport { read } from '$app/server';\nimport somefile from './somefile.txt';\n\nconst asset = read(somefile);\nconst text = await asset.text();\n```\n\n```dts\nfunction read(asset: string): Response;\n```",
    "kit/$app-state": "# $app/state\n\nThree read-only state objects for SvelteKit apps. Use instead of `$app/stores` (added in 2.12).\n\n```js\nimport { navigating, page, updated } from '$app/state';\n```\n\n## navigating\n\nIn-progress navigation object with `from`, `to`, `type` and `delta` (if `type === 'popstate'`). `null` when no navigation or during SSR.\n\n```dts\nconst navigating:\n\t| import('@sveltejs/kit').Navigation\n\t| {\n\t\t\tfrom: null;\n\t\t\tto: null;\n\t\t\ttype: null;\n\t\t\twillUnload: null;\n\t\t\tdelta: null;\n\t\t\tcomplete: null;\n\t  };\n```\n\n## page\n\nReactive object with current page info:\n- `data` - combined data from all pages/layouts\n- `form` - current form prop value\n- `state` - page state from `goto`, `pushState`, `replaceState`\n- `url`, `route`, `params`, `error` - page metadata\n\n```svelte\n<!--- file: +layout.svelte --->\n<script>\n\timport { page } from '$app/state';\n</script>\n\n<p>Currently at {page.url.pathname}</p>\n\n{#if page.error}\n\t<span class=\"red\">Problem detected</span>\n{:else}\n\t<span class=\"small\">All systems operational</span>\n{/if}\n```\n\n**Important:** Changes only work with runes, not legacy reactivity:\n\n```svelte\n<!--- file: +page.svelte --->\n<script>\n\timport { page } from '$app/state';\n\tconst id = $derived(page.params.id); // ✓ Updates correctly\n\t$: badId = page.params.id; // ✗ Never updates after initial load\n</script>\n```\n\nServer: read only during rendering. Browser: read anytime.\n\n```dts\nconst page: import('@sveltejs/kit').Page;\n```\n\n## updated\n\nReactive boolean, initially `false`. Becomes `true` when new app version detected (if `version.pollInterval` configured). `updated.check()` forces immediate check.\n\n```dts\nconst updated: {\n\tget current(): boolean;\n\tcheck(): Promise<boolean>;\n};\n```",
    "kit/$app-stores": "# $app/stores\n\n**DEPRECATED**: Use `$app/state` instead (SvelteKit 2.12+)\n\nStore-based equivalents of `$app/state` exports.\n\n```js\nimport { getStores, navigating, page, updated } from '$app/stores';\n```\n\n## getStores\n\n```dts\nfunction getStores(): {\n\tpage: typeof page;\n\tnavigating: typeof navigating;\n\tupdated: typeof updated;\n};\n```\n\n## navigating\n\nReadable store. Value is `Navigation` object with `from`, `to`, `type` and (if `type === 'popstate'`) `delta` properties during navigation, `null` otherwise.\n\n**Server**: Subscribe only during component initialization  \n**Browser**: Subscribe anytime\n\n```dts\nconst navigating: import('svelte/store').Readable<\n\timport('@sveltejs/kit').Navigation | null\n>;\n```\n\n## page\n\nReadable store containing page data.\n\n**Server**: Subscribe only during component initialization  \n**Browser**: Subscribe anytime\n\n```dts\nconst page: import('svelte/store').Readable<\n\timport('@sveltejs/kit').Page\n>;\n```\n\n## updated\n\nReadable store, initial value `false`. Becomes `true` when new app version detected (if `version.pollInterval` configured). `updated.check()` forces immediate check.\n\n**Server**: Subscribe only during component initialization  \n**Browser**: Subscribe anytime\n\n```dts\nconst updated: import('svelte/store').Readable<boolean> & {\n\tcheck(): Promise<boolean>;\n};\n```",
    "kit/$app-types": "# $app/types\n\nGenerated types for routes in your app (available since SvelteKit 2.26).\n\n```js\nimport type { RouteId, RouteParams, LayoutParams } from '$app/types';\n```\n\n## Asset\n\nUnion of all filenames in `static` directory + wildcard for imported asset paths.\n\n```dts\ntype Asset = '/favicon.png' | '/robots.txt' | (string & {});\n```\n\n## RouteId\n\nUnion of all route IDs. Used for `page.route.id` and `event.route.id`.\n\n```dts\ntype RouteId = '/' | '/my-route' | '/my-other-route/[param]';\n```\n\n## Pathname\n\nUnion of all valid pathnames.\n\n```dts\ntype Pathname = '/' | '/my-route' | `/my-other-route/${string}` & {};\n```\n\n## ResolvedPathname\n\nLike `Pathname` but possibly prefixed with base path. Used for `page.url.pathname`.\n\n```dts\ntype ResolvedPathname = `${'' | `/${string}`}/` | `${'' | `/${string}`}/my-route` | `${'' | `/${string}`}/my-other-route/${string}` | {};\n```\n\n## RouteParams\n\nGet parameters for a route.\n\n```ts\ntype BlogParams = RouteParams<'/blog/[slug]'>; // { slug: string }\n```\n\n```dts\ntype RouteParams<T extends RouteId> = { /* generated */ } | Record<string, never>;\n```\n\n## LayoutParams\n\nGet parameters for a layout, including optional parameters from child routes.\n\n```dts\ntype RouteParams<T extends RouteId> = { /* generated */ } | Record<string, never>;\n```",
    "kit/$env-dynamic-private": "# $env/dynamic/private\n\nServer-only module for runtime environment variables.\n\n## Usage\n\n```ts\nimport { env } from '$env/dynamic/private';\nconsole.log(env.DEPLOYMENT_SPECIFIC_VARIABLE);\n```\n\n## Key Points\n\n- Accesses runtime env vars (e.g., `process.env` in adapter-node)\n- **Cannot be imported in client-side code**\n- Only includes vars that:\n  - Do NOT start with `config.kit.env.publicPrefix`\n  - DO start with `config.kit.env.privatePrefix` (if configured)\n- In dev: always includes `.env` variables\n- In prod: behavior depends on adapter",
    "kit/$env-dynamic-public": "# $env/dynamic/public\n\nRuntime access to public environment variables (prefixed with `PUBLIC_` by default via `config.kit.env.publicPrefix`).\n\n**⚠️ Gotcha:** All public dynamic env vars are sent server→client, increasing network payload. Prefer `$env/static/public` when possible.\n\n```ts\nimport { env } from '$env/dynamic/public';\nconsole.log(env.PUBLIC_DEPLOYMENT_SPECIFIC_VARIABLE);\n```",
    "kit/$env-static-private": "# $env/static/private\n\nEnvironment variables loaded from `.env` files and `process.env`. Server-side only.\n\n## Key Characteristics\n\n- **Static injection**: Values injected at build time (enables dead code elimination)\n- **Server-only**: Cannot import into client-side code\n- **Filtering**: \n  - Excludes variables with `config.kit.env.publicPrefix`\n  - Includes only variables with `config.kit.env.privatePrefix` (if configured)\n\n## Usage\n\n```ts\nimport { API_KEY } from '$env/static/private';\n```\n\n## Best Practices\n\n**Declare all variables** in `.env` even if empty:\n\n```\nMY_FEATURE_FLAG=\"\"\n```\n\n**Override from command line**:\n\n```sh\nMY_FEATURE_FLAG=\"enabled\" npm run dev\n```",
    "kit/$env-static-public": "# $env/static/public\n\nEnvironment variables with [`config.kit.env.publicPrefix`](/docs/kit/configuration#env) (default: `PUBLIC_`). Safe for client-side code. Values replaced at build time.\n\n```ts\nimport { PUBLIC_BASE_URL } from '$env/static/public';\n```",
    "kit/$lib": "# $lib Import Alias\n\nSvelteKit provides `$lib` alias for importing from `src/lib`. Configure via [config file](configuration#files).\n\n```svelte\n<!--- file: src/lib/Component.svelte --->\nA reusable component\n```\n\n```svelte\n<!--- file: src/routes/+page.svelte --->\n<script>\n    import Component from '$lib/Component.svelte';\n</script>\n\n<Component />\n```",
    "kit/$service-worker": "# $service-worker Module\n\nAvailable only to [service workers](/docs/kit/service-workers).\n\n```js\nimport { base, build, files, prerendered, version } from '$service-worker';\n```\n\n## base\n```ts\nconst base: string;\n```\nBase path of deployment. Equivalent to `config.kit.paths.base`, calculated from `location.pathname`.\n\n**Note:** No `assets` export since service workers can't be used if `config.kit.paths.assets` is specified.\n\n## build\n```ts\nconst build: string[];\n```\nArray of Vite-generated file URLs for caching with `cache.addAll(build)`. Empty in development.\n\n## files\n```ts\nconst files: string[];\n```\nArray of URLs from static directory (`config.kit.files.assets`). Customize via [`config.kit.serviceWorker.files`](/docs/kit/configuration#serviceWorker).\n\n## prerendered\n```ts\nconst prerendered: string[];\n```\nArray of prerendered page/endpoint pathnames. Empty in development.\n\n## version\n```ts\nconst version: string;\n```\nFrom [`config.kit.version`](/docs/kit/configuration#version). Use for unique cache names to invalidate old caches on deployment.",
    "kit/configuration": "# SvelteKit Configuration\n\nConfiguration lives in `svelte.config.js` at project root.\n\n```js\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-auto';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter()\n\t}\n};\n\nexport default config;\n```\n\n## adapter\n- **default:** `undefined`\n- Runs during `vite build`, converts output for different platforms\n\n## alias\n- **default:** `{}`\n- Replace values in `import` statements, auto-passed to Vite and TypeScript\n\n```js\n/// file: svelte.config.js\nconst config = {\n\tkit: {\n\t\talias: {\n\t\t\t'my-file': 'path/to/my-file.js',\n\t\t\t'my-directory': 'path/to/my-directory',\n\t\t\t'my-directory/*': 'path/to/my-directory/*'\n\t\t}\n\t}\n};\n```\n\n> Built-in `$lib` alias controlled by `config.kit.files.lib`\n\n## appDir\n- **default:** `\"_app\"`\n- Directory for SvelteKit assets (JS, CSS) and internal routes\n- If `paths.assets` specified, creates two app directories\n\n## csp\nContent Security Policy configuration. Protects against XSS attacks.\n\n```js\n/// file: svelte.config.js\nconst config = {\n\tkit: {\n\t\tcsp: {\n\t\t\tdirectives: {\n\t\t\t\t'script-src': ['self']\n\t\t\t},\n\t\t\treportOnly: {\n\t\t\t\t'script-src': ['self'],\n\t\t\t\t'report-uri': ['/']\n\t\t\t}\n\t\t}\n\t}\n};\n```\n\n- SvelteKit adds nonces/hashes for inline styles/scripts\n- Use `%sveltekit.nonce%` placeholder in `src/app.html`\n- Prerendered pages: CSP via `<meta http-equiv>` tag (ignores `frame-ancestors`, `report-uri`, `sandbox`)\n\n**Properties:**\n- `mode`: `'hash' | 'nonce' | 'auto'` - `'auto'` uses hashes for prerendered, nonces for dynamic\n- `directives`: Added to `Content-Security-Policy` headers\n- `reportOnly`: Added to `Content-Security-Policy-Report-Only` headers\n\n> Most Svelte transitions create inline `<style>` - leave `style-src` unspecified or add `unsafe-inline`\n\n## csrf\nProtection against cross-site request forgery.\n\n**Properties:**\n- `checkOrigin`: **default:** `true`, **deprecated** - Use `trustedOrigins: ['*']` instead. Checks `origin` header for POST/PUT/PATCH/DELETE form submissions\n- `trustedOrigins`: **default:** `[]` - Origins allowed for cross-origin form submissions (e.g., `https://payment-gateway.com`). Use `'*'` to trust all (not recommended)\n\n> CSRF checks only apply in production\n\n## embedded\n- **default:** `false`\n- If `true`, adds event listeners on parent of `%sveltekit.body%` instead of `window`\n- Passes `params` from server instead of inferring from `location.pathname`\n\n## env\nEnvironment variable configuration.\n\n**Properties:**\n- `dir`: **default:** `\".\"` - Directory to search for `.env` files\n- `publicPrefix`: **default:** `\"PUBLIC_\"` - Prefix for client-safe env vars (see `$env/static/public`, `$env/dynamic/public`)\n- `privatePrefix`: **default:** `\"\"`, **since:** v1.21.0 - Prefix for server-only env vars (see `$env/static/private`, `$env/dynamic/private`)\n\n## experimental\nExperimental features - not subject to semantic versioning.\n\n**Properties:**\n- `tracing`: **default:** `{ server: false, serverFile: false }`, **since:** v2.31.0\n  - `server`: **default:** `false` - Enables OpenTelemetry span emission for `handle` hook, `load` functions, form actions, remote functions\n- `instrumentation`: **since:** v2.31.0\n  - `server`: **default:** `false` - Enables `instrumentation.server.js`\n- `remoteFunctions`: **default:** `false` - Enables experimental remote functions\n\n## files (deprecated)\n**Properties:**\n- `src`: **default:** `\"src\"`, **since:** v2.28 - Source code location\n- `assets`: **default:** `\"static\"` - Static files with stable URLs\n- `hooks`:\n  - `client`: **default:** `\"src/hooks.client\"`\n  - `server`: **default:** `\"src/hooks.server\"`\n  - `universal`: **default:** `\"src/hooks\"`, **since:** v2.3.0\n- `lib`: **default:** `\"src/lib\"` - Internal library, accessible as `$lib`\n- `params`: **default:** `\"src/params\"` - Parameter matchers\n- `routes`: **default:** `\"src/routes\"` - App structure files\n- `serviceWorker`: **default:** `\"src/service-worker\"` - Service worker entry point\n- `appTemplate`: **default:** `\"src/app.html\"` - HTML response template\n- `errorTemplate`: **default:** `\"src/error.html\"` - Fallback error template\n\n## inlineStyleThreshold\n- **default:** `0`\n- Inline CSS in `<style>` block if file length (UTF-16 code units) is smaller than this value\n- Fewer requests, better First Contentful Paint, but larger HTML and worse browser caching\n\n## moduleExtensions\n- **default:** `[\".js\", \".ts\"]`\n- File extensions SvelteKit treats as modules\n\n## outDir\n- **default:** `\".svelte-kit\"`\n- Directory for SvelteKit build files (exclude from version control)\n\n## output\n**Properties:**\n- `preloadStrategy`: **default:** `\"modulepreload\"`, **since:** v1.8.4\n  - `'modulepreload'` - Best for Chromium, Firefox 115+, Safari 17+\n  - `'preload-js'` - Prevents waterfalls in Chromium/Safari, modules requested twice in Firefox\n  - `'preload-mjs'` - Uses `.mjs` extension, prevents double-parsing in Chromium (requires proper server config)\n- `bundleStrategy`: **default:** `'split'`, **since:** v2.13.0\n  - `'split'` - Multiple .js/.css files, lazy loaded (recommended)\n  - `'single'` - One .js and one .css file\n  - `'inline'` - All JS/CSS inlined in HTML (usable without server)\n\nFor inline assets with `'inline'`:\n```js\n/// file: vite.config.js\nimport { sveltekit } from '@sveltejs/kit/vite';\nimport { defineConfig } from 'vite';\n\nexport default defineConfig({\n\tplugins: [sveltekit()],\n\tbuild: {\n\t\tassetsInlineLimit: Infinity\n\t}\n});\n```\n\n```svelte\n/// file: src/routes/+layout.svelte\n<script>\n\timport favicon from './favicon.png';\n</script>\n\n<svelte:head>\n\t<link rel=\"icon\" href={favicon} />\n</svelte:head>\n```\n\n## paths\n**Properties:**\n- `assets`: **default:** `\"\"` - Absolute path for serving files (e.g., storage bucket)\n- `base`: **default:** `\"\"` - Root-relative path starting with `/` (e.g., `/base-path`). Prepend to links: `<a href=\"{base}/your-page\">Link</a>` (use `base` from `$app/paths`)\n- `relative`: **default:** `true`, **since:** v1.9.0 - Use relative asset paths. If `false`, always use root-relative paths. Set to `false` if using `<base>` element. SPA fallback pages always use absolute paths\n\n## prerender\nSee [Prerendering](/docs/kit/page-options#prerender).\n\n**Properties:**\n- `concurrency`: **default:** `1` - Max simultaneous prerendered pages\n- `crawl`: **default:** `true` - Find pages by following links from `entries`\n- `entries`: **default:** `[\"*\"]` - Pages to prerender or crawl from. `*` includes all routes with no required `[parameters]`\n- `handleHttpError`: **default:** `\"fail\"`, **since:** v1.15.7 - `'fail' | 'ignore' | 'warn' | (details) => void`\n\n```js\n/// file: svelte.config.js\nconst config = {\n\tkit: {\n\t\tprerender: {\n\t\t\thandleHttpError: ({ path, referrer, message }) => {\n\t\t\t\tif (path === '/not-found' && referrer === '/blog/how-we-built-our-404-page') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthrow new Error(message);\n\t\t\t}\n\t\t}\n\t}\n};\n```\n\n- `handleMissingId`: **default:** `\"fail\"`, **since:** v1.15.7 - Handle hash links without corresponding `id`\n- `handleEntryGeneratorMismatch`: **default:** `\"fail\"`, **since:** v1.16.0 - Handle entry/route mismatches\n- `handleUnseenRoutes`: **default:** `\"fail\"`, **since:** v2.16.0 - Handle prerenderable routes not prerendered\n- `origin`: **default:** `\"http://sveltekit-prerender\"` - Value of `url.origin` during prerendering\n\n## router\n**Properties:**\n- `type`: **default:** `\"pathname\"`, **since:** v2.14.0\n  - `'pathname'` - URL pathname determines route\n  - `'hash'` - Route determined by `location.hash` (disables SSR/prerendering, links must start with `#/`)\n- `resolution`: **default:** `\"client\"`, **since:** v2.17.0\n  - `'client'` - Route manifest served to browser, navigation resolved client-side\n  - `'server'` - Server determines route for each navigation (faster initial load, hidden routes, server interception, but slightly slower unvisited paths)\n\n## typescript\n**Properties:**\n- `config`: **default:** `(config) => config`, **since:** v1.3.0 - Function to edit generated `tsconfig.json`. Paths relative to `.svelte-kit/tsconfig.json`\n\n## version\nManages client-side navigation during deployments. Falls back to full-page navigation on errors with new versions.\n\nForce full-page navigation on version change:\n```html\n/// file: +layout.svelte\n<script>\n\timport { beforeNavigate } from '$app/navigation';\n\timport { updated } from '$app/state';\n\n\tbeforeNavigate(({ willUnload, to }) => {\n\t\tif (updated.current && !willUnload && to?.url) {\n\t\t\tlocation.href = to.url.href;\n\t\t}\n\t});\n</script>\n```\n\n**Properties:**\n- `name`: Current app version (must be deterministic, e.g., commit hash, defaults to build timestamp)\n\n```js\n/// file: svelte.config.js\nimport * as child_process from 'node:child_process';\n\nexport default {\n\tkit: {\n\t\tversion: {\n\t\t\tname: child_process.execSync('git rev-parse HEAD').toString().trim()\n\t\t}\n\t}\n};\n```\n\n- `pollInterval`: **default:** `0` - Milliseconds to poll for version changes. Sets `updated.current` to `true` when detected. `0` disables polling",
    "kit/cli": "# SvelteKit CLI\n\n## Commands\n\nSvelteKit uses **Vite CLI** (via npm scripts):\n- `vite dev` — dev server\n- `vite build` — production build\n- `vite preview` — preview production locally\n\n## svelte-kit sync\n\nCreates `tsconfig.json` and generated types (importable as `./$types` in routes).\n\nRuns automatically as `prepare` script in npm lifecycle. Rarely needs manual execution.",
    "kit/types": "# Generated Types\n\n## Auto-generated `$types`\n\nSvelteKit generates `.d.ts` files for each endpoint/page to avoid manual typing of `params`:\n\n```ts\n/// file: .svelte-kit/types/src/routes/[foo]/[bar]/[baz]/$types.d.ts\nimport type * as Kit from '@sveltejs/kit';\n\ntype RouteParams = {\n\tfoo: string;\n\tbar: string;\n\tbaz: string;\n};\n\nexport type RequestHandler = Kit.RequestHandler<RouteParams>;\nexport type PageLoad = Kit.Load<RouteParams>;\n```\n\n**Usage:**\n\n```js\n/// file: src/routes/[foo]/[bar]/[baz]/+server.js\n/** @type {import('./$types').RequestHandler} */\nexport async function GET({ params }) {\n\t// params is typed with foo, bar, baz\n}\n```\n\n```js\n/// file: src/routes/[foo]/[bar]/[baz]/+page.js\n/** @type {import('./$types').PageLoad} */\nexport async function load({ params, fetch }) {\n\t// params is typed\n}\n```\n\n**Component props (v2.16.0+):**\n\n```svelte\n<!--- file: src/routes/+page.svelte --->\n<script>\n\t/** @type {import('./$types').PageProps} */\n\tlet { data, form } = $props();\n</script>\n```\n\n- `PageProps` = `data: PageData` + `form: ActionData` (if actions exist)\n- `LayoutProps` = `data: LayoutData` + `children: Snippet`\n- `PageData` and `LayoutData` are return types of load functions\n- `ActionData` is union of all `Actions` return values\n\n**Setup:** Your `tsconfig.json` must extend the generated config:\n\n```json\n{ \"extends\": \"./.svelte-kit/tsconfig.json\" }\n```\n\n## Generated tsconfig.json\n\nKey options (don't override):\n\n```json\n{\n\t\"compilerOptions\": {\n\t\t\"paths\": {\n\t\t\t\"$lib\": [\"../src/lib\"],\n\t\t\t\"$lib/*\": [\"../src/lib/*\"]\n\t\t},\n\t\t\"rootDirs\": [\"..\", \"./types\"],\n\t\t\"verbatimModuleSyntax\": true,\n\t\t\"isolatedModules\": true,\n\t\t\"noEmit\": true,\n\t\t\"lib\": [\"esnext\", \"DOM\", \"DOM.Iterable\"],\n\t\t\"moduleResolution\": \"bundler\",\n\t\t\"module\": \"esnext\",\n\t\t\"target\": \"esnext\"\n\t}\n}\n```\n\nUse [`typescript.config`](configuration#typescript) in `svelte.config.js` to modify.\n\n# $lib\n\nAlias to `src/lib` (or [`config.kit.files.lib`](configuration#files)). Avoids `../../../../` imports.\n\n## $lib/server\n\nSubdirectory of `$lib`. SvelteKit prevents importing these modules into client-side code. See [server-only modules](server-only-modules).\n\n# app.d.ts\n\nDefines ambient types via the `App` namespace:\n\n## App.Error\n\nShape of expected/unexpected errors:\n\n```ts\ninterface Error {\n\tmessage: string;\n}\n```\n\n## App.Locals\n\nDefines `event.locals` available in server hooks (`handle`, `handleError`), server `load` functions, and `+server.js`:\n\n```ts\ninterface Locals {}\n```\n\n## App.PageData\n\nShape of `page.data` state and `$page.data` store. Use optional properties for page-specific data. **Don't add index signatures.**\n\n```ts\ninterface PageData {}\n```\n\n## App.PageState\n\nShape of `page.state` for [`pushState`](/docs/kit/$app-navigation#pushState)/[`replaceState`](/docs/kit/$app-navigation#replaceState):\n\n```ts\ninterface PageState {}\n```\n\n## App.Platform\n\nPlatform-specific context from `event.platform` (adapter-provided):\n\n```ts\ninterface Platform {}\n```",
    "mcp/overview": "# Svelte MCP Server\n\nHelps LLMs write better Svelte code via documentation and static analysis.\n\n## Setup\n\nChoose based on MCP version and client (Claude Code, Codex CLI, GitHub Copilot):\n- **Local**: `@sveltejs/mcp`\n- **Remote**: `https://mcp.svelte.dev/mcp`\n\nSee [local-setup](local-setup) or [remote-setup](remote-setup).\n\n## Usage\n\nAdd to `AGENTS.md` or `CLAUDE.md`:\n\n```md\nYou are able to use the Svelte MCP server, where you have access to comprehensive Svelte 5 and SvelteKit documentation. Here's how to use the available tools effectively:\n\n## Available MCP Tools:\n\n### 1. list-sections\n\nUse this FIRST to discover all available documentation sections. Returns a structured list with titles, use_cases, and paths.\nWhen asked about Svelte or SvelteKit topics, ALWAYS use this tool at the start of the chat to find relevant sections.\n\n### 2. get-documentation\n\nRetrieves full documentation content for specific sections. Accepts single or multiple sections.\nAfter calling the list-sections tool, you MUST analyze the returned documentation sections (especially the use_cases field) and then use the get-documentation tool to fetch ALL documentation sections that are relevant for the user's task.\n\n### 3. svelte-autofixer\n\nAnalyzes Svelte code and returns issues and suggestions.\nYou MUST use this tool whenever writing Svelte code before sending it to the user. Keep calling it until no issues or suggestions are returned.\n\n### 4. playground-link\n\nGenerates a Svelte Playground link with the provided code.\nAfter completing the code, ask the user if they want a playground link. Only call this tool after user confirmation and NEVER if code was written to files in their project.\n```\n\nIf supported, use [svelte-task](prompts#svelte-task) prompt for optimal MCP usage.",
    "mcp/local-setup": "# Svelte MCP Server Setup\n\nInstall via npm: `@sveltejs/mcp`\n\nRun with: `npx -y @sveltejs/mcp`\n\n## Client Configurations\n\n### Claude Code\n```bash\nclaude mcp add -t stdio -s [scope] svelte -- npx -y @sveltejs/mcp\n```\n`[scope]`: `user`, `project`, or `local`\n\n### Claude Desktop\nSettings > Developer > Edit Config, add to `claude_desktop_config.json`:\n```json\n{\n\t\"mcpServers\": {\n\t\t\"svelte\": {\n\t\t\t\"command\": \"npx\",\n\t\t\t\"args\": [\"-y\", \"@sveltejs/mcp\"]\n\t\t}\n\t}\n}\n```\n\n### Codex CLI\nAdd to `config.toml` (default: `~/.codex/config.toml`):\n```toml\n[mcp_servers.svelte]\ncommand = \"npx\"\nargs = [\"-y\", \"@sveltejs/mcp\"]\n```\n\n### Gemini CLI\n```bash\ngemini mcp add -t stdio -s [scope] svelte npx -y @sveltejs/mcp\n```\n`[scope]`: `user`, `project`, or `local`\n\n### OpenCode\n```bash\nopencode mcp add\n```\nSelect 'Local' type, enter command: `npx -y @sveltejs/mcp`\n\n### VS Code\nCommand palette > \"MCP: Add Server...\" > \"Command (stdio)\" > `npx -y @sveltejs/mcp` > name: `svelte`\n\n### Cursor\nCommand palette > \"View: Open MCP Settings\" > \"Add custom MCP\", add:\n```json\n{\n\t\"mcpServers\": {\n\t\t\"svelte\": {\n\t\t\t\"command\": \"npx\",\n\t\t\t\"args\": [\"-y\", \"@sveltejs/mcp\"]\n\t\t}\n\t}\n}\n```\n\n### Zed\nCommand palette > \"agent:open settings\" > \"Model Context Protocol (MCP) Servers\" > \"Add Server\" > \"Add Custom Server\":\n```json\n{\n\t\"svelte\": {\n\t\t\"command\": \"npx\",\n\t\t\"args\": [\"-y\", \"@sveltejs/mcp\"]\n\t}\n}\n```\n\n### Other Clients\nUse `stdio` server config: command `npx`, args `-y @sveltejs/mcp`",
    "mcp/remote-setup": "# MCP Server Setup\n\nRemote MCP server: `https://mcp.svelte.dev/mcp`\n\n## Claude Code\n\n```bash\nclaude mcp add -t http -s [scope] svelte https://mcp.svelte.dev/mcp\n```\n`scope`: `user`, `project`, or `local`\n\n## Claude Desktop\n\nSettings > Connectors > Add Custom Connector\n- Name: `svelte`\n- URL: `https://mcp.svelte.dev/mcp`\n\n## Codex CLI\n\nAdd to `~/.codex/config.toml`:\n\n```toml\nexperimental_use_rmcp_client = true\n[mcp_servers.svelte]\nurl = \"https://mcp.svelte.dev/mcp\"\n```\n\n## Gemini CLI\n\n```bash\ngemini mcp add -t http -s [scope] svelte https://mcp.svelte.dev/mcp\n```\n`scope`: `user`, `project`, or `local`\n\n## OpenCode\n\n```bash\nopencode mcp add\n```\nSelect 'Remote', name: `svelte`, URL: `https://mcp.svelte.dev/mcp`\n\n## VS Code\n\nCommand palette > \"MCP: Add Server...\" > \"HTTP (HTTP or Server-Sent-Events)\"\n- URL: `https://mcp.svelte.dev/mcp`\n- Choose Global or Workspace\n\n## Cursor\n\nCommand palette > \"View: Open MCP Settings\" > \"Add custom MCP\"\n\n```json\n{\n\t\"mcpServers\": {\n\t\t\"svelte\": {\n\t\t\t\"url\": \"https://mcp.svelte.dev/mcp\"\n\t\t}\n\t}\n}\n```\n\n## Other Clients\n\nUse `https://mcp.svelte.dev/mcp` as remote server URL per client docs.",
    "mcp/tools": "# MCP Server Tools\n\nThe MCP server provides these tools for LLM interaction with Svelte documentation:\n\n## Available Tools\n\n**`list-sections`** - Lists all available documentation sections\n\n**`get-documentation`** - Fetches current documentation from svelte.dev/docs for requested sections\n\n**`svelte-autofixer`** - Static analysis tool that suggests fixes for generated code. Can run iteratively until all issues resolved\n\n**`playground-link`** - Creates ephemeral playground URL with generated code (code stored in URL only, not on server)",
    "mcp/resources": "# MCP Server Resources\n\n## doc-section\n\nDynamic resource for accessing Svelte documentation sections.\n\n**URI format:** `svelte://slug-of-the-docs.md`\n\n**Returns:** `llms.txt` version of the specified documentation page\n\n**Use case:** Include specific documentation (e.g., transitions) directly in your session without LLM retrieval.",
    "mcp/prompts": "# MCP Server Prompts\n\n## svelte-task\n\nUse this prompt for any Svelte-related development task.\n\n### Instructions\n\n**Documentation Access:**\n- Use `get_documentation` tool with paths from the available docs list\n- Paths cover: CLI tools, SvelteKit, Svelte core, deployment, testing, styling, auth, i18n, etc.\n\n**Code Validation (REQUIRED):**\n1. After writing any Svelte component/module, invoke `svelte-autofixer` tool\n2. Fix all issues/suggestions returned\n3. Re-run `svelte-autofixer` until no issues remain\n4. Only then share code with user\n\n**Playground Links:**\n- After final code version, ask user if they want a playground link\n- If yes, call `playground-link` tool\n- Must include `App.svelte` as entry point\n- Include all files at root level\n\n### Available Documentation Paths\n\n**CLI & Setup:**\n- `cli/overview` - project setup, scaffolding, cli tools\n- `cli/sv-create` - starting new SvelteKit app\n- `cli/sv-add` - adding features (testing, styling, auth, db, adapters)\n- `cli/sv-check` - error checking, CI/CD, unused CSS, a11y\n- `cli/sv-migrate` - upgrading Svelte/SvelteKit versions\n\n**SvelteKit Core:**\n- `kit/introduction` - getting started, framework basics\n- `kit/routing` - navigation, layouts, error pages, API endpoints\n- `kit/load` - data fetching, SSR data, authentication\n- `kit/form-actions` - forms, validation, progressive enhancement\n- `kit/page-options` - prerendering, SSR config, SPA setup\n- `kit/state-management` - SSR state, authentication, persistence\n- `kit/remote-functions` - type-safe client-server communication\n\n**Deployment:**\n- `kit/adapters` - deployment platforms\n- `kit/adapter-node` - Node.js hosting\n- `kit/adapter-static` - SSG, GitHub Pages\n- `kit/adapter-cloudflare` - Cloudflare Workers/Pages\n- `kit/adapter-netlify` - Netlify deployment\n- `kit/adapter-vercel` - Vercel deployment\n\n**Svelte Core:**\n- `svelte/overview` - framework basics\n- `svelte/$state` - reactive state\n- `svelte/$derived` - computed values\n- `svelte/$effect` - side effects, DOM manipulation\n- `svelte/$props` - component props\n- `svelte/$bindable` - two-way binding\n- `svelte/if` - conditional rendering\n- `svelte/each` - lists, iteration\n- `svelte/await` - async data, promises\n- `svelte/snippet` - reusable markup\n- `svelte/bind` - two-way data binding\n- `svelte/transition` - animations\n\n**Advanced:**\n- `kit/hooks` - middleware, auth, logging\n- `kit/errors` - error handling, custom error pages\n- `kit/service-workers` - PWA, offline support\n- `kit/shallow-routing` - modals, history-driven UI\n- `svelte/stores` - shared state, cross-component data\n- `svelte/context` - avoiding prop drilling\n- `svelte/custom-elements` - web components\n\n**Testing & Quality:**\n- `cli/vitest` - unit testing\n- `cli/playwright` - E2E testing\n- `cli/eslint` - linting\n- `cli/prettier` - code formatting\n\n**Integrations:**\n- `cli/tailwindcss` - Tailwind CSS setup\n- `cli/drizzle` - database ORM\n- `cli/lucia` - authentication\n- `cli/mdsvex` - Markdown rendering\n- `cli/paraglide` - i18n\n\n**Migration:**\n- `svelte/v5-migration-guide` - Svelte 4 to 5\n- `kit/migrating-to-sveltekit-2` - SvelteKit 1 to 2\n\n**Reference:**\n- `kit/@sveltejs-kit` - SvelteKit APIs\n- `kit/$app-*` - app modules (environment, forms, navigation, paths, state)\n- `kit/$env-*` - environment variables\n- `svelte/svelte-*` - Svelte APIs (compiler, stores, transitions, etc.)",
    "svelte/overview": "# Svelte Overview\n\nSvelte is a compiler-based UI framework that transforms declarative components (HTML, CSS, JavaScript) into optimized JavaScript.\n\n## Basic Component Structure\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\tfunction greet() {\n\t\talert('Welcome to Svelte!');\n\t}\n</script>\n\n<button onclick={greet}>click me</button>\n\n<style>\n\tbutton {\n\t\tfont-size: 2em;\n\t}\n</style>\n```\n\n**Key Points:**\n- Components contain `<script>`, markup, and `<style>` blocks\n- Event handlers use `onclick` (no colon)\n- Use standalone or with SvelteKit for full-stack apps",
    "svelte/getting-started": "# Getting Started\n\n## SvelteKit (Recommended)\n\nOfficial framework powered by Vite. Create project:\n\n```sh\nnpx sv create myapp\ncd myapp\nnpm install\nnpm run dev\n```\n\n## Alternatives\n\n**Vite standalone:** `npm create vite@latest` → select `svelte`. Generates HTML/JS/CSS in `dist`. Need to add routing library separately. Used for SPAs (also possible with SvelteKit).\n\n**Other bundlers:** Plugins available, but Vite recommended.\n\n## Tooling\n\n- **VS Code:** Official extension\n- **CLI:** `sv check` for type checking\n- **Help:** Discord, Stack Overflow",
    "svelte/svelte-files": "# Components\n\nComponents are `.svelte` files with three optional sections:\n\n```svelte\n<script module>\n\t// module-level logic (rarely used)\n</script>\n\n<script>\n\t// instance-level logic\n</script>\n\n<!-- markup -->\n\n<style>\n\t/* styles */\n</style>\n```\n\n## `<script>`\n\nContains JavaScript/TypeScript (`lang=\"ts\"`) that runs per component instance. Top-level variables are accessible in markup.\n\nUse runes for props and reactivity (covered next section).\n\n## `<script module>`\n\nRuns once when module evaluates, not per instance. Variables accessible in component but not vice versa.\n\n```svelte\n<script module>\n\tlet total = 0;\n</script>\n\n<script>\n\ttotal += 1;\n\tconsole.log(`instantiated ${total} times`);\n</script>\n```\n\nCan `export` bindings (becomes module exports). Cannot `export default` (component is default export).\n\n> **Note:** For TypeScript imports from module blocks in `.ts` files, configure editor with TypeScript plugin.\n\n## `<style>`\n\nCSS is scoped to component:\n\n```svelte\n<style>\n\tp {\n\t\t/* only affects <p> in this component */\n\t\tcolor: burlywood;\n\t}\n</style>\n```",
    "svelte/svelte-js-files": "# `.svelte.js` and `.svelte.ts` files\n\nSvelte operates on `.svelte.js` and `.svelte.ts` files in addition to `.svelte` files.\n\n**Key points:**\n- Behave like regular `.js`/`.ts` modules but can use runes\n- Useful for reusable reactive logic or sharing reactive state\n- **Cannot export reassigned state** (see `$state` limitations)\n\n> New in Svelte 5",
    "svelte/what-are-runes": "# Runes\n\nRunes are symbols that control the Svelte compiler in `.svelte` and `.svelte.js`/`.svelte.ts` files. They are keywords, not functions.\n\n## Syntax\n\nRunes have a `$` prefix and look like functions:\n\n```js\nlet message = $state('hello');\n```\n\n## Key Characteristics\n\n- **No import needed** — they are globals\n- **Not values** — cannot be assigned to variables or passed as arguments\n- **Position-specific** — only valid in certain positions (compiler enforces this)",
    "svelte/$state": "# $state\n\nCreates reactive state that updates the UI when changed.\n\n```svelte\n<script>\n\tlet count = $state(0);\n</script>\n\n<button onclick={() => count++}>\n\tclicks: {count}\n</button>\n```\n\n`count` is just a number, not an object/function. Update it like any variable.\n\n## Deep state\n\nArrays and simple objects become deeply reactive proxies. Triggers granular updates when properties change.\n\n```js\nlet todos = $state([\n\t{\n\t\tdone: false,\n\t\ttext: 'add more todos'\n\t}\n]);\n\n// Triggers updates for this specific property\ntodos[0].done = !todos[0].done;\n\n// New objects are also proxified\ntodos.push({\n\tdone: false,\n\ttext: 'eat lunch'\n});\n```\n\n**Gotcha:** Destructuring breaks reactivity (evaluated at destructure time):\n\n```js\nlet { done, text } = todos[0];\n\n// this will NOT affect the value of `done`\ntodos[0].done = !todos[0].done;\n```\n\n## Classes\n\nUse `$state` in class fields or first assignment in constructor:\n\n```js\nclass Todo {\n\tdone = $state(false);\n\n\tconstructor(text) {\n\t\tthis.text = $state(text);\n\t}\n\n\treset() {\n\t\tthis.text = '';\n\t\tthis.done = false;\n\t}\n}\n```\n\n**Gotcha:** `this` binding in methods. Use inline function:\n\n```svelte\n<button onclick={() => todo.reset()}>\n\treset\n</button>\n```\n\nOr arrow function in class:\n\n```js\nclass Todo {\n\tdone = $state(false);\n\n\tconstructor(text) {\n\t\tthis.text = $state(text);\n\t}\n\n\treset = () => {\n\t\tthis.text = '';\n\t\tthis.done = false;\n\t}\n}\n```\n\n## Built-in classes\n\nImport reactive `Set`, `Map`, `Date`, `URL` from `svelte/reactivity`.\n\n## $state.raw\n\nNon-deep reactive state. Cannot mutate, only reassign:\n\n```js\nlet person = $state.raw({\n\tname: 'Heraclitus',\n\tage: 49\n});\n\n// no effect\nperson.age += 1;\n\n// works - new object\nperson = {\n\tname: 'Heraclitus',\n\tage: 50\n};\n```\n\nBetter performance for large arrays/objects you won't mutate. Can contain reactive state inside.\n\n## $state.snapshot\n\nTakes static snapshot of `$state` proxy:\n\n```svelte\n<script>\n\tlet counter = $state({ count: 0 });\n\n\tfunction onclick() {\n\t\t// Logs `{ count: ... }` not `Proxy { ... }`\n\t\tconsole.log($state.snapshot(counter));\n\t}\n</script>\n```\n\nUse for external libraries/APIs that don't expect proxies (e.g., `structuredClone`).\n\n## Passing state into functions\n\nJavaScript is pass-by-value. To access current values, use functions:\n\n```js\nfunction add(getA, getB) {\n\treturn () => getA() + getB();\n}\n\nlet a = $state(1);\nlet b = $state(2);\nlet total = add(() => a, () => b);\nconsole.log(total()); // 3\n\na = 3;\nb = 4;\nconsole.log(total()); // 7\n```\n\nOr use getters/proxies, or consider classes.\n\n## Passing state across modules\n\n**Cannot directly export reassignable state:**\n\n```js\n// ❌ Not allowed\nexport let count = $state(0);\n\nexport function increment() {\n\tcount += 1;\n}\n```\n\n**Options:**\n\n1. Export object, update properties:\n\n```js\n// ✅ Allowed\nexport const counter = $state({\n\tcount: 0\n});\n\nexport function increment() {\n\tcounter.count += 1;\n}\n```\n\n2. Export getter function:\n\n```js\nlet count = $state(0);\n\nexport function getCount() {\n\treturn count;\n}\n\nexport function increment() {\n\tcount += 1;\n}\n```",
    "svelte/$derived": "# Derived State\n\n## `$derived`\n\nCreates reactive derived values that update when dependencies change:\n\n```svelte\n<script>\n\tlet count = $state(0);\n\tlet doubled = $derived(count * 2);\n</script>\n\n<button onclick={() => count++}>\n\t{doubled}\n</button>\n\n<p>{count} doubled is {doubled}</p>\n```\n\n**Key rules:**\n- Expression must be side-effect free (no `count++`)\n- Can mark class fields as `$derived`\n- Without `$derived`, values don't update when dependencies change\n\n## `$derived.by`\n\nFor complex derivations requiring multiple statements:\n\n```svelte\n<script>\n\tlet numbers = $state([1, 2, 3]);\n\tlet total = $derived.by(() => {\n\t\tlet total = 0;\n\t\tfor (const n of numbers) {\n\t\t\ttotal += n;\n\t\t}\n\t\treturn total;\n\t});\n</script>\n\n<button onclick={() => numbers.push(numbers.length + 1)}>\n\t{numbers.join(' + ')} = {total}\n</button>\n```\n\n`$derived(expression)` equals `$derived.by(() => expression)`\n\n## Dependencies\n\nAnything read synchronously inside `$derived` is a dependency. Use [`untrack`](svelte#untrack) to exempt state from being a dependency.\n\n## Overriding Values\n\nCan temporarily reassign derived values (unless `const`) for optimistic UI:\n\n```svelte\n<script>\n\tlet { post, like } = $props();\n\n\tlet likes = $derived(post.likes);\n\n\tasync function onclick() {\n\t\t// increment the `likes` count immediately...\n\t\tlikes += 1;\n\n\t\t// and tell the server, which will eventually update `post`\n\t\ttry {\n\t\t\tawait like();\n\t\t} catch {\n\t\t\t// failed! roll back the change\n\t\t\tlikes -= 1;\n\t\t}\n\t}\n</script>\n\n<button {onclick}>🧡 {likes}</button>\n```\n\n## Reactivity Behavior\n\nUnlike `$state`, `$derived` doesn't create deep proxies. Values remain as-is, so mutating nested properties affects the original object.\n\n## Destructuring\n\nDestructured variables are all reactive:\n\n```js\nlet { a, b, c } = $derived(stuff());\n```\n\nEquivalent to:\n\n```js\nlet _stuff = $derived(stuff());\nlet a = $derived(_stuff.a);\nlet b = $derived(_stuff.b);\nlet c = $derived(_stuff.c);\n```\n\n## Update Propagation\n\n**Push-pull reactivity:** Dependencies are notified immediately (push), but derived values only recalculate when read (pull).\n\nIf derived value is referentially identical to previous, downstream updates skip:\n\n```svelte\n<script>\n\tlet count = $state(0);\n\tlet large = $derived(count > 10);\n</script>\n\n<button onclick={() => count++}>\n\t{large}\n</button>\n```\n\nButton only updates when `large` changes, not `count`.",
    "svelte/$effect": "# $effect\n\nEffects run when state updates. Only run in browser, not SSR.\n\n**Don't update state inside effects** - leads to complexity and infinite loops. See alternatives below.\n\n## Basic Usage\n\n```svelte\n<script>\n\tlet size = $state(50);\n\tlet color = $state('#ff3e00');\n\tlet canvas;\n\n\t$effect(() => {\n\t\tconst context = canvas.getContext('2d');\n\t\tcontext.clearRect(0, 0, canvas.width, canvas.height);\n\n\t\t// re-runs when `color` or `size` change\n\t\tcontext.fillStyle = color;\n\t\tcontext.fillRect(0, 0, size, size);\n\t});\n</script>\n\n<canvas bind:this={canvas} width=\"100\" height=\"100\"></canvas>\n```\n\nSvelte tracks which state is accessed and re-runs when it changes.\n\n## Lifecycle\n\n- Runs after component mounts to DOM\n- Runs in microtask after state changes\n- Re-runs are batched\n- Can be used anywhere, not just top level (must be called while parent effect running)\n\n## Teardown Functions\n\nReturn a function to cleanup before re-run or component destruction:\n\n```svelte\n<script>\n\tlet count = $state(0);\n\tlet milliseconds = $state(1000);\n\n\t$effect(() => {\n\t\tconst interval = setInterval(() => {\n\t\t\tcount += 1;\n\t\t}, milliseconds);\n\n\t\treturn () => {\n\t\t\t// runs before re-run and on component destroy\n\t\t\tclearInterval(interval);\n\t\t};\n\t});\n</script>\n\n<h1>{count}</h1>\n\n<button onclick={() => (milliseconds *= 2)}>slower</button>\n<button onclick={() => (milliseconds /= 2)}>faster</button>\n```\n\n## Dependencies\n\nAuto-tracks reactive values read **synchronously**. Values read **asynchronously** (after `await`, inside `setTimeout`) are NOT tracked:\n\n```ts\n$effect(() => {\n\tconst context = canvas.getContext('2d');\n\tcontext.clearRect(0, 0, canvas.width, canvas.height);\n\n\t// re-runs when `color` changes\n\tcontext.fillStyle = color;\n\n\tsetTimeout(() => {\n\t\t// does NOT re-run when `size` changes\n\t\tcontext.fillRect(0, 0, size, size);\n\t}, 0);\n});\n```\n\n### Object vs Property Tracking\n\n```svelte\n<script>\n\tlet state = $state({ value: 0 });\n\tlet derived = $derived({ value: state.value * 2 });\n\n\t// runs once - `state` never reassigned\n\t$effect(() => {\n\t\tstate;\n\t});\n\n\t// re-runs when `state.value` changes\n\t$effect(() => {\n\t\tstate.value;\n\t});\n\n\t// re-runs when `state.value` changes - `derived` is new object each time\n\t$effect(() => {\n\t\tderived;\n\t});\n</script>\n\n<button onclick={() => (state.value += 1)}>\n\t{state.value}\n</button>\n\n<p>{state.value} doubled is {derived.value}</p>\n```\n\n### Conditional Dependencies\n\nEffect only depends on values read in **last run**:\n\n```ts\nimport confetti from 'canvas-confetti';\n\nlet condition = $state(true);\nlet color = $state('#ff3e00');\n\n$effect(() => {\n\tif (condition) {\n\t\tconfetti({ colors: [color] }); // tracks `condition` and `color`\n\t} else {\n\t\tconfetti(); // only tracks `condition`\n\t}\n});\n```\n\n## $effect.pre\n\nRuns **before** DOM updates:\n\n```svelte\n<script>\n\timport { tick } from 'svelte';\n\n\tlet div = $state();\n\tlet messages = $state([]);\n\n\t$effect.pre(() => {\n\t\tif (!div) return;\n\n\t\tmessages.length; // track array length\n\n\t\t// autoscroll when new messages added\n\t\tif (div.offsetHeight + div.scrollTop > div.scrollHeight - 20) {\n\t\t\ttick().then(() => {\n\t\t\t\tdiv.scrollTo(0, div.scrollHeight);\n\t\t\t});\n\t\t}\n\t});\n</script>\n\n<div bind:this={div}>\n\t{#each messages as message}\n\t\t<p>{message}</p>\n\t{/each}\n</div>\n```\n\n## $effect.tracking\n\nReturns `true` if code runs inside tracking context (effect or template):\n\n```svelte\n<script>\n\tconsole.log('in component setup:', $effect.tracking()); // false\n\n\t$effect(() => {\n\t\tconsole.log('in effect:', $effect.tracking()); // true\n\t});\n</script>\n\n<p>in template: {$effect.tracking()}</p> <!-- true -->\n```\n\n## $effect.pending\n\nReturns count of pending promises in current boundary (excludes child boundaries):\n\n```svelte\n<button onclick={() => a++}>a++</button>\n<button onclick={() => b++}>b++</button>\n\n<p>{a} + {b} = {await add(a, b)}</p>\n\n{#if $effect.pending()}\n\t<p>pending promises: {$effect.pending()}</p>\n{/if}\n```\n\n## $effect.root\n\nCreates non-tracked scope without auto-cleanup. For manual control and effects outside component init:\n\n```js\nconst destroy = $effect.root(() => {\n\t$effect(() => {\n\t\t// setup\n\t});\n\n\treturn () => {\n\t\t// cleanup\n\t};\n});\n\n// later...\ndestroy();\n```\n\n## When NOT to Use $effect\n\n### ❌ Don't synchronize state\n\n```svelte\n<script>\n\tlet count = $state(0);\n\tlet doubled = $state();\n\n\t// DON'T DO THIS\n\t$effect(() => {\n\t\tdoubled = count * 2;\n\t});\n</script>\n```\n\n### ✅ Use $derived instead\n\n```svelte\n<script>\n\tlet count = $state(0);\n\tlet doubled = $derived(count * 2);\n</script>\n```\n\nFor complex logic: use `$derived.by`. For reassignable values: deriveds can be [directly overridden](as of 5.25).\n\n### ❌ Don't link values with effects\n\n```svelte\n<script>\n\tconst total = 100;\n\tlet spent = $state(0);\n\tlet left = $state(total);\n\n\t// DON'T DO THIS\n\t$effect(() => {\n\t\tleft = total - spent;\n\t});\n\n\t$effect(() => {\n\t\tspent = total - left;\n\t});\n</script>\n\n<label>\n\t<input type=\"range\" bind:value={spent} max={total} />\n\t{spent}/{total} spent\n</label>\n\n<label>\n\t<input type=\"range\" bind:value={left} max={total} />\n\t{left}/{total} left\n</label>\n```\n\n### ✅ Use $derived + function bindings\n\n```svelte\n<script>\n\tconst total = 100;\n\tlet spent = $state(0);\n\tlet left = $derived(total - spent);\n\n\tfunction updateLeft(left) {\n\t\tspent = total - left;\n\t}\n</script>\n\n<label>\n\t<input type=\"range\" bind:value={spent} max={total} />\n\t{spent}/{total} spent\n</label>\n\n<label>\n\t<input type=\"range\" bind:value={() => left, updateLeft} max={total} />\n\t{left}/{total} left\n</label>\n```\n\n**If you must update `$state` in effect and hit infinite loop:** use `untrack()`.",
    "svelte/$props": "# Props\n\nPass props to components like attributes:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport MyComponent from './MyComponent.svelte';\n</script>\n\n<MyComponent adjective=\"cool\" />\n```\n\nReceive props with `$props` rune (destructuring is common):\n\n```svelte\n<!--- file: MyComponent.svelte --->\n<script>\n\tlet { adjective } = $props();\n</script>\n\n<p>this component is {adjective}</p>\n```\n\n## Fallback values\n\nUse destructuring for defaults when prop is unset or `undefined`:\n\n```js\nlet { adjective = 'happy' } = $props();\n```\n\n> **Note:** Fallback values are NOT turned into reactive state proxies.\n\n## Renaming props\n\nRename props for invalid identifiers or keywords:\n\n```js\nlet { super: trouper = 'lights are gonna find me' } = $props();\n```\n\n## Rest props\n\nGet remaining props with rest property:\n\n```js\nlet { a, b, c, ...others } = $props();\n```\n\n## Updating props\n\nProps update when parent changes. Child can temporarily **reassign** props (useful for ephemeral state):\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport Child from './Child.svelte';\n\n\tlet count = $state(0);\n</script>\n\n<button onclick={() => (count += 1)}>\n\tclicks (parent): {count}\n</button>\n\n<Child {count} />\n```\n\n```svelte\n<!--- file: Child.svelte --->\n<script>\n\tlet { count } = $props();\n</script>\n\n<button onclick={() => (count += 1)}>\n\tclicks (child): {count}\n</button>\n```\n\n**Don't mutate props** unless they are [`$bindable`]($bindable):\n\n- Mutating regular objects: no effect\n- Mutating reactive state proxies: works but triggers `ownership_invalid_mutation` warning\n- Mutating fallback values: no effect\n\nUse callback props or `$bindable` to share state between parent/child.\n\n## Type safety\n\nAnnotate props for type safety:\n\n**TypeScript:**\n```svelte\n<script lang=\"ts\">\n\tlet { adjective }: { adjective: string } = $props();\n</script>\n```\n\n**JSDoc:**\n```svelte\n<script>\n\t/** @type {{ adjective: string }} */\n\tlet { adjective } = $props();\n</script>\n```\n\n**With interface:**\n```svelte\n<script lang=\"ts\">\n\tinterface Props {\n\t\tadjective: string;\n\t}\n\n\tlet { adjective }: Props = $props();\n</script>\n```\n\n> **Note:** Native DOM element interfaces available in `svelte/elements` module.\n\n## `$props.id()`\n\nGenerates unique ID per component instance (consistent during SSR hydration). Useful for linking elements:\n\n```svelte\n<script>\n\tconst uid = $props.id();\n</script>\n\n<form>\n\t<label for=\"{uid}-firstname\">First Name: </label>\n\t<input id=\"{uid}-firstname\" type=\"text\" />\n\n\t<label for=\"{uid}-lastname\">Last Name: </label>\n\t<input id=\"{uid}-lastname\" type=\"text\" />\n</form>\n```",
    "svelte/$bindable": "# Component Bindings\n\nProps normally flow parent → child. With `$bindable`, data can flow child → parent. Use sparingly.\n\n## Basic Usage\n\nMark prop as bindable with `$bindable()` rune:\n\n```svelte\n/// file: FancyInput.svelte\n<script>\n\tlet { value = $bindable(), ...props } = $props();\n</script>\n\n<input bind:value={value} {...props} />\n\n<style>\n\tinput {\n\t\tfont-family: 'Comic Sans MS';\n\t\tcolor: deeppink;\n\t}\n</style>\n```\n\nParent binds with `bind:` directive:\n\n```svelte\n/// file: App.svelte\n<script>\n\timport FancyInput from './FancyInput.svelte';\n\n\tlet message = $state('hello');\n</script>\n\n<FancyInput bind:value={message} />\n<p>{message}</p>\n```\n\n## Fallback Values\n\nParent can pass normal prop without `bind:`. Provide fallback for when no prop passed:\n\n```js\n/// file: FancyInput.svelte\nlet { value = $bindable('fallback'), ...props } = $props();\n```\n\n## Notes\n\n- Allows child to mutate state proxy\n- Mutating non-bindable props triggers warning\n- `$bindable` declared with `let`, not `const`",
    "svelte/$inspect": "# $inspect\n\nDev-only rune (noop in production). Re-runs when arguments change. Tracks reactive state deeply.\n\n```svelte\n<script>\n\tlet count = $state(0);\n\tlet message = $state('hello');\n\n\t$inspect(count, message); // console.logs when count or message change\n</script>\n\n<button onclick={() => count++}>Increment</button>\n<input bind:value={message} />\n```\n\n## $inspect(...).with\n\nCustom callback instead of `console.log`. First arg is `\"init\"` or `\"update\"`.\n\n```svelte\n<script>\n\tlet count = $state(0);\n\n\t$inspect(count).with((type, count) => {\n\t\tif (type === 'update') {\n\t\t\tdebugger; // or console.trace, etc\n\t\t}\n\t});\n</script>\n\n<button onclick={() => count++}>Increment</button>\n```\n\n**Tip:** Pass `console.trace` to find change origin:\n\n```js\n// @errors: 2304\n$inspect(stuff).with(console.trace);\n```\n\n## $inspect.trace(...)\n\nAdded in 5.14. Traces function re-runs in effects/derived. Shows which reactive state caused re-run.\n\n```svelte\n<script>\n\timport { doSomeWork } from './elsewhere';\n\n\t$effect(() => {\n\t\t// $inspect.trace must be first statement of function body\n\t\t$inspect.trace();\n\t\tdoSomeWork();\n\t});\n</script>\n```\n\nTakes optional label as first argument.",
    "svelte/$host": "# $host Rune\n\nProvides access to the host element when compiling a component as a custom element.\n\n## Usage\n\n```svelte\n/// file: Stepper.svelte\n<svelte:options customElement=\"my-stepper\" />\n\n<script>\n\tfunction dispatch(type) {\n\t\t$host().dispatchEvent(new CustomEvent(type));\n\t}\n</script>\n\n<button onclick={() => dispatch('decrement')}>decrement</button>\n<button onclick={() => dispatch('increment')}>increment</button>\n```\n\n```svelte\n/// file: App.svelte\n<script>\n\timport './Stepper.svelte';\n\n\tlet count = $state(0);\n</script>\n\n<my-stepper\n\tondecrement={() => count -= 1}\n\tonincrement={() => count += 1}\n></my-stepper>\n\n<p>count: {count}</p>\n```",
    "svelte/basic-markup": "# Svelte 5 Markup\n\n## Tags\n\nLowercase = HTML element. Capitalized/dot notation = component.\n\n```svelte\n<script>\n\timport Widget from './Widget.svelte';\n</script>\n\n<div>\n\t<Widget />\n</div>\n```\n\n## Element Attributes\n\nWork like HTML. Values can contain or be JavaScript expressions.\n\n```svelte\n<input type=checkbox />\n<a href=\"page/{p}\">page {p}</a>\n<button disabled={!clickable}>...</button>\n```\n\n**Boolean attributes**: included if truthy, excluded if falsy.\n**Other attributes**: included unless nullish (`null`/`undefined`).\n\n```svelte\n<input required={false} placeholder=\"This input field is not required\" />\n<div title={null}>This div has no title attribute</div>\n```\n\n**Shorthand**: `{name}` replaces `name={name}`.\n\n```svelte\n<button {disabled}>...</button>\n```\n\n## Component Props\n\nSame rules as attributes. Use shorthand and spread.\n\n```svelte\n<Widget foo={bar} answer={42} text=\"hello\" />\n<Widget a=\"b\" {...things} c=\"d\" />\n```\n\nOrder matters in spreads - later values override earlier ones.\n\n## Events\n\nUse `onclick` (no colon). Event attributes are case sensitive.\n\n```svelte\n<button onclick={() => console.log('clicked')}>click me</button>\n```\n\n- Shorthand works: `<button {onclick}>click me</button>`\n- Spread works: `<button {...thisSpreadContainsEventAttributes}>click me</button>`\n- Fire after bindings (e.g., `oninput` after `bind:value`)\n\n**Passive listeners**: `ontouchstart` and `ontouchmove` are passive for performance. Use `on` from `svelte/events` if you need `preventDefault()`.\n\n### Event Delegation\n\nSvelte delegates these events to app root for performance:\n\n`beforeinput`, `click`, `change`, `dblclick`, `contextmenu`, `focusin`, `focusout`, `input`, `keydown`, `keyup`, `mousedown`, `mousemove`, `mouseout`, `mouseover`, `mouseup`, `pointerdown`, `pointermove`, `pointerout`, `pointerover`, `pointerup`, `touchend`, `touchmove`, `touchstart`\n\n**Gotchas**:\n- Manual dispatch needs `{ bubbles: true }`\n- Avoid `stopPropagation` with `addEventListener` - use `on` from `svelte/events` instead\n- Manual listeners at root run before declarative handlers deeper in DOM\n\n## Text Expressions\n\nJavaScript in curly braces. `null`/`undefined` omitted, others coerced to strings.\n\n```svelte\n<h1>Hello {name}!</h1>\n<p>{a} + {b} = {a + b}.</p>\n<div>{(/^[A-Za-z ]+$/).test(value) ? x : y}</div>\n```\n\n**HTML rendering** (escaped by default):\n\n```svelte\n{@html potentiallyUnsafeHtmlString}\n```\n\n> Escape strings to prevent XSS attacks.\n\n## Comments\n\n```svelte\n<!-- this is a comment! --><h1>Hello world</h1>\n```\n\n**Disable warnings**:\n\n```svelte\n<!-- svelte-ignore a11y_autofocus -->\n<input bind:value={name} autofocus />\n```\n\n**Component documentation**:\n\n````svelte\n<!--\n@component\n- You can use markdown here.\n- You can also use code blocks here.\n- Usage:\n  ```html\n  <Main name=\"Arethra\">\n  ```\n-->\n<script>\n\tlet { name } = $props();\n</script>\n\n<main>\n\t<h1>\n\t\tHello, {name}\n\t</h1>\n</main>\n````",
    "svelte/if": "# Conditional Rendering\n\n## If blocks\n\n```svelte\n{#if expression}...{/if}\n{#if expression}...{:else if expression}...{/if}\n{#if expression}...{:else}...{/if}\n```\n\n**Usage:**\n\n```svelte\n{#if answer === 42}\n\t<p>what was the question?</p>\n{/if}\n```\n\n```svelte\n{#if porridge.temperature > 100}\n\t<p>too hot!</p>\n{:else if 80 > porridge.temperature}\n\t<p>too cold!</p>\n{:else}\n\t<p>just right!</p>\n{/if}\n```\n\n**Note:** Blocks can wrap elements or text within elements.",
    "svelte/each": "# {#each} blocks\n\n## Basic syntax\n\n```svelte\n{#each expression as name}...{/each}\n{#each expression as name, index}...{/each}\n```\n\nWorks with arrays, array-like objects (with `length`), and iterables (`Map`, `Set`, anything usable with `Array.from`).\n\n```svelte\n<h1>Shopping list</h1>\n<ul>\n\t{#each items as item}\n\t\t<li>{item.name} x {item.qty}</li>\n\t{/each}\n</ul>\n```\n\nWith index:\n\n```svelte\n{#each items as item, i}\n\t<li>{i + 1}: {item.name} x {item.qty}</li>\n{/each}\n```\n\n## Keyed each blocks\n\n```svelte\n{#each expression as name (key)}...{/each}\n{#each expression as name, index (key)}...{/each}\n```\n\nKeys enable intelligent updates (insert/move/delete) instead of updating in place. Use strings/numbers for persistent identity.\n\n```svelte\n{#each items as item (item.id)}\n\t<li>{item.name} x {item.qty}</li>\n{/each}\n\n{#each items as item, i (item.id)}\n\t<li>{i + 1}: {item.name} x {item.qty}</li>\n{/each}\n```\n\nDestructuring and rest patterns:\n\n```svelte\n{#each items as { id, name, qty }, i (id)}\n\t<li>{i + 1}: {name} x {qty}</li>\n{/each}\n\n{#each objects as { id, ...rest }}\n\t<li><span>{id}</span><MyComponent {...rest} /></li>\n{/each}\n\n{#each items as [id, ...rest]}\n\t<li><span>{id}</span><MyComponent values={rest} /></li>\n{/each}\n```\n\n## Without item binding\n\n```svelte\n{#each expression}...{/each}\n{#each expression, index}...{/each}\n```\n\nRender something `n` times without binding items:\n\n```svelte\n<div class=\"chess-board\">\n\t{#each { length: 8 }, rank}\n\t\t{#each { length: 8 }, file}\n\t\t\t<div class:black={(rank + file) % 2 === 1}></div>\n\t\t{/each}\n\t{/each}\n</div>\n```\n\n## Else blocks\n\n```svelte\n{#each expression as name}...{:else}...{/each}\n```\n\nRenders when list is empty:\n\n```svelte\n{#each todos as todo}\n\t<p>{todo.text}</p>\n{:else}\n\t<p>No tasks today!</p>\n{/each}\n```",
    "svelte/key": "# `{#key}` Block\n\n## Syntax\n```svelte\n{#key expression}...{/key}\n```\n\n## Usage\n\nDestroys and recreates contents when expression changes.\n\n**Reinstantiate components:**\n```svelte\n{#key value}\n\t<Component />\n{/key}\n```\n\n**Replay transitions on value change:**\n```svelte\n{#key value}\n\t<div transition:fade>{value}</div>\n{/key}\n```",
    "svelte/await": "# {#await}\n\n## Syntax\n\n```svelte\n{#await expression}...{:then name}...{:catch name}...{/await}\n{#await expression}...{:then name}...{/await}\n{#await expression then name}...{/await}\n{#await expression catch name}...{/await}\n```\n\n## Usage\n\nBranch on Promise states: pending, fulfilled, rejected.\n\n```svelte\n{#await promise}\n\t<!-- promise is pending -->\n\t<p>waiting for the promise to resolve...</p>\n{:then value}\n\t<!-- promise was fulfilled or not a Promise -->\n\t<p>The value is {value}</p>\n{:catch error}\n\t<!-- promise was rejected -->\n\t<p>Something went wrong: {error.message}</p>\n{/await}\n```\n\n**Omit catch block:**\n```svelte\n{#await promise}\n\t<p>waiting for the promise to resolve...</p>\n{:then value}\n\t<p>The value is {value}</p>\n{/await}\n```\n\n**Omit pending block:**\n```svelte\n{#await promise then value}\n\t<p>The value is {value}</p>\n{/await}\n```\n\n**Only error state:**\n```svelte\n{#await promise catch error}\n\t<p>The error is {error}</p>\n{/await}\n```\n\n## Gotchas\n\n- **SSR**: Only pending branch renders on server\n- **Non-Promise**: Only `:then` branch renders (including SSR)\n\n## Pattern: Lazy component loading\n\n```svelte\n{#await import('./Component.svelte') then { default: Component }}\n\t<Component />\n{/await}\n```",
    "svelte/snippet": "# Snippets\n\n## Syntax\n\n```svelte\n{#snippet name()}...{/snippet}\n```\n\n```svelte\n{#snippet name(param1, param2, paramN)}...{/snippet}\n```\n\nSnippets create reusable markup chunks. Parameters support defaults and destructuring, but not rest parameters.\n\n## Basic Usage\n\n```svelte\n{#snippet figure(image)}\n\t<figure>\n\t\t<img src={image.src} alt={image.caption} width={image.width} height={image.height} />\n\t\t<figcaption>{image.caption}</figcaption>\n\t</figure>\n{/snippet}\n\n{#each images as image}\n\t{#if image.href}\n\t\t<a href={image.href}>\n\t\t\t{@render figure(image)}\n\t\t</a>\n\t{:else}\n\t\t{@render figure(image)}\n\t{/if}\n{/each}\n```\n\n## Scope\n\nSnippets reference values from `<script>` and parent blocks:\n\n```svelte\n<script>\n\tlet { message = `it's great to see you!` } = $props();\n</script>\n\n{#snippet hello(name)}\n\t<p>hello {name}! {message}!</p>\n{/snippet}\n\n{@render hello('alice')}\n{@render hello('bob')}\n```\n\nSnippets are visible to siblings and their children, not parents:\n\n```svelte\n<div>\n\t{#snippet x()}\n\t\t{#snippet y()}...{/snippet}\n\t\t{@render y()} <!-- ✓ works -->\n\t{/snippet}\n\t\n\t{@render y()} <!-- ✗ error -->\n</div>\n\n{@render x()} <!-- ✗ error -->\n```\n\nSnippets can reference themselves (recursion):\n\n```svelte\n{#snippet countdown(n)}\n\t{#if n > 0}\n\t\t<span>{n}...</span>\n\t\t{@render countdown(n - 1)}\n\t{:else}\n\t\t{@render blastoff()}\n\t{/if}\n{/snippet}\n```\n\n## Passing to Components\n\n### Explicit props\n\n```svelte\n<script>\n\timport Table from './Table.svelte';\n\tconst fruits = [{ name: 'apples', qty: 5, price: 2 }];\n</script>\n\n{#snippet header()}\n\t<th>fruit</th>\n\t<th>qty</th>\n{/snippet}\n\n{#snippet row(d)}\n\t<td>{d.name}</td>\n\t<td>{d.qty}</td>\n{/snippet}\n\n<Table data={fruits} {header} {row} />\n```\n\n### Implicit props\n\nSnippets declared inside component tags become props:\n\n```svelte\n<Table data={fruits}>\n\t{#snippet header()}\n\t\t<th>fruit</th>\n\t{/snippet}\n\n\t{#snippet row(d)}\n\t\t<td>{d.name}</td>\n\t{/snippet}\n</Table>\n```\n\n### Implicit `children`\n\nContent not in snippet declarations becomes `children`:\n\n```svelte\n<!--- file: App.svelte --->\n<Button>click me</Button>\n```\n\n```svelte\n<!--- file: Button.svelte --->\n<script>\n\tlet { children } = $props();\n</script>\n\n<button>{@render children()}</button>\n```\n\n> Avoid props named `children` if using implicit children.\n\n## Optional Snippets\n\nOptional chaining:\n\n```svelte\n{@render children?.()}\n```\n\nWith fallback:\n\n```svelte\n{#if children}\n\t{@render children()}\n{:else}\n\tfallback content\n{/if}\n```\n\n## TypeScript\n\n```svelte\n<script lang=\"ts\">\n\timport type { Snippet } from 'svelte';\n\n\tinterface Props {\n\t\tdata: any[];\n\t\tchildren: Snippet;\n\t\trow: Snippet<[any]>;\n\t}\n\n\tlet { data, children, row }: Props = $props();\n</script>\n```\n\nWith generics:\n\n```svelte\n<script lang=\"ts\" generics=\"T\">\n\timport type { Snippet } from 'svelte';\n\n\tlet {\n\t\tdata,\n\t\tchildren,\n\t\trow\n\t}: {\n\t\tdata: T[];\n\t\tchildren: Snippet;\n\t\trow: Snippet<[T]>;\n\t} = $props();\n</script>\n```\n\n## Exporting Snippets\n\nTop-level snippets can be exported (Svelte 5.5+):\n\n```svelte\n<script module>\n\texport { add };\n</script>\n\n{#snippet add(a, b)}\n\t{a} + {b} = {a + b}\n{/snippet}\n```\n\nMust not reference non-module `<script>` declarations.\n\n## Programmatic Creation\n\nUse [`createRawSnippet`](svelte#createRawSnippet) for advanced cases.\n\n## Migration Note\n\nSnippets replace Svelte 4 slots (now deprecated).",
    "svelte/@render": "# Render\n\nRender snippets with `{@render ...}` tag.\n\n```svelte\n{#snippet sum(a, b)}\n\t<p>{a} + {b} = {a + b}</p>\n{/snippet}\n\n{@render sum(1, 2)}\n{@render sum(3, 4)}\n{@render sum(5, 6)}\n```\n\nExpression can be identifier or arbitrary JS:\n\n```svelte\n{@render (cool ? coolSnippet : lameSnippet)()}\n```\n\n## Optional snippets\n\nUse optional chaining for potentially undefined snippets:\n\n```svelte\n{@render children?.()}\n```\n\nOr `{#if}` with `:else` for fallback:\n\n```svelte\n{#if children}\n\t{@render children()}\n{:else}\n\t<p>fallback content</p>\n{/if}\n```",
    "svelte/@html": "# {@html} Tag\n\nInject raw HTML into components:\n\n```svelte\n<article>\n\t{@html content}\n</article>\n```\n\n**⚠️ Security:** Escape strings or use trusted values only to prevent XSS attacks. Never render unsanitized content.\n\n## Limitations\n\n- Expression must be valid standalone HTML (won't work: `{@html '<div>'}content{@html '</div>'}`)\n- Does not compile Svelte code\n\n## Styling\n\n`{@html}` content is invisible to scoped styles. Use `:global` modifier:\n\n```svelte\n<style>\n\tarticle :global {\n\t\ta { color: hotpink }\n\t\timg { width: 100% }\n\t}\n</style>\n```",
    "svelte/@attach": "# Attachments\n\nFunctions that run in an effect when an element mounts or when state updates. Can return cleanup function.\n\nAvailable in Svelte 5.29+.\n\n## Basic usage\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\t/** @type {import('svelte/attachments').Attachment} */\n\tfunction myAttachment(element) {\n\t\tconsole.log(element.nodeName); // 'DIV'\n\n\t\treturn () => {\n\t\t\tconsole.log('cleaning up');\n\t\t};\n\t}\n</script>\n\n<div {@attach myAttachment}>...</div>\n```\n\nMultiple attachments allowed per element.\n\n## Attachment factories\n\nReturn an attachment from a function:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport tippy from 'tippy.js';\n\n\tlet content = $state('Hello!');\n\n\t/**\n\t * @param {string} content\n\t * @returns {import('svelte/attachments').Attachment}\n\t */\n\tfunction tooltip(content) {\n\t\treturn (element) => {\n\t\t\tconst tooltip = tippy(element, { content });\n\t\t\treturn tooltip.destroy;\n\t\t};\n\t}\n</script>\n\n<input bind:value={content} />\n\n<button {@attach tooltip(content)}>\n\tHover me\n</button>\n```\n\nAttachment recreates when `content` changes or any state read inside the function changes.\n\n## Inline attachments\n\n```svelte\n<!--- file: App.svelte --->\n<canvas\n\twidth={32}\n\theight={32}\n\t{@attach (canvas) => {\n\t\tconst context = canvas.getContext('2d');\n\n\t\t$effect(() => {\n\t\t\tcontext.fillStyle = color;\n\t\t\tcontext.fillRect(0, 0, canvas.width, canvas.height);\n\t\t});\n\t}}\n></canvas>\n```\n\nNested effect runs on `color` changes; outer effect runs once.\n\n## Passing to components\n\n`{@attach ...}` creates a Symbol prop. Spread props to pass attachments to elements:\n\n```svelte\n<!--- file: Button.svelte --->\n<script>\n\t/** @type {import('svelte/elements').HTMLButtonAttributes} */\n\tlet { children, ...props } = $props();\n</script>\n\n<!-- `props` includes attachments -->\n<button {...props}>\n\t{@render children?.()}\n</button>\n```\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport tippy from 'tippy.js';\n\timport Button from './Button.svelte';\n\n\tlet content = $state('Hello!');\n\n\t/**\n\t * @param {string} content\n\t * @returns {import('svelte/attachments').Attachment}\n\t */\n\tfunction tooltip(content) {\n\t\treturn (element) => {\n\t\t\tconst tooltip = tippy(element, { content });\n\t\t\treturn tooltip.destroy;\n\t\t};\n\t}\n</script>\n\n<input bind:value={content} />\n\n<Button {@attach tooltip(content)}>\n\tHover me\n</Button>\n```\n\n## Controlling re-runs\n\nAttachments are fully reactive: `{@attach foo(bar)}` re-runs on changes to `foo`, `bar`, or any state read inside.\n\nTo avoid expensive re-runs, pass data in a function and read in child effect:\n\n```js\n// @errors: 7006 2304 2552\nfunction foo(getBar) {\n\treturn (node) => {\n\t\tveryExpensiveSetupWork(node);\n\n\t\t$effect(() => {\n\t\t\tupdate(node, getBar());\n\t\t});\n\t}\n}\n```\n\n## Programmatic creation\n\nUse [`createAttachmentKey`](svelte-attachments#createAttachmentKey) to add attachments to objects for spreading.\n\n## Converting actions\n\nUse [`fromAction`](svelte-attachments#fromAction) to convert actions to attachments.",
    "svelte/@const": "# {@const}\n\nDefines a local constant within blocks.\n\n```svelte\n{#each boxes as box}\n\t{@const area = box.width * box.height}\n\t{box.width} * {box.height} = {area}\n{/each}\n```\n\n**Restriction:** Only allowed as immediate child of `{#if}`, `{#each}`, `{#snippet}`, `<Component />`, or `<svelte:boundary>`.",
    "svelte/@debug": "# {@debug}\n\nLogs variable values when they change and pauses execution if devtools open.\n\n## Usage\n\n```svelte\n<script>\n\tlet user = {\n\t\tfirstname: 'Ada',\n\t\tlastname: 'Lovelace'\n\t};\n</script>\n\n{@debug user}\n\n<h1>Hello {user.firstname}!</h1>\n```\n\n## Syntax Rules\n\n**Accepts:** Comma-separated variable names only\n**Rejects:** Expressions, property access, array indices, operators\n\n```svelte\n<!-- ✓ Valid -->\n{@debug user}\n{@debug user1, user2, user3}\n\n<!-- ✗ Invalid -->\n{@debug user.firstname}\n{@debug myArray[0]}\n{@debug !isReady}\n{@debug typeof user === 'object'}\n```\n\n## No Arguments\n\n`{@debug}` without arguments triggers on _any_ state change:\n\n```svelte\n{@debug}\n```",
    "svelte/bind": "# Bindings\n\nData flows down (parent → child) by default. `bind:` allows data to flow up (child → parent).\n\n## Syntax\n\n```svelte\n<input bind:value={value} />\n<input bind:value /> <!-- shorthand when names match -->\n```\n\nSvelte creates event listeners to update bound values. Most bindings are two-way; some are readonly.\n\n## Function bindings\n\nAvailable in 5.9.0+. Allows validation/transformation:\n\n```svelte\n<input bind:value={\n\t() => value,\n\t(v) => value = v.toLowerCase()}\n/>\n```\n\nFor readonly bindings, use `null` for getter:\n\n```svelte\n<div\n\tbind:clientWidth={null, redraw}\n\tbind:clientHeight={null, redraw}\n>...</div>\n```\n\n## `<input bind:value>`\n\nBinds to input's `value` property:\n\n```svelte\n<script>\n\tlet message = $state('hello');\n</script>\n\n<input bind:value={message} />\n<p>{message}</p>\n```\n\nNumeric inputs (`type=\"number\"` or `type=\"range\"`) coerce to number. Empty/invalid values are `undefined`.\n\nSince 5.6.0: `defaultValue` attribute sets reset value for forms:\n\n```svelte\n<script>\n\tlet value = $state('');\n</script>\n\n<form>\n\t<input bind:value defaultValue=\"not the empty string\">\n\t<input type=\"reset\" value=\"Reset\">\n</form>\n```\n\n## `<input bind:checked>`\n\nFor checkboxes:\n\n```svelte\n<label>\n\t<input type=\"checkbox\" bind:checked={accepted} />\n\tAccept terms and conditions\n</label>\n```\n\nSince 5.6.0: `defaultChecked` sets reset value:\n\n```svelte\n<script>\n\tlet checked = $state(true);\n</script>\n\n<form>\n\t<input type=\"checkbox\" bind:checked defaultChecked={true}>\n\t<input type=\"reset\" value=\"Reset\">\n</form>\n```\n\n## `<input bind:indeterminate>`\n\nFor indeterminate checkbox state:\n\n```svelte\n<script>\n\tlet checked = $state(false);\n\tlet indeterminate = $state(true);\n</script>\n\n<form>\n\t<input type=\"checkbox\" bind:checked bind:indeterminate>\n\n\t{#if indeterminate}\n\t\twaiting...\n\t{:else if checked}\n\t\tchecked\n\t{:else}\n\t\tunchecked\n\t{/if}\n</form>\n```\n\n## `<input bind:group>`\n\nFor radio buttons (mutually exclusive) and checkbox groups (array):\n\n```svelte\n<!--- file: BurritoChooser.svelte --->\n<script>\n\tlet tortilla = $state('Plain');\n\n\t/** @type {string[]} */\n\tlet fillings = $state([]);\n</script>\n\n<!-- grouped radio inputs are mutually exclusive -->\n<label><input type=\"radio\" bind:group={tortilla} value=\"Plain\" /> Plain</label>\n<label><input type=\"radio\" bind:group={tortilla} value=\"Whole wheat\" /> Whole wheat</label>\n<label><input type=\"radio\" bind:group={tortilla} value=\"Spinach\" /> Spinach</label>\n\n<!-- grouped checkbox inputs populate an array -->\n<label><input type=\"checkbox\" bind:group={fillings} value=\"Rice\" /> Rice</label>\n<label><input type=\"checkbox\" bind:group={fillings} value=\"Beans\" /> Beans</label>\n<label><input type=\"checkbox\" bind:group={fillings} value=\"Cheese\" /> Cheese</label>\n<label><input type=\"checkbox\" bind:group={fillings} value=\"Guac (extra)\" /> Guac (extra)</label>\n```\n\n> Only works if inputs are in same component.\n\n## `<input bind:files>`\n\nFor `type=\"file\"`. Use `DataTransfer` to update programmatically:\n\n```svelte\n<script>\n\tlet files = $state();\n\n\tfunction clear() {\n\t\tfiles = new DataTransfer().files; // null or undefined does not work\n\t}\n</script>\n\n<label for=\"avatar\">Upload a picture:</label>\n<input accept=\"image/png, image/jpeg\" bind:files id=\"avatar\" name=\"avatar\" type=\"file\" />\n<button onclick={clear}>clear</button>\n```\n\n## `<select bind:value>`\n\nBinds to selected option's `value` (any type, not just strings):\n\n```svelte\n<select bind:value={selected}>\n\t<option value={a}>a</option>\n\t<option value={b}>b</option>\n\t<option value={c}>c</option>\n</select>\n```\n\nMultiple select binds to array:\n\n```svelte\n<select multiple bind:value={fillings}>\n\t<option value=\"Rice\">Rice</option>\n\t<option value=\"Beans\">Beans</option>\n\t<option value=\"Cheese\">Cheese</option>\n\t<option value=\"Guac (extra)\">Guac (extra)</option>\n</select>\n```\n\nOmit `value` if it matches text:\n\n```svelte\n<select multiple bind:value={fillings}>\n\t<option>Rice</option>\n\t<option>Beans</option>\n\t<option>Cheese</option>\n\t<option>Guac (extra)</option>\n</select>\n```\n\nUse `selected` attribute for default/reset value:\n\n```svelte\n<select bind:value={selected}>\n\t<option value={a}>a</option>\n\t<option value={b} selected>b</option>\n\t<option value={c}>c</option>\n</select>\n```\n\n## `<audio>`\n\n**Two-way bindings:**\n- `currentTime`, `playbackRate`, `paused`, `volume`, `muted`\n\n**Readonly bindings:**\n- `duration`, `buffered`, `seekable`, `seeking`, `ended`, `readyState`, `played`\n\n```svelte\n<audio src={clip} bind:duration bind:currentTime bind:paused></audio>\n```\n\n## `<video>`\n\nSame as `<audio>` plus readonly `videoWidth` and `videoHeight`.\n\n## `<img>`\n\nReadonly bindings:\n- `naturalWidth`, `naturalHeight`\n\n## `<details bind:open>`\n\n```svelte\n<details bind:open={isOpen}>\n\t<summary>How do you comfort a JavaScript bug?</summary>\n\t<p>You console it.</p>\n</details>\n```\n\n## Contenteditable bindings\n\nFor `contenteditable` elements:\n- `innerHTML`, `innerText`, `textContent`\n\n```svelte\n<div contenteditable=\"true\" bind:innerHTML={html}></div>\n```\n\n## Dimensions\n\nReadonly bindings using `ResizeObserver`:\n- `clientWidth`, `clientHeight`, `offsetWidth`, `offsetHeight`\n- `contentRect`, `contentBoxSize`, `borderBoxSize`, `devicePixelContentBoxSize`\n\n```svelte\n<div bind:offsetWidth={width} bind:offsetHeight={height}>\n\t<Chart {width} {height} />\n</div>\n```\n\n> `display: inline` elements (except intrinsic dimensions like `<img>`) need different display style. CSS transforms don't trigger callbacks.\n\n## bind:this\n\nGet DOM node reference (available after mount):\n\n```svelte\n<script>\n\t/** @type {HTMLCanvasElement} */\n\tlet canvas;\n\n\t$effect(() => {\n\t\tconst ctx = canvas.getContext('2d');\n\t\tdrawStuff(ctx);\n\t});\n</script>\n\n<canvas bind:this={canvas}></canvas>\n```\n\nWorks with components:\n\n```svelte\n<!--- file: App.svelte --->\n<ShoppingCart bind:this={cart} />\n\n<button onclick={() => cart.empty()}> Empty shopping cart </button>\n```\n\n```svelte\n<!--- file: ShoppingCart.svelte --->\n<script>\n\t// All instance exports are available on the instance object\n\texport function empty() {\n\t\t// ...\n\t}\n</script>\n```\n\n## Component property bindings\n\nBind to component props:\n\n```svelte\n<Keypad bind:value={pin} />\n```\n\nMark props as bindable with `$bindable()`:\n\n```svelte\n<script>\n\tlet { readonlyProperty, bindableProperty = $bindable() } = $props();\n</script>\n```\n\nBindable properties with fallback:\n\n```svelte\n<script>\n\tlet { bindableProperty = $bindable('fallback value') } = $props();\n</script>\n```\n\nFallback only applies when not bound. When bound with fallback, parent must provide non-`undefined` value.",
    "svelte/use": "# Actions\n\n> **Note:** Svelte 5.29+ recommends using attachments instead for better flexibility.\n\nActions are functions called when an element mounts. Use `use:` directive.\n\n## Basic Usage\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\t/** @type {import('svelte/action').Action} */\n\tfunction myaction(node) {\n\t\t// node mounted in DOM\n\n\t\t$effect(() => {\n\t\t\t// setup goes here\n\n\t\t\treturn () => {\n\t\t\t\t// teardown goes here\n\t\t\t};\n\t\t});\n\t}\n</script>\n\n<div use:myaction>...</div>\n```\n\n## With Arguments\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\t/** @type {import('svelte/action').Action} */\n\tfunction myaction(node, data) {\n\t\t// ...\n\t}\n</script>\n\n<div use:myaction={data}>...</div>\n```\n\n**Key:** Action called once on mount (not SSR). Does NOT re-run if argument changes.\n\n## Typing\n\n`Action<NodeType, Parameter, CustomEvents>`\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\t/**\n\t * @type {import('svelte/action').Action<\n\t * \tHTMLDivElement,\n\t * \tundefined,\n\t * \t{\n\t * \t\tonswiperight: (e: CustomEvent) => void;\n\t * \t\tonswipeleft: (e: CustomEvent) => void;\n\t * \t\t// ...\n\t * \t}\n\t * >}\n\t */\n\tfunction gestures(node) {\n\t\t$effect(() => {\n\t\t\t// ...\n\t\t\tnode.dispatchEvent(new CustomEvent('swipeleft'));\n\n\t\t\t// ...\n\t\t\tnode.dispatchEvent(new CustomEvent('swiperight'));\n\t\t});\n\t}\n</script>\n\n<div\n\tuse:gestures\n\tonswipeleft={next}\n\tonswiperight={prev}\n>...</div>\n```",
    "svelte/transition": "# Transitions\n\nTransitions trigger when elements enter/leave DOM due to state changes. All elements in a transitioning block stay in DOM until all transitions complete.\n\n`transition:` = bidirectional (smoothly reversible)\n\n```svelte\n<script>\n\timport { fade } from 'svelte/transition';\n\n\tlet visible = $state(false);\n</script>\n\n<button onclick={() => visible = !visible}>toggle</button>\n\n{#if visible}\n\t<div transition:fade>fades in and out</div>\n{/if}\n```\n\n## Local vs Global\n\n**Local** (default): plays only when own block created/destroyed\n**Global**: plays when any parent block changes\n\n```svelte\n{#if x}\n\t{#if y}\n\t\t<p transition:fade>fades in and out only when y changes</p>\n\n\t\t<p transition:fade|global>fades in and out when x or y change</p>\n\t{/if}\n{/if}\n```\n\n## Built-in Transitions\n\nImport from [`svelte/transition`](svelte-transition) module.\n\n## Parameters\n\n```svelte\n{#if visible}\n\t<div transition:fade={{ duration: 2000 }}>fades in and out over two seconds</div>\n{/if}\n```\n\n## Custom Transitions\n\n```js\ntransition = (node: HTMLElement, params: any, options: { direction: 'in' | 'out' | 'both' }) => {\n\tdelay?: number,\n\tduration?: number,\n\teasing?: (t: number) => number,\n\tcss?: (t: number, u: number) => string,\n\ttick?: (t: number, u: number) => void\n}\n```\n\n**`css` function**: Generates web animation keyframes (preferred - runs off main thread)\n- `t`: 0→1 after easing (in transitions: 0→1, out: 1→0)\n- `u`: 1 - t\n- Called repeatedly before transition starts\n\n```svelte\n<script>\n\timport { elasticOut } from 'svelte/easing';\n\n\t/** @type {boolean} */\n\texport let visible;\n\n\t/**\n\t * @param {HTMLElement} node\n\t * @param {{ delay?: number, duration?: number, easing?: (t: number) => number }} params\n\t */\n\tfunction whoosh(node, params) {\n\t\tconst existingTransform = getComputedStyle(node).transform.replace('none', '');\n\n\t\treturn {\n\t\t\tdelay: params.delay || 0,\n\t\t\tduration: params.duration || 400,\n\t\t\teasing: params.easing || elasticOut,\n\t\t\tcss: (t, u) => `transform: ${existingTransform} scale(${t})`\n\t\t};\n\t}\n</script>\n\n{#if visible}\n\t<div in:whoosh>whooshes in</div>\n{/if}\n```\n\n**`tick` function**: Called during transition (use `css` if possible)\n\n```svelte\n<script>\n\texport let visible = false;\n\n\t/**\n\t * @param {HTMLElement} node\n\t * @param {{ speed?: number }} params\n\t */\n\tfunction typewriter(node, { speed = 1 }) {\n\t\tconst valid = node.childNodes.length === 1 && node.childNodes[0].nodeType === Node.TEXT_NODE;\n\n\t\tif (!valid) {\n\t\t\tthrow new Error(`This transition only works on elements with a single text node child`);\n\t\t}\n\n\t\tconst text = node.textContent;\n\t\tconst duration = text.length / (speed * 0.01);\n\n\t\treturn {\n\t\t\tduration,\n\t\t\ttick: (t) => {\n\t\t\t\tconst i = ~~(text.length * t);\n\t\t\t\tnode.textContent = text.slice(0, i);\n\t\t\t}\n\t\t};\n\t}\n</script>\n\n{#if visible}\n\t<p in:typewriter={{ speed: 1 }}>The quick brown fox jumps over the lazy dog</p>\n{/if}\n```\n\n**Return function instead of object**: Executes in next microtask, enables crossfade effects.\n\n**`options` parameter**: Contains `direction` ('in', 'out', or 'both')\n\n## Events\n\n- `introstart`\n- `introend`\n- `outrostart`\n- `outroend`\n\n```svelte\n{#if visible}\n\t<p\n\t\ttransition:fly={{ y: 200, duration: 2000 }}\n\t\tonintrostart={() => (status = 'intro started')}\n\t\tonoutrostart={() => (status = 'outro started')}\n\t\tonintroend={() => (status = 'intro ended')}\n\t\tonoutroend={() => (status = 'outro ended')}\n\t>\n\t\tFlies in and out\n\t</p>\n{/if}\n```",
    "svelte/in-and-out": "# `in:` and `out:` Directives\n\nNon-bidirectional transitions. Unlike `transition:`, `in` and `out` play independently — if block is outroed during `in` transition, `in` continues playing alongside `out` (doesn't reverse). Aborted `out` transitions restart from scratch.\n\n```svelte\n<script>\n  import { fade, fly } from 'svelte/transition';\n  \n  let visible = $state(false);\n</script>\n\n<label>\n  <input type=\"checkbox\" bind:checked={visible}>\n  visible\n</label>\n\n{#if visible}\n\t<div in:fly={{ y: 200 }} out:fade>flies in, fades out</div>\n{/if}\n```",
    "svelte/animate": "# Animations\n\nAnimations trigger when contents of a keyed each block are re-ordered. They do NOT run on add/remove, only when existing item indices change. Must be on immediate child of keyed each block.\n\n## Basic Usage\n\n```svelte\n<!-- When `list` is reordered the animation will run -->\n{#each list as item, index (item)}\n\t<li animate:flip>{item}</li>\n{/each}\n```\n\n## Animation Parameters\n\n```svelte\n{#each list as item, index (item)}\n\t<li animate:flip={{ delay: 500 }}>{item}</li>\n{/each}\n```\n\n## Custom Animation Functions\n\n**Signature:**\n```js\nanimation = (node: HTMLElement, { from: DOMRect, to: DOMRect }, params: any) => {\n\tdelay?: number,\n\tduration?: number,\n\teasing?: (t: number) => number,\n\tcss?: (t: number, u: number) => string,\n\ttick?: (t: number, u: number) => void\n}\n```\n\n- `from`: DOMRect at start position\n- `to`: DOMRect at end position after reorder\n- `t`: value 0→1 after easing applied\n- `u`: equals `1 - t`\n\n### Using `css` (preferred)\n\nCreates web animation that runs off main thread.\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport { cubicOut } from 'svelte/easing';\n\n\t/**\n\t * @param {HTMLElement} node\n\t * @param {{ from: DOMRect; to: DOMRect }} states\n\t * @param {any} params\n\t */\n\tfunction whizz(node, { from, to }, params) {\n\t\tconst dx = from.left - to.left;\n\t\tconst dy = from.top - to.top;\n\n\t\tconst d = Math.sqrt(dx * dx + dy * dy);\n\n\t\treturn {\n\t\t\tdelay: 0,\n\t\t\tduration: Math.sqrt(d) * 120,\n\t\t\teasing: cubicOut,\n\t\t\tcss: (t, u) => `transform: translate(${u * dx}px, ${u * dy}px) rotate(${t * 360}deg);`\n\t\t};\n\t}\n</script>\n\n{#each list as item, index (item)}\n\t<div animate:whizz>{item}</div>\n{/each}\n```\n\n### Using `tick`\n\nRuns during animation. Use `css` when possible to avoid jank.\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport { cubicOut } from 'svelte/easing';\n\n\t/**\n\t * @param {HTMLElement} node\n\t * @param {{ from: DOMRect; to: DOMRect }} states\n\t * @param {any} params\n\t */\n\tfunction whizz(node, { from, to }, params) {\n\t\tconst dx = from.left - to.left;\n\t\tconst dy = from.top - to.top;\n\n\t\tconst d = Math.sqrt(dx * dx + dy * dy);\n\n\t\treturn {\n\t\t\tdelay: 0,\n\t\t\tduration: Math.sqrt(d) * 120,\n\t\t\teasing: cubicOut,\n\t\t\ttick: (t, u) => Object.assign(node.style, { color: t > 0.5 ? 'Pink' : 'Blue' })\n\t\t};\n\t}\n</script>\n\n{#each list as item, index (item)}\n\t<div animate:whizz>{item}</div>\n{/each}\n```",
    "svelte/style": "# style: directive\n\nShorthand for setting styles on elements.\n\n## Basic Usage\n\n```svelte\n<!-- These are equivalent -->\n<div style:color=\"red\">...</div>\n<div style=\"color: red;\">...</div>\n```\n\n## With Expressions\n\n```svelte\n<div style:color={myColor}>...</div>\n```\n\n## Shorthand Form\n\n```svelte\n<div style:color>...</div>\n```\n\n## Multiple Styles\n\n```svelte\n<div style:color style:width=\"12rem\" style:background-color={darkMode ? 'black' : 'white'}>...</div>\n```\n\n## Important Modifier\n\n```svelte\n<div style:color|important=\"red\">...</div>\n```\n\n## Precedence\n\n`style:` directives always take precedence over `style` attributes, even over `!important`:\n\n```svelte\n<div style:color=\"red\" style=\"color: blue\">This will be red</div>\n<div style:color=\"red\" style=\"color: blue !important\">This will still be red</div>\n```",
    "svelte/class": "# Classes\n\n## Attributes\n\nPrimitive values:\n\n```svelte\n<div class={large ? 'large' : 'small'}>...</div>\n```\n\n> **Note:** Falsy values are stringified (`class=\"false\"`), except `undefined`/`null` which omit the attribute.\n\n### Objects and arrays (Svelte 5.16+)\n\nUses [clsx](https://github.com/lukeed/clsx) internally.\n\n**Object** - truthy keys are added:\n\n```svelte\n<script>\n\tlet { cool } = $props();\n</script>\n\n<!-- results in `class=\"cool\"` if `cool` is truthy,\n     `class=\"lame\"` otherwise -->\n<div class={{ cool, lame: !cool }}>...</div>\n```\n\n**Array** - truthy values combined:\n\n```svelte\n<!-- if `faded` and `large` are both truthy, results in\n     `class=\"saturate-0 opacity-50 scale-200\"` -->\n<div class={[faded && 'saturate-0 opacity-50', large && 'scale-200']}>...</div>\n```\n\n**Nested arrays/objects** - automatically flattened. Useful for combining local classes with props:\n\n```svelte\n<!--- file: Button.svelte --->\n<script>\n\tlet props = $props();\n</script>\n\n<button {...props} class={['cool-button', props.class]}>\n\t{@render props.children?.()}\n</button>\n```\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport Button from './Button.svelte';\n\tlet useTailwind = $state(false);\n</script>\n\n<Button\n\tonclick={() => useTailwind = true}\n\tclass={{ 'bg-blue-700 sm:w-1/2': useTailwind }}\n>\n\tAccept the inevitability of Tailwind\n</Button>\n```\n\n**TypeScript** (Svelte 5.19+):\n\n```svelte\n<script lang=\"ts\">\n\timport type { ClassValue } from 'svelte/elements';\n\n\tconst props: { class: ClassValue } = $props();\n</script>\n\n<div class={['original', props.class]}>...</div>\n```\n\n## The `class:` directive\n\nLegacy conditional class syntax (pre-5.16):\n\n```svelte\n<!-- These are equivalent -->\n<div class={{ cool, lame: !cool }}>...</div>\n<div class:cool={cool} class:lame={!cool}>...</div>\n```\n\nShorthand when name matches value:\n\n```svelte\n<div class:cool class:lame={!cool}>...</div>\n```\n\n> **Note:** Prefer `class` attribute over `class:` - more powerful and composable.",
    "svelte/await-expressions": "# Async in Svelte 5\n\n## Setup\n\nEnable in `svelte.config.js` (experimental in 5.36+, stable in Svelte 6):\n\n```js\n/// file: svelte.config.js\nexport default {\n\tcompilerOptions: {\n\t\texperimental: {\n\t\t\tasync: true\n\t\t}\n\t}\n};\n```\n\n## Usage\n\nUse `await` in three places:\n- Top level of `<script>`\n- Inside `$derived(...)`\n- Inside markup\n\n```svelte\n<script>\n\tlet a = $state(1);\n\tlet b = $state(2);\n\n\tasync function add(a, b) {\n\t\tawait new Promise((f) => setTimeout(f, 500)); // artificial delay\n\t\treturn a + b;\n\t}\n</script>\n\n<input type=\"number\" bind:value={a}>\n<input type=\"number\" bind:value={b}>\n\n<p>{a} + {b} = {await add(a, b)}</p>\n```\n\n## Synchronized Updates\n\nUI updates wait for async work to complete - prevents inconsistent states. If you increment `a`, the `<p>` won't show `2 + 2 = 3`, it waits and shows `2 + 2 = 4` when resolved.\n\nUpdates can overlap - fast updates render while slow ones are still pending.\n\n## Concurrency\n\nIndependent `await` expressions run in parallel:\n\n```svelte\n<p>{await one()}</p>\n<p>{await two()}</p>\n```\n\nBoth `one()` and `two()` run simultaneously.\n\nSequential `await` in `<script>` runs normally. Exception: independent `$derived` update independently:\n\n```js\n// these will run sequentially the first time,\n// but will update independently\nlet a = $derived(await one());\nlet b = $derived(await two());\n```\n\n> **Warning:** Sequential derived awaits trigger [`await_waterfall`](runtime-warnings#Client-warnings-await_waterfall) warning\n\n## Loading States\n\n**Initial loading:** Use `<svelte:boundary>` with `pending` snippet (shown only on first load, not updates).\n\n**Subsequent updates:** Use `$effect.pending()` for spinners/indicators.\n\n**Wait for completion:** Use `settled()`:\n\n```js\nimport { tick, settled } from 'svelte';\n\nasync function onclick() {\n\tupdating = true;\n\n\t// without this, the change to `updating` will be\n\t// grouped with the other changes, meaning it\n\t// won't be reflected in the UI\n\tawait tick();\n\n\tcolor = 'octarine';\n\tanswer = 42;\n\n\tawait settled();\n\n\t// any updates affected by `color` or `answer`\n\t// have now been applied\n\tupdating = false;\n}\n```\n\n## Error Handling\n\nErrors bubble to nearest [error boundary](svelte-boundary).\n\n## SSR\n\nAwait `render()` for async SSR:\n\n```js\n/// file: server.js\nimport { render } from 'svelte/server';\nimport App from './App.svelte';\n\nconst { head, body } = await render(App);\n```\n\nBoundaries with `pending` snippets render that snippet during SSR. Other `await` expressions resolve before `render()` returns.\n\n## Caveats\n\n- Experimental: breaking changes possible outside semver major\n- Effect execution order changes: block effects (`{#if}`, `{#each}`) now run before `$effect.pre`/`beforeUpdate` in same component",
    "svelte/scoped-styles": "# Svelte 5 Styles\n\n## Scoped CSS\n\nCSS in `<style>` is scoped by default using a hash-based class (e.g. `svelte-123xyz`).\n\n```svelte\n<style>\n\tp {\n\t\t/* this will only affect <p> elements in this component */\n\t\tcolor: burlywood;\n\t}\n</style>\n```\n\n## Specificity\n\nScoped selectors get +0-1-0 specificity from the scoping class. Component `p` selector beats global `p` selector, even if global loads later.\n\nMultiple scoping classes use `:where(.svelte-xyz123)` after the first to avoid further specificity increases.\n\n## Scoped keyframes\n\n`@keyframes` names are scoped to the component. `animation` rules are adjusted automatically.\n\n```svelte\n<style>\n\t.bouncy {\n\t\tanimation: bounce 10s;\n\t}\n\n\t/* these keyframes are only accessible inside this component */\n\t@keyframes bounce {\n\t\t/* ... */\n\t}\n</style>\n```",
    "svelte/global-styles": "# Svelte 5 Styles: Global Selectors\n\n## :global(...)\n\nApply styles globally to specific selectors:\n\n```svelte\n<style>\n\t:global(body) {\n\t\t/* applies to <body> */\n\t\tmargin: 0;\n\t}\n\n\tdiv :global(strong) {\n\t\t/* applies to all <strong> elements, in any component,\n\t\t   that are inside <div> elements belonging\n\t\t   to this component */\n\t\tcolor: goldenrod;\n\t}\n\n\tp:global(.big.red) {\n\t\t/* applies to all <p> elements belonging to this component\n\t\t   with `class=\"big red\"`, even if it is applied\n\t\t   programmatically (for example by a library) */\n\t}\n</style>\n```\n\n**Global keyframes:** Prepend with `-global-`, which gets removed at compile time:\n\n```svelte\n<style>\n\t@keyframes -global-my-animation-name {\n\t\t/* code goes here */\n\t}\n</style>\n```\n\n## :global {...}\n\nApply styles globally to groups of selectors:\n\n```svelte\n<style>\n\t:global {\n\t\t/* applies to every <div> in your application */\n\t\tdiv { ... }\n\n\t\t/* applies to every <p> in your application */\n\t\tp { ... }\n\t}\n\n\t.a :global {\n\t\t/* applies to every `.b .c .d` element, in any component,\n\t\t   that is inside an `.a` element in this component */\n\t\t.b .c .d {...}\n\t}\n</style>\n```",
    "svelte/custom-properties": "# CSS Custom Properties\n\n## Passing to Components\n\nPass CSS custom properties (static or dynamic) to components:\n\n```svelte\n<Slider\n\tbind:value\n\tmin={0}\n\tmax={100}\n\t--track-color=\"black\"\n\t--thumb-color=\"rgb({r} {g} {b})\"\n/>\n```\n\n**How it works:** Desugars to wrapper element with inline styles:\n\n```svelte\n<svelte-css-wrapper style=\"display: contents; --track-color: black; --thumb-color: rgb({r} {g} {b})\">\n\t<Slider\n\t\tbind:value\n\t\tmin={0}\n\t\tmax={100}\n\t/>\n</svelte-css-wrapper>\n```\n\nFor SVG elements, uses `<g>` wrapper:\n\n```svelte\n<g style=\"--track-color: black; --thumb-color: rgb({r} {g} {b})\">\n\t<Slider\n\t\tbind:value\n\t\tmin={0}\n\t\tmax={100}\n\t/>\n</g>\n```\n\n## Using in Components\n\nRead custom properties with `var()` and fallback values:\n\n```svelte\n<style>\n\t.track {\n\t\tbackground: var(--track-color, #aaa);\n\t}\n\n\t.thumb {\n\t\tbackground: var(--thumb-color, blue);\n\t}\n</style>\n```\n\n**Note:** Properties don't need to be on component directly—can be defined on parent elements or `:root` in global stylesheet.\n\n**Gotcha:** Wrapper element affects CSS selectors using `>` combinator targeting direct children.",
    "svelte/nested-style-elements": "# Styles\n\n## Top-level `<style>` tag\n- Only **one** top-level `<style>` per component\n- Gets scoped and processed\n\n## Nested `<style>` tags\n- Can nest `<style>` inside elements/logic blocks\n- **Not scoped or processed** - inserted as-is into DOM\n- Styles apply globally\n\n```svelte\n<div>\n\t<style>\n\t\t/* this style tag will be inserted as-is */\n\t\tdiv {\n\t\t\t/* this will apply to all `<div>` elements in the DOM */\n\t\t\tcolor: red;\n\t\t}\n\t</style>\n</div>\n```",
    "svelte/svelte-boundary": "# `<svelte:boundary>`\n\nWalls off parts of your app to:\n- Show UI while `await` expressions resolve\n- Handle rendering/effect errors and show fallback UI\n\n**Important**: Only catches errors during rendering and at top level of `$effect`. Does NOT catch errors in event handlers, `setTimeout`, or async work.\n\nWhen boundary handles an error, existing content is removed.\n\n## Properties\n\n### `pending`\n\nShows snippet until all `await` expressions inside boundary resolve. Only shown on first render, not subsequent updates (use `$effect.pending()` for those).\n\n```svelte\n<svelte:boundary>\n\t<p>{await delayed('hello!')}</p>\n\n\t{#snippet pending()}\n\t\t<p>loading...</p>\n\t{/snippet}\n</svelte:boundary>\n```\n\n### `failed`\n\nRenders when error thrown inside boundary. Receives `error` and `reset` function.\n\n```svelte\n<svelte:boundary>\n\t<FlakyComponent />\n\n\t{#snippet failed(error, reset)}\n\t\t<button onclick={reset}>oops! try again</button>\n\t{/snippet}\n</svelte:boundary>\n```\n\nCan pass explicitly: `<svelte:boundary {failed}>` or implicitly by declaring inside boundary.\n\n### `onerror`\n\nFunction called with `error` and `reset` arguments. Useful for error tracking or using error/reset outside boundary.\n\n```svelte\n<script>\n\tlet error = $state(null);\n\tlet reset = $state(() => {});\n\n\tfunction onerror(e, r) {\n\t\terror = e;\n\t\treset = r;\n\t}\n</script>\n\n<svelte:boundary {onerror}>\n\t<FlakyComponent />\n</svelte:boundary>\n\n{#if error}\n\t<button onclick={() => {\n\t\terror = null;\n\t\treset();\n\t}}>\n\t\toops! try again\n\t</button>\n{/if}\n```\n\nErrors in `onerror` (or rethrown errors) bubble to parent boundary if exists.",
    "svelte/svelte-window": "# `<svelte:window>`\n\nAdd event listeners to `window` without cleanup or SSR checks. Must be at component top level.\n\n## Events\n\n```svelte\n<script>\n\tfunction handleKeydown(event) {\n\t\talert(`pressed the ${event.key} key`);\n\t}\n</script>\n\n<svelte:window onkeydown={handleKeydown} />\n```\n\n## Bindings\n\nBindable properties:\n- `innerWidth` (readonly)\n- `innerHeight` (readonly)\n- `outerWidth` (readonly)\n- `outerHeight` (readonly)\n- `scrollX`\n- `scrollY`\n- `online` (readonly, alias for `window.navigator.onLine`)\n- `devicePixelRatio` (readonly)\n\n```svelte\n<svelte:window bind:scrollY={y} />\n```\n\n**Gotcha:** Initial binding values don't trigger scroll (accessibility). Only subsequent changes scroll. To scroll on render, use `scrollTo()` in `$effect`.",
    "svelte/svelte-document": "# `<svelte:document>`\n\nAdds event listeners and actions to `document`. Binds to document properties.\n\n## Syntax\n\n```svelte\n<svelte:document onevent={handler} />\n```\n\n```svelte\n<svelte:document bind:prop={value} />\n```\n\n## Usage\n\nMust be at top level of component, never inside blocks or elements.\n\n```svelte\n<svelte:document onvisibilitychange={handleVisibilityChange} use:someAction />\n```\n\n## Bindable Properties (readonly)\n\n- `activeElement`\n- `fullscreenElement`\n- `pointerLockElement`\n- `visibilityState`",
    "svelte/svelte-body": "# `<svelte:body>`\n\n```svelte\n<svelte:body onevent={handler} />\n```\n\nAdds event listeners to `document.body` for events that don't fire on `window` (e.g., `mouseenter`, `mouseleave`). Also supports [actions](use).\n\n**Constraints:**\n- Must be at top level of component\n- Cannot be inside blocks or elements\n\n**Example:**\n```svelte\n<svelte:body onmouseenter={handleMouseenter} onmouseleave={handleMouseleave} use:someAction />\n```",
    "svelte/svelte-head": "# `<svelte:head>`\n\nInserts elements into `document.head`. During SSR, `head` content is exposed separately from `body`.\n\n**Rules:**\n- Must be at top level of component\n- Cannot be inside blocks or elements\n\n```svelte\n<svelte:head>\n\t<title>Hello world!</title>\n\t<meta name=\"description\" content=\"This is where the description goes for SEO\" />\n</svelte:head>\n```",
    "svelte/svelte-element": "# `<svelte:element>`\n\nRenders dynamic elements unknown at author time (e.g., from CMS).\n\n```svelte\n<svelte:element this={expression} />\n```\n\n## Key Points\n\n- Properties and event listeners are applied to the element\n- Only `bind:this` binding supported (built-in bindings don't work)\n- If `this` is nullish, element and children won't render\n- `this` must be valid DOM element tag (not `#text`, `svelte:head`, etc.)\n\n## Gotchas\n\n**Void elements with children throw runtime error in dev:**\n\n```svelte\n<script>\n\tlet tag = $state('hr');\n</script>\n\n<svelte:element this={tag}>\n\tThis text cannot appear inside an hr element\n</svelte:element>\n```\n\n**Explicit namespace when needed:**\n\n```svelte\n<svelte:element this={tag} xmlns=\"http://www.w3.org/2000/svg\" />\n```",
    "svelte/svelte-options": "# `<svelte:options>`\n\nPer-component compiler options.\n\n## Syntax\n\n```svelte\n<svelte:options option={value} />\n```\n\n## Options\n\n- `runes={true}` — force runes mode\n- `runes={false}` — force legacy mode\n- `namespace=\"...\"` — namespace for component: `\"html\"` (default), `\"svg\"`, or `\"mathml\"`\n- `customElement={...}` — [options](custom-elements#Component-options) for compiling as custom element. String value used as `tag` option\n- `css=\"injected\"` — inject styles inline: `<style>` tag in `head` (SSR) or via JavaScript (client)\n\n## Example\n\n```svelte\n<svelte:options customElement=\"my-custom-element\" />\n```",
    "svelte/stores": "# Svelte Stores\n\n## Store Basics\n\nA store is an object with a `.subscribe` method. Access store values in components by prefixing with `$`:\n\n```svelte\n<script>\n\timport { writable } from 'svelte/store';\n\n\tconst count = writable(0);\n\tconsole.log($count); // logs 0\n\n\tcount.set(1);\n\tconsole.log($count); // logs 1\n\n\t$count = 2;\n\tconsole.log($count); // logs 2\n</script>\n```\n\n**Rules:**\n- `$` prefix auto-subscribes/unsubscribes\n- Store must be declared at top level (not in `if` blocks or functions)\n- Assignments to `$store` call `.set` method\n- Local variables must not use `$` prefix\n\n## When to Use Stores\n\n**Svelte 5:** Prefer runes for most cases:\n\n```ts\n/// file: state.svelte.js\nexport const userState = $state({\n\tname: 'name',\n\t/* ... */\n});\n```\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport { userState } from './state.svelte.js';\n</script>\n\n<p>User name: {userState.name}</p>\n<button onclick={() => {\n\tuserState.name = 'new name';\n}}>\n\tchange name\n</button>\n```\n\n**Use stores for:**\n- Complex asynchronous data streams\n- Manual control over updates/subscriptions\n- RxJS interoperability\n\n## svelte/store\n\n### `writable`\n\nStore with `set` and `update` methods:\n\n```js\n/// file: store.js\nimport { writable } from 'svelte/store';\n\nconst count = writable(0);\n\ncount.subscribe((value) => {\n\tconsole.log(value);\n}); // logs '0'\n\ncount.set(1); // logs '1'\n\ncount.update((n) => n + 1); // logs '2'\n```\n\n**With start/stop function:**\n\n```js\n/// file: store.js\nimport { writable } from 'svelte/store';\n\nconst count = writable(0, () => {\n\tconsole.log('got a subscriber');\n\treturn () => console.log('no more subscribers');\n});\n\ncount.set(1); // does nothing\n\nconst unsubscribe = count.subscribe((value) => {\n\tconsole.log(value);\n}); // logs 'got a subscriber', then '1'\n\nunsubscribe(); // logs 'no more subscribers'\n```\n\nSecond argument is called when subscribers go 0→1, must return cleanup function called when 1→0.\n\n### `readable`\n\nStore that cannot be set from outside:\n\n```ts\nimport { readable } from 'svelte/store';\n\nconst time = readable(new Date(), (set) => {\n\tset(new Date());\n\n\tconst interval = setInterval(() => {\n\t\tset(new Date());\n\t}, 1000);\n\n\treturn () => clearInterval(interval);\n});\n\nconst ticktock = readable('tick', (set, update) => {\n\tconst interval = setInterval(() => {\n\t\tupdate((sound) => (sound === 'tick' ? 'tock' : 'tick'));\n\t}, 1000);\n\n\treturn () => clearInterval(interval);\n});\n```\n\n### `derived`\n\nDerive from one or more stores:\n\n```ts\nimport { derived } from 'svelte/store';\n\nconst doubled = derived(a, ($a) => $a * 2);\n```\n\n**Async with `set`/`update`:**\n\n```ts\nimport { derived } from 'svelte/store';\n\nconst delayed = derived(\n\ta,\n\t($a, set) => {\n\t\tsetTimeout(() => set($a), 1000);\n\t},\n\t2000\n);\n\nconst delayedIncrement = derived(a, ($a, set, update) => {\n\tset($a);\n\tsetTimeout(() => update((x) => x + 1), 1000);\n\t// every time $a produces a value, this produces two\n\t// values, $a immediately and then $a + 1 a second later\n});\n```\n\n**With cleanup:**\n\n```ts\nimport { derived } from 'svelte/store';\n\nconst tick = derived(\n\tfrequency,\n\t($frequency, set) => {\n\t\tconst interval = setInterval(() => {\n\t\t\tset(Date.now());\n\t\t}, 1000 / $frequency);\n\n\t\treturn () => {\n\t\t\tclearInterval(interval);\n\t\t};\n\t},\n\t2000\n);\n```\n\n**Multiple stores:**\n\n```ts\nimport { derived } from 'svelte/store';\n\nconst summed = derived([a, b], ([$a, $b]) => $a + $b);\n\nconst delayed = derived([a, b], ([$a, $b], set) => {\n\tsetTimeout(() => set($a + $b), 1000);\n});\n```\n\n### `readonly`\n\nMake store read-only:\n\n```js\nimport { readonly, writable } from 'svelte/store';\n\nconst writableStore = writable(1);\nconst readableStore = readonly(writableStore);\n\nreadableStore.subscribe(console.log);\n\nwritableStore.set(2); // console: 2\n// @errors: 2339\nreadableStore.set(2); // ERROR\n```\n\n### `get`\n\nRead value without subscribing (not recommended in hot paths):\n\n```ts\nimport { get } from 'svelte/store';\n\nconst value = get(store);\n```\n\n## Store Contract\n\n```ts\nstore = { subscribe: (subscription: (value: any) => void) => (() => void), set?: (value: any) => void }\n```\n\n**Requirements:**\n1. `.subscribe(fn)` must immediately call `fn` with current value synchronously\n2. `.subscribe()` must return unsubscribe function\n3. All active subscriptions called synchronously when value changes\n4. Optional `.set(value)` makes it a writable store\n\nCompatible with RxJS Observables (`.subscribe` can return object with `.unsubscribe` method).",
    "svelte/context": "# Context\n\nAllows components to access values from parent components without prop-drilling.\n\n## Basic Usage\n\nParent sets context with `setContext(key, value)`:\n\n```svelte\n<!--- file: Parent.svelte --->\n<script>\n\timport { setContext } from 'svelte';\n\n\tsetContext('my-context', 'hello from Parent.svelte');\n</script>\n```\n\nChild retrieves with `getContext`:\n\n```svelte\n<!--- file: Child.svelte --->\n<script>\n\timport { getContext } from 'svelte';\n\n\tconst message = getContext('my-context');\n</script>\n\n<h1>{message}, inside Child.svelte</h1>\n```\n\nKey and value can be any JavaScript value.\n\n**Available functions:** `setContext`, `getContext`, `hasContext`, `getAllContexts`\n\n## Context with Reactive State\n\nStore reactive state in context:\n\n```svelte\n<script>\n\timport { setContext } from 'svelte';\n\timport Child from './Child.svelte';\n\n\tlet counter = $state({\n\t\tcount: 0\n\t});\n\n\tsetContext('counter', counter);\n</script>\n\n<button onclick={() => counter.count += 1}>\n\tincrement\n</button>\n\n<Child />\n<Child />\n<Child />\n```\n\n**Gotcha:** Mutate properties, don't reassign:\n\n```svelte\n<!-- ❌ Wrong - breaks the link -->\n<button onclick={() => counter = { count: 0 }}>\n\treset\n</button>\n\n<!-- ✅ Correct -->\n<button onclick={() => counter.count = 0}>\n\treset\n</button>\n```\n\n## Type-Safe Context Pattern\n\nWrap context calls in helper functions:\n\n```js\n/// file: context.js\n// @filename: ambient.d.ts\ninterface User {}\n\n// @filename: index.js\n// ---cut---\nimport { getContext, setContext } from 'svelte';\n\nconst key = {};\n\n/** @param {User} user */\nexport function setUserContext(user) {\n\tsetContext(key, user);\n}\n\nexport function getUserContext() {\n\treturn /** @type {User} */ (getContext(key));\n}\n```\n\n## Context vs Global State\n\n**Don't use global state modules for SSR:**\n\n```js\n/// file: state.svelte.js\nexport const myGlobalState = $state({\n\tuser: {\n\t\t// ...\n\t}\n\t// ...\n});\n```\n\nMutating global state during SSR can leak data between requests. Context is request-scoped and solves this problem.",
    "svelte/lifecycle-hooks": "# Component Lifecycle\n\nIn Svelte 5, lifecycle = creation + destruction. Updates aren't component-level; only affected render effects react to state changes.\n\n## `onMount`\n\nRuns callback when component mounts to DOM. Must be called during component initialization. **Doesn't run on server.**\n\n```svelte\n<script>\n\timport { onMount } from 'svelte';\n\n\tonMount(() => {\n\t\tconsole.log('the component has mounted');\n\t});\n</script>\n```\n\n**Cleanup:** Return a function to run on unmount.\n\n```svelte\n<script>\n\timport { onMount } from 'svelte';\n\n\tonMount(() => {\n\t\tconst interval = setInterval(() => {\n\t\t\tconsole.log('beep');\n\t\t}, 1000);\n\n\t\treturn () => clearInterval(interval);\n\t});\n</script>\n```\n\n> Only works with synchronous functions. `async` functions return a `Promise`.\n\n## `onDestroy`\n\nRuns immediately before component unmounts. **Only lifecycle hook that runs server-side.**\n\n```svelte\n<script>\n\timport { onDestroy } from 'svelte';\n\n\tonDestroy(() => {\n\t\tconsole.log('the component is being destroyed');\n\t});\n</script>\n```\n\n## `tick`\n\nReturns promise that resolves after pending state changes apply (or next microtask if none).\n\n```svelte\n<script>\n\timport { tick } from 'svelte';\n\n\t$effect.pre(() => {\n\t\tconsole.log('the component is about to update');\n\t\ttick().then(() => {\n\t\t\t\tconsole.log('the component just updated');\n\t\t});\n\t});\n</script>\n```\n\n## Deprecated: `beforeUpdate` / `afterUpdate`\n\n**Not available in rune mode.** Use `$effect.pre` (before update) and `$effect` (after update) instead. Runes are more granular and only react to referenced dependencies.\n\n### Migration Example: Chat Autoscroll\n\n**Problem with `beforeUpdate`:** Fires on every update, requiring manual checks.\n\n**Solution with `$effect.pre`:** Only runs when `messages` changes.\n\n- [Before](/playground/untitled#H4sIAAAAAAAAE31WXa_bNgz9K6yL1QmWOLlrC-w6H8MeBgwY9tY9NfdBtmlbiywZkpyPBfnvo2zLcZK28AWuRPGI5OGhkEuQc4EmiL9eAskqDOLg97oOZoE9125jDigs0t6oRqfOsjap5rXd7uTO8qpW2sIFEsyVxn_qjFmcAcstar-xPN3DFXKtKgi768IVgQku0ELj3Lgs_kZjWIEGNpAzYXDlHWyJFZI1zJjeh4O5uvl_DY8oUkVeVoFuJKYls-_CGYS25Aboj0EtWNqel0wWoBoLTGZgmdgDS9zW4Uz4NsrswPHoyutN4xInkylstnBxdmIhh8m7xzqmoNE2Wq46n1RJQzEbq4g-JQSl7e-HDx-GdaTy3KD9E3lRWvj5Zu9QX1QN20dj7zyHz8s-1S6lW7Cpz3RnXTcm04hIlfdFuO8p2mQ5-3a06cqjrn559bF_2NHOnRZ5I1PLlXQNyQT-hedMHeUEDyjtdMxsa4n2eIbNhlTwhyRthaOKOmYtniwF6pwt0wXa6MBEg0OibZec27gz_dk3UrZ6hB2LLYoiv521Yd8Gt-foTrfhiCDP0lC9VUUhcDLU49Xe_9943cNvEArHfAjxeBTovvXiNpFynfEDpIIZs9kFbg52QbeNHWZzebz32s7xHco3nJAJl1nshmhz8dYOQJDyZetnbb2gTWe-vEeWlrfpZMavr56ldb29eNt6UXvgwgFbp_WC0tl2RK25rGk6lYz3nUI2lzvBXGHhPZPGWmKUXFNBKqdaW259wl_aHbiqoVIZdpE60Nax6IOujT0LbFFxIVTCxCRR2XloUcYNvSbnGHKBp763jHoj59xiZWJI0Wm0P_m3MSS985xkasn-cFq20xTDy3J5KFcjgUTD69BHdcHIjz431z28IqlxGcPSfdFnrGDZn6gD6lyo45zyHAD-btczf-98nhQxHEvKfeUtOVkSejD3q-9X7JbzjGtsdUxlKdFU8qGsT78uaw848syWMXz85Waq2Gnem4mAn3prweq4q6Y3JEpnqMmnPoFRgmd3ySW0LLRqSKlwYHriCvJvUs2yjMaaoA-XzTXLeGMe45zmhv_XAno3Mj0xF7USuqNvnE9H343QHlq-eAgxpbTPNR9yzUkgLjwSR0NK4wKoxy-jDg-9vy8sUSToakzW-9fX13Em9Q8T6Z26uZhBN36XUYo5q7ggLXBZoub2Ofv7g6GCZfTxe034NCjiudXj7Omla0eTfo7QBPOcYxbE7qG-vl3_B1G-_i_JCAAA)\n- [After](/playground/untitled#H4sIAAAAAAAAE31WXa-jNhD9K7PsdknUQJLurtRLPqo-VKrU1327uQ8GBnBjbGSb5KZR_nvHgMlXtyIS9njO-MyZGZRzUHCBJkhez4FkNQZJ8HvTBLPAnhq3MQcUFmlvVKszZ1mbTPPGbndyZ3ndKG3hDJZne7hAoVUNYY8JV-RBPgIt2AprhA18MpZZnIQ50_twuvLHNRrDSjRXj9fwiCJTBLIKdCsxq5j9EM4gtBU3QD8GjWBZd14xWYJqLTCZg2ViDyx1W4cz4dv0hsiB49FRHkyfsCgws3GjcTKZwmYLZ2feWc9o1W8zJQ2Fb62i5JUQRNRHgs-fx3WsisKg_RN5WVn4-WrvUd9VA9tH4-AcwbfFQIpkLWByvWzqSe2sk3kyjUlOec_XPU-3TRaz_75tuvKoi19e3OvipSpamVmupJM2F_gXnnJ1lBM8oLQjHceys8R7PMFms4HwD2lRhzeEe-EsvluSrHe2TJdo4wMTLY48XKwPzm0KGm2r5ajFtRYU4TWOY7-ddWHfxhDP0QkQhnf5PWRnVVkKnIx8fZsOb5dR16nwG4TCCRdCMphWQ7z1_DoOcp3zA2SCGbPZBa5jd0G_TRxmc36Me-mG6A7l60XIlMs8ce2-OXtrDyBItdz6qVjPadObzx-RZdV1nJjx64tXad1sz962njceOHfAzmk9JzrbXqg1lw3NkZL7vgE257t-uMDcO6attSSokpmgFqVMO2U93e_dDlzOUKsc-3t6zNZp6K9cG3sS2KGSUqiUiUmq8tNYoJwbmvpTAoXA96GyjCojI26xNglk6DpwOPm7NdRYp4ia0JL94bTqRiGB5WJxqFY37RGPoz3c6i4jP3rcUA7wmhqNywQW7om_YQ2L4UQdUBdCHSPiOQJ8bFcxHzeK0jKBY0XcV95SkCWlD9t-9eOM3TLKucauiyktJdpaPqT19ddF4wFHntsqgS-_XE01e48GMwnw02AtWZP02QyGVOkcNfk072CU4PkduZSWpVYt9SkcmJ64hPwHpWF5ziVls3wIFmmW89Y83vMeGf5PBxjcyPSkXNy10J18t3x6-a6CDtBq6SGklNKeazFyLahB3PVIGo2UbhOgGi9vKjzW_j6xVFFD17difXx5ebll0vwvkcGpn4sZ9MN3vqFYsJoL6gUuK9TcPrO_PxgzWMRfflSEr2NHPJf6lj1957rRpH8CNMG84JgHidUtXt4u_wK21LXERAgAAA==)\n\n```svelte\n<script>\n\timport { beforeUpdate, afterUpdate, tick } from 'svelte';\n\n\tlet updatingMessages = false;\n\tlet theme = $state('dark');\n\tlet messages = $state([]);\n\n\tlet viewport;\n\n\tbeforeUpdate(() => {\n\t$effect.pre(() => {\n\t\tif (!updatingMessages) return;\n\t\tmessages;\n\t\tconst autoscroll = viewport && viewport.offsetHeight + viewport.scrollTop > viewport.scrollHeight - 50;\n\n\t\tif (autoscroll) {\n\t\t\ttick().then(() => {\n\t\t\t\tviewport.scrollTo(0, viewport.scrollHeight);\n\t\t\t});\n\t\t}\n\n\t\tupdatingMessages = false;\n\t});\n\n\tfunction handleKeydown(event) {\n\t\tif (event.key === 'Enter') {\n\t\t\tconst text = event.target.value;\n\t\t\tif (!text) return;\n\n\t\t\tupdatingMessages = true;\n\t\t\tmessages = [...messages, text];\n\t\t\tevent.target.value = '';\n\t\t}\n\t}\n\n\tfunction toggle() {\n\t\ttheme = theme === 'dark' ? 'light' : 'dark';\n\t}\n</script>\n\n<div class:dark={theme === 'dark'}>\n\t<div bind:this={viewport}>\n\t\t{#each messages as message}\n\t\t\t<p>{message}</p>\n\t\t{/each}\n\t</div>\n\n\t<input onkeydown={handleKeydown} />\n\n\t<button onclick={toggle}> Toggle dark mode </button>\n</div>\n```",
    "svelte/imperative-component-api": "# Imperative Component API\n\nRoot component creation APIs for client/server.\n\n## `mount`\n\nInstantiates and mounts component to target:\n\n```js\n// @errors: 2322\nimport { mount } from 'svelte';\nimport App from './App.svelte';\n\nconst app = mount(App, {\n\ttarget: document.querySelector('#app'),\n\tprops: { some: 'property' }\n});\n```\n\n**Key differences from Svelte 4:**\n- Effects (including `onMount`, actions) don't run during `mount`\n- Use `flushSync()` to force pending effects to run (e.g., in tests)\n\nCan mount multiple components per page or dynamically within app.\n\n## `unmount`\n\nUnmounts component created with `mount` or `hydrate`:\n\n```js\nimport { mount, unmount } from 'svelte';\nimport App from './App.svelte';\n\nconst app = mount(App, { target: document.body });\n\n// later\nunmount(app, { outro: true });\n```\n\n- `options.outro: true` - plays transitions before removal\n- Returns `Promise` that resolves after transitions (if `outro: true`) or immediately\n\n## `render`\n\nServer-only (requires `server` compile option). Returns `body` and `head` HTML:\n\n```js\n// @errors: 2724 2305 2307\nimport { render } from 'svelte/server';\nimport App from './App.svelte';\n\nconst result = render(App, {\n\tprops: { some: 'property' }\n});\nresult.body; // HTML for somewhere in this <body> tag\nresult.head; // HTML for somewhere in this <head> tag\n```\n\n## `hydrate`\n\nLike `mount`, but reuses SSR HTML from `render` and makes it interactive:\n\n```js\n// @errors: 2322\nimport { hydrate } from 'svelte';\nimport App from './App.svelte';\n\nconst app = hydrate(App, {\n\ttarget: document.querySelector('#app'),\n\tprops: { some: 'property' }\n});\n```\n\nEffects don't run during `hydrate` — use `flushSync()` after if needed.",
    "svelte/testing": "# Testing\n\nSvelte is unopinionated about testing frameworks. Use [Vitest](https://vitest.dev/), [Jasmine](https://jasmine.github.io/), [Cypress](https://www.cypress.io/), [Playwright](https://playwright.dev/), etc.\n\n## Unit and Component Tests with Vitest\n\n### Setup\n\nInstall Vitest:\n```sh\nnpm install -D vitest\n```\n\nConfigure `vite.config.js`:\n```js\n/// file: vite.config.js\nimport { defineConfig } from 'vitest/config';\n\nexport default defineConfig({\n\t// Tell Vitest to use `browser` entry points in package.json\n\tresolve: process.env.VITEST\n\t\t? { conditions: ['browser'] }\n\t\t: undefined\n});\n```\n\n### Unit Tests\n\nTest `.js/.ts` files directly:\n\n```js\n/// file: multiplier.svelte.test.js\nimport { flushSync } from 'svelte';\nimport { expect, test } from 'vitest';\nimport { multiplier } from './multiplier.svelte.js';\n\ntest('Multiplier', () => {\n\tlet double = multiplier(0, 2);\n\n\texpect(double.value).toEqual(0);\n\n\tdouble.set(5);\n\n\texpect(double.value).toEqual(10);\n});\n```\n\n```js\n/// file: multiplier.svelte.js\n/**\n * @param {number} initial\n * @param {number} k\n */\nexport function multiplier(initial, k) {\n\tlet count = $state(initial);\n\n\treturn {\n\t\tget value() {\n\t\t\treturn count * k;\n\t\t},\n\t\t/** @param {number} c */\n\t\tset: (c) => {\n\t\t\tcount = c;\n\t\t}\n\t};\n}\n```\n\n### Using Runes in Tests\n\nRunes work in test files with `.svelte` extension:\n\n```js\n/// file: multiplier.svelte.test.js\nimport { flushSync } from 'svelte';\nimport { expect, test } from 'vitest';\nimport { multiplier } from './multiplier.svelte.js';\n\ntest('Multiplier', () => {\n\tlet count = $state(0);\n\tlet double = multiplier(() => count, 2);\n\n\texpect(double.value).toEqual(0);\n\n\tcount = 5;\n\n\texpect(double.value).toEqual(10);\n});\n```\n\nFor effects, wrap tests in `$effect.root`:\n\n```js\n/// file: logger.svelte.test.js\nimport { flushSync } from 'svelte';\nimport { expect, test } from 'vitest';\nimport { logger } from './logger.svelte.js';\n\ntest('Effect', () => {\n\tconst cleanup = $effect.root(() => {\n\t\tlet count = $state(0);\n\n\t\t// logger uses an $effect to log updates of its input\n\t\tlet log = logger(() => count);\n\n\t\t// effects normally run after a microtask,\n\t\t// use flushSync to execute all pending effects synchronously\n\t\tflushSync();\n\t\texpect(log).toEqual([0]);\n\n\t\tcount = 1;\n\t\tflushSync();\n\n\t\texpect(log).toEqual([0, 1]);\n\t});\n\n\tcleanup();\n});\n```\n\n### Component Testing\n\nInstall jsdom:\n```sh\nnpm install -D jsdom\n```\n\nConfigure environment in `vite.config.js`:\n```js\n/// file: vite.config.js\nimport { defineConfig } from 'vitest/config';\n\nexport default defineConfig({\n\tplugins: [\n\t\t/* ... */\n\t],\n\ttest: {\n\t\t// If you are testing components client-side, you need to setup a DOM environment.\n\t\t// If not all your files should have this environment, you can use a\n\t\t// `// @vitest-environment jsdom` comment at the top of the test files instead.\n\t\tenvironment: 'jsdom'\n\t},\n\t// Tell Vitest to use the `browser` entry points in `package.json` files, even though it's running in Node\n\tresolve: process.env.VITEST\n\t\t? {\n\t\t\t\tconditions: ['browser']\n\t\t\t}\n\t\t: undefined\n});\n```\n\nBasic component test:\n\n```js\n/// file: component.test.js\nimport { flushSync, mount, unmount } from 'svelte';\nimport { expect, test } from 'vitest';\nimport Component from './Component.svelte';\n\ntest('Component', () => {\n\t// Instantiate the component using Svelte's `mount` API\n\tconst component = mount(Component, {\n\t\ttarget: document.body, // `document` exists because of jsdom\n\t\tprops: { initial: 0 }\n\t});\n\n\texpect(document.body.innerHTML).toBe('<button>0</button>');\n\n\t// Click the button, then flush the changes so you can synchronously write expectations\n\tdocument.body.querySelector('button').click();\n\tflushSync();\n\n\texpect(document.body.innerHTML).toBe('<button>1</button>');\n\n\t// Remove the component from the DOM\n\tunmount(component);\n});\n```\n\nUsing [@testing-library/svelte](https://testing-library.com/docs/svelte-testing-library/intro/):\n\n```js\n/// file: component.test.js\nimport { render, screen } from '@testing-library/svelte';\nimport userEvent from '@testing-library/user-event';\nimport { expect, test } from 'vitest';\nimport Component from './Component.svelte';\n\ntest('Component', async () => {\n\tconst user = userEvent.setup();\n\trender(Component);\n\n\tconst button = screen.getByRole('button');\n\texpect(button).toHaveTextContent(0);\n\n\tawait user.click(button);\n\texpect(button).toHaveTextContent(1);\n});\n```\n\n**Note:** For two-way bindings, context, or snippet props, create wrapper components for tests.\n\n## Component Tests with Storybook\n\n[Storybook](https://storybook.js.org) tests run with Vitest's browser mode. Install via `npx sv add storybook`.\n\nExample with [play function](https://storybook.js.org/docs/writing-tests/interaction-testing?renderer=svelte#writing-interaction-tests):\n\n```svelte\n/// file: LoginForm.stories.svelte\n<script module>\n\timport { defineMeta } from '@storybook/addon-svelte-csf';\n\timport { expect, fn } from 'storybook/test';\n\n\timport LoginForm from './LoginForm.svelte';\n\n\tconst { Story } = defineMeta({\n\t\tcomponent: LoginForm,\n\t\targs: {\n\t\t\t// Pass a mock function to the `onSubmit` prop\n\t\t\tonSubmit: fn(),\n\t\t}\n\t});\n</script>\n \n<Story name=\"Empty Form\" />\n \n<Story\n\tname=\"Filled Form\"\n\tplay={async ({ args, canvas, userEvent }) => {\n\t\t// Simulate a user filling out the form\n\t\tawait userEvent.type(canvas.getByTestId('email'), 'email@provider.com');\n\t\tawait userEvent.type(canvas.getByTestId('password'), 'a-random-password');\n\t\tawait userEvent.click(canvas.getByRole('button'));\n\n\t\t// Run assertions\n\t\tawait expect(args.onSubmit).toHaveBeenCalledTimes(1);\n\t\tawait expect(canvas.getByText('You're in!')).toBeInTheDocument();\n\t}}\n/>\n```\n\n## E2E Tests with Playwright\n\nSetup via `npx sv add playwright` or `npm init playwright`.\n\nConfigure if needed:\n```js\n/// file: playwright.config.js\nconst config = {\n\twebServer: {\n\t\tcommand: 'npm run build && npm run preview',\n\t\tport: 4173\n\t},\n\ttestDir: 'tests',\n\ttestMatch: /(.+\\.)?(test|spec)\\.[jt]s/\n};\n\nexport default config;\n```\n\nWrite tests (framework-agnostic):\n\n```js\n// @errors: 2307 7031\n/// file: tests/hello-world.spec.js\nimport { expect, test } from '@playwright/test';\n\ntest('home page has expected h1', async ({ page }) => {\n\tawait page.goto('/');\n\tawait expect(page.locator('h1')).toBeVisible();\n});\n```",
    "svelte/typescript": "# TypeScript in Svelte\n\n## `<script lang=\"ts\">`\n\nAdd `lang=\"ts\"` to use TypeScript:\n\n```svelte\n<script lang=\"ts\">\n\tlet name: string = 'world';\n\n\tfunction greet(name: string) {\n\t\talert(`Hello, ${name}!`);\n\t}\n</script>\n\n<button onclick={(e: Event) => greet(e.target.innerText)}>\n\t{name as string}\n</button>\n```\n\n**Limitations:** Only type-only features work (types, interfaces). Not supported:\n- Enums\n- Constructor modifiers (`private`, `protected`, `public`) with initializers\n- Non-stage-4 ECMAScript features\n\nFor these, use a preprocessor.\n\n## Preprocessor Setup\n\n### SvelteKit/Vite\n\nScaffold with `npx sv create` (TypeScript option) or `npm create vite@latest` (`svelte-ts` option).\n\n```ts\n/// file: svelte.config.js\nimport { vitePreprocess } from '@sveltejs/vite-plugin-svelte';\n\nconst config = {\n\tpreprocess: vitePreprocess()\n};\n\nexport default config;\n```\n\nFor non-type-only features, add `{ script: true }`:\n\n```ts\n/// file: svelte.config.js\nimport { vitePreprocess } from '@sveltejs/vite-plugin-svelte';\n\nconst config = {\n\tpreprocess: vitePreprocess({ script: true })\n};\n\nexport default config;\n```\n\n### Other Tools\n\nUse `rollup-plugin-svelte` or `svelte-loader` with `svelte-preprocess`.\n\n## tsconfig.json\n\nRequired settings:\n- `target`: `ES2015` minimum\n- `verbatimModuleSyntax`: `true`\n- `isolatedModules`: `true`\n\n## Typing `$props`\n\n```svelte\n<script lang=\"ts\">\n\timport type { Snippet } from 'svelte';\n\n\tinterface Props {\n\t\trequiredProperty: number;\n\t\toptionalProperty?: boolean;\n\t\tsnippetWithStringArgument: Snippet<[string]>;\n\t\teventHandler: (arg: string) => void;\n\t\t[key: string]: unknown;\n\t}\n\n\tlet {\n\t\trequiredProperty,\n\t\toptionalProperty,\n\t\tsnippetWithStringArgument,\n\t\teventHandler,\n\t\t...everythingElse\n\t}: Props = $props();\n</script>\n\n<button onclick={() => eventHandler('clicked button')}>\n\t{@render snippetWithStringArgument('hello')}\n</button>\n```\n\n## Generic `$props`\n\nUse `generics` attribute for type relationships:\n\n```svelte\n<script lang=\"ts\" generics=\"Item extends { text: string }\">\n\tinterface Props {\n\t\titems: Item[];\n\t\tselect(item: Item): void;\n\t}\n\n\tlet { items, select }: Props = $props();\n</script>\n\n{#each items as item}\n\t<button onclick={() => select(item)}>\n\t\t{item.text}\n\t</button>\n{/each}\n```\n\n## Typing Wrapper Components\n\nUse `svelte/elements` types:\n\n```svelte\n<script lang=\"ts\">\n\timport type { HTMLButtonAttributes } from 'svelte/elements';\n\n\tlet { children, ...rest }: HTMLButtonAttributes = $props();\n</script>\n\n<button {...rest}>\n\t{@render children?.()}\n</button>\n```\n\nFor elements without dedicated types:\n\n```svelte\n<script lang=\"ts\">\n\timport type { SvelteHTMLElements } from 'svelte/elements';\n\n\tlet { children, ...rest }: SvelteHTMLElements['div'] = $props();\n</script>\n\n<div {...rest}>\n\t{@render children?.()}\n</div>\n```\n\n## Typing `$state`\n\n```ts\nlet count: number = $state(0);\n```\n\nWithout initial value, type includes `undefined`. Use `as` casting if you know it will be defined:\n\n```ts\nclass Counter {\n\tcount = $state() as number;\n\tconstructor(initial: number) {\n\t\tthis.count = initial;\n\t}\n}\n```\n\n## The `Component` Type\n\nConstrain dynamic components:\n\n```svelte\n<script lang=\"ts\">\n\timport type { Component } from 'svelte';\n\n\tinterface Props {\n\t\tDynamicComponent: Component<{ prop: string }>;\n\t}\n\n\tlet { DynamicComponent }: Props = $props();\n</script>\n\n<DynamicComponent prop=\"foo\" />\n```\n\nExtract props with `ComponentProps`:\n\n```ts\nimport type { Component, ComponentProps } from 'svelte';\nimport MyComponent from './MyComponent.svelte';\n\nfunction withProps<TComponent extends Component<any>>(\n\tcomponent: TComponent,\n\tprops: ComponentProps<TComponent>\n) {}\n\nwithProps(MyComponent, { foo: 'bar' });\n```\n\nConstructor/instance types:\n\n```svelte\n<script lang=\"ts\">\n\timport MyComponent from './MyComponent.svelte';\n\n\tlet componentConstructor: typeof MyComponent = MyComponent;\n\tlet componentInstance: MyComponent;\n</script>\n\n<MyComponent bind:this={componentInstance} />\n```\n\n## Enhancing DOM Types\n\nAugment `svelte/elements` for custom/experimental attributes:\n\n```ts\n/// file: additional-svelte-typings.d.ts\nimport { HTMLButtonAttributes } from 'svelte/elements';\n\ndeclare module 'svelte/elements' {\n\texport interface SvelteHTMLElements {\n\t\t'custom-button': HTMLButtonAttributes;\n\t}\n\n\texport interface HTMLAttributes<T> {\n\t\tglobalattribute?: string;\n\t}\n\n\texport interface HTMLButtonAttributes {\n\t\tveryexperimentalattribute?: string;\n\t}\n}\n\nexport {};\n```\n\nReference in `tsconfig.json` and reload.",
    "svelte/custom-elements": "# Custom Elements (Web Components)\n\nCompile Svelte components to custom elements using `customElement: true` compiler option. Specify tag name with `<svelte:options>`. Access host element via `$host` rune.\n\n```svelte\n<svelte:options customElement=\"my-element\" />\n\n<script>\n\tlet { name = 'world' } = $props();\n</script>\n\n<h1>Hello {name}!</h1>\n<slot />\n```\n\n## Defining Elements\n\nOmit tag name for inner components. Define later using static `element` property:\n\n```js\n// @noErrors\nimport MyElement from './MyElement.svelte';\n\ncustomElements.define('my-element', MyElement.element);\n```\n\n## Usage\n\nUse as regular DOM elements. Props exposed as properties/attributes:\n\n```js\n// @noErrors\nconst el = document.querySelector('my-element');\nconsole.log(el.name);\nel.name = 'everybody';\n```\n\n**Note:** Must explicitly list all props. `let props = $props()` without declaring in component options won't expose properties on DOM element.\n\n## Lifecycle\n\n- Component created in next tick after `connectedCallback`\n- Properties assigned before insertion are saved and set on creation\n- Exported functions only available after mount (workaround: use `extend` option)\n- Shadow DOM updates in next tick (batched)\n- Component destroyed in next tick after `disconnectedCallback`\n\n## Component Options\n\nConfigure via `customElement` object in `<svelte:options>`:\n\n- **`tag`**: Custom element name\n- **`shadow`**: Set to `\"none\"` to skip shadow root (no style encapsulation, no slots)\n- **`props`**: Configure prop behavior:\n  - `attribute`: Custom attribute name (default: lowercase prop name)\n  - `reflect`: Reflect prop updates to DOM (default: false)\n  - `type`: `'String' | 'Boolean' | 'Number' | 'Array' | 'Object'` (default: String)\n- **`extend`**: Function receiving/returning custom element class for lifecycle customization\n\n```svelte\n<svelte:options\n\tcustomElement={{\n\t\ttag: 'custom-element',\n\t\tshadow: 'none',\n\t\tprops: {\n\t\t\tname: { reflect: true, type: 'Number', attribute: 'element-index' }\n\t\t},\n\t\textend: (customElementConstructor) => {\n\t\t\t// Extend the class so we can let it participate in HTML forms\n\t\t\treturn class extends customElementConstructor {\n\t\t\t\tstatic formAssociated = true;\n\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper();\n\t\t\t\t\tthis.attachedInternals = this.attachInternals();\n\t\t\t\t}\n\n\t\t\t\t// Add the function here, not below in the component so that\n\t\t\t\t// it's always available, not just when the inner Svelte component\n\t\t\t\t// is mounted\n\t\t\t\trandomIndex() {\n\t\t\t\t\tthis.elementIndex = Math.random();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}}\n/>\n\n<script>\n\tlet { elementIndex, attachedInternals } = $props();\n\t// ...\n\tfunction check() {\n\t\tattachedInternals.checkValidity();\n\t}\n</script>\n\n...\n```\n\n> **Note:** TypeScript in `extend` requires `lang=\"ts\"` and [erasable syntax](https://www.typescriptlang.org/tsconfig/#erasableSyntaxOnly) only.\n\n## Caveats\n\n- **Styles encapsulated** (not scoped) unless `shadow: \"none\"`. Global styles and `:global()` don't apply\n- Styles inlined as JavaScript, not separate CSS file\n- **No SSR support** (shadow DOM invisible until JS loads)\n- **Slots render eagerly** (always created, even in `{#if}`). `{#each}` doesn't duplicate slotted content\n- Deprecated `let:` directive has no effect\n- **Context doesn't work across custom elements** (only within)\n- **Don't use props/attributes starting with `on`** (interpreted as event listeners)\n- Polyfills needed for older browsers",
    "svelte/v4-migration-guide": "# Svelte 3 to 4 Migration Guide\n\nMigration script: `npx svelte-migrate@latest svelte-4`\n\n## Minimum Requirements\n\n- Node 16+\n- SvelteKit 1.20.4+\n- `vite-plugin-svelte` 2.4.1+ (Vite without SvelteKit)\n- webpack 5+ and `svelte-loader` 3.1.8+\n- `rollup-plugin-svelte` 7.1.5+\n- TypeScript 5+\n\n## Bundler Configuration\n\nBundlers must specify `browser` condition for frontend builds:\n- **Rollup**: Set `browser: true` in `@rollup/plugin-node-resolve`\n- **webpack**: Add `\"browser\"` to `conditionNames` array\n\n## CJS Removal\n\nNo more CommonJS output. `svelte/register` hook removed. Use bundler to convert ESM to CJS if needed.\n\n## Stricter Types\n\n### `createEventDispatcher`\n\n```ts\n// @errors: 2554 2345\nimport { createEventDispatcher } from 'svelte';\n\nconst dispatch = createEventDispatcher<{\n\toptional: number | null;\n\trequired: string;\n\tnoArgument: null;\n}>();\n\n// Svelte version 3:\ndispatch('optional');\ndispatch('required'); // I can still omit the detail argument\ndispatch('noArgument', 'surprise'); // I can still add a detail argument\n\n// Svelte version 4 using TypeScript strict mode:\ndispatch('optional');\ndispatch('required'); // error, missing argument\ndispatch('noArgument', 'surprise'); // error, cannot pass an argument\n```\n\n### `Action` and `ActionReturn`\n\nDefault parameter type is `undefined`. Must type generic for parameters:\n\n```ts\n// @noErrors\n---const action: Action = (node, params) => { ... } // this is now an error if you use params in any way---\n+++const action: Action<HTMLElement, string> = (node, params) => { ... } // params is of type string+++\n```\n\n### `onMount`\n\nType error if returning function asynchronously (reveals bugs):\n\n```js\n// @noErrors\n// Example where this change reveals an actual bug\nonMount(\n---\t// someCleanup() not called because function handed to onMount is async\n\tasync () => {\n\t\tconst something = await foo();---\n+++\t// someCleanup() is called because function handed to onMount is sync\n\t() => {\n\t\tfoo().then(something => {...});\n\t\t// ...\n\t\treturn () => someCleanup();\n\t}\n);\n```\n\n## Custom Elements\n\n`tag` option deprecated, use `customElement`:\n\n```svelte\n---<svelte:options tag=\"my-component\" />---\n+++<svelte:options customElement=\"my-component\" />+++\n```\n\n## `SvelteComponentTyped` Deprecated\n\nReplace with `SvelteComponent`:\n\n```js\n---import { SvelteComponentTyped } from 'svelte';---\n+++import { SvelteComponent } from 'svelte';+++\n\n---export class Foo extends SvelteComponentTyped<{ aProp: string }> {}---\n+++export class Foo extends SvelteComponent<{ aProp: string }> {}+++\n```\n\nFor component instance types, change `: typeof SvelteComponent` to `: typeof SvelteComponent<any>`:\n\n```svelte\n<script>\n\timport ComponentA from './ComponentA.svelte';\n\timport ComponentB from './ComponentB.svelte';\n\timport { SvelteComponent } from 'svelte';\n\n\tlet component: typeof SvelteComponent+++<any>+++;\n\n\tfunction choseRandomly() {\n\t\tcomponent = Math.random() > 0.5 ? ComponentA : ComponentB;\n\t}\n</script>\n\n<button on:click={choseRandomly}>random</button>\n<svelte:element this={component} />\n```\n\n## Transitions Local by Default\n\nTransitions only play when direct parent block is created/destroyed. Use `|global` modifier for old behavior:\n\n```svelte\n{#if show}\n\t...\n\t{#if success}\n\t\t<p in:slide>Success</p>\n\t{/each}\n{/if}\n```\n\n## Default Slot Bindings\n\nDefault slot bindings not exposed to named slots and vice versa:\n\n```svelte\n<script>\n\timport Nested from './Nested.svelte';\n</script>\n\n<Nested let:count>\n\t<p>\n\t\tcount in default slot - is available: {count}\n\t</p>\n\t<p slot=\"bar\">\n\t\tcount in bar slot - is not available: {count}\n\t</p>\n</Nested>\n```\n\n## Preprocessor Order\n\nPreprocessors execute in order: markup → script → style per preprocessor:\n\n```js\n// @errors: 2304\nimport { preprocess } from 'svelte/compiler';\n\nconst { code } = await preprocess(\n\tsource,\n\t[\n\t\t{\n\t\t\tmarkup: () => {\n\t\t\t\tconsole.log('markup-1');\n\t\t\t},\n\t\t\tscript: () => {\n\t\t\t\tconsole.log('script-1');\n\t\t\t},\n\t\t\tstyle: () => {\n\t\t\t\tconsole.log('style-1');\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmarkup: () => {\n\t\t\t\tconsole.log('markup-2');\n\t\t\t},\n\t\t\tscript: () => {\n\t\t\t\tconsole.log('script-2');\n\t\t\t},\n\t\t\tstyle: () => {\n\t\t\t\tconsole.log('style-2');\n\t\t\t}\n\t\t}\n\t],\n\t{\n\t\tfilename: 'App.svelte'\n\t}\n);\n\n// Svelte 3 logs:\n// markup-1\n// markup-2\n// script-1\n// script-2\n// style-1\n// style-2\n\n// Svelte 4 logs:\n// markup-1\n// script-1\n// style-1\n// markup-2\n// script-2\n// style-2\n```\n\nPut MDsveX before other preprocessors:\n\n```js\n// @noErrors\npreprocess: [\n---\tvitePreprocess(),\n\tmdsvex(mdsvexConfig)---\n+++\tmdsvex(mdsvexConfig),\n\tvitePreprocess()+++\n]\n```\n\nEach preprocessor must have a name.\n\n## ESLint\n\nUse [eslint-plugin-svelte](https://github.com/sveltejs/eslint-plugin-svelte) instead of deprecated `eslint-plugin-svelte3`.\n\n## Other Changes\n\n- `inert` attribute applied to outroing elements\n- Uses `classList.toggle(name, boolean)` - may need polyfill for old browsers\n- Uses `CustomEvent` constructor - may need polyfill for old browsers\n- `StartStopNotifier` requires update function in addition to set function\n- `derived` throws error on falsy values instead of stores\n- `svelte/internal` type definitions removed\n- DOM node removal batched (affects `MutationObserver` order)\n- `svelte.JSX` namespace → `svelteHTML` namespace; use types from `svelte/elements`",
    "svelte/v5-migration-guide": "# Svelte 5 Migration Guide\n\n## Reactivity Syntax Changes\n\n### `let` → `$state`\n\n```svelte\n<script>\n\tlet count = $state(0);\n</script>\n```\n\n`$state` creates reactive variables. No wrapper needed - read/write directly.\n\n### `$:` → `$derived` / `$effect`\n\n**Derivations:**\n```svelte\n<script>\n\tlet count = $state(0);\n\tconst double = $derived(count * 2);\n</script>\n```\n\n**Side effects:**\n```svelte\n<script>\n\tlet count = $state(0);\n\t\n\t$effect(() => {\n\t\tif (count > 5) {\n\t\t\talert('Count is too high!');\n\t\t}\n\t});\n</script>\n```\n\n### `export let` → `$props`\n\n```svelte\n<script>\n\tlet { optional = 'unset', required } = $props();\n</script>\n```\n\n**Renaming & rest props:**\n```svelte\n<script>\n\tlet { class: klass, ...rest } = $props();\n</script>\n<button class={klass} {...rest}>click me</button>\n```\n\n## Event Changes\n\n### Event Attributes (no colon)\n\n```svelte\n<script>\n\tlet count = $state(0);\n</script>\n\n<button onclick={() => count++}>\n\tclicks: {count}\n</button>\n```\n\n**Shorthand:**\n```svelte\n<script>\n\tlet count = $state(0);\n\t\n\tfunction onclick() {\n\t\tcount++;\n\t}\n</script>\n\n<button {onclick}>\n\tclicks: {count}\n</button>\n```\n\n### Component Events → Callback Props\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport Pump from './Pump.svelte';\n\t\n\tlet size = $state(15);\n\tlet burst = $state(false);\n\t\n\tfunction reset() {\n\t\tsize = 15;\n\t\tburst = false;\n\t}\n</script>\n\n<Pump\n\tinflate={(power) => {\n\t\tsize += power;\n\t\tif (size > 75) burst = true;\n\t}}\n\tdeflate={(power) => {\n\t\tif (size > 0) size -= power;\n\t}}\n/>\n\n{#if burst}\n\t<button onclick={reset}>new balloon</button>\n\t<span class=\"boom\">💥</span>\n{:else}\n\t<span class=\"balloon\" style=\"scale: {0.01 * size}\">\n\t\t🎈\n\t</span>\n{/if}\n```\n\n```svelte\n<!--- file: Pump.svelte --->\n<script>\n\tlet { inflate, deflate } = $props();\n\tlet power = $state(5);\n</script>\n\n<button onclick={() => inflate(power)}>\n\tinflate\n</button>\n<button onclick={() => deflate(power)}>\n\tdeflate\n</button>\n<button onclick={() => power--}>-</button>\nPump power: {power}\n<button onclick={() => power++}>+</button>\n```\n\n### Event Forwarding\n\n```svelte\n<script>\n\tlet { onclick } = $props();\n</script>\n\n<button {onclick}>\n\tclick me\n</button>\n```\n\n**Spread all props:**\n```svelte\n<script>\n\tlet props = $props();\n</script>\n\n<button {...props}>\n\tclick me\n</button>\n```\n\n### Event Modifiers\n\nNo longer use `|modifiers`. Add logic inside handler:\n\n```svelte\n<script>\n\tfunction once(fn) {\n\t\treturn function (event) {\n\t\t\tif (fn) fn.call(this, event);\n\t\t\tfn = null;\n\t\t};\n\t}\n\t\n\tfunction preventDefault(fn) {\n\t\treturn function (event) {\n\t\t\tevent.preventDefault();\n\t\t\tfn.call(this, event);\n\t\t};\n\t}\n</script>\n\n<button onclick={once(preventDefault(handler))}>...</button>\n```\n\n**`capture` modifier:** Add to event name:\n```svelte\n<button onclickcapture={...}>...</button>\n```\n\n### Multiple Event Handlers\n\n```svelte\n<button\n\tonclick={(e) => {\n\t\tone(e);\n\t\ttwo(e);\n\t}}\n>\n\t...\n</button>\n```\n\n**With spread props (handler must come after):**\n```svelte\n<button\n\t{...props}\n\tonclick={(e) => {\n\t\tdoStuff(e);\n\t\tprops.onclick?.(e);\n\t}}\n>\n\t...\n</button>\n```\n\n## Snippets Instead of Slots\n\n### Default Content\n\n```svelte\n<script>\n\tlet { children } = $props();\n</script>\n\n{@render children?.()}\n```\n\n### Named Slots → Named Props\n\n```svelte\n<script>\n\tlet { header, main, footer } = $props();\n</script>\n\n<header>\n\t{@render header()}\n</header>\n\n<main>\n\t{@render main()}\n</main>\n\n<footer>\n\t{@render footer()}\n</footer>\n```\n\n### Passing Data (slot props)\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport List from './List.svelte';\n</script>\n\n<List items={['one', 'two', 'three']}>\n\t{#snippet item(text)}\n\t\t<span>{text}</span>\n\t{/snippet}\n\t{#snippet empty()}\n\t\t<span>No items yet</span>\n\t{/snippet}\n</List>\n```\n\n```svelte\n<!--- file: List.svelte --->\n<script>\n\tlet { items, item, empty } = $props();\n</script>\n\n{#if items.length}\n\t<ul>\n\t\t{#each items as entry}\n\t\t\t<li>\n\t\t\t\t{@render item(entry)}\n\t\t\t</li>\n\t\t{/each}\n\t</ul>\n{:else}\n\t{@render empty?.()}\n{/if}\n```\n\n## Migration Script\n\nRun: `npx sv migrate svelte-5`\n\n**Migrates:**\n- Dependencies in `package.json`\n- `let` → `$state`\n- `on:click` → `onclick`\n- `<slot />` → `{@render children()}`\n- Slot usages → snippets\n- `new Component(...)` → `mount(Component, ...)`\n\n**VS Code:** Use \"Migrate Component to Svelte 5 Syntax\" command\n\n### `run` Function\n\nMigration script may convert `$:` to `run` (from `svelte/legacy`) when it can't determine if it's a derivation or effect. Usually should be changed to `$derived` or `$effect`:\n\n```svelte\n<script>\n\t$effect(() => {\n\t\t// some side effect code\n\t})\n</script>\n```\n\n### Event Modifiers\n\nImported from `svelte/legacy` - migrate to manual calls:\n\n```svelte\n<script>\n</script>\n\n<button\n\tonclick={(event) => {\n\t\tevent.preventDefault();\n\t\t// ...\n\t}}\n>\n\tclick me\n</button>\n```\n\n### Not Auto-migrated\n\n- `createEventDispatcher` - manually convert to callback props\n- `beforeUpdate/afterUpdate` - use `$effect.pre` + `tick`\n\n## Components Are Functions\n\n### Instantiation\n\n```js\nimport { mount } from 'svelte';\nimport App from './App.svelte'\n\nconst app = mount(App, { target: document.getElementById(\"app\") });\n\nexport default app;\n```\n\n### `$on` Replacement\n\n```js\nimport { mount } from 'svelte';\nimport App from './App.svelte'\n\nconst app = mount(App, { target: document.getElementById(\"app\"), events: { event: callback } });\n```\n\n### `$set` Replacement\n\n```js\nimport { mount } from 'svelte';\nimport App from './App.svelte'\n\nconst props = $state({ foo: 'bar' });\nconst app = mount(App, { target: document.getElementById(\"app\"), props });\nprops.foo = 'baz';\n```\n\n### `$destroy` Replacement\n\n```js\nimport { mount, unmount } from 'svelte';\nimport App from './App.svelte'\n\nconst app = mount(App, { target: document.getElementById(\"app\") });\nunmount(app);\n```\n\n### Legacy Compatibility\n\n```js\nimport { createClassComponent } from 'svelte/legacy';\nimport App from './App.svelte'\n\nconst app = createClassComponent({ component: App, target: document.getElementById(\"app\") });\n\nexport default app;\n```\n\n**Or use compiler option:**\n```js\n/// svelte.config.js\nexport default {\n\tcompilerOptions: {\n\t\tcompatibility: {\n\t\t\tcomponentApi: 4\n\t\t}\n\t}\n};\n```\n\n**Note:** `mount`/`hydrate` are async. Use `flushSync()` for synchronous behavior.\n\n### Server API\n\n```js\nimport { render } from 'svelte/server';\nimport App from './App.svelte';\n\nconst { html, head } = render(App, { props: { message: 'hello' }});\n```\n\nCSS no longer returned by default. Set `css: 'injected'` compiler option if needed.\n\n### Component Typing\n\n```ts\nimport type { Component } from 'svelte';\nexport declare const MyComponent: Component<{\n\tfoo: string;\n}>;\n```\n\n**Require specific component type:**\n```js\nimport { ComponentA, ComponentB } from 'component-library';\nimport type { Component } from 'svelte';\n\nlet C: Component<{ foo: string }> = $state(\n\tMath.random() ? ComponentA : ComponentB\n);\n```\n\n`ComponentEvents` and `ComponentType` are deprecated.\n\n### `bind:this` Changes\n\nNo longer returns `$set`, `$on`, `$destroy`. Only returns instance exports and accessors (if `accessors: true`).\n\n## `<svelte:component>` No Longer Necessary\n\nComponents are now dynamic by default:\n\n```svelte\n<script>\n\timport A from './A.svelte';\n\timport B from './B.svelte';\n\t\n\tlet Thing = $state();\n</script>\n\n<select bind:value={Thing}>\n\t<option value={A}>A</option>\n\t<option value={B}>B</option>\n</select>\n\n<!-- these are equivalent -->\n<Thing />\n<svelte:component this={Thing} />\n```\n\nComponent names must be capitalized or use dot notation.\n\n### Dot Notation = Component\n\n```svelte\n{#each items as item}\n\t<item.component {...item.props} />\n{/each}\n```\n\n## Whitespace Changes\n\n**Rules:**\n- Whitespace between nodes collapses to one space\n- Whitespace at start/end of tags removed\n- Exceptions: `<pre>` tags, etc.\n\nUse `preserveWhitespace` option to disable.\n\n## Modern Browser Required\n\nRequires:\n- `Proxy` support\n- `ResizeObserver` (for dimension bindings)\n- `input` events for range inputs\n\nNo IE support. `legacy` compiler option removed.\n\n## Compiler Option Changes\n\n**Removed:**\n- `false`/`true`/`\"none\"` values for `css`\n- `hydratable` (always hydratable)\n- `enableSourcemap` (always generated)\n- `tag` (use `<svelte:options customElement=\"tag-name\" />`)\n- `loopGuardTimeout`, `format`, `sveltePath`, `errorMode`, `varsReport`\n\n**Repurposed:**\n- `legacy` option\n\n## Runes Mode Breaking Changes\n\n### `children` Prop Reserved\n\nCannot have a prop named `children` - it's used for content inside component tags.\n\n### No Binding to Component Exports\n\n```svelte\n<!-- Component A -->\n<script>\n\texport const foo = ...;\n</script>\n\n<!-- Parent - NOT ALLOWED -->\n<A bind:foo />\n\n<!-- Use bind:this instead -->\n<A bind:this={a} />\n<!-- Access as a.foo -->\n```\n\n### `$bindable()` Required\n\nProps not bindable by default. Must use `$bindable` rune:\n\n```svelte\n<script>\n\tlet { foo = $bindable('bar') } = $props();\n</script>\n```\n\nMust pass non-`undefined` value when binding to props with defaults.\n\n### `accessors` Option Ignored\n\nUse component exports instead:\n\n```svelte\n<script>\n\tlet { name } = $props();\n\texport const getName = () => name;\n</script>\n```\n\nOr use `$state` in `.svelte.js`/`.svelte.ts` files:\n\n```js\nimport { mount } from 'svelte';\nimport App from './App.svelte'\n\nconst props = $state({ foo: 'bar' });\nconst app = mount(App, { target: document.getElementById(\"app\"), props });\nprops.foo = 'baz';\n```\n\n### `immutable` Option Ignored\n\nReplaced by `$state` behavior.\n\n### Classes Not Auto-reactive\n\nDefine reactive fields with `$state`:\n\n```svelte\n<script>\n\tclass Foo {\n\t\tvalue = $state(0);\n\t}\n\t\n\tlet foo = new Foo();\n</script>\n\n<button onclick={() => (foo.value = 1)}>{foo.value}</button>\n```\n\nWrapping `new Foo()` with `$state(...)` has no effect.\n\n### Touch/Wheel Events Passive\n\n`onwheel`, `onmousewheel`, `ontouchstart`, `ontouchmove` are passive by default. Use `on` from `svelte/events` for non-passive.\n\n### Stricter Attribute Syntax\n\nMust quote concatenated values:\n\n```svelte\n<Component prop=\"this{is}valid\" />\n```\n\nSingle expressions in quotes will warn: `answer=\"{42}\"` (becomes string in Svelte 6).\n\n### Stricter HTML Structure\n\nBrowser-repaired HTML now causes compiler errors:\n\n```svelte\n<!-- Must include <tbody> -->\n<table>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>hi</td>\n\t\t</tr>\n\t</tbody>\n</table>\n```\n\n## Other Breaking Changes\n\n### Stricter `@const` Validation\n\nCannot assign to destructured parts of `@const`.\n\n### `:is()`, `:has()`, `:where()` Scoped\n\nNow analyzed in component context. Use `:global(...)` inside them for global selectors:\n\n```css\nmain :global {\n\t@apply bg-blue-100 dark:bg-blue-900;\n}\n```\n\n### CSS Hash Position Non-deterministic\n\nCSS hash no longer guaranteed to be last.\n\n### Scoped CSS Uses `:where()`\n\nUses `:where(.svelte-xyz123)` alongside `.svelte-xyz123`.\n\n**For ancient browsers:**\n```js\n// @errors: 2552\ncss = css.replace(/:where\\((.+?)\\)/, '$1');\n```\n\n### Error/Warning Codes Renamed\n\nDashes → underscores (e.g., `foo-bar` → `foo_bar`).\n\n### Reduced Namespaces\n\nValid namespaces: `html` (default), `mathml`, `svg`. `foreign` removed.\n\n### `beforeUpdate`/`afterUpdate` Changes\n\n- `beforeUpdate` no longer runs twice on initial render\n- `afterUpdate` in parent runs after child `afterUpdate`\n- Don't run when `<slot>` content updates\n- Disallowed in runes mode (use `$effect.pre`/`$effect`)\n\n### `contenteditable` Behavior\n\nBinding takes full control - reactive values inside won't update.\n\n### `oneventname` No String Values\n\n```svelte\n<!-- NOT ALLOWED -->\n<button onclick=\"alert('hello')\">...</button>\n```\n\n### `null`/`undefined` → Empty String\n\nNo longer printed as \"null\"/\"undefined\".\n\n### `bind:files` Type Restriction\n\nMust be `null`, `undefined`, or `FileList`.\n\n### Bindings React to Form Resets\n\nNow properly sync with DOM on form reset.\n\n### `walk` No Longer Exported\n\nImport from `estree-walker` directly.\n\n### `<svelte:options>` Content Forbidden\n\nCannot have content inside `<svelte:options />`.\n\n### `<slot>` in Shadow DOM Preserved\n\n`<slot />` inside `<template shadowrootmode=\"...\">` preserved as-is.\n\n### `<svelte:element>` Requires Expression\n\n```svelte\n<svelte:element this={\"div\"}>\n```\n\n### `mount` Plays Transitions\n\nPlays transitions by default unless `intro: false`.\n\n### Hydration Mismatch Not Repaired\n\n`<img src>` and `{@html}` mismatches not fixed (warns in dev). Force update:\n\n```svelte\n<script>\n\tlet { markup, src } = $props();\n\t\n\tif (typeof window !== 'undefined') {\n\t\tconst initial = { markup, src };\n\t\tmarkup = src = undefined;\n\t\t\n\t\t$effect(() => {\n\t\t\tmarkup = initial.markup;\n\t\t\tsrc = initial.src;\n\t\t});\n\t}\n</script>\n\n{@html markup}\n<img {src} />\n```\n\n### Hydration Uses Comments\n\nSSR adds comments for hydration. Don't remove them.\n\n### `onevent` Attributes Delegated\n\nSome delegated - don't stop propagation manually.\n\n### `--style-props` Different Element\n\nUses `<svelte-css-wrapper>` instead of `<div>`.",
    "svelte/faq": "# Svelte FAQ (Condensed)\n\n## Getting Started\n- Start with [interactive tutorial](/tutorial) - 5-10 min to start, 1.5 hrs for full tutorial\n- [Reference docs](/docs/svelte) for syntax questions\n\n## Support\n- **Stack Overflow**: Code questions, errors ([Svelte tag](https://stackoverflow.com/questions/tagged/svelte+or+svelte-3))\n- **Discussion**: [Discord](/chat), [Reddit](https://www.reddit.com/r/sveltejs/)\n- **Resources**: [Svelte Society books/videos](https://sveltesociety.dev/resources)\n\n## Tooling\n- **VS Code**: [Official extension](https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode)\n- **Formatting**: [prettier-plugin-svelte](https://www.npmjs.com/package/prettier-plugin-svelte)\n- **HMR**: Use [SvelteKit](/docs/kit) (built-in via Vite)\n\n## Component Documentation\nUse JSDoc comments for hover documentation:\n\n````svelte\n<script>\n\t/** What should we call the user? */\n\texport let name = 'world';\n</script>\n\n<!--\n@component\nHere's some documentation for this component.\nIt will show up on hover.\n\n- You can use markdown here.\n- Usage:\n  ```svelte\n  <main name=\"Arethra\">\n  ```\n-->\n<main>\n\t<h1>Hello, {name}</h1>\n</main>\n````\n\n**Note**: `@component` required in HTML comment.\n\n## Testing\nThree test types:\n\n1. **Unit Tests**: Business logic in isolation. Use [Vitest](https://vitest.dev/) (setup via SvelteKit CLI)\n2. **Component Tests**: Mount/interaction testing. Options: Vitest + jsdom, [Playwright](https://playwright.dev/docs/test-components), [Cypress](https://www.cypress.io/)\n3. **E2E Tests**: Full app testing. [Playwright](https://playwright.dev/) (setup via SvelteKit CLI)\n\nResources:\n- [Svelte testing docs](/docs/svelte/testing)\n- [Vitest CLI setup](/docs/cli/vitest)\n- [Svelte Testing Library](https://testing-library.com/docs/svelte-testing-library/example/)\n\n**Key**: Extract logic from components for easier unit testing. Don't test Svelte internals.\n\n## Routing\n- **Official**: [SvelteKit](/docs/kit) - filesystem router, SSR, HMR\n- **Alternatives**: See [packages page](/packages#routing)\n\n## UI Components\nSee [component libraries](/packages#component-libraries) and [packages page](/packages)\n\n## Mobile Apps\n- **Hybrid**: [Tauri](https://v2.tauri.app/start/frontend/sveltekit/) or [Capacitor](https://capacitorjs.com/solution/svelte) with [SvelteKit SPA](https://kit.svelte.dev/docs/single-page-apps)\n- **Note**: Svelte Native not supported in Svelte 5\n\n## Style Scoping\n**Cannot disable unused style removal.** Svelte scopes styles by adding unique classes.\n\nFor dynamic/child component styles, use `:global()`:\n```css\n/* Partially global selector */\n.foo :global(.bar) { ... }\n```\n\nStyles `.bar` elements inside component's `.foo` elements.\n\n## Scaling\nSee [this issue](https://github.com/sveltejs/svelte/issues/2546)\n\n## Legacy\n- **Svelte v2**: [Docs available](https://v2.svelte.dev/guide), no new features",
    "svelte/svelte": "# Svelte 5 API Reference\n\n## Component Lifecycle\n\n### onMount\nRuns once after component mounts to DOM. Returns cleanup function if provided synchronously. Doesn't run during SSR.\n\n```ts\nfunction onMount<T>(fn: () => NotFunction<T> | Promise<NotFunction<T>> | (() => any)): void;\n```\n\n### onDestroy\nRuns before component unmounts. Only lifecycle function that runs server-side.\n\n```ts\nfunction onDestroy(fn: () => any): void;\n```\n\n### tick\nReturns promise that resolves after pending state changes applied.\n\n```ts\nfunction tick(): Promise<void>;\n```\n\n### settled\nReturns promise that resolves after state changes, async work, and DOM updates complete.\n\n```ts\nfunction settled(): Promise<void>;\n```\n\n## Component Mounting\n\n### mount\nMounts component to target. Returns component exports. Plays transitions unless `intro: false`.\n\n```ts\nfunction mount<Props, Exports>(\n  component: Component<Props, Exports, any>,\n  options: MountOptions<Props>\n): Exports;\n\ntype MountOptions<Props> = {\n  target: Document | Element | ShadowRoot;\n  anchor?: Node;\n  context?: Map<any, any>;\n  intro?: boolean; // default: true\n  props?: Props; // required if Props not empty\n};\n```\n\n### hydrate\nHydrates server-rendered component.\n\n```ts\nfunction hydrate<Props, Exports>(\n  component: Component<Props, Exports, any>,\n  options: {\n    target: Document | Element | ShadowRoot;\n    props?: Props;\n    context?: Map<any, any>;\n    intro?: boolean;\n    recover?: boolean;\n  }\n): Exports;\n```\n\n### unmount\nUnmounts component. Returns promise if `outro: true` (plays transitions).\n\n```ts\nfunction unmount(\n  component: Record<string, any>,\n  options?: { outro?: boolean }\n): Promise<void>;\n```\n\n```js\nimport { mount, unmount } from 'svelte';\nimport App from './App.svelte';\n\nconst app = mount(App, { target: document.body });\nunmount(app, { outro: true });\n```\n\n## Context\n\n### setContext\nAssociates context with key for children. Call during component init.\n\n```ts\nfunction setContext<T>(key: any, context: T): T;\n```\n\n### getContext\nRetrieves context from closest parent with key. Call during component init.\n\n```ts\nfunction getContext<T>(key: any): T;\n```\n\n### hasContext\nChecks if key exists in parent context. Call during component init.\n\n```ts\nfunction hasContext(key: any): boolean;\n```\n\n### getAllContexts\nRetrieves entire context map from closest parent. Call during component init.\n\n```ts\nfunction getAllContexts<T extends Map<any, any> = Map<any, any>>(): T;\n```\n\n## Utilities\n\n### untrack\nReads state inside `$derived` or `$effect` without creating dependency.\n\n```ts\nfunction untrack<T>(fn: () => T): T;\n```\n\n```ts\n$effect(() => {\n  // runs when `data` changes, not when `time` changes\n  save(data, {\n    timestamp: untrack(() => time)\n  });\n});\n```\n\n### flushSync\nSynchronously flushes pending updates. Returns callback result if provided.\n\n```ts\nfunction flushSync<T = void>(fn?: () => T): T;\n```\n\n### getAbortSignal\nReturns `AbortSignal` that aborts when current `$derived` or `$effect` re-runs or destroys. Must call during derived/effect execution.\n\n```ts\nfunction getAbortSignal(): AbortSignal;\n```\n\n```svelte\n<script>\nimport { getAbortSignal } from 'svelte';\n\nlet { id } = $props();\n\nasync function getData(id) {\n  const response = await fetch(`/items/${id}`, {\n    signal: getAbortSignal()\n  });\n  return await response.json();\n}\n\nconst data = $derived(await getData(id));\n</script>\n```\n\n### createRawSnippet\nCreates snippet programmatically.\n\n```ts\nfunction createRawSnippet<Params extends unknown[]>(\n  fn: (...params: Getters<Params>) => {\n    render: () => string;\n    setup?: (element: Element) => void | (() => void);\n  }\n): Snippet<Params>;\n```\n\n## TypeScript Types\n\n### Component\nType for strongly typed Svelte components.\n\n```ts\ninterface Component<\n  Props extends Record<string, any> = {},\n  Exports extends Record<string, any> = {},\n  Bindings extends keyof Props | '' = string\n> {\n  (internals: ComponentInternals, props: Props): Exports;\n  element?: typeof HTMLElement; // if compiled with customElement\n}\n```\n\n```ts\n// Library type definition\nimport type { Component } from 'svelte';\nexport declare const MyComponent: Component<{ foo: string }>;\n\n// Usage\nimport { MyComponent } from \"component-library\";\n<MyComponent foo={'bar'} />\n```\n\n### ComponentProps\nGets props type for component.\n\n```ts\ntype ComponentProps<Comp extends SvelteComponent | Component<any, any>>;\n```\n\n```ts\nimport type { ComponentProps } from 'svelte';\nimport MyComponent from './MyComponent.svelte';\n\nconst props: ComponentProps<typeof MyComponent> = { foo: 'bar' };\n\n// Generic function\nfunction withProps<TComponent extends Component<any>>(\n  component: TComponent,\n  props: ComponentProps<TComponent>\n) {}\n```\n\n### Snippet\nType for `#snippet` blocks.\n\n```ts\ninterface Snippet<Parameters extends unknown[] = []> {\n  (...args: Parameters): typeof SnippetReturn;\n}\n```\n\n```ts\nlet { banner }: { banner: Snippet<[{ text: string }]> } = $props();\n```\n\nCall snippets with `{@render ...}` tag only.\n\n## Deprecated (Svelte 4 Compatibility)\n\n- **SvelteComponent/SvelteComponentTyped**: Use `Component` type instead\n- **beforeUpdate**: Use `$effect.pre` instead\n- **afterUpdate**: Use `$effect` instead  \n- **createEventDispatcher**: Use callback props or `$host()` rune instead\n- **ComponentType/ComponentEvents**: Obsolete with new `Component` type",
    "svelte/svelte-action": "# Actions (Legacy - Superseded by Attachments)\n\n## Action\n\nType interface for functions called when an element is created.\n\n**Basic usage:**\n```ts\nexport const myAction: Action<HTMLDivElement, { someProperty: boolean } | undefined> = (node, param = { someProperty: true }) => {\n\t// ...\n}\n```\n\n- `Action<HTMLDivElement>` or `Action<HTMLDivElement, undefined>` = no parameters accepted\n- Can return object with `update` and `destroy` methods\n- Can type additional attributes and events (see `ActionReturn`)\n\n**Type signature:**\n```dts\ninterface Action<\n\tElement = HTMLElement,\n\tParameter = undefined,\n\tAttributes extends Record<string, any> = Record<never, any>\n> {\n\t<Node extends Element>(\n\t\t...args: undefined extends Parameter\n\t\t\t? [node: Node, parameter?: Parameter]\n\t\t\t: [node: Node, parameter: Parameter]\n\t): void | ActionReturn<Parameter, Attributes>;\n}\n```\n\n## ActionReturn\n\nReturn type for actions. Both properties optional:\n\n- **`update`**: Called when parameter changes after markup updates\n- **`destroy`**: Called after element unmounts\n\nCan specify additional attributes/events for TypeScript (runtime unaffected).\n\n**Example:**\n```ts\ninterface Attributes {\n\tnewprop?: string;\n\t'on:event': (e: CustomEvent<boolean>) => void;\n}\n\nexport function myAction(node: HTMLElement, parameter: Parameter): ActionReturn<Parameter, Attributes> {\n\t// ...\n\treturn {\n\t\tupdate: (updatedParameter) => {...},\n\t\tdestroy: () => {...}\n\t};\n}\n```\n\n**Type signature:**\n```dts\ninterface ActionReturn<\n\tParameter = undefined,\n\tAttributes extends Record<string, any> = Record<never, any>\n> {\n\tupdate?: (parameter: Parameter) => void;\n\tdestroy?: () => void;\n}\n```",
    "svelte/svelte-animate": "# svelte/animate\n\n## flip\n\nAnimates element position changes by calculating start/end positions and translating x/y values. FLIP = First, Last, Invert, Play.\n\n```js\nimport { flip } from 'svelte/animate';\n```\n\n```dts\nfunction flip(\n\tnode: Element,\n\t{ from, to }: { from: DOMRect; to: DOMRect; },\n\tparams?: FlipParams\n): AnimationConfig;\n```\n\n## Types\n\n**AnimationConfig**\n```dts\ninterface AnimationConfig {\n\tdelay?: number;\n\tduration?: number;\n\teasing?: (t: number) => number;\n\tcss?: (t: number, u: number) => string;\n\ttick?: (t: number, u: number) => void;\n}\n```\n\n**FlipParams**\n```dts\ninterface FlipParams {\n\tdelay?: number;\n\tduration?: number | ((len: number) => number);\n\teasing?: (t: number) => number;\n}\n```",
    "svelte/svelte-attachments": "# Attachments API\n\n## createAttachmentKey\n\nCreates a symbol key for programmatic attachments (alternative to `{@attach ...}`). Useful for library authors.\n\n```svelte\n<script>\n\timport { createAttachmentKey } from 'svelte/attachments';\n\n\tconst props = {\n\t\tclass: 'cool',\n\t\tonclick: () => alert('clicked'),\n\t\t[createAttachmentKey()]: (node) => {\n\t\t\tnode.textContent = 'attached!';\n\t\t}\n\t};\n</script>\n\n<button {...props}>click me</button>\n```\n\n```dts\nfunction createAttachmentKey(): symbol;\n```\n\n## fromAction\n\nConverts an action to an attachment with same behavior. Second argument must be a function that returns the action's argument.\n\n```svelte\n<!-- with an action -->\n<div use:foo={bar}>...</div>\n\n<!-- with an attachment -->\n<div {@attach fromAction(foo, () => bar)}>...</div>\n```\n\n```dts\nfunction fromAction<E extends EventTarget, T>(\n\taction: Action<E, T> | ((element: E, arg: T) => void | ActionReturn<T>),\n\tfn: () => T\n): Attachment<E>;\n\nfunction fromAction<E extends EventTarget>(\n\taction: Action<E, void> | ((element: E) => void | ActionReturn<void>)\n): Attachment<E>;\n```\n\n## Attachment\n\nFunction that runs when element mounts. Optionally returns cleanup function called on unmount.\n\nUsed with `{@attach ...}` or via `createAttachmentKey()`.\n\n```dts\ninterface Attachment<T extends EventTarget = Element> {\n\t(element: T): void | (() => void);\n}\n```",
    "svelte/svelte-compiler": "# Svelte Compiler API\n\n```js\nimport {\n\tVERSION,\n\tcompile,\n\tcompileModule,\n\tmigrate,\n\tparse,\n\tpreprocess,\n\twalk\n} from 'svelte/compiler';\n```\n\n## Core Functions\n\n### VERSION\nCurrent Svelte version from package.json.\n\n### compile\nConverts `.svelte` source to JavaScript module.\n\n```dts\nfunction compile(source: string, options: CompileOptions): CompileResult;\n```\n\n### compileModule\nConverts JavaScript with runes to JavaScript module.\n\n```dts\nfunction compileModule(source: string, options: ModuleCompileOptions): CompileResult;\n```\n\n### migrate\nBest-effort migration to runes, event attributes, and render tags. May throw on complex code.\n\n```dts\nfunction migrate(source: string, { filename?, use_ts? }?): { code: string };\n```\n\n### parse\nParses component to AST. Set `modern: true` for modern AST (default in Svelte 6).\n\n```dts\nfunction parse(source: string, options: { filename?, modern: true, loose? }): AST.Root;\nfunction parse(source: string, options?: { filename?, modern?: false, loose? }): Record<string, any>;\n```\n\n### preprocess\nTransforms component source (e.g., `<style lang=\"sass\">` to CSS).\n\n```dts\nfunction preprocess(\n\tsource: string,\n\tpreprocessor: PreprocessorGroup | PreprocessorGroup[],\n\toptions?: { filename? }\n): Promise<Processed>;\n```\n\n### walk\n**Deprecated**: Use `import { walk } from 'estree-walker'` instead.\n\n## CompileOptions\n\nExtends `ModuleCompileOptions` with:\n\n- **name**: `string` - JS class name (inferred from filename if unspecified)\n- **customElement**: `boolean` (default: `false`) - Generate custom element constructor\n- **accessors**: `boolean` (default: `false`) - Create getters/setters for props (deprecated in runes mode)\n- **namespace**: `'html' | 'svg' | 'mathml'` (default: `'html'`)\n- **immutable**: `boolean` (default: `false`) - Promise not to mutate objects (deprecated in runes mode)\n- **css**: `'injected' | 'external'` - Style handling\n  - `'injected'`: Styles in `<head>` or shadow root\n  - `'external'`: CSS in compilation result only\n- **cssHash**: `CssHashGetter` - Custom scoped CSS classname function\n- **preserveComments**: `boolean` (default: `false`) - Keep HTML comments\n- **preserveWhitespace**: `boolean` (default: `false`) - Keep whitespace as typed\n- **fragments**: `'html' | 'tree'` (default: `'html'`, since v5.33) - DOM fragment cloning strategy\n  - `'html'`: Faster, uses `innerHTML` (blocked by CSP `require-trusted-types-for 'script'`)\n  - `'tree'`: Slower, works everywhere\n- **runes**: `boolean | undefined` (default: `undefined`) - Force/disable runes mode (will be `true` by default in Svelte 6)\n- **discloseVersion**: `boolean` (default: `true`) - Expose Svelte version in `window.__svelte.v`\n- **compatibility**: (deprecated - temporary migration aid)\n  - **componentApi**: `4 | 5` (default: `5`) - Svelte 4-style instantiation\n- **sourcemap**: `object | string` - Initial sourcemap to merge\n- **outputFilename**: `string` - For JS sourcemap\n- **cssOutputFilename**: `string` - For CSS sourcemap\n- **hmr**: `boolean` (default: `false`) - Hot reloading support\n- **modernAst**: `boolean` (default: `false`) - Modern AST (default in Svelte 6)\n\n## ModuleCompileOptions\n\n- **dev**: `boolean` (default: `false`) - Runtime checks and debug info\n- **generate**: `'client' | 'server' | false` (default: `'client'`) - Output target\n- **filename**: `string` - For debugging/sourcemaps\n- **rootDir**: `string` (default: `process.cwd()`) - Prevent filesystem info leaks\n- **warningFilter**: `(warning: Warning) => boolean` - Filter warnings (return `true` to keep)\n- **experimental**: (since v5.36)\n  - **async**: `boolean` - Allow `await` in deriveds, templates, component top level\n\n## CompileResult\n\n```dts\ninterface CompileResult {\n\tjs: {\n\t\tcode: string;\n\t\tmap: SourceMap;\n\t};\n\tcss: null | {\n\t\tcode: string;\n\t\tmap: SourceMap;\n\t\thasGlobal: boolean;\n\t};\n\twarnings: Warning[];\n\tmetadata: {\n\t\trunes: boolean; // Compiled in runes mode (always true for compileModule)\n\t};\n\tast: any;\n}\n```\n\n## Preprocessor Types\n\n### MarkupPreprocessor\n```dts\ntype MarkupPreprocessor = (options: {\n\tcontent: string;\n\tfilename?: string;\n}) => Processed | void | Promise<Processed | void>;\n```\n\n### Preprocessor\n```dts\ntype Preprocessor = (options: {\n\tcontent: string;\n\tattributes: Record<string, string | boolean>;\n\tmarkup: string;\n\tfilename?: string;\n}) => Processed | void | Promise<Processed | void>;\n```\n\n### PreprocessorGroup\n```dts\ninterface PreprocessorGroup {\n\tname?: string; // Will be required in next major version\n\tmarkup?: MarkupPreprocessor;\n\tstyle?: Preprocessor;\n\tscript?: Preprocessor;\n}\n```\n\n### Processed\n```dts\ninterface Processed {\n\tcode: string;\n\tmap?: string | object;\n\tdependencies?: string[]; // Files to watch\n\tattributes?: Record<string, string | boolean>; // Updated tag attributes (script/style only)\n\ttoString?: () => string;\n}\n```\n\n## AST Types\n\nKey AST node types:\n\n- **Root**: Top-level with `options`, `fragment`, `css`, `instance`, `module`, `comments`\n- **Fragment**: Contains array of `Text | Tag | ElementLike | Block | Comment`\n- **Text**: Static text with `data` (decoded) and `raw` (original)\n- **ExpressionTag**: `{...}` template expression\n- **HtmlTag**: `{@html ...}`\n- **RenderTag**: `{@render foo(...)}`\n- **AttachTag**: `{@attach foo(...)}`\n- **ConstTag**: `{@const ...}`\n- **DebugTag**: `{@debug ...}`\n\n**Directives**: `AnimateDirective`, `BindDirective`, `ClassDirective`, `LetDirective`, `OnDirective`, `StyleDirective`, `TransitionDirective`, `UseDirective`\n\n**Elements**: `Component`, `RegularElement`, `SlotElement`, `TitleElement`, `SvelteBody`, `SvelteComponent`, `SvelteDocument`, `SvelteElement`, `SvelteFragment`, `SvelteBoundary`, `SvelteHead`, `SvelteSelf`, `SvelteWindow`\n\n**Blocks**: `EachBlock`, `IfBlock`, `AwaitBlock`, `KeyBlock`, `SnippetBlock`\n\n**Other**: `Attribute`, `SpreadAttribute`, `Script`, `Comment`",
    "svelte/svelte-easing": "# svelte/easing\n\nEasing functions for transitions/animations. All take `t: number` (0-1) and return `number`.\n\n```js\nimport {\n\tbackIn, backInOut, backOut,\n\tbounceIn, bounceInOut, bounceOut,\n\tcircIn, circInOut, circOut,\n\tcubicIn, cubicInOut, cubicOut,\n\telasticIn, elasticInOut, elasticOut,\n\texpoIn, expoInOut, expoOut,\n\tlinear,\n\tquadIn, quadInOut, quadOut,\n\tquartIn, quartInOut, quartOut,\n\tquintIn, quintInOut, quintOut,\n\tsineIn, sineInOut, sineOut\n} from 'svelte/easing';\n```\n\n**Available functions:**\n- `linear` - No easing\n- `quad`, `cubic`, `quart`, `quint` - Polynomial easing (power 2-5)\n- `sine` - Sinusoidal easing\n- `expo` - Exponential easing\n- `circ` - Circular easing\n- `back` - Overshooting easing\n- `bounce` - Bouncing easing\n- `elastic` - Elastic easing\n\n**Variants:** `In`, `Out`, `InOut` for each (except `linear`)\n\n```dts\nfunction easingFunction(t: number): number;\n```",
    "svelte/svelte-events": "# svelte/events\n\n## on\n\nAttaches event handler and returns cleanup function. Preserves correct order with declarative handlers (like `onclick`) which use event delegation.\n\n```ts\nimport { on } from 'svelte/events';\n\n// Usage\nconst cleanup = on(window, 'resize', (event) => {\n  // handle event\n});\n\n// Later: cleanup();\n```\n\n**Overloads:**\n- `on(window: Window, type, handler, options?)`\n- `on(document: Document, type, handler, options?)`\n- `on(element: HTMLElement, type, handler, options?)`\n- `on(element: MediaQueryList, type, handler, options?)`\n- `on(element: EventTarget, type, handler, options?)`",
    "svelte/svelte-legacy": "# svelte/legacy\n\nMigration helpers for Svelte 5. All deprecated - migrate away over time.\n\n```js\nimport {\n\tasClassComponent,\n\tcreateBubbler,\n\tcreateClassComponent,\n\thandlers,\n\tnonpassive,\n\tonce,\n\tpassive,\n\tpreventDefault,\n\trun,\n\tself,\n\tstopImmediatePropagation,\n\tstopPropagation,\n\ttrusted\n} from 'svelte/legacy';\n```\n\n## Component Compatibility\n\n### asClassComponent\nConverts Svelte 5 component to Svelte 4 compatible constructor.\n\n```dts\nfunction asClassComponent<Props, Exports, Events, Slots>(\n\tcomponent: SvelteComponent<Props, Events, Slots> | Component<Props>\n): ComponentType<SvelteComponent<Props, Events, Slots> & Exports>;\n```\n\n### createClassComponent\nCreates Svelte 4 compatible component from options + component function.\n\n```dts\nfunction createClassComponent<Props, Exports, Events, Slots>(\n\toptions: ComponentConstructorOptions<Props> & {\n\t\tcomponent: ComponentType<SvelteComponent<Props, Events, Slots>> | Component<Props>;\n\t}\n): SvelteComponent<Props, Events, Slots> & Exports;\n```\n\n### LegacyComponentType\nType for components usable as both class and function.\n\n```dts\ntype LegacyComponentType = {\n\tnew (o: ComponentConstructorOptions): SvelteComponent;\n\t(...args: Parameters<Component<Record<string, any>>>): ReturnType<Component<Record<string, any>, Record<string, any>>>;\n};\n```\n\n## Event Handling\n\n### createBubbler\nMimics `on:click` without handler (Svelte 4 auto-delegation).\n\n```dts\nfunction createBubbler(): (type: string) => (event: Event) => boolean;\n```\n\n### handlers\nAllows multiple event listeners (Svelte 4 behavior).\n\n```dts\nfunction handlers(...handlers: EventListener[]): EventListener;\n```\n\n## Event Modifiers\n\nReplacements for Svelte 4 event modifiers:\n\n### once\n```dts\nfunction once(fn: (event: Event, ...args: Array<unknown>) => void): (event: Event, ...args: unknown[]) => void;\n```\n\n### preventDefault\n```dts\nfunction preventDefault(fn: (event: Event, ...args: Array<unknown>) => void): (event: Event, ...args: unknown[]) => void;\n```\n\n### stopPropagation\n```dts\nfunction stopPropagation(fn: (event: Event, ...args: Array<unknown>) => void): (event: Event, ...args: unknown[]) => void;\n```\n\n### stopImmediatePropagation\n```dts\nfunction stopImmediatePropagation(fn: (event: Event, ...args: Array<unknown>) => void): (event: Event, ...args: unknown[]) => void;\n```\n\n### self\n```dts\nfunction self(fn: (event: Event, ...args: Array<unknown>) => void): (event: Event, ...args: unknown[]) => void;\n```\n\n### trusted\n```dts\nfunction trusted(fn: (event: Event, ...args: Array<unknown>) => void): (event: Event, ...args: unknown[]) => void;\n```\n\n### passive (action)\n```dts\nfunction passive(node: HTMLElement, [event, handler]: [event: string, handler: () => EventListener]): void;\n```\n\n### nonpassive (action)\n```dts\nfunction nonpassive(node: HTMLElement, [event, handler]: [event: string, handler: () => EventListener]): void;\n```\n\n## Other\n\n### run\nRuns once immediately on server, like `$effect.pre` on client.\n\n```dts\nfunction run(fn: () => void | (() => void)): void;\n```",
    "svelte/svelte-motion": "# svelte/motion\n\n```js\nimport { Spring, Tween, prefersReducedMotion, spring, tweened } from 'svelte/motion';\n```\n\n## Spring\n\nWrapper for spring-like animated values. Changes to `spring.target` animate `spring.current` over time using `stiffness` and `damping`.\n\n```svelte\n<script>\n\timport { Spring } from 'svelte/motion';\n\n\tconst spring = new Spring(0);\n</script>\n\n<input type=\"range\" bind:value={spring.target} />\n<input type=\"range\" bind:value={spring.current} disabled />\n```\n\n### Constructor\n```dts\nnew Spring(value: T, options?: SpringOpts)\n```\n\n### Static Methods\n```dts\nSpring.of<U>(fn: () => U, options?: SpringOpts): Spring<U>\n```\nBinds spring value to `fn` return value. Must be called in effect root (e.g., component init).\n\n```svelte\n<script>\n\timport { Spring } from 'svelte/motion';\n\n\tlet { number } = $props();\n\n\tconst spring = Spring.of(() => number);\n</script>\n```\n\n### Methods\n```dts\nset(value: T, options?: SpringUpdateOpts): Promise<void>\n```\nSets `spring.target` to `value`, returns Promise resolving when `spring.current` catches up.\n- `options.instant`: immediately match target\n- `options.preserveMomentum`: continue trajectory for specified milliseconds (useful for fling gestures)\n\n### Properties\n- `target: T` - end value\n- `current: T` (getter) - current value\n- `stiffness: number`\n- `damping: number`\n- `precision: number`\n\n## Tween\n\nWrapper for smoothly tweened values. Changes to `tween.target` animate `tween.current` using `delay`, `duration`, and `easing`.\n\n```svelte\n<script>\n\timport { Tween } from 'svelte/motion';\n\n\tconst tween = new Tween(0);\n</script>\n\n<input type=\"range\" bind:value={tween.target} />\n<input type=\"range\" bind:value={tween.current} disabled />\n```\n\n### Constructor\n```dts\nnew Tween(value: T, options?: TweenedOptions<T>)\n```\n\n### Static Methods\n```dts\nTween.of<U>(fn: () => U, options?: TweenedOptions<U>): Tween<U>\n```\nBinds tween value to `fn` return value. Must be called in effect root.\n\n```svelte\n<script>\n\timport { Tween } from 'svelte/motion';\n\n\tlet { number } = $props();\n\n\tconst tween = Tween.of(() => number);\n</script>\n```\n\n### Methods\n```dts\nset(value: T, options?: TweenedOptions<T>): Promise<void>\n```\nSets `tween.target`, returns Promise resolving when `tween.current` catches up. Options override defaults.\n\n### Properties\n- `target: T` (getter/setter)\n- `current: T` (getter)\n\n## prefersReducedMotion\n\nMedia query matching user's [prefers-reduced-motion](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion) preference.\n\n```svelte\n<script>\n\timport { prefersReducedMotion } from 'svelte/motion';\n\timport { fly } from 'svelte/transition';\n\n\tlet visible = $state(false);\n</script>\n\n<button onclick={() => visible = !visible}>\n\ttoggle\n</button>\n\n{#if visible}\n\t<p transition:fly={{ y: prefersReducedMotion.current ? 0 : 200 }}>\n\t\tflies in, unless the user prefers reduced motion\n\t</p>\n{/if}\n```\n\n```dts\nconst prefersReducedMotion: MediaQuery;\n```\n\n## Legacy APIs (Deprecated)\n\n### spring\n**Deprecated:** Use `Spring` class instead.\n\n```dts\nfunction spring<T>(value?: T, opts?: SpringOpts): Spring<T>\n```\n\n### tweened\n**Deprecated:** Use `Tween` class instead.\n\n```dts\nfunction tweened<T>(value?: T, defaults?: TweenedOptions<T>): Tweened<T>\n```",
    "svelte/svelte-reactivity-window": "# svelte/reactivity/window\n\nReactive versions of `window` values. Each has a `.current` property usable in templates, `$derived`, and `$effect` without manual event listeners.\n\n```svelte\n<script>\n\timport { innerWidth, innerHeight } from 'svelte/reactivity/window';\n</script>\n\n<p>{innerWidth.current}x{innerHeight.current}</p>\n```\n\n## Available Exports\n\n```js\n// @noErrors\nimport {\n\tdevicePixelRatio,\n\tinnerHeight,\n\tinnerWidth,\n\tonline,\n\touterHeight,\n\touterWidth,\n\tscreenLeft,\n\tscreenTop,\n\tscrollX,\n\tscrollY\n} from 'svelte/reactivity/window';\n```\n\nAll values are `undefined` on server.\n\n## API Reference\n\n| Export | Maps to | Notes |\n|--------|---------|-------|\n| `devicePixelRatio.current` | `window.devicePixelRatio` | Chrome: responds to zoom; Firefox/Safari: doesn't |\n| `innerHeight.current` | `window.innerHeight` | |\n| `innerWidth.current` | `window.innerWidth` | |\n| `online.current` | `navigator.onLine` | Returns `boolean \\| undefined` |\n| `outerHeight.current` | `window.outerHeight` | |\n| `outerWidth.current` | `window.outerWidth` | |\n| `screenLeft.current` | `window.screenLeft` | Updated in `requestAnimationFrame` |\n| `screenTop.current` | `window.screenTop` | Updated in `requestAnimationFrame` |\n| `scrollX.current` | `window.scrollX` | |\n| `scrollY.current` | `window.scrollY` | |",
    "svelte/svelte-reactivity": "# Svelte 5 Reactivity\n\nReactive versions of built-ins (`Map`, `Set`, `URL`) and utilities for handling reactivity.\n\n```js\nimport {\n\tMediaQuery,\n\tSvelteDate,\n\tSvelteMap,\n\tSvelteSet,\n\tSvelteURL,\n\tSvelteURLSearchParams,\n\tcreateSubscriber\n} from 'svelte/reactivity';\n```\n\n## MediaQuery\n\n**Since 5.7.0**\n\nReactive media query with `current` property.\n\n**Warning:** No SSR value exists. Use CSS if possible to avoid hydration issues.\n\n```svelte\n<script>\n\timport { MediaQuery } from 'svelte/reactivity';\n\n\tconst large = new MediaQuery('min-width: 800px');\n</script>\n\n<h1>{large.current ? 'large screen' : 'small screen'}</h1>\n```\n\n```dts\nconstructor(query: string, fallback?: boolean | undefined);\n```\n\n## SvelteDate\n\nReactive `Date`. Reading in `$effect`/`$derived` re-evaluates when changed.\n\n```svelte\n<script>\n\timport { SvelteDate } from 'svelte/reactivity';\n\n\tconst date = new SvelteDate();\n\n\tconst formatter = new Intl.DateTimeFormat(undefined, {\n\t  hour: 'numeric',\n\t  minute: 'numeric',\n\t  second: 'numeric'\n\t});\n\n\t$effect(() => {\n\t\tconst interval = setInterval(() => {\n\t\t\tdate.setTime(Date.now());\n\t\t}, 1000);\n\n\t\treturn () => {\n\t\t\tclearInterval(interval);\n\t\t};\n\t});\n</script>\n\n<p>The time is {formatter.format(date)}</p>\n```\n\n## SvelteMap\n\nReactive `Map`. Reading (iterating, `.size`, `.get()`, `.has()`) in `$effect`/`$derived` re-evaluates when updated.\n\n**Note:** Values are NOT deeply reactive.\n\n```svelte\n<script>\n\timport { SvelteMap } from 'svelte/reactivity';\n\timport { result } from './game.js';\n\n\tlet board = new SvelteMap();\n\tlet player = $state('x');\n\tlet winner = $derived(result(board));\n\n\tfunction reset() {\n\t\tplayer = 'x';\n\t\tboard.clear();\n\t}\n</script>\n\n<div class=\"board\">\n\t{#each Array(9), i}\n\t\t<button\n\t\t\tdisabled={board.has(i) || winner}\n\t\t\tonclick={() => {\n\t\t\t\tboard.set(i, player);\n\t\t\t\tplayer = player === 'x' ? 'o' : 'x';\n\t\t\t}}\n\t\t>{board.get(i)}</button>\n\t{/each}\n</div>\n\n{#if winner}\n\t<p>{winner} wins!</p>\n\t<button onclick={reset}>reset</button>\n{:else}\n\t<p>{player} is next</p>\n{/if}\n```\n\n## SvelteSet\n\nReactive `Set`. Reading (iterating, `.size`, `.has()`) in `$effect`/`$derived` re-evaluates when updated.\n\n**Note:** Values are NOT deeply reactive.\n\n```svelte\n<script>\n\timport { SvelteSet } from 'svelte/reactivity';\n\tlet monkeys = new SvelteSet();\n\n\tfunction toggle(monkey) {\n\t\tif (monkeys.has(monkey)) {\n\t\t\tmonkeys.delete(monkey);\n\t\t} else {\n\t\t\tmonkeys.add(monkey);\n\t\t}\n\t}\n</script>\n\n{#each ['🙈', '🙉', '🙊'] as monkey}\n\t<button onclick={() => toggle(monkey)}>{monkey}</button>\n{/each}\n\n<button onclick={() => monkeys.clear()}>clear</button>\n\n{#if monkeys.has('🙈')}<p>see no evil</p>{/if}\n{#if monkeys.has('🙉')}<p>hear no evil</p>{/if}\n{#if monkeys.has('🙊')}<p>speak no evil</p>{/if}\n```\n\n## SvelteURL\n\nReactive `URL`. Reading properties (`.href`, `.pathname`) in `$effect`/`$derived` re-evaluates when changed.\n\n`searchParams` is a `SvelteURLSearchParams` instance.\n\n```svelte\n<script>\n\timport { SvelteURL } from 'svelte/reactivity';\n\n\tconst url = new SvelteURL('https://example.com/path');\n</script>\n\n<!-- changes to these... -->\n<input bind:value={url.protocol} />\n<input bind:value={url.hostname} />\n<input bind:value={url.pathname} />\n\n<hr />\n\n<!-- will update `href` and vice versa -->\n<input bind:value={url.href} size=\"65\" />\n```\n\n## SvelteURLSearchParams\n\nReactive `URLSearchParams`. Reading (iterating, `.get()`, `.getAll()`) in `$effect`/`$derived` re-evaluates when updated.\n\n```svelte\n<script>\n\timport { SvelteURLSearchParams } from 'svelte/reactivity';\n\n\tconst params = new SvelteURLSearchParams('message=hello');\n\n\tlet key = $state('key');\n\tlet value = $state('value');\n</script>\n\n<input bind:value={key} />\n<input bind:value={value} />\n<button onclick={() => params.append(key, value)}>append</button>\n\n<p>?{params.toString()}</p>\n\n{#each params as [key, value]}\n\t<p>{key}: {value}</p>\n{/each}\n```\n\n## createSubscriber\n\n**Since 5.7.0**\n\nIntegrates external event systems with Svelte reactivity. Returns `subscribe` function.\n\nWhen called in `$effect`, `start` callback receives `update` function. Calling `update` re-runs effect.\n\n`start` can return cleanup function (called when effect destroyed). Multiple effects share single `start` call.\n\nExample `MediaQuery` implementation:\n\n```js\n// @errors: 7031\nimport { createSubscriber } from 'svelte/reactivity';\nimport { on } from 'svelte/events';\n\nexport class MediaQuery {\n\t#query;\n\t#subscribe;\n\n\tconstructor(query) {\n\t\tthis.#query = window.matchMedia(`(${query})`);\n\n\t\tthis.#subscribe = createSubscriber((update) => {\n\t\t\t// when the `change` event occurs, re-run any effects that read `this.current`\n\t\t\tconst off = on(this.#query, 'change', update);\n\n\t\t\t// stop listening when all the effects are destroyed\n\t\t\treturn () => off();\n\t\t});\n\t}\n\n\tget current() {\n\t\t// This makes the getter reactive, if read in an effect\n\t\tthis.#subscribe();\n\n\t\t// Return the current state of the query, whether or not we're in an effect\n\t\treturn this.#query.matches;\n\t}\n}\n```\n\n```dts\nfunction createSubscriber(\n\tstart: (update: () => void) => (() => void) | void\n): () => void;\n```",
    "svelte/svelte-server": "# svelte/server\n\n## render\n\nServer-only function (requires `server` compile option). Renders a component and returns `body` and `head` for server-side HTML generation.\n\n**Type signature:**\n\n```dts\nfunction render<\n\tComp extends SvelteComponent<any> | Component<any>,\n\tProps extends ComponentProps<Comp> = ComponentProps<Comp>\n>(\n\tcomponent: Comp,\n\toptions?: {\n\t\tprops?: Omit<Props, '$$slots' | '$$events'>;\n\t\tcontext?: Map<any, any>;\n\t\tidPrefix?: string;\n\t}\n): RenderOutput;\n```\n\n**Usage:**\n\n```js\nimport { render } from 'svelte/server';\n```\n\n- `props`: Component properties (optional if component has no required props)\n- `context`: Context map for component tree\n- `idPrefix`: Custom ID prefix for generated elements\n- Returns: Object with `body` and `head` properties containing rendered HTML",
    "svelte/svelte-store": "# svelte/store\n\n```js\nimport {\n\tderived,\n\tfromStore,\n\tget,\n\treadable,\n\treadonly,\n\ttoStore,\n\twritable\n} from 'svelte/store';\n```\n\n## Core Store Types\n\n### writable\nCreate store with read/write access.\n\n```dts\nfunction writable<T>(\n\tvalue?: T,\n\tstart?: StartStopNotifier<T>\n): Writable<T>;\n```\n\n### readable\nCreate read-only store.\n\n```dts\nfunction readable<T>(\n\tvalue?: T,\n\tstart?: StartStopNotifier<T>\n): Readable<T>;\n```\n\n### derived\nDerive value from one or more stores.\n\n```dts\n// Sync version\nfunction derived<S extends Stores, T>(\n\tstores: S,\n\tfn: (values: StoresValues<S>) => T,\n\tinitial_value?: T\n): Readable<T>;\n\n// Async version with set/update\nfunction derived<S extends Stores, T>(\n\tstores: S,\n\tfn: (values: StoresValues<S>, set: (value: T) => void, update: (fn: Updater<T>) => void) => Unsubscriber | void,\n\tinitial_value?: T\n): Readable<T>;\n```\n\n## Utilities\n\n### get\nGet current value (subscribes then immediately unsubscribes).\n\n```dts\nfunction get<T>(store: Readable<T>): T;\n```\n\n### readonly\nConvert any store to read-only.\n\n```dts\nfunction readonly<T>(store: Readable<T>): Readable<T>;\n```\n\n### toStore\nConvert getter/setter to store (interop with runes).\n\n```dts\nfunction toStore<V>(get: () => V, set: (v: V) => void): Writable<V>;\nfunction toStore<V>(get: () => V): Readable<V>;\n```\n\n### fromStore\nConvert store to reactive object (interop with runes).\n\n```dts\nfunction fromStore<V>(store: Writable<V>): { current: V };\nfunction fromStore<V>(store: Readable<V>): { readonly current: V };\n```\n\n## Interfaces\n\n### Readable\n```dts\ninterface Readable<T> {\n\tsubscribe(run: Subscriber<T>, invalidate?: () => void): Unsubscriber;\n}\n```\n\n### Writable\n```dts\ninterface Writable<T> extends Readable<T> {\n\tset(value: T): void;\n\tupdate(updater: Updater<T>): void;\n}\n```\n\n## Types\n\n```dts\ntype Subscriber<T> = (value: T) => void;\ntype Unsubscriber = () => void;\ntype Updater<T> = (value: T) => T;\ntype StartStopNotifier<T> = (\n\tset: (value: T) => void,\n\tupdate: (fn: Updater<T>) => void\n) => void | (() => void);\n```",
    "svelte/svelte-transition": "# svelte/transition\n\n```js\nimport { blur, crossfade, draw, fade, fly, scale, slide } from 'svelte/transition';\n```\n\n## Built-in Transitions\n\n### blur\nAnimates blur filter + opacity.\n\n```dts\nfunction blur(node: Element, {\n  delay, duration, easing, amount, opacity\n}?: BlurParams): TransitionConfig;\n```\n\n### fade\nAnimates opacity 0 ↔ current.\n\n```dts\nfunction fade(node: Element, {\n  delay, duration, easing\n}?: FadeParams): TransitionConfig;\n```\n\n### fly\nAnimates x/y position + opacity.\n\n```dts\nfunction fly(node: Element, {\n  delay, duration, easing, x, y, opacity\n}?: FlyParams): TransitionConfig;\n```\n\n### scale\nAnimates scale + opacity.\n\n```dts\nfunction scale(node: Element, {\n  delay, duration, easing, start, opacity\n}?: ScaleParams): TransitionConfig;\n```\n\n### slide\nSlides element in/out.\n\n```dts\nfunction slide(node: Element, {\n  delay, duration, easing, axis\n}?: SlideParams): TransitionConfig;\n```\n\n### draw\nAnimates SVG stroke (snake effect). Works with `<path>`, `<polyline>`, etc. with `getTotalLength()`.\n\n```dts\nfunction draw(node: SVGElement & { getTotalLength(): number }, {\n  delay, speed, duration, easing\n}?: DrawParams): TransitionConfig;\n```\n\n### crossfade\nCreates `[send, receive]` transition pair. Elements transform to counterpart's position + fade. Uses `fallback` if no counterpart.\n\n```dts\nfunction crossfade({\n  fallback, ...defaults\n}: CrossfadeParams & {\n  fallback?: (node: Element, params: CrossfadeParams, intro: boolean) => TransitionConfig;\n}): [send, receive];\n```\n\n## Types\n\n```dts\ntype EasingFunction = (t: number) => number;\n\ninterface TransitionConfig {\n  delay?: number;\n  duration?: number;\n  easing?: EasingFunction;\n  css?: (t: number, u: number) => string;\n  tick?: (t: number, u: number) => void;\n}\n\ninterface BlurParams {\n  delay?: number;\n  duration?: number;\n  easing?: EasingFunction;\n  amount?: number | string;\n  opacity?: number;\n}\n\ninterface FadeParams {\n  delay?: number;\n  duration?: number;\n  easing?: EasingFunction;\n}\n\ninterface FlyParams {\n  delay?: number;\n  duration?: number;\n  easing?: EasingFunction;\n  x?: number | string;\n  y?: number | string;\n  opacity?: number;\n}\n\ninterface ScaleParams {\n  delay?: number;\n  duration?: number;\n  easing?: EasingFunction;\n  start?: number;\n  opacity?: number;\n}\n\ninterface SlideParams {\n  delay?: number;\n  duration?: number;\n  easing?: EasingFunction;\n  axis?: 'x' | 'y';\n}\n\ninterface DrawParams {\n  delay?: number;\n  speed?: number;\n  duration?: number | ((len: number) => number);\n  easing?: EasingFunction;\n}\n\ninterface CrossfadeParams {\n  delay?: number;\n  duration?: number | ((len: number) => number);\n  easing?: EasingFunction;\n}\n```",
    "svelte/compiler-errors": "# Svelte 5 Error Messages Reference\n\n## Animation Errors\n\n**animation_duplicate** - Element can only have one `animate:` directive\n\n**animation_invalid_placement** / **animation_missing_key** - `animate:` directive must be on the only child of a keyed `{#each}` block\n\n## Attribute Errors\n\n**attribute_contenteditable_dynamic** - `contenteditable` must be static when using two-way binding\n\n**attribute_contenteditable_missing** - `contenteditable` required for `textContent`, `innerHTML`, `innerText` bindings\n\n**attribute_invalid_event_handler** - Event attributes must be JS expressions, not strings\n\n**attribute_invalid_multiple** - `multiple` must be static on `<select>` with two-way binding\n\n**attribute_invalid_type** - `type` must be static on `<input>` with two-way binding\n\n**attribute_invalid_sequence_expression** - Sequence expressions need parentheses in runes mode\n\n**attribute_unquoted_sequence** - `{...}` in attributes must be quoted unless it's the only value\n\n## Binding Errors\n\n**bind_group_invalid_expression** - `bind:group` only works with Identifier or MemberExpression\n\n**bind_invalid_expression** - Can only bind to Identifier, MemberExpression, or `{get, set}` pair\n\n**bind_invalid_value** - Can only bind to state or props\n\n**bindable_invalid_location** - `$bindable()` only works inside `$props()`\n\n## Block Errors\n\n**block_invalid_elseif** - Use `else if`, not `elseif`\n\n**const_tag_invalid_placement** - `{@const}` must be immediate child of `{#snippet}`, `{#if}`, `{:else if}`, `{:else}`, `{#each}`, `{:then}`, `{:catch}`, `<svelte:fragment>`, `<svelte:boundary>` or `<Component>`\n\n**const_tag_invalid_reference** - `{@const}` not available across snippet boundaries:\n\n```svelte\n<svelte:boundary>\n    {@const foo = 'bar'}\n    {#snippet failed()}\n        {foo} <!-- ERROR: foo not available here -->\n    {/snippet}\n</svelte:boundary>\n```\n\nTop-level code becomes part of implicit `children` snippet. Same applies to components.\n\n## Assignment Errors\n\n**constant_assignment** / **constant_binding** - Cannot assign/bind to constants\n\n**each_item_invalid_assignment** - Cannot reassign/bind to each block argument in runes mode. Use array and index:\n\n```svelte\n<script>\n\tlet array = $state([1, 2, 3]);\n</script>\n\n{#each array as entry, i}\n\t<button onclick={() => array[i] = 4}>change</button>\n\t<input bind:value={array[i]}>\n{/each}\n```\n\n## Rune Errors\n\n**effect_invalid_placement** - `$effect()` only as expression statement\n\n**derived_invalid_export** - Cannot export derived state. Export a function instead\n\n**props_invalid_placement** - `$props()` only at top level as variable declaration initializer\n\n**props_invalid_identifier** - `$props()` only with object destructuring\n\n**props_invalid_pattern** - `$props()` cannot have nested properties or computed keys\n\n**state_invalid_placement** - `%rune%()` only as variable declaration initializer, class field declaration, or first assignment in constructor\n\n**state_field_duplicate** - State field already declared:\n\n```js\nclass Counter {\n\tcount = $state(0); // Declaration\n\t// OR in constructor, but not both\n}\n```\n\n**rune_invalid_usage** - Cannot use runes in non-runes mode\n\n**rune_missing_parentheses** - Runes require parentheses\n\n## Event Handler Errors\n\n**event_handler_invalid_component_modifier** - Only `once` modifier allowed on components\n\n**mixed_event_handler_syntaxes** - Don't mix `on:click` and `onclick` syntaxes\n\n## Export/Import Errors\n\n**legacy_export_invalid** - Use `$props()` instead of `export let` in runes mode\n\n**module_illegal_default_export** - Components cannot have default exports\n\n**snippet_invalid_export** - Exported snippet can only reference `<script module>` declarations or other exportable snippets:\n\n```svelte\n<script module>\n\texport { greeting };\n</script>\n\n<script>\n\tlet message = 'hello'; // ERROR: can't reference this\n</script>\n\n{#snippet greeting(name)}\n\t<p>{message} {name}!</p>\n{/snippet}\n```\n\n## Store Errors\n\n**store_invalid_scoped_subscription** - Cannot subscribe to stores not declared at component top level\n\n**store_invalid_subscription_module** - Cannot reference store value outside `.svelte` files\n\n## Slot/Snippet Errors\n\n**slot_snippet_conflict** - Cannot mix `<slot>` and `{@render}` in same component\n\n**snippet_conflict** - Cannot use explicit children snippet with implicit children content\n\n**snippet_parameter_assignment** - Cannot reassign/bind to snippet parameters\n\n**snippet_invalid_rest_parameter** - Use arrays instead of rest parameters\n\n## Element Errors\n\n**node_invalid_placement** - HTML structure violations break Svelte assumptions:\n- `<p><div>` → browser auto-closes `<p>`\n- `<option><div>` → browser removes `<div>`\n- `<table><tr>` → browser inserts `<tbody>`\n\n**void_element_invalid_content** - Void elements cannot have children/closing tags\n\n**textarea_invalid_content** - `<textarea>` can have value attribute OR children, not both\n\n## Svelte Special Elements\n\n**svelte_component_missing_this** - `<svelte:component>` requires `this` attribute\n\n**svelte_element_missing_this** - `<svelte:element>` requires `this` attribute\n\n**svelte_fragment_invalid_placement** - `<svelte:fragment>` must be direct child of component\n\n**svelte_options_invalid_customelement** - `customElement` must be string or object:\n```js\n{ \n  tag?: string; \n  shadow?: \"open\" | \"none\"; \n  props?: { \n    [key: string]: { \n      attribute?: string; \n      reflect?: boolean; \n      type?: \"String\" | \"Boolean\" | \"Number\" | \"Array\" | \"Object\" \n    } \n  } \n}\n```\n\n**svelte_options_invalid_tagname** - Tag name must be lowercase and hyphenated\n\n**svelte_self_invalid_placement** - `<svelte:self>` only inside `{#if}`, `{#each}`, `{#snippet}` blocks or slots\n\n## Legacy Mode Errors\n\n**legacy_reactive_statement_invalid** - Use `$derived` or `$effect` instead of `$:` in runes mode\n\n**legacy_props_invalid** - Cannot use `$$props` in runes mode\n\n**legacy_rest_props_invalid** - Cannot use `$$restProps` in runes mode\n\n**legacy_await_invalid** - Cannot use `await` in deriveds/templates/top-level unless in runes mode\n\n## Other\n\n**dollar_prefix_invalid** - `$` prefix reserved for Svelte\n\n**global_reference_invalid** - Use `globalThis.name` for globals\n\n**host_invalid_placement** - `$host()` only in custom element instances\n\n**experimental_async** - Set `experimental.async: true` to use `await` in deriveds/templates/top-level",
    "svelte/compiler-warnings": "# Svelte 5 Warnings\n\n## Disabling Warnings\n\n```svelte\n<!-- svelte-ignore a11y_autofocus -->\n<input autofocus />\n\n<!-- Multiple rules, with note -->\n<!-- svelte-ignore a11y_click_events_have_key_events, a11y_no_static_element_interactions (because of reasons) -->\n<div onclick>...</div>\n```\n\n## Accessibility (a11y)\n\n### a11y_accesskey\nAvoid `accesskey` - creates accessibility complications.\n\n### a11y_aria_activedescendant_has_tabindex\nElement with `aria-activedescendant` needs `tabindex`.\n\n### a11y_aria_attributes\nReserved elements (`meta`, `html`, `script`, `style`) can't have `aria-*` attributes.\n\n### a11y_autofocus\nAvoid `autofocus` - causes usability issues.\n\n### a11y_click_events_have_key_events\nVisible, non-interactive elements with `onclick` need keyboard handler (`onkeyup`/`onkeydown`) and `tabindex`.\n\n```svelte\n<!-- Bad -->\n<div onclick={() => {}}></div>\n\n<!-- Good -->\n<button type=\"button\" onclick={() => {}}>Click</button>\n```\n\n### a11y_distracting_elements\nAvoid `<marquee>` and `<blink>`.\n\n### a11y_figcaption_index / a11y_figcaption_parent\n`<figcaption>` must be first/last child and immediate child of `<figure>`.\n\n### a11y_hidden\nDon't hide important elements (headings, etc.) with `aria-hidden`.\n\n### a11y_img_redundant_alt\nDon't use \"image\", \"photo\", \"picture\" in alt text - screen readers already announce images.\n\n### a11y_incorrect_aria_attribute_type\nUse correct types for ARIA attributes (e.g., `aria-hidden` must be boolean).\n\n### a11y_interactive_supports_focus\nInteractive roles need `tabindex`.\n\n### a11y_invalid_attribute\n`href` can't be empty, `'#'`, or `javascript:`.\n\n### a11y_label_has_associated_control\nLabels need associated control via wrapping or `for` attribute.\n\n### a11y_media_has_caption\n`<video>` needs `<track kind=\"captions\">` (unless `muted`).\n\n### a11y_misplaced_role\nReserved elements (`meta`, `html`, `script`, `style`) can't have `role`.\n\n### a11y_misplaced_scope\n`scope` only on `<th>` elements.\n\n### a11y_missing_attribute\nRequired attributes:\n- `<a>`: `href`\n- `<area>`: `alt`, `aria-label`, or `aria-labelledby`\n- `<html>`: `lang`\n- `<iframe>`: `title`\n- `<img>`: `alt`\n- `<object>`: `title`, `aria-label`, or `aria-labelledby`\n- `<input type=\"image\">`: `alt`, `aria-label`, or `aria-labelledby`\n\n### a11y_missing_content\nHeadings and anchors need accessible content.\n\n### a11y_mouse_events_have_key_events\n- `onmouseover` needs `onfocus`\n- `onmouseout` needs `onblur`\n\n### a11y_no_abstract_role\nDon't use abstract ARIA roles.\n\n### a11y_no_interactive_element_to_noninteractive_role\nDon't convert interactive elements (e.g., `<textarea>`) to non-interactive roles.\n\n### a11y_no_noninteractive_element_interactions\nNon-interactive elements (`<main>`, `<p>`, `<img>`, `<li>`, etc.) shouldn't have mouse/keyboard handlers.\n\n### a11y_no_noninteractive_element_to_interactive_role\nDon't convert non-interactive elements to interactive roles - use proper elements instead.\n\n### a11y_no_noninteractive_tabindex\nNon-interactive elements can't have positive `tabindex`.\n\n### a11y_no_redundant_roles\nDon't specify default roles (e.g., `<button role=\"button\">`).\n\n### a11y_no_static_element_interactions\n`<div>` with handlers needs ARIA role.\n\n### a11y_positive_tabindex\nAvoid `tabindex` > 0 - disrupts tab order.\n\n### a11y_role_has_required_aria_props\nARIA roles need required attributes (e.g., `role=\"checkbox\"` needs `aria-checked`).\n\n### a11y_role_supports_aria_props\nOnly use supported `aria-*` attributes for each role.\n\n### a11y_unknown_aria_attribute\nUse valid ARIA attributes from WAI-ARIA spec.\n\n### a11y_unknown_role\nUse valid, non-abstract ARIA roles.\n\n## Attributes\n\n### attribute_avoid_is\nAvoid `is` attribute - not cross-browser compatible.\n\n### attribute_illegal_colon\nDon't use `:` in attributes - conflicts with Svelte directives.\n\n### attribute_quoted\nQuoted attributes on components/custom elements will be stringified in future.\n\n## Code Quality\n\n### bidirectional_control_characters\nBidirectional control characters detected - can alter code direction maliciously.\n\n### bind_invalid_each_rest\nRest operator creates new object - binding won't work with original.\n\n### block_empty\nEmpty block detected.\n\n### component_name_lowercase\nComponents must start with capital letter.\n\n### css_unused_selector\nUnused CSS selector. Use `:global` if targeting `{@html}` content or child components:\n\n```svelte\n<div class=\"post\">{@html content}</div>\n\n<style>\n  .post :global {\n    p {...}\n  }\n</style>\n```\n\n### custom_element_props_identifier\nDestructure `$props()` or specify `customElement.props` for custom elements.\n\n### element_implicitly_closed\nSome elements implicitly close (e.g., `<p>` inside `<p>`). Add explicit closing tags.\n\n### element_invalid_self_closing_tag\nUse `<span></span>` not `<span />` for non-void elements. Run migration:\n```sh\nnpx sv migrate self-closing-tags\n```\n\n## Deprecated/Removed\n\n### event_directive_deprecated\nUse `on%name%` instead of `on:%name%`:\n```svelte\n<!-- Old -->\n<button on:click={handler}>\n\n<!-- New -->\n<button onclick={handler}>\n```\n\n### export_let_unused\nUnused export property. Use `export const` if for external reference only.\n\n### legacy_component_creation\nUse `mount()` or `hydrate()` instead of `new Component()`.\n\n### options_deprecated_accessors / options_deprecated_immutable\nNo effect in runes mode.\n\n### options_removed_*\nVarious removed compiler options.\n\n### script_context_deprecated\nUse `module` attribute:\n```svelte\n<script module>\n\tlet foo = 'bar';\n</script>\n```\n\n### slot_element_deprecated\nUse `{@render ...}` instead of `<slot>`.\n\n### svelte_component_deprecated\nComponents are dynamic by default - no need for `<svelte:component>`:\n\n```svelte\n<!-- Old -->\n<svelte:component this={Component} />\n\n<!-- New -->\n<Component />\n\n<!-- For complex logic -->\n{#each items as item}\n\t{@const Component = item.condition ? Y : Z}\n\t<Component />\n{/each}\n```\n\n### svelte_self_deprecated\nUse self-imports:\n```svelte\n<script>\n\timport MyComponent from './MyComponent.svelte';\n</script>\n```\n\n## Reactivity\n\n### non_reactive_update\nVariable updated but not declared with `$state()`:\n\n```svelte\n<script>\n\tlet reactive = $state('reactive');\n\tlet stale = 'stale'; // Warning: updates won't trigger reactivity\n</script>\n```\n\n### state_referenced_locally\nState reference captures initial value only. Wrap in function for lazy evaluation:\n\n```svelte\n<script>\n\timport { setContext } from 'svelte';\n\t\n\tlet count = $state(0);\n\t\n\t// Bad - captures initial value\n\tsetContext('count', count);\n\t\n\t// Good - lazy evaluation\n\tsetContext('count', () => count);\n</script>\n```\n\n### reactive_declaration_invalid_placement\nReactive declarations only at top level of instance script.\n\n### store_rune_conflict\nLocal binding conflicts with rune name - rename to avoid ambiguity.\n\n## SSR\n\n### node_invalid_placement_ssr\nHTML structure violation - browser will repair, causing hydration mismatch. Examples:\n- `<p><div>` → `<p></p><div>`\n- `<option><div>` → `<option>` (div removed)\n- `<table><tr>` → `<table><tbody><tr>` (tbody inserted)",
    "svelte/runtime-errors": "# Svelte 5 Condensed Documentation\n\n## Client Errors\n\n### async_derived_orphan\n`$derived(...)` with `await` must be inside an effect tree. Effects run eagerly until destroyed, so async deriveds need an effect to call promises proactively.\n\n### bind_invalid_checkbox_value\nUse `bind:checked` not `bind:value` with checkboxes.\n\n### bind_not_bindable\nTo make a property bindable: `let { key = $bindable() } = $props()`\n\n### component_api_changed\nComponent methods like `$set()` removed in Svelte 5. See [migration guide](/docs/svelte/v5-migration-guide#Components-are-no-longer-classes).\n\n### component_api_invalid_new\nCan't use `new Component()` in Svelte 5. Set `compatibility.componentApi: 4` for legacy components.\n\n### derived_references_self\nDerived values can't reference themselves recursively.\n\n### each_key_duplicate\nDuplicate keys in keyed `{#each}` blocks.\n\n### effect_in_teardown\nCan't use runes inside effect cleanup functions.\n\n### effect_in_unowned_derived\nEffects can't be created inside `$derived` unless that derived is itself inside an effect.\n\n### effect_orphan\nRunes like `$effect` only work inside effects (e.g., component initialization).\n\n### effect_pending_outside_reaction\n`$effect.pending()` only callable inside effect or derived.\n\n### effect_update_depth_exceeded\nEffect reads and writes same state, causing infinite loop:\n\n```js\nlet count = $state(0);\n\n$effect(() => {\n\t// infinite loop - reads and writes count\n\tcount += 1;\n});\n```\n\nArray mutations also trigger this:\n\n```js\nlet array = $state(['hello']);\n\n$effect(() => {\n\tarray.push('goodbye'); // reads and writes\n});\n```\n\n**Fix:** Use non-reactive values or `untrack()` to read without dependency.\n\n### flush_sync_in_effect\nCan't call `flushSync()` inside an effect (only applies with `experimental.async`).\n\n### get_abort_signal_outside_reaction\n`getAbortSignal()` only callable inside effect or derived.\n\n### hydration_failed\nHydration failure.\n\n### invalid_snippet\nSnippet is null/undefined. Use optional chaining: `{@render snippet?.()}`\n\n### lifecycle_legacy_only\nLifecycle functions like `onMount` can't be used in runes mode.\n\n### props_invalid_value\nCan't `bind:key={undefined}` when `key` has fallback value.\n\n### props_rest_readonly\nRest properties from `$props()` are readonly.\n\n### rune_outside_svelte\nRunes only work in `.svelte` and `.svelte.js/ts` files.\n\n### set_context_after_init\n`setContext` must be called during component initialization, not in effects or after `await` (with `experimental.async`).\n\n### state_descriptors_fixed\n`$state` object property descriptors must contain `value` and be `enumerable`, `configurable`, `writable`.\n\n### state_prototype_fixed\nCan't set prototype of `$state` objects.\n\n### state_unsafe_mutation\nCan't update state inside `$derived`, `$inspect`, or template expressions:\n\n```js\nlet count = $state(0);\nlet even = $state(true);\n\nlet odd = $derived.by(() => {\n\teven = count % 2 === 0; // ❌ forbidden\n\treturn !even;\n});\n```\n\n**Fix:** Make everything derived:\n\n```js\nlet even = $derived(count % 2 === 0);\nlet odd = $derived(!even);\n```\n\nUse `$effect` for unavoidable side-effects.\n\n### svelte_boundary_reset_onerror\nCan't call `reset()` synchronously in `<svelte:boundary>` `onerror`. Wait with `tick()`:\n\n```svelte\n<svelte:boundary onerror={async (error, reset) => {\n\tfixTheError();\n\tawait tick();\n\treset();\n}}>\n</svelte:boundary>\n```\n\n## Server Errors\n\n### await_invalid\nAsync work encountered during sync rendering. Either `await` the `render()` result or wrap `await` in `<svelte:boundary>` with `pending` snippet.\n\n### html_deprecated\nUse `body` instead of `html` property in server render results.\n\n### lifecycle_function_unavailable\nMethods like `mount()` unavailable on server. Don't call eagerly.\n\n## Shared Errors\n\n### invalid_default_snippet\nCan't use `{@render children(...)}` if parent uses `let:` directives. Use named snippets:\n\n```svelte\n<!--- Parent.svelte --->\n<List {items} let:entry>  <!-- ❌ incompatible -->\n    <span>{entry}</span>\n</List>\n```\n\n```svelte\n<!--- List.svelte --->\n<script>\n    let { items, children } = $props();\n</script>\n\n<ul>\n    {#each items as item}\n        <li>{@render children(item)}</li>\n    {/each}\n</ul>\n```\n\n### invalid_snippet_arguments\nSnippets must be instantiated via `{@render ...}`.\n\n### lifecycle_outside_component\nLifecycle methods only work during component initialization at top level:\n\n```svelte\n<script>\n    import { onMount } from 'svelte';\n\n    function handleClick() {\n        onMount(() => {}) // ❌ wrong\n    }\n\n    onMount(() => {}) // ✅ correct\n</script>\n```\n\n### snippet_without_render_tag\nUse `{@render snippet()}` not `{snippet}`:\n\n```svelte\n<script>\n    let { children } = $props();\n</script>\n\n{@render children()} <!-- ✅ correct -->\n```\n\n### store_invalid_shape\nStore must have `subscribe` method.\n\n### svelte_element_invalid_this_value\n`<svelte:element this={...}>` requires string value.",
    "svelte/runtime-warnings": "# Svelte 5 Client & Shared Warnings\n\n## Client Warnings\n\n### assignment_value_stale\nAssignment to property will evaluate to RHS, not the resulting value after assignment.\n\n```svelte\n<script>\n\tlet object = $state({ array: null });\n\n\tfunction add() {\n\t\t(object.array ??= []).push(object.array.length);\n\t}\n</script>\n\n<button onclick={add}>add</button>\n<p>items: {JSON.stringify(object.items)}</p>\n```\n\n**Fix:** Separate into two statements:\n\n```js\nlet object = { array: [0] };\n// ---cut---\nfunction add() {\n\tobject.array ??= [];\n\tobject.array.push(object.array.length);\n}\n```\n\n### await_reactivity_loss\nState read after `await` in async function loses reactivity tracking.\n\n```js\nlet a = Promise.resolve(1);\nlet b = 2;\n// ---cut---\nasync function sum() {\n\treturn await a + b;\n}\n\nlet total = $derived(await sum());\n```\n\nOnly `a` is tracked, not `b`. **Fix:** Pass values as parameters:\n\n```js\nlet a = Promise.resolve(1);\nlet b = 2;\n// ---cut---\n/**\n * @param {Promise<number>} a\n * @param {number} b\n */\nasync function sum(a, b) {\n\treturn await a + b;\n}\n\nlet total = $derived(await sum(a, b));\n```\n\n### await_waterfall\nSequential async deriveds create unnecessary waterfall.\n\n```js\nasync function one() { return 1 }\nasync function two() { return 2 }\n// ---cut---\nlet a = $derived(await one());\nlet b = $derived(await two());\n```\n\n**Fix:** Create promises first, then await:\n\n```js\nasync function one() { return 1 }\nasync function two() { return 2 }\n// ---cut---\nlet aPromise = $derived(one());\nlet bPromise = $derived(two());\n\nlet a = $derived(await aPromise);\nlet b = $derived(await bPromise);\n```\n\n### console_log_state\nLogging `$state` proxies shows proxy, not value.\n\n**Fix:** Use `$inspect(...)` or `$state.snapshot(...)` instead.\n\n### hydration_attribute_changed\nCertain attributes (like `<img src>`) keep server value during hydration to avoid refetching.\n\n**Fix:** Force update if needed:\n\n```svelte\n<script>\n\tlet { src } = $props();\n\n\tif (typeof window !== 'undefined') {\n\t\t// stash the value...\n\t\tconst initial = src;\n\n\t\t// unset it...\n\t\tsrc = undefined;\n\n\t\t$effect(() => {\n\t\t\t// ...and reset after we've mounted\n\t\t\tsrc = initial;\n\t\t});\n\t}\n</script>\n\n<img {src} />\n```\n\n### hydration_html_changed\n`{@html ...}` value changes between server/client are ignored.\n\n**Fix:** Same pattern as `hydration_attribute_changed`:\n\n```svelte\n<script>\n\tlet { markup } = $props();\n\n\tif (typeof window !== 'undefined') {\n\t\t// stash the value...\n\t\tconst initial = markup;\n\n\t\t// unset it...\n\t\tmarkup = undefined;\n\n\t\t$effect(() => {\n\t\t\t// ...and reset after we've mounted\n\t\t\tmarkup = initial;\n\t\t});\n\t}\n</script>\n\n{@html markup}\n```\n\n### hydration_mismatch\nInitial UI doesn't match server-rendered HTML. Usually caused by invalid HTML structure.\n\n### ownership_invalid_binding\nMissing `bind:` in parent component when child uses `bind:`.\n\n```svelte\n<!--- GrandParent: bind:value --->\n<!--- Parent: value={value} (missing bind:) --->\n<!--- Child: bind:value --->\n```\n\n**Fix:** Use `bind:` in parent: `<Parent bind:value />`\n\n### ownership_invalid_mutation\nMutating unbound props without explicit permission.\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport Child from './Child.svelte';\n\tlet person = $state({ name: 'Florida', surname: 'Man' });\n</script>\n\n<Child {person} />\n```\n\n```svelte\n<!--- file: Child.svelte --->\n<script>\n\tlet { person } = $props();\n</script>\n\n<input bind:value={person.name}>\n<input bind:value={person.surname}>\n```\n\n**Fix:** Use callback props or mark as `$bindable`.\n\n### select_multiple_invalid_value\n`<select multiple value={...}>` expects array, not single value.\n\n**Fix:** Ensure `value` is array, `null`, or `undefined`.\n\n### state_proxy_equality_mismatch\n`$state(...)` creates proxy with different identity than original value.\n\n```svelte\n<script>\n\tlet value = { foo: 'bar' };\n\tlet proxy = $state(value);\n\n\tvalue === proxy; // always false\n</script>\n```\n\n**Fix:** Compare values both created with `$state(...)` or neither. Use `$state.raw(...)` to avoid proxy.\n\n### state_proxy_unmount\nDon't pass `$state` proxy to `unmount()`.\n\n```js\nimport { mount, unmount } from 'svelte';\nimport Component from './Component.svelte';\nlet target = document.body;\n// ---cut---\nlet component = $state(mount(Component, { target }));\n\n// later...\nunmount(component);\n```\n\n**Fix:** Don't use `$state` here, or use `$state.raw()`.\n\n### svelte_boundary_reset_noop\n`<svelte:boundary>` `reset` function only works once.\n\n```svelte\n<script>\n\tlet reset;\n</script>\n\n<button onclick={reset}>reset</button>\n\n<svelte:boundary onerror={(e, r) => (reset = r)}>\n\t<!-- contents -->\n\n\t{#snippet failed(e)}\n\t\t<p>oops! {e.message}</p>\n\t{/snippet}\n</svelte:boundary>\n```\n\nDon't store `reset` outside boundary for reuse.\n\n### transition_slide_display\n`slide` transition requires `display: block/flex/grid`. Doesn't work with `inline`, `table`, or `contents`.\n\n## Shared Warnings\n\n### dynamic_void_element_content\nVoid elements (like `<input>`) cannot have content.\n\n```svelte\n<svelte:element this=\"input\">content ignored</svelte:element>\n```\n\n### state_snapshot_uncloneable\n`$state.snapshot()` returns original value for uncloneable objects (like DOM elements).\n\n```js\nconst object = $state({ property: 'this is cloneable', window })\nconst snapshot = $state.snapshot(object);\n```\n\n`property` is cloned, `window` is not.",
    "svelte/legacy-overview": "# Svelte 5 Legacy Mode\n\nSvelte 5 introduced runes, snippets, and event attributes. Legacy Svelte 3/4 features are deprecated but still supported.\n\n**Mode distinction:**\n- **Legacy mode**: Svelte 3/4 syntax (default for unmigrated components)\n- **Runes mode**: Activated by using runes or `runes: true` compiler option\n\nOnce in runes mode, legacy features are unavailable.\n\nFull Svelte 3/4 docs: [v4.svelte.dev](https://v4.svelte.dev)\n\n---\n\n## Key Differences\n\n### Event Handling\n- **Legacy**: `on:click={handler}`\n- **Runes**: `onclick={handler}` (no colon)\n\n### Reactivity\n- **Legacy**: `$:` reactive statements, `export let` props\n- **Runes**: `$state()`, `$derived()`, `$props()`\n\n### Runes Syntax Rules\n- Runes are globals (no import needed)\n- `$state()` uses `let`, never `const`\n- `$derived` with function: use `$derived.by(() => ...)`\n- Error boundaries: catch render errors and top-level `$effect` errors only (not event handlers)\n\n---\n\n*This section documents legacy features for migration reference. For new projects, use runes mode exclusively.*",
    "svelte/legacy-let": "# Legacy Mode Reactivity\n\n## Reactive Variables\n\nIn legacy mode, top-level variables are automatically reactive (no `$state` needed). Reassignment/mutation triggers UI updates.\n\n```svelte\n<script>\n\tlet count = 0;\n</script>\n\n<button on:click={() => count += 1}>\n\tclicks: {count}\n</button>\n```\n\n## Gotcha: Array Methods\n\n`.push()`, `.splice()` etc. don't trigger updates. Requires reassignment:\n\n```svelte\n<script>\n\tlet numbers = [1, 2, 3, 4];\n\n\tfunction addNumber() {\n\t\t// this method call does not trigger an update\n\t\tnumbers.push(numbers.length + 1);\n\n\t\t// this assignment will update anything\n\t\t// that depends on `numbers`\n\t\tnumbers = numbers;\n\t}\n</script>\n```",
    "svelte/legacy-reactive-assignments": "# Reactive Statements (Legacy Mode)\n\n> **Note:** In runes mode, use [`$derived`]($derived) and [`$effect`]($effect) instead.\n\n## Basic Usage\n\nPrefix top-level statements with `$:` to make them reactive. They run after `<script>` code and before rendering, then re-run when dependencies change.\n\n```svelte\n<script>\n\tlet a = 1;\n\tlet b = 2;\n\n\t// this is a 'reactive statement', and it will re-run\n\t// when `a`, `b` or `sum` change\n\t$: console.log(`${a} + ${b} = ${sum}`);\n\n\t// this is a 'reactive assignment' — `sum` will be\n\t// recalculated when `a` or `b` change. It is\n\t// not necessary to declare `sum` separately\n\t$: sum = a + b;\n</script>\n```\n\n## Blocks\n\nCombine multiple statements:\n\n```js\n// @noErrors\n$: {\n\t// recalculate `total` when `items` changes\n\ttotal = 0;\n\n\tfor (const item of items) {\n\t\ttotal += item.value;\n\t}\n}\n```\n\n## Destructuring\n\n```js\n// @noErrors\n$: ({ larry, moe, curly } = stooges);\n```\n\n## Dependencies\n\n**Gotcha:** Dependencies are determined at compile time from variables **referenced** (not assigned) in the statement.\n\nThis won't re-run when `count` changes (indirect reference):\n\n```js\n// @noErrors\nlet count = 0;\nlet double = () => count * 2;\n\n$: doubled = double();\n```\n\n**Gotcha:** Topological ordering fails with indirect dependencies. This won't work:\n\n```svelte\n<script>\n\tlet x = 0;\n\tlet y = 0;\n\n\t$: z = y;\n\t$: setY(x);\n\n\tfunction setY(value) {\n\t\ty = value;\n\t}\n</script>\n```\n\nFix: Move `$: z = y` below `$: setY(x)`.\n\n## Browser-Only Code\n\nReactive statements run during SSR. Wrap browser-only code:\n\n```js\n// @noErrors\n$: if (browser) {\n\tdocument.title = title;\n}\n```",
    "svelte/legacy-export-let": "# Legacy Props (Pre-Svelte 5)\n\n> **Note:** In Svelte 5 runes mode, use [`$props`]($props) instead.\n\n## Declaring Props\n\nProps use `export` keyword with optional defaults:\n\n```svelte\n<script>\n\texport let foo;\n\texport let bar = 'default value';\n\n\t// Values immediately available\n\tconsole.log({ foo });\n</script>\n```\n\n**Key differences from runes mode:**\n- Default used only if prop is initially `undefined`\n- If parent changes prop to `undefined`, it does NOT revert to default\n\n**Required props:** Props without defaults are required. Svelte warns if missing. Silence warning:\n\n```js\nexport let foo = undefined;\n```\n\n## Component Exports\n\nExported `const`, `class`, or `function` become component API (not props):\n\n```svelte\n<!--- file: Greeter.svelte--->\n<script>\n\texport function greet(name) {\n\t\talert(`hello ${name}!`);\n\t}\n</script>\n```\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport Greeter from './Greeter.svelte';\n\n\tlet greeter;\n</script>\n\n<Greeter bind:this={greeter} />\n\n<button on:click={() => greeter.greet('world')}>\n\tgreet\n</button>\n```\n\n## Renaming Props\n\nRename props (useful for reserved words):\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\t/** @type {string} */\n\tlet className;\n\n\t// creates a `class` property\n\texport { className as class };\n</script>\n```",
    "svelte/legacy-$$props-and-$$restProps": "# Legacy Props (`$$props` and `$$restProps`)\n\n**Runes mode:** Use [`$props`]($props) rune\n\n**Legacy mode:** Use `$$props` and `$$restProps`\n\n- `$$props` - all props passed in (including undeclared ones)\n- `$$restProps` - all props except those declared with `export`\n\n## Example\n\n```svelte\n<script>\n\texport let variant;\n</script>\n\n<button {...$$restProps} class=\"variant-{variant} {$$props.class ?? ''}\">\n\tclick me\n</button>\n\n<style>\n\t.variant-danger {\n\t\tbackground: red;\n\t}\n</style>\n```\n\n**Performance:** `$$props` and `$$restProps` have modest performance penalty in Svelte 3/4. Use only when needed.",
    "svelte/legacy-on": "# Event Handlers\n\n## Runes Mode (Svelte 5)\nEvent handlers are regular attributes/props. No `on:` directive.\n\n## Legacy Mode\n\n### Basic Usage\n```svelte\n<script>\n\tlet count = 0;\n\n\t/** @param {MouseEvent} event */\n\tfunction handleClick(event) {\n\t\tcount += 1;\n\t}\n</script>\n\n<button on:click={handleClick}>\n\tcount: {count}\n</button>\n```\n\nInline handlers (no performance penalty):\n```svelte\n<button on:click={() => (count += 1)}>\n\tcount: {count}\n</button>\n```\n\n### Event Modifiers\nUse `|` character:\n```svelte\n<form on:submit|preventDefault={handleSubmit}>\n\t<!-- prevents page reload -->\n</form>\n```\n\n**Available modifiers:**\n- `preventDefault` — calls `event.preventDefault()`\n- `stopPropagation` — prevents event bubbling\n- `stopImmediatePropagation` — prevents other listeners\n- `passive` — improves scroll performance (auto-added when safe)\n- `nonpassive` — explicitly set `passive: false`\n- `capture` — fires during capture phase\n- `once` — remove handler after first run\n- `self` — only trigger if `event.target` is element itself\n- `trusted` — only trigger if `event.isTrusted` is `true`\n\nChain modifiers: `on:click|once|capture={...}`\n\n### Event Forwarding\nEmpty `on:` directive forwards events to parent:\n```svelte\n<button on:click>\n\tThe component itself will emit the click event\n</button>\n```\n\n### Multiple Listeners\n```svelte\n<script>\n\tlet count = 0;\n\n\tfunction increment() {\n\t\tcount += 1;\n\t}\n\n\t/** @param {MouseEvent} event */\n\tfunction log(event) {\n\t\tconsole.log(event);\n\t}\n</script>\n\n<button on:click={increment} on:click={log}>\n\tclicks: {count}\n</button>\n```\n\n## Component Events (Legacy)\n\n**Deprecated in Svelte 5** — use callback props instead.\n\nDispatch events with `createEventDispatcher`:\n```svelte\n<!--- file: Stepper.svelte -->\n<script>\n\timport { createEventDispatcher } from 'svelte';\n\tconst dispatch = createEventDispatcher();\n</script>\n\n<button on:click={() => dispatch('decrement')}>decrement</button>\n<button on:click={() => dispatch('increment')}>increment</button>\n```\n\nListen for dispatched events:\n```svelte\n<script>\n\timport Stepper from './Stepper.svelte';\n\n\tlet n = 0;\n</script>\n\n<Stepper\n\ton:decrement={() => n -= 1}\n\ton:increment={() => n += 1}\n/>\n\n<p>n: {n}</p>\n```\n\n**Gotchas:**\n- Component events don't bubble (only immediate children)\n- Only `once` modifier valid on component events\n\n**Svelte 5 alternative (callback props):**\n```svelte\n<!--- file: Stepper.svelte --->\n<script>\n\texport let decrement;\n\texport let increment;\n</script>\n\n<button on:click={decrement}>decrement</button>\n<button on:click={increment}>increment</button>\n```",
    "svelte/legacy-slots": "# Legacy Slots\n\nIn Svelte 5, use [snippets](snippet) and [@render](@render) instead. In legacy mode, use `<slot>` elements.\n\n## Basic Usage\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport Modal from './Modal.svelte';\n</script>\n\n<Modal>This is some slotted content</Modal>\n```\n\n```svelte\n<!--- file: Modal.svelte --->\n<div class=\"modal\">\n\t<slot></slot>\n</div>\n```\n\n> To render actual `<slot>` element: `<svelte:element this={'slot'} />`\n\n## Named Slots\n\nParent: add `slot=\"...\"` attribute\n\n```svelte\n<!--- file: App.svelte --->\n<Modal>\n\tThis is some slotted content\n\t\n\t<div slot=\"buttons\">\n\t\t<button on:click={() => open = false}>\n\t\t\tclose\n\t\t</button>\n\t</div>\n</Modal>\n```\n\nChild: add `<slot name=\"...\">`\n\n```svelte\n<!--- file: Modal.svelte --->\n<div class=\"modal\">\n\t<slot></slot>\n\t<hr>\n\t<slot name=\"buttons\"></slot>\n</div>\n```\n\n## Fallback Content\n\n```svelte\n<slot>\n\tThis will be rendered if no slotted content is provided\n</slot>\n```\n\n## Passing Data to Slots\n\nUse props on `<slot>` and `let:` directive on parent:\n\n```svelte\n<!--- file: FancyList.svelte --->\n<ul>\n\t{#each items as data}\n\t\t<li class=\"fancy\">\n\t\t\t<slot item={process(data)} />\n\t\t</li>\n\t{/each}\n</ul>\n```\n\n```svelte\n<!--- file: App.svelte --->\n<FancyList {items} let:item={processed}>\n\t<div>{processed.text}</div>\n</FancyList>\n```\n\nShorthand: `let:item` = `let:item={item}`, `<slot {item}>` = `<slot item={item}>`\n\n**Named slots with data:**\n\n```svelte\n<!--- file: FancyList.svelte --->\n<ul>\n\t{#each items as item}\n\t\t<li class=\"fancy\">\n\t\t\t<slot name=\"item\" item={process(data)} />\n\t\t</li>\n\t{/each}\n</ul>\n\n<slot name=\"footer\" />\n```\n\n```svelte\n<!--- file: App.svelte --->\n<FancyList {items}>\n\t<div slot=\"item\" let:item>{item.text}</div>\n\t<p slot=\"footer\">Copyright (c) 2019 Svelte Industries</p>\n</FancyList>\n```",
    "svelte/legacy-$$slots": "# $$slots (Legacy Mode)\n\nIn runes mode, snippets are props. In legacy mode, use `$$slots` to check if slot content was provided.\n\n## Usage\n\n`$$slots` object contains keys for each slot passed by parent.\n\n```svelte\n<!--- file: Card.svelte --->\n<div>\n\t<slot name=\"title\" />\n\t{#if $$slots.description}\n\t\t<!-- This <hr> and slot will render only if `slot=\"description\"` is provided. -->\n\t\t<hr />\n\t\t<slot name=\"description\" />\n\t{/if}\n</div>\n```\n\n```svelte\n<!--- file: App.svelte --->\n<Card>\n\t<h1 slot=\"title\">Blog Post Title</h1>\n\t<!-- No slot named \"description\" was provided so the optional slot will not be rendered. -->\n</Card>\n```",
    "svelte/legacy-svelte-fragment": "# `<svelte:fragment>`\n\nAllows placing content in a named slot without a wrapper DOM element.\n\n```svelte\n<!--- file: Widget.svelte --->\n<div>\n\t<slot name=\"header\">No header was provided</slot>\n\t<p>Some content between header and footer</p>\n\t<slot name=\"footer\" />\n</div>\n```\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport Widget from './Widget.svelte';\n</script>\n\n<Widget>\n\t<h1 slot=\"header\">Hello</h1>\n\t<svelte:fragment slot=\"footer\">\n\t\t<p>All rights reserved.</p>\n\t\t<p>Copyright (c) 2019 Svelte Industries</p>\n\t</svelte:fragment>\n</Widget>\n```\n\n**Note:** In Svelte 5+, use snippets instead (no wrapper element needed).",
    "svelte/legacy-svelte-component": "# `<svelte:component>`\n\n## Usage\n\n**Legacy mode only** - renders a dynamic component, destroying and recreating when `this` changes:\n\n```svelte\n<svelte:component this={MyComponent} />\n```\n\nIf `this` is falsy, nothing renders.\n\n## Runes mode\n\nNot needed. `<MyComponent>` re-renders automatically when `MyComponent` changes.",
    "svelte/legacy-svelte-self": "# `<svelte:self>`\n\nAllows recursive component inclusion. Must be inside `{#if}`, `{#each}`, or slot to prevent infinite loops.\n\n```svelte\n<script>\n\texport let count;\n</script>\n\n{#if count > 0}\n\t<p>counting down... {count}</p>\n\t<svelte:self count={count - 1} />\n{:else}\n\t<p>lift-off!</p>\n{/if}\n```\n\n**Note:** Obsolete - components can import themselves directly:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport Self from './App.svelte'\n\texport let count;\n</script>\n\n{#if count > 0}\n\t<p>counting down... {count}</p>\n\t<Self count={count - 1} />\n{:else}\n\t<p>lift-off!</p>\n{/if}\n```",
    "svelte/legacy-component-api": "# Svelte 3/4 Legacy Component API\n\n> **Note:** This applies to Svelte 3/4 only, not Svelte 5 components or legacy mode in Svelte 5.\n\n## Creating a component\n\n```ts\nconst component = new Component(options);\n```\n\nClient-side component instantiation:\n\n```ts\nimport App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n\tprops: {\n\t\tanswer: 42\n\t}\n});\n```\n\n### Options\n\n| option    | default     | description                                                                                          |\n| --------- | ----------- | ---------------------------------------------------------------------------------------------------- |\n| `target`  | **required**| `HTMLElement` or `ShadowRoot` to render to                                                           |\n| `anchor`  | `null`      | Child of `target` to render before                                                                   |\n| `props`   | `{}`        | Properties to supply to component                                                                    |\n| `context` | `new Map()` | Root-level context key-value pairs                                                                   |\n| `hydrate` | `false`     | Upgrade existing DOM instead of creating new (requires `hydratable: true` compile option)            |\n| `intro`   | `false`     | Play transitions on initial render                                                                   |\n\n**Hydration:** Requires `hydratable: true` compiler option. Removes existing children (can't use with `anchor`). Repairs DOM mismatches.\n\n```ts\nconst app = new App({\n\ttarget: document.querySelector('#server-rendered-html'),\n\thydrate: true\n});\n```\n\n> **Svelte 5:** Use [`mount`](svelte#mount)\n\n## `$set`\n\n```ts\ncomponent.$set(props);\n```\n\nProgrammatically set props. Schedules update for next microtask (async).\n\n```ts\ncomponent.$set({ answer: 42 });\n```\n\n> **Svelte 5:** Use `$state` with `mount`:\n> ```js\n> let props = $state({ answer: 42 });\n> const component = mount(Component, { props });\n> props.answer = 24;\n> ```\n\n## `$on`\n\n```ts\ncomponent.$on(ev, callback);\n```\n\nListen to component events. Returns removal function.\n\n```ts\nconst off = component.$on('selected', (event) => {\n\tconsole.log(event.detail.selection);\n});\noff();\n```\n\n> **Svelte 5:** Use callback props\n\n## `$destroy`\n\n```js\ncomponent.$destroy();\n```\n\nRemove component from DOM, trigger `onDestroy` handlers.\n\n> **Svelte 5:** Use [`unmount`](svelte#unmount)\n\n## Component props\n\n```js\ncomponent.prop;\ncomponent.prop = value;\n```\n\nWith `accessors: true` compile option, get/set props directly. Setting causes **synchronous** update (vs async with `$set`). Default `false` except for custom elements.\n\n```js\nconsole.log(component.count);\ncomponent.count += 1;\n```\n\n> **Svelte 5:** Export properties to make them accessible\n\n## Server-side API\n\n```js\nconst result = Component.render(...)\n```\n\nServer components expose `render` method returning `{ head, html, css }`.\n\n```js\nrequire('svelte/register');\nconst App = require('./App.svelte').default;\n\nconst { head, html, css } = App.render({\n\tanswer: 42\n});\n```\n\n### Parameters\n\n```js\nconst { head, html, css } = App.render(\n\t{ answer: 42 },  // props\n\t{\n\t\tcontext: new Map([['context-key', 'context-value']])\n\t}  // options\n);\n```\n\n| parameter | default     | description                    |\n| --------- | ----------- | ------------------------------ |\n| `props`   | `{}`        | Properties for component       |\n| `options` | `{}`        | `{ context: Map }` for context |\n\n> **Svelte 5:** Use [`render`](svelte-server#render)"
  },
  "content": {
    "cli/overview": "The command line interface (CLI), `sv`, is a toolkit for creating and maintaining Svelte applications.\n\n## Usage\n\nThe easiest way to run `sv` is with [`npx`](https://docs.npmjs.com/cli/v8/commands/npx) (or the equivalent command if you're using a different package manager — for example, `pnpx` if you're using [pnpm](https://pnpm.io/)):\n\n```sh\nnpx sv <command> <args>\n```\n\nIf you're inside a project where `sv` is already installed, this will use the local installation, otherwise it will download the latest version and run it without installing it, which is particularly useful for [`sv create`](sv-create).\n\n## Acknowledgements\n\nThank you to [Christopher Brown](https://github.com/chbrown) who originally owned the `sv` name on npm for graciously allowing it to be used for the Svelte CLI. You can find the original `sv` package at [`@chbrown/sv`](https://www.npmjs.com/package/@chbrown/sv).",
    "cli/faq": "## How do I run the `sv` CLI?\n\nRunning `sv` looks slightly different for each package manager. Here is a list of the most common commands:\n\n- **npm** : `npx sv create`\n- **pnpm** : `pnpx sv create` or `pnpm dlx sv create`\n- **Bun** : `bunx sv create`\n- **Deno** : `deno run npm:sv create`\n- **Yarn** : `yarn dlx sv create`\n\n## `npx sv` is not working\n\nSome package managers prefer to run locally installed tools instead of downloading and executing packages from the registry. This issue mostly occurs with `npm` and `yarn`. This usually results in an error message or looks like the command you were trying to execute did not do anything.\n\nHere is a list of issues with possible solutions that users have encountered in the past:\n\n- [`npx sv` create does nothing](https://github.com/sveltejs/cli/issues/472)\n- [`sv` command name collides with `runit`](https://github.com/sveltejs/cli/issues/259)\n- [`sv` in windows powershell conflicts with `Set-Variable`](https://github.com/sveltejs/cli/issues/317)",
    "cli/sv-create": "`sv create` sets up a new SvelteKit project, with options to [setup additional functionality](sv-add#Official-add-ons).\n\n## Usage\n\n```sh\nnpx sv create [options] [path]\n```\n\n## Options\n\n### `--from-playground <url>`\n\nCreate a SvelteKit project from a [playground](/playground) URL. This downloads all playground files, detects external dependencies, and sets up a complete SvelteKit project structure with everything ready to go.\n\nExample:\n\n```sh\nnpx sv create --from-playground=\"https://svelte.dev/playground/hello-world\"\n```\n\n### `--template <name>`\n\nWhich project template to use:\n\n- `minimal` — barebones scaffolding for your new app\n- `demo` — showcase app with a word guessing game that works without JavaScript\n- `library` — template for a Svelte library, set up with `svelte-package`\n\n### `--types <option>`\n\nWhether and how to add typechecking to the project:\n\n- `ts` — default to `.ts` files and use `lang=\"ts\"` for `.svelte` components\n- `jsdoc` — use [JSDoc syntax](https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html) for types\n\n### `--no-types`\n\nPrevent typechecking from being added. Not recommended!\n\n### `--no-add-ons`\n\nRun the command without the interactive add-ons prompt\n\n### `--install <package-manager>`\n\nInstalls dependencies with a specified package manager:\n\n- `npm`\n- `pnpm`\n- `yarn`\n- `bun`\n- `deno`\n\n### `--no-install`\n\nPrevents installing dependencies.\n\n<!-- ## Programmatic interface\n\n```js\n// TODO: this gives type checking errors in the docs site when not commented out. Need to release sv, install it in the site, and uncomment this.\n// import { create } from 'sv';\n\n// // todo: check if this is right\n// create(cwd, {\n// \t// add your options here\n// \t// todo: list available option\n// });\n```\n-->",
    "cli/sv-add": "`sv add` updates an existing project with new functionality.\n\n## Usage\n\n```sh\nnpx sv add\n```\n\n```sh\nnpx sv add [add-ons]\n```\n\nYou can select multiple space-separated add-ons from [the list below](#Official-add-ons), or you can use the interactive prompt.\n\n## Options\n\n- `-C`, `--cwd` — path to the root of your Svelte(Kit) project\n- `--no-git-check` — even if some files are dirty, no prompt will be shown\n- `--install` — installs dependencies with a specified package manager\n- `--no-install` — prevents installing dependencies\n\n## Official add-ons\n\n<!-- TODO: it'd be nice for this to live on the \"add-ons\" page, but we first need svelte.dev to support making pages from headings -->\n\n- [`devtools-json`](devtools-json)\n- [`drizzle`](drizzle)\n- [`eslint`](eslint)\n- [`lucia`](lucia)\n- [`mdsvex`](mdsvex)\n- [`paraglide`](paraglide)\n- [`playwright`](playwright)\n- [`prettier`](prettier)\n- [`storybook`](storybook)\n- [`sveltekit-adapter`](sveltekit-adapter)\n- [`tailwindcss`](tailwind)\n- [`vitest`](vitest)",
    "cli/sv-check": "`sv check` finds errors and warnings in your project, such as:\n\n- unused CSS\n- accessibility hints\n- JavaScript/TypeScript compiler errors\n\nRequires Node 16 or later.\n\n## Installation\n\nYou will need to have the `svelte-check` package installed in your project:\n\n```sh\nnpm i -D svelte-check\n```\n\n## Usage\n\n```sh\nnpx sv check\n```\n\n## Options\n\n### `--workspace <path>`\n\nPath to your workspace. All subdirectories except `node_modules` and those listed in `--ignore` are checked.\n\n### `--output <format>`\n\nHow to display errors and warnings. See [machine-readable output](#Machine-readable-output).\n\n- `human`\n- `human-verbose`\n- `machine`\n- `machine-verbose`\n\n### `--watch`\n\nKeeps the process alive and watches for changes.\n\n### `--preserveWatchOutput`\n\nPrevents the screen from being cleared in watch mode.\n\n### `--tsconfig <path>`\n\nPass a path to a `tsconfig` or `jsconfig` file. The path can be relative to the workspace path or absolute. Doing this means that only files matched by the `files`/`include`/`exclude` pattern of the config file are diagnosed. It also means that errors from TypeScript and JavaScript files are reported. If not given, will traverse upwards from the project directory looking for the next `jsconfig`/`tsconfig.json` file.\n\n### `--no-tsconfig`\n\nUse this if you only want to check the Svelte files found in the current directory and below and ignore any `.js`/`.ts` files (they will not be type-checked)\n\n### `--ignore <paths>`\n\nFiles/folders to ignore, relative to workspace root. Paths should be comma-separated and quoted. Example:\n\n```sh\nnpx sv check --ignore \"dist,build\"\n```\n\n<!-- TODO what the hell does this mean? is it possible to use --tsconfig AND --no-tsconfig? if so what would THAT mean? -->\n\nOnly has an effect when used in conjunction with `--no-tsconfig`. When used in conjunction with `--tsconfig`, this will only have effect on the files watched, not on the files that are diagnosed, which is then determined by the `tsconfig.json`.\n\n### `--fail-on-warnings`\n\nIf provided, warnings will cause `sv check` to exit with an error code.\n\n### `--compiler-warnings <warnings>`\n\nA quoted, comma-separated list of `code:behaviour` pairs where `code` is a [compiler warning code](../svelte/compiler-warnings) and `behaviour` is either `ignore` or `error`:\n\n```sh\nnpx sv check --compiler-warnings \"css_unused_selector:ignore,a11y_missing_attribute:error\"\n```\n\n### `--diagnostic-sources <sources>`\n\nA quoted, comma-separated list of sources that should run diagnostics on your code. By default, all are active:\n\n<!-- TODO would be nice to have a clearer definition of what these are -->\n- `js` (includes TypeScript)\n- `svelte`\n- `css`\n\nExample:\n\n```sh\nnpx sv check --diagnostic-sources \"js,svelte\"\n```\n\n### `--threshold <level>`\n\nFilters the diagnostics:\n\n- `warning` (default) — both errors and warnings are shown\n- `error` — only errors are shown\n\n## Troubleshooting\n\n[See the language-tools documentation](https://github.com/sveltejs/language-tools/blob/master/docs/README.md) for more information on preprocessor setup and other troubleshooting.\n\n## Machine-readable output\n\nSetting the `--output` to `machine` or `machine-verbose` will format output in a way that is easier to read\nby machines, e.g. inside CI pipelines, for code quality checks, etc.\n\nEach row corresponds to a new record. Rows are made up of columns that are separated by a\nsingle space character. The first column of every row contains a timestamp in milliseconds\nwhich can be used for monitoring purposes. The second column gives us the \"row type\", based\non which the number and types of subsequent columns may differ.\n\nThe first row is of type `START` and contains the workspace folder (wrapped in quotes). Example:\n\n```\n1590680325583 START \"/home/user/language-tools/packages/language-server/test/plugins/typescript/testfiles\"\n```\n\nAny number of `ERROR` or `WARNING` records may follow. Their structure is identical and depends on the output argument.\n\nIf the argument is `machine` it will tell us the filename, the starting line and column numbers, and the error message. The filename is relative to the workspace directory. The filename and the message are both wrapped in quotes. Example:\n\n```\n1590680326283 ERROR \"codeactions.svelte\" 1:16 \"Cannot find module 'blubb' or its corresponding type declarations.\"\n1590680326778 WARNING \"imported-file.svelte\" 0:37 \"Component has unused export property 'prop'. If it is for external reference only, please consider using `export const prop`\"\n```\n\nIf the argument is `machine-verbose` it will tell us the filename, the starting line and column numbers, the ending line and column numbers, the error message, the code of diagnostic, the human-friendly description of the code and the human-friendly source of the diagnostic (eg. svelte/typescript). The filename is relative to the workspace directory. Each diagnostic is represented as an [ndjson](https://en.wikipedia.org/wiki/JSON_streaming#Newline-Delimited_JSON) line prefixed by the timestamp of the log. Example:\n\n```\n1590680326283 {\"type\":\"ERROR\",\"fn\":\"codeaction.svelte\",\"start\":{\"line\":1,\"character\":16},\"end\":{\"line\":1,\"character\":23},\"message\":\"Cannot find module 'blubb' or its corresponding type declarations.\",\"code\":2307,\"source\":\"js\"}\n1590680326778 {\"type\":\"WARNING\",\"filename\":\"imported-file.svelte\",\"start\":{\"line\":0,\"character\":37},\"end\":{\"line\":0,\"character\":51},\"message\":\"Component has unused export property 'prop'. If it is for external reference only, please consider using `export\nconst prop`\",\"code\":\"unused-export-let\",\"source\":\"svelte\"}\n```\n\nThe output concludes with a `COMPLETED` message that summarizes total numbers of files, errors and warnings that were encountered during the check. Example:\n\n```\n1590680326807 COMPLETED 20 FILES 21 ERRORS 1 WARNINGS 3 FILES_WITH_PROBLEMS\n```\n\nIf the application experiences a runtime error, this error will appear as a `FAILURE` record. Example:\n\n```\n1590680328921 FAILURE \"Connection closed\"\n```\n\n## Credits\n\n- Vue's [VTI](https://github.com/vuejs/vetur/tree/master/vti) which laid the foundation for `svelte-check`\n\n## FAQ\n\n### Why is there no option to only check specific files (for example only staged files)?\n\n`svelte-check` needs to 'see' the whole project for checks to be valid. Suppose you renamed a component prop but didn't update any of the places where the prop is used — the usage sites are all errors now, but you would miss them if checks only ran on changed files.",
    "cli/sv-migrate": "`sv migrate` migrates Svelte(Kit) codebases. It delegates to the [`svelte-migrate`](https://www.npmjs.com/package/svelte-migrate) package.\n\nSome migrations may annotate your codebase with tasks for completion that you can find by searching for `@migration`.\n\n## Usage\n\n```sh\nnpx sv migrate\n```\n\nYou can also specify a migration directly via the CLI:\n```sh\nnpx sv migrate [migration]\n```\n\n## Migrations\n\n### `app-state`\n\nMigrates `$app/stores` usage to `$app/state` in `.svelte` files. See the [migration guide](/docs/kit/migrating-to-sveltekit-2#SvelteKit-2.12:-$app-stores-deprecated) for more details.\n\n### `svelte-5`\n\nUpgrades a Svelte 4 app to use Svelte 5, and updates individual components to use [runes](../svelte/what-are-runes) and other Svelte 5 syntax ([see migration guide](../svelte/v5-migration-guide)).\n\n### `self-closing-tags`\n\nReplaces all the self-closing non-void elements in your `.svelte` files. See the [pull request](https://github.com/sveltejs/kit/pull/12128) for more details.\n\n### `svelte-4`\n\nUpgrades a Svelte 3 app to use Svelte 4 ([see migration guide](../svelte/v4-migration-guide)).\n\n### `sveltekit-2`\n\nUpgrades a SvelteKit 1 app to SvelteKit 2 ([see migration guide](../kit/migrating-to-sveltekit-2)).\n\n### `package`\n\nUpgrades a library using `@sveltejs/package` version 1 to version 2. See the [pull request](https://github.com/sveltejs/kit/pull/8922) for more details.\n\n### `routes`\n\nUpgrades a pre-release SvelteKit app to use the filesystem routing conventions in SvelteKit 1. See the [pull request](https://github.com/sveltejs/kit/discussions/5774) for more details.",
    "cli/devtools-json": "The `devtools-json` add-on installs [`vite-plugin-devtools-json`](https://github.com/ChromeDevTools/vite-plugin-devtools-json/), which is a Vite plugin for generating a Chromium DevTools project settings file on-the-fly in the development server. This file is served from `/.well-known/appspecific/com.chrome.devtools.json` and tells Chromium browsers where your project's source code lives so that you can use [the workspaces feature](https://developer.chrome.com/docs/devtools/workspaces) to edit source files in the browser.\n\n> [!NOTE]\n> Installing the plugin enables the feature for all users connecting to the dev server with a Chromium browser, and allows the browser to read and write all files within the directory. If using Chrome's AI Assistance feature, this may also result in data being sent to Google.\n\n## Alternatives\n\nIf you'd prefer not to install the plugin, but still want to avoid seeing a message about the missing file, you have a couple of options.\n\nFirstly, you can prevent the request from being issued on your machine by disabling the feature in your browser. You can do this in Chrome by visiting `chrome://flags` and disabling the \"DevTools Project Settings\". You may also be interested in disabling \"DevTools Automatic Workspace Folders\" since it’s closely related.\n\nYou can also prevent the web server from issuing a notice regarding the incoming request for all developers of your application by handling the request yourself. For example, you can create a file named `.well-known/appspecific/com.chrome.devtools.json` with the contents `\"Go away, Chrome DevTools!\"` or you can add logic to respond to the request in your [`handle`](https://svelte.dev/docs/kit/hooks#Server-hooks-handle) hook:\n\n```js\n/// file: src/hooks.server.js\nimport { dev } from '$app/environment';\n\nexport function handle({ event, resolve }) {\n\tif (dev && event.url.pathname === '/.well-known/appspecific/com.chrome.devtools.json') {\n\t\treturn new Response(undefined, { status: 404 });\n\t}\n\n\treturn resolve(event);\n}\n```\n\n## Usage\n\n```sh\nnpx sv add devtools-json\n```\n\n## What you get\n\n- `vite-plugin-devtools-json` added to your Vite plugin options",
    "cli/drizzle": "[Drizzle ORM](https://orm.drizzle.team/) is a TypeScript ORM offering both relational and SQL-like query APIs, and which is serverless-ready by design.\n\n## Usage\n\n```sh\nnpx sv add drizzle\n```\n\n## What you get\n\n- a setup that keeps your database access in SvelteKit's server files\n- an `.env` file to store your credentials\n- compatibility with the Lucia auth add-on\n- an optional Docker configuration to help with running a local database\n\n## Options\n\n### database\n\nWhich database variant to use:\n\n- `postgresql` — the most popular open source database\n- `mysql` — another popular open source database\n- `sqlite` — file-based database not requiring a database server\n\n```sh\nnpx sv add drizzle=database:postgresql\n```\n\n### client\n\nThe SQL client to use, depends on `database`:\n\n- For `postgresql`: `postgres.js`, `neon`,\n- For `mysql`: `mysql2`, `planetscale`\n- For `sqlite`: `better-sqlite3`, `libsql`, `turso`\n\n```sh\nnpx sv add drizzle=database:postgresql+client:postgres.js\n```\n\nDrizzle is compatible with well over a dozen database drivers. We just offer a few of the most common ones here for simplicity, but if you'd like to use another one you can choose one as a placeholder and swap it out for another after setup by choosing from [Drizzle's full list of compatible drivers](https://orm.drizzle.team/docs/connect-overview#next-steps).\n\n### docker\n\nWhether to add Docker Compose configuration. Only available for [`database`](#Options-database) `postgresql` or `mysql`\n\n```sh\nnpx sv add drizzle=database:postgresql+client:postgres.js+docker:yes\n```",
    "cli/eslint": "[ESLint](https://eslint.org/) finds and fixes problems in your code.\n\n## Usage\n\n```sh\nnpx sv add eslint\n```\n\n## What you get\n\n- the relevant packages installed including `eslint-plugin-svelte`\n- an `eslint.config.js` file\n- updated `.vscode/settings.json`\n- configured to work with TypeScript and `prettier` if you're using those packages",
    "cli/lucia": "An auth setup following [the Lucia auth guide](https://lucia-auth.com/).\n\n## Usage\n\n```sh\nnpx sv add lucia\n```\n\n## What you get\n\n- an auth setup for SvelteKit and Drizzle following the best practices from the Lucia auth guide\n- optional demo registration and login pages\n\n## Options\n\n### demo\n\nWhether to include demo registration and login pages.\n\n```sh\nnpx sv add lucia=demo:yes\n```",
    "cli/mdsvex": "[mdsvex](https://mdsvex.pngwn.io) is a markdown preprocessor for Svelte components - basically MDX for Svelte. It allows you to use Svelte components in your markdown, or markdown in your Svelte components.\n\n## Usage\n\n```sh\nnpx sv add mdsvex\n```\n\n## What you get\n\n- mdsvex installed and configured in your `svelte.config.js`",
    "cli/paraglide": "[Paraglide from Inlang](https://inlang.com/m/gerre34r/library-inlang-paraglideJs) is a compiler-based i18n library that emits tree-shakable message functions with small bundle sizes, no async waterfalls, full type-safety, and more.\n\n## Usage\n\n```sh\nnpx sv add paraglide\n```\n\n## What you get\n\n- Inlang project settings\n- paraglide Vite plugin\n- SvelteKit `reroute` and `handle` hooks\n- `text-direction` and `lang` attributes in `app.html`\n- updated `.gitignore`\n- an optional demo page showing how to use paraglide\n\n## Options\n\n### languageTags\n\nThe languages you'd like to support specified as IETF BCP 47 language tags.\n\n```sh\nnpx sv add paraglide=\"languageTags:en,es\"\n```\n\n### demo\n\nWhether to generate an optional demo page showing how to use paraglide.\n\n```sh\nnpx sv add paraglide=\"demo:yes\"\n```",
    "cli/playwright": "[Playwright](https://playwright.dev) browser testing.\n\n## Usage\n\n```sh\nnpx sv add playwright\n```\n\n## What you get\n\n- scripts added in your `package.json`\n- a Playwright config file\n- an updated `.gitignore`\n- a demo test",
    "cli/prettier": "[Prettier](https://prettier.io) is an opinionated code formatter.\n\n## Usage\n\n```sh\nnpx sv add prettier\n```\n\n## What you get\n\n- scripts in your `package.json`\n- `.prettierignore` and `.prettierrc` files\n- updates to your eslint config if you're using that package",
    "cli/storybook": "[Storybook](https://storybook.js.org/) is a frontend component workshop.\n\n## Usage\n\n```sh\nnpx sv add storybook\n```\n\n## What you get\n\n- `npx storybook init` run for you from the same convenient `sv` CLI used for all other add-ons\n- [Storybook for SvelteKit](https://storybook.js.org/docs/get-started/frameworks/sveltekit) or [Storybook for Svelte & Vite](https://storybook.js.org/docs/get-started/frameworks/svelte-vite) with default config provided, easy mocking of many SvelteKit modules, automatic link handling, and more.",
    "cli/sveltekit-adapter": "[SvelteKit adapters](/docs/kit/adapters) allow you to deploy your site to numerous platforms. This add-on allows you to configure officially provided SvelteKit adapters, but a number of [community-provided adapters](https://www.sveltesociety.dev/packages?category=sveltekit-adapters) are also available.\n\n## Usage\n\n```sh\nnpx sv add sveltekit-adapter\n```\n\n## What you get\n\n- the chosen SvelteKit adapter installed and configured in your `svelte.config.js`\n\n## Options\n\n### adapter\n\nWhich SvelteKit adapter to use:\n\n- `auto` — [`@sveltejs/adapter-auto`](/docs/kit/adapter-auto) automatically chooses the proper adapter to use, but is less configurable\n- `node` — [`@sveltejs/adapter-node`](/docs/kit/adapter-node) generates a standalone Node server\n- `static` — [`@sveltejs/adapter-static`](/docs/kit/adapter-static) allows you to use SvelteKit as a static site generator (SSG)\n- `vercel` — [`@sveltejs/adapter-vercel`](/docs/kit/adapter-vercel) allows you to deploy to Vercel\n- `cloudflare` — [`@sveltejs/adapter-cloudflare`](/docs/kit/adapter-cloudflare) allows you to deploy to Cloudflare\n- `netlify` — [`@sveltejs/adapter-netlify`](/docs/kit/adapter-netlify) allows you to deploy to Netlify\n\n```sh\nnpx sv add sveltekit-adapter=adapter:node\n```",
    "cli/tailwind": "[Tailwind CSS](https://tailwindcss.com/) allows you to rapidly build modern websites without ever leaving your HTML.\n\n## Usage\n\n```sh\nnpx sv add tailwindcss\n```\n\n## What you get\n\n- Tailwind setup following the [Tailwind for SvelteKit guide](https://tailwindcss.com/docs/installation/framework-guides/sveltekit)\n- Tailwind Vite plugin\n- updated `app.css` and `+layout.svelte` (for SvelteKit) or `App.svelte` (for non-SvelteKit Vite apps)\n- integration with `prettier` if using that package\n\n## Options\n\n### plugins\n\nWhich plugin to use:\n\n- `typography` — [`@tailwindcss/typography`](https://github.com/tailwindlabs/tailwindcss-typography)\n- `forms` — [`@tailwindcss/forms`](https://github.com/tailwindlabs/tailwindcss-forms)\n\n```sh\nnpx sv add tailwindcss=\"plugins:typography\"\n```",
    "cli/vitest": "[Vitest](https://vitest.dev/) is a Vite-native testing framework.\n\n## Usage\n\n```sh\nnpx sv add vitest\n```\n\n## What you get\n\n- the relevant packages installed and scripts added to your `package.json`\n- client/server-aware testing setup for Svelte in your Vite config file\n- demo tests",
    "kit/introduction": "## Before we begin\n\n> [!NOTE] If you're new to Svelte or SvelteKit we recommend checking out the [interactive tutorial](/tutorial/kit).\n>\n> If you get stuck, reach out for help in the [Discord chatroom](/chat).\n\n## What is SvelteKit?\n\nSvelteKit is a framework for rapidly developing robust, performant web applications using [Svelte](../svelte). If you're coming from React, SvelteKit is similar to Next. If you're coming from Vue, SvelteKit is similar to Nuxt.\n\nTo learn more about the kinds of applications you can build with SvelteKit, see the [documentation regarding project types](project-types).\n\n## What is Svelte?\n\nIn short, Svelte is a way of writing user interface components — like a navigation bar, comment section, or contact form — that users see and interact with in their browsers. The Svelte compiler converts your components to JavaScript that can be run to render the HTML for the page and to CSS that styles the page. You don't need to know Svelte to understand the rest of this guide, but it will help. If you'd like to learn more, check out [the Svelte tutorial](/tutorial).\n\n## SvelteKit vs Svelte\n\nSvelte renders UI components. You can compose these components and render an entire page with just Svelte, but you need more than just Svelte to write an entire app.\n\nSvelteKit helps you build web apps while following modern best practices and providing solutions to common development challenges. It offers everything from basic functionalities — like a [router](glossary#Routing) that updates your UI when a link is clicked — to more advanced capabilities. Its extensive list of features includes [build optimizations](https://vitejs.dev/guide/features.html#build-optimizations) to load only the minimal required code; [offline support](service-workers); [preloading](link-options#data-sveltekit-preload-data) pages before user navigation; [configurable rendering](page-options) to handle different parts of your app on the server via [SSR](glossary#SSR), in the browser through [client-side rendering](glossary#CSR), or at build-time with [prerendering](glossary#Prerendering); [image optimization](images); and much more. Building an app with all the modern best practices is fiendishly complicated, but SvelteKit does all the boring stuff for you so that you can get on with the creative part.\n\nIt reflects changes to your code in the browser instantly to provide a lightning-fast and feature-rich development experience by leveraging [Vite](https://vitejs.dev/) with a [Svelte plugin](https://github.com/sveltejs/vite-plugin-svelte) to do [Hot Module Replacement (HMR)](https://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/config.md#hot).",
    "kit/creating-a-project": "The easiest way to start building a SvelteKit app is to run `npx sv create`:\n\n```sh\nnpx sv create my-app\ncd my-app\nnpm run dev\n```\n\nThe first command will scaffold a new project in the `my-app` directory asking if you'd like to set up some basic tooling such as TypeScript. See [the CLI docs](/docs/cli/overview) for information about these options and [the integrations page](./integrations) for pointers on setting up additional tooling. `npm run dev` will then start the development server on [localhost:5173](http://localhost:5173) - make sure you install dependencies before running this if you didn't do so during project creation.\n\nThere are two basic concepts:\n\n- Each page of your app is a [Svelte](../svelte) component\n- You create pages by adding files to the `src/routes` directory of your project. These will be server-rendered so that a user's first visit to your app is as fast as possible, then a client-side app takes over\n\nTry editing the files to get a feel for how everything works.\n\n## Editor setup\n\nWe recommend using [Visual Studio Code (aka VS Code)](https://code.visualstudio.com/download) with [the Svelte extension](https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode), but [support also exists for numerous other editors](https://sveltesociety.dev/resources#editor-support).",
    "kit/project-types": "SvelteKit offers configurable rendering, which allows you to build and deploy your project in several different ways. You can build all of the below types of applications and more with SvelteKit. Rendering settings are not mutually exclusive and you may choose the optimal manner with which to render different parts of your application.\n\nIf you don't have a particular way you'd like to build your application in mind, don't worry! The way your application is built, deployed, and rendered is controlled by which adapter you've chosen and a small amount of configuration and these can always be changed later. The [project structure](project-structure) and [routing](glossary#Routing) will be the same regardless of the project type that you choose.\n\n## Default rendering\n\nBy default, when a user visits a site, SvelteKit will render the first page with [server-side rendering (SSR)](glossary#SSR) and subsequent pages with [client-side rendering (CSR)](glossary#CSR). Using SSR for the initial render improves SEO and perceived performance of the initial page load. Client-side rendering then takes over and updates the page without having to rerender common components, which is typically faster and eliminates a flash when navigating between pages. Apps built with this hybrid rendering approach have also been called [transitional apps](https://www.youtube.com/watch?v=860d8usGC0o).\n\n## Static site generation\n\nYou can use SvelteKit as a [static site generator (SSG)](glossary#SSG) that fully [prerenders](glossary#Prerendering) your site with static rendering using [`adapter-static`](adapter-static). You may also use [the prerender option](page-options#prerender) to prerender only some pages and then choose a different adapter with which to dynamically server-render other pages.\n\nTools built solely to do static site generation may scale the prerendering process more efficiently during build when rendering a very large number of pages. When working with very large statically generated sites, you can avoid long build times with [Incremental Static Regeneration (ISR) if using `adapter-vercel`](adapter-vercel#Incremental-Static-Regeneration). And in contrast to purpose-built SSGs, SvelteKit allows for nicely mixing and matching different rendering types on different pages.\n\n## Single-page app\n\n[Single-page apps (SPAs)](glossary#SPA) exclusively use [client-side rendering (CSR)](glossary#CSR). You can [build single-page apps (SPAs)](single-page-apps) with SvelteKit. As with all types of SvelteKit applications, you can write your backend in SvelteKit or [another language or framework](#Separate-backend). If you are building an application with no backend or a [separate backend](#Separate-backend), you can simply skip over and ignore the parts of the docs talking about `server` files.\n\n## Multi-page app\n\nSvelteKit isn't typically used to build [traditional multi-page apps](glossary#MPA). However, in SvelteKit you can remove all JavaScript on a page with [`csr = false`](page-options#csr), which will render subsequent links on the server, or you can use [`data-sveltekit-reload`](link-options#data-sveltekit-reload) to render specific links on the server.\n\n## Separate backend\n\nIf your backend is written in another language such as Go, Java, PHP, Ruby, Rust, or C#, there are a couple of ways that you can deploy your application. The most recommended way would be to deploy your SvelteKit frontend separately from your backend utilizing `adapter-node` or a serverless adapter. Some users prefer not to have a separate process to manage and decide to deploy their application as a [single-page app (SPA)](single-page-apps) served by their backend server, but note that single-page apps have worse SEO and performance characteristics.\n\nIf you are using an external backend, you can simply skip over and ignore the parts of the docs talking about `server` files. You may also want to reference [the FAQ about how to make calls to a separate backend](faq#How-do-I-use-a-different-backend-API-server).\n\n## Serverless app\n\nSvelteKit apps are simple to run on serverless platforms. [The default zero config adapter](adapter-auto) will automatically run your app on a number of supported platforms or you can use [`adapter-vercel`](adapter-vercel), [`adapter-netlify`](adapter-netlify), or [`adapter-cloudflare`](adapter-cloudflare) to provide platform-specific configuration. And [community adapters](/packages#sveltekit-adapters) allow you to deploy your application to almost any serverless environment. Some of these adapters such as [`adapter-vercel`](adapter-vercel) and [`adapter-netlify`](adapter-netlify) offer an `edge` option, to support [edge rendering](glossary#Edge) for improved latency.\n\n## Your own server\n\nYou can deploy to your own server or VPS using [`adapter-node`](adapter-node).\n\n## Container\n\nYou can use [`adapter-node`](adapter-node) to run a SvelteKit app within a container such as Docker or LXC.\n\n## Library\n\nYou can create a library to be used by other Svelte apps with the [`@sveltejs/package`](packaging) add-on to SvelteKit by choosing the library option when running [`sv create`](/docs/cli/sv-create).\n\n## Offline app\n\nSvelteKit has full support for [service workers](service-workers) allowing you to build many types of applications such as offline apps and [progressive web apps](glossary#PWA).\n\n## Mobile app\n\nYou can turn a [SvelteKit SPA](single-page-apps) into a mobile app with [Tauri](https://v2.tauri.app/start/frontend/sveltekit/) or [Capacitor](https://capacitorjs.com/solution/svelte). Mobile features like the camera, geolocation, and push notifications are available via plugins for both platforms.\n\nThese mobile development platforms work by starting a local web server and then serving your application like a static host on your phone. You may find [`bundleStrategy: 'single'`](configuration#output) to be a helpful option to limit the number of requests made. E.g. at the time of writing, the Capacitor local server uses HTTP/1, which limits the number of concurrent connections.\n\n## Desktop app\n\nYou can turn a [SvelteKit SPA](single-page-apps) into a desktop app with [Tauri](https://v2.tauri.app/start/frontend/sveltekit/), [Wails](https://wails.io/docs/guides/sveltekit/), or [Electron](https://www.electronjs.org/).\n\n## Browser extension\n\nYou can build browser extensions using either [`adapter-static`](adapter-static) or [community adapters](/packages#sveltekit-adapters) specifically tailored towards browser extensions.\n\n## Embedded device\n\nBecause of its efficient rendering, Svelte can be run on low power devices. Embedded devices like microcontrollers and TVs may limit the number of concurrent connections. In order to reduce the number of concurrent requests, you may find [`bundleStrategy: 'single'`](configuration#output) to be a helpful option in this deployment configuration.",
    "kit/project-structure": "A typical SvelteKit project looks like this:\n\n```tree\nmy-project/\n├ src/\n│ ├ lib/\n│ │ ├ server/\n│ │ │ └ [your server-only lib files]\n│ │ └ [your lib files]\n│ ├ params/\n│ │ └ [your param matchers]\n│ ├ routes/\n│ │ └ [your routes]\n│ ├ app.html\n│ ├ error.html\n│ ├ hooks.client.js\n│ ├ hooks.server.js\n| ├ service-worker.js\n│ └ tracing.server.js\n├ static/\n│ └ [your static assets]\n├ tests/\n│ └ [your tests]\n├ package.json\n├ svelte.config.js\n├ tsconfig.json\n└ vite.config.js\n```\n\nYou'll also find common files like `.gitignore` and `.npmrc` (and `.prettierrc` and `eslint.config.js` and so on, if you chose those options when running `npx sv create`).\n\n## Project files\n\n### src\n\nThe `src` directory contains the meat of your project. Everything except `src/routes` and `src/app.html` is optional.\n\n- `lib` contains your library code (utilities and components), which can be imported via the [`$lib`]($lib) alias, or packaged up for distribution using [`svelte-package`](packaging)\n  - `server` contains your server-only library code. It can be imported by using the [`$lib/server`](server-only-modules) alias. SvelteKit will prevent you from importing these in client code.\n- `params` contains any [param matchers](advanced-routing#Matching) your app needs\n- `routes` contains the [routes](routing) of your application. You can also colocate other components that are only used within a single route here\n- `app.html` is your page template — an HTML document containing the following placeholders:\n  - `%sveltekit.head%` — `<link>` and `<script>` elements needed by the app, plus any `<svelte:head>` content\n  - `%sveltekit.body%` — the markup for a rendered page. This should live inside a `<div>` or other element, rather than directly inside `<body>`, to prevent bugs caused by browser extensions injecting elements that are then destroyed by the hydration process. SvelteKit will warn you in development if this is not the case\n  - `%sveltekit.assets%` — either [`paths.assets`](configuration#paths), if specified, or a relative path to [`paths.base`](configuration#paths)\n  - `%sveltekit.nonce%` — a [CSP](configuration#csp) nonce for manually included links and scripts, if used\n  - `%sveltekit.env.[NAME]%` - this will be replaced at render time with the `[NAME]` environment variable, which must begin with the [`publicPrefix`](configuration#env) (usually `PUBLIC_`). It will fallback to `''` if not matched.\n  - `%sveltekit.version%` — the app version, which can be specified with the [`version`](configuration#version) configuration\n- `error.html` is the page that is rendered when everything else fails. It can contain the following placeholders:\n  - `%sveltekit.status%` — the HTTP status\n  - `%sveltekit.error.message%` — the error message\n- `hooks.client.js` contains your client [hooks](hooks)\n- `hooks.server.js` contains your server [hooks](hooks)\n- `service-worker.js` contains your [service worker](service-workers)\n- `instrumentation.server.js` contains your [observability](observability) setup and instrumentation code\n  - Requires adapter support. If your adapter supports it, it is guarnteed to run prior to loading and running your application code.\n\n(Whether the project contains `.js` or `.ts` files depends on whether you opt to use TypeScript when you create your project.)\n\nIf you added [Vitest](https://vitest.dev) when you set up your project, your unit tests will live in the `src` directory with a `.test.js` extension.\n\n### static\n\nAny static assets that should be served as-is, like `robots.txt` or `favicon.png`, go in here.\n\n### tests\n\nIf you added [Playwright](https://playwright.dev/) for browser testing when you set up your project, the tests will live in this directory.\n\n### package.json\n\nYour `package.json` file must include `@sveltejs/kit`, `svelte` and `vite` as `devDependencies`.\n\nWhen you create a project with `npx sv create`, you'll also notice that `package.json` includes `\"type\": \"module\"`. This means that `.js` files are interpreted as native JavaScript modules with `import` and `export` keywords. Legacy CommonJS files need a `.cjs` file extension.\n\n### svelte.config.js\n\nThis file contains your Svelte and SvelteKit [configuration](configuration).\n\n### tsconfig.json\n\nThis file (or `jsconfig.json`, if you prefer type-checked `.js` files over `.ts` files) configures TypeScript, if you added typechecking during `npx sv create`. Since SvelteKit relies on certain configuration being set a specific way, it generates its own `.svelte-kit/tsconfig.json` file which your own config `extends`. To make changes to top-level options such as `include` and `exclude`, we recommend extending the generated config; see the [`typescript.config` setting](configuration#typescript) for more details.\n\n### vite.config.js\n\nA SvelteKit project is really just a [Vite](https://vitejs.dev) project that uses the [`@sveltejs/kit/vite`](@sveltejs-kit-vite) plugin, along with any other [Vite configuration](https://vitejs.dev/config/).\n\n## Other files\n\n### .svelte-kit\n\nAs you develop and build your project, SvelteKit will generate files in a `.svelte-kit` directory (configurable as [`outDir`](configuration#outDir)). You can ignore its contents, and delete them at any time (they will be regenerated when you next `dev` or `build`).",
    "kit/web-standards": "Throughout this documentation, you'll see references to the standard [Web APIs](https://developer.mozilla.org/en-US/docs/Web/API) that SvelteKit builds on top of. Rather than reinventing the wheel, we _use the platform_, which means your existing web development skills are applicable to SvelteKit. Conversely, time spent learning SvelteKit will help you be a better web developer elsewhere.\n\nThese APIs are available in all modern browsers and in many non-browser environments like Cloudflare Workers, Deno, and Vercel Functions. During development, and in [adapters](adapters) for Node-based environments (including AWS Lambda), they're made available via polyfills where necessary (for now, that is — Node is rapidly adding support for more web standards).\n\nIn particular, you'll get comfortable with the following:\n\n## Fetch APIs\n\nSvelteKit uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/fetch) for getting data from the network. It's available in [hooks](hooks) and [server routes](routing#server) as well as in the browser.\n\n> [!NOTE] A special version of `fetch` is available in [`load`](load) functions, [server hooks](hooks#Server-hooks) and [API routes](routing#server) for invoking endpoints directly during server-side rendering, without making an HTTP call, while preserving credentials. (To make credentialled fetches in server-side code outside `load`, you must explicitly pass `cookie` and/or `authorization` headers.) It also allows you to make relative requests, whereas server-side `fetch` normally requires a fully qualified URL.\n\nBesides `fetch` itself, the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) includes the following interfaces:\n\n### Request\n\nAn instance of [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request) is accessible in [hooks](hooks) and [server routes](routing#server) as `event.request`. It contains useful methods like `request.json()` and `request.formData()` for getting data that was posted to an endpoint.\n\n### Response\n\nAn instance of [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) is returned from `await fetch(...)` and handlers in `+server.js` files. Fundamentally, a SvelteKit app is a machine for turning a `Request` into a `Response`.\n\n### Headers\n\nThe [`Headers`](https://developer.mozilla.org/en-US/docs/Web/API/Headers) interface allows you to read incoming `request.headers` and set outgoing `response.headers`. For example, you can get the `request.headers` as shown below, and use the [`json` convenience function](@sveltejs-kit#json) to send modified `response.headers`:\n\n```js\n// @errors: 2461\n/// file: src/routes/what-is-my-user-agent/+server.js\nimport { json } from '@sveltejs/kit';\n\n/** @type {import('./$types').RequestHandler} */\nexport function GET({ request }) {\n\t// log all headers\n\tconsole.log(...request.headers);\n\n\t// create a JSON Response using a header we received\n\treturn json({\n\t\t// retrieve a specific header\n\t\tuserAgent: request.headers.get('user-agent')\n\t}, {\n\t\t// set a header on the response\n\t\theaders: { 'x-custom-header': 'potato' }\n\t});\n}\n```\n\n## FormData\n\nWhen dealing with HTML native form submissions you'll be working with [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) objects.\n\n```js\n// @errors: 2461\n/// file: src/routes/hello/+server.js\nimport { json } from '@sveltejs/kit';\n\n/** @type {import('./$types').RequestHandler} */\nexport async function POST(event) {\n\tconst body = await event.request.formData();\n\n\t// log all fields\n\tconsole.log([...body]);\n\n\treturn json({\n\t\t// get a specific field's value\n\t\tname: body.get('name') ?? 'world'\n\t});\n}\n```\n\n## Stream APIs\n\nMost of the time, your endpoints will return complete data, as in the `userAgent` example above. Sometimes, you may need to return a response that's too large to fit in memory in one go, or is delivered in chunks, and for this the platform provides [streams](https://developer.mozilla.org/en-US/docs/Web/API/Streams_API) — [ReadableStream](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream), [WritableStream](https://developer.mozilla.org/en-US/docs/Web/API/WritableStream) and [TransformStream](https://developer.mozilla.org/en-US/docs/Web/API/TransformStream).\n\n## URL APIs\n\nURLs are represented by the [`URL`](https://developer.mozilla.org/en-US/docs/Web/API/URL) interface, which includes useful properties like `origin` and `pathname` (and, in the browser, `hash`). This interface shows up in various places — `event.url` in [hooks](hooks) and [server routes](routing#server), [`page.url`]($app-state) in [pages](routing#page), `from` and `to` in [`beforeNavigate` and `afterNavigate`]($app-navigation) and so on.\n\n### URLSearchParams\n\nWherever you encounter a URL, you can access query parameters via `url.searchParams`, which is an instance of [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams):\n\n```js\n// @filename: ambient.d.ts\ndeclare global {\n\tconst url: URL;\n}\n\nexport {};\n\n// @filename: index.js\n// ---cut---\nconst foo = url.searchParams.get('foo');\n```\n\n## Web Crypto\n\nThe [Web Crypto API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API) is made available via the `crypto` global. It's used internally for [Content Security Policy](configuration#csp) headers, but you can also use it for things like generating UUIDs:\n\n```js\nconst uuid = crypto.randomUUID();\n```",
    "kit/routing": "At the heart of SvelteKit is a _filesystem-based router_. The routes of your app — i.e. the URL paths that users can access — are defined by the directories in your codebase:\n\n- `src/routes` is the root route\n- `src/routes/about` creates an `/about` route\n- `src/routes/blog/[slug]` creates a route with a _parameter_, `slug`, that can be used to load data dynamically when a user requests a page like `/blog/hello-world`\n\n> [!NOTE] You can change `src/routes` to a different directory by editing the [project config](configuration).\n\nEach route directory contains one or more _route files_, which can be identified by their `+` prefix.\n\nWe'll introduce these files in a moment in more detail, but here are a few simple rules to help you remember how SvelteKit's routing works:\n\n* All files can run on the server\n* All files run on the client except `+server` files\n* `+layout` and `+error` files apply to subdirectories as well as the directory they live in\n\n## +page\n\n### +page.svelte\n\nA `+page.svelte` component defines a page of your app. By default, pages are rendered both on the server ([SSR](glossary#SSR)) for the initial request and in the browser ([CSR](glossary#CSR)) for subsequent navigation.\n\n```svelte\n<!--- file: src/routes/+page.svelte --->\n<h1>Hello and welcome to my site!</h1>\n<a href=\"/about\">About my site</a>\n```\n\n```svelte\n<!--- file: src/routes/about/+page.svelte --->\n<h1>About this site</h1>\n<p>TODO...</p>\n<a href=\"/\">Home</a>\n```\n\n> [!NOTE] SvelteKit uses `<a>` elements to navigate between routes, rather than a framework-specific `<Link>` component.\n\nPages can receive data from `load` functions via the `data` prop.\n\n```svelte\n<!--- file: src/routes/blog/[slug]/+page.svelte --->\n<script>\n\t/** @type {import('./$types').PageProps} */\n\tlet { data } = $props();\n</script>\n\n<h1>{data.title}</h1>\n<div>{@html data.content}</div>\n```\n\n> [!LEGACY]\n> `PageProps` was added in 2.16.0. In earlier versions, you had to type the `data` property manually with `PageData` instead, see [$types](#\\$types).\n>\n> In Svelte 4, you'd use `export let data` instead.\n\n### +page.js\n\nOften, a page will need to load some data before it can be rendered. For this, we add a `+page.js` module that exports a `load` function:\n\n```js\n/// file: src/routes/blog/[slug]/+page.js\nimport { error } from '@sveltejs/kit';\n\n/** @type {import('./$types').PageLoad} */\nexport function load({ params }) {\n\tif (params.slug === 'hello-world') {\n\t\treturn {\n\t\t\ttitle: 'Hello world!',\n\t\t\tcontent: 'Welcome to our blog. Lorem ipsum dolor sit amet...'\n\t\t};\n\t}\n\n\terror(404, 'Not found');\n}\n```\n\nThis function runs alongside `+page.svelte`, which means it runs on the server during server-side rendering and in the browser during client-side navigation. See [`load`](load) for full details of the API.\n\nAs well as `load`, `+page.js` can export values that configure the page's behaviour:\n\n- `export const prerender = true` or `false` or `'auto'`\n- `export const ssr = true` or `false`\n- `export const csr = true` or `false`\n\nYou can find more information about these in [page options](page-options).\n\n### +page.server.js\n\nIf your `load` function can only run on the server — for example, if it needs to fetch data from a database or you need to access private [environment variables]($env-static-private) like API keys — then you can rename `+page.js` to `+page.server.js` and change the `PageLoad` type to `PageServerLoad`.\n\n```js\n/// file: src/routes/blog/[slug]/+page.server.js\n\n// @filename: ambient.d.ts\ndeclare global {\n\tconst getPostFromDatabase: (slug: string) => {\n\t\ttitle: string;\n\t\tcontent: string;\n\t}\n}\n\nexport {};\n\n// @filename: index.js\n// ---cut---\nimport { error } from '@sveltejs/kit';\n\n/** @type {import('./$types').PageServerLoad} */\nexport async function load({ params }) {\n\tconst post = await getPostFromDatabase(params.slug);\n\n\tif (post) {\n\t\treturn post;\n\t}\n\n\terror(404, 'Not found');\n}\n```\n\nDuring client-side navigation, SvelteKit will load this data from the server, which means that the returned value must be serializable using [devalue](https://github.com/rich-harris/devalue). See [`load`](load) for full details of the API.\n\nLike `+page.js`, `+page.server.js` can export [page options](page-options) — `prerender`, `ssr` and `csr`.\n\nA `+page.server.js` file can also export _actions_. If `load` lets you read data from the server, `actions` let you write data _to_ the server using the `<form>` element. To learn how to use them, see the [form actions](form-actions) section.\n\n## +error\n\nIf an error occurs during `load`, SvelteKit will render a default error page. You can customise this error page on a per-route basis by adding an `+error.svelte` file:\n\n```svelte\n<!--- file: src/routes/blog/[slug]/+error.svelte --->\n<script>\n\timport { page } from '$app/state';\n</script>\n\n<h1>{page.status}: {page.error.message}</h1>\n```\n\n> [!LEGACY]\n> `$app/state` was added in SvelteKit 2.12. If you're using an earlier version or are using Svelte 4, use `$app/stores` instead.\n\nSvelteKit will 'walk up the tree' looking for the closest error boundary — if the file above didn't exist it would try `src/routes/blog/+error.svelte` and then `src/routes/+error.svelte` before rendering the default error page. If _that_ fails (or if the error was thrown from the `load` function of the root `+layout`, which sits 'above' the root `+error`), SvelteKit will bail out and render a static fallback error page, which you can customise by creating a `src/error.html` file.\n\nIf the error occurs inside a `load` function in `+layout(.server).js`, the closest error boundary in the tree is an `+error.svelte` file _above_ that layout (not next to it).\n\nIf no route can be found (404), `src/routes/+error.svelte` (or the default error page, if that file does not exist) will be used.\n\n> [!NOTE] `+error.svelte` is _not_ used when an error occurs inside [`handle`](hooks#Server-hooks-handle) or a [+server.js](#server) request handler.\n\nYou can read more about error handling [here](errors).\n\n## +layout\n\nSo far, we've treated pages as entirely standalone components — upon navigation, the existing `+page.svelte` component will be destroyed, and a new one will take its place.\n\nBut in many apps, there are elements that should be visible on _every_ page, such as top-level navigation or a footer. Instead of repeating them in every `+page.svelte`, we can put them in _layouts_.\n\n### +layout.svelte\n\nTo create a layout that applies to every page, make a file called `src/routes/+layout.svelte`. The default layout (the one that SvelteKit uses if you don't bring your own) looks like this...\n\n```svelte\n<script>\n\tlet { children } = $props();\n</script>\n\n{@render children()}\n```\n\n...but we can add whatever markup, styles and behaviour we want. The only requirement is that the component includes a `@render` tag for the page content. For example, let's add a nav bar:\n\n```svelte\n<!--- file: src/routes/+layout.svelte --->\n<script>\n\tlet { children } = $props();\n</script>\n\n<nav>\n\t<a href=\"/\">Home</a>\n\t<a href=\"/about\">About</a>\n\t<a href=\"/settings\">Settings</a>\n</nav>\n\n{@render children()}\n```\n\nIf we create pages for `/`, `/about` and `/settings`...\n\n```html\n/// file: src/routes/+page.svelte\n<h1>Home</h1>\n```\n\n```html\n/// file: src/routes/about/+page.svelte\n<h1>About</h1>\n```\n\n```html\n/// file: src/routes/settings/+page.svelte\n<h1>Settings</h1>\n```\n\n...the nav will always be visible, and clicking between the three pages will only result in the `<h1>` being replaced.\n\nLayouts can be _nested_. Suppose we don't just have a single `/settings` page, but instead have nested pages like `/settings/profile` and `/settings/notifications` with a shared submenu (for a real-life example, see [github.com/settings](https://github.com/settings)).\n\nWe can create a layout that only applies to pages below `/settings` (while inheriting the root layout with the top-level nav):\n\n```svelte\n<!--- file: src/routes/settings/+layout.svelte --->\n<script>\n\t/** @type {import('./$types').LayoutProps} */\n\tlet { data, children } = $props();\n</script>\n\n<h1>Settings</h1>\n\n<div class=\"submenu\">\n\t{#each data.sections as section}\n\t\t<a href=\"/settings/{section.slug}\">{section.title}</a>\n\t{/each}\n</div>\n\n{@render children()}\n```\n\n> [!LEGACY]\n> `LayoutProps` was added in 2.16.0. In earlier versions, you had to [type the properties manually instead](#\\$types).\n\nYou can see how `data` is populated by looking at the `+layout.js` example in the next section just below.\n\nBy default, each layout inherits the layout above it. Sometimes that isn't what you want - in this case, [advanced layouts](advanced-routing#Advanced-layouts) can help you.\n\n### +layout.js\n\nJust like `+page.svelte` loading data from `+page.js`, your `+layout.svelte` component can get data from a [`load`](load) function in `+layout.js`.\n\n```js\n/// file: src/routes/settings/+layout.js\n/** @type {import('./$types').LayoutLoad} */\nexport function load() {\n\treturn {\n\t\tsections: [\n\t\t\t{ slug: 'profile', title: 'Profile' },\n\t\t\t{ slug: 'notifications', title: 'Notifications' }\n\t\t]\n\t};\n}\n```\n\nIf a `+layout.js` exports [page options](page-options) — `prerender`, `ssr` and `csr` — they will be used as defaults for child pages.\n\nData returned from a layout's `load` function is also available to all its child pages:\n\n```svelte\n<!--- file: src/routes/settings/profile/+page.svelte --->\n<script>\n\t/** @type {import('./$types').PageProps} */\n\tlet { data } = $props();\n\n\tconsole.log(data.sections); // [{ slug: 'profile', title: 'Profile' }, ...]\n</script>\n```\n\n> [!NOTE] Often, layout data is unchanged when navigating between pages. SvelteKit will intelligently rerun [`load`](load) functions when necessary.\n\n### +layout.server.js\n\nTo run your layout's `load` function on the server, move it to `+layout.server.js`, and change the `LayoutLoad` type to `LayoutServerLoad`.\n\nLike `+layout.js`, `+layout.server.js` can export [page options](page-options) — `prerender`, `ssr` and `csr`.\n\n## +server\n\nAs well as pages, you can define routes with a `+server.js` file (sometimes referred to as an 'API route' or an 'endpoint'), which gives you full control over the response. Your `+server.js` file exports functions corresponding to HTTP verbs like `GET`, `POST`, `PATCH`, `PUT`, `DELETE`, `OPTIONS`, and `HEAD` that take a [`RequestEvent`](@sveltejs-kit#RequestEvent) argument and return a [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) object.\n\nFor example we could create an `/api/random-number` route with a `GET` handler:\n\n```js\n/// file: src/routes/api/random-number/+server.js\nimport { error } from '@sveltejs/kit';\n\n/** @type {import('./$types').RequestHandler} */\nexport function GET({ url }) {\n\tconst min = Number(url.searchParams.get('min') ?? '0');\n\tconst max = Number(url.searchParams.get('max') ?? '1');\n\n\tconst d = max - min;\n\n\tif (isNaN(d) || d < 0) {\n\t\terror(400, 'min and max must be numbers, and min must be less than max');\n\t}\n\n\tconst random = min + Math.random() * d;\n\n\treturn new Response(String(random));\n}\n```\n\nThe first argument to `Response` can be a [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream), making it possible to stream large amounts of data or create server-sent events (unless deploying to platforms that buffer responses, like AWS Lambda).\n\nYou can use the [`error`](@sveltejs-kit#error), [`redirect`](@sveltejs-kit#redirect) and [`json`](@sveltejs-kit#json) methods from `@sveltejs/kit` for convenience (but you don't have to).\n\nIf an error is thrown (either `error(...)` or an unexpected error), the response will be a JSON representation of the error or a fallback error page — which can be customised via `src/error.html` — depending on the `Accept` header. The [`+error.svelte`](#error) component will _not_ be rendered in this case. You can read more about error handling [here](errors).\n\n> [!NOTE] When creating an `OPTIONS` handler, note that Vite will inject `Access-Control-Allow-Origin` and `Access-Control-Allow-Methods` headers — these will not be present in production unless you add them.\n\n> [!NOTE] `+layout` files have no effect on `+server.js` files. If you want to run some logic before each request, add it to the server [`handle`](hooks#Server-hooks-handle) hook.\n\n### Receiving data\n\nBy exporting `POST`/`PUT`/`PATCH`/`DELETE`/`OPTIONS`/`HEAD` handlers, `+server.js` files can be used to create a complete API:\n\n```svelte\n<!--- file: src/routes/add/+page.svelte --->\n<script>\n\tlet a = 0;\n\tlet b = 0;\n\tlet total = 0;\n\n\tasync function add() {\n\t\tconst response = await fetch('/api/add', {\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify({ a, b }),\n\t\t\theaders: {\n\t\t\t\t'content-type': 'application/json'\n\t\t\t}\n\t\t});\n\n\t\ttotal = await response.json();\n\t}\n</script>\n\n<input type=\"number\" bind:value={a}> +\n<input type=\"number\" bind:value={b}> =\n{total}\n\n<button onclick={add}>Calculate</button>\n```\n\n```js\n/// file: src/routes/api/add/+server.js\nimport { json } from '@sveltejs/kit';\n\n/** @type {import('./$types').RequestHandler} */\nexport async function POST({ request }) {\n\tconst { a, b } = await request.json();\n\treturn json(a + b);\n}\n```\n\n> [!NOTE] In general, [form actions](form-actions) are a better way to submit data from the browser to the server.\n\n> [!NOTE] If a `GET` handler is exported, a `HEAD` request will return the `content-length` of the `GET` handler's response body.\n\n### Fallback method handler\n\nExporting the `fallback` handler will match any unhandled request methods, including methods like `MOVE` which have no dedicated export from `+server.js`.\n\n```js\n/// file: src/routes/api/add/+server.js\nimport { json, text } from '@sveltejs/kit';\n\n/** @type {import('./$types').RequestHandler} */\nexport async function POST({ request }) {\n\tconst { a, b } = await request.json();\n\treturn json(a + b);\n}\n\n// This handler will respond to PUT, PATCH, DELETE, etc.\n/** @type {import('./$types').RequestHandler} */\nexport async function fallback({ request }) {\n\treturn text(`I caught your ${request.method} request!`);\n}\n```\n\n> [!NOTE] For `HEAD` requests, the `GET` handler takes precedence over the `fallback` handler.\n\n### Content negotiation\n\n`+server.js` files can be placed in the same directory as `+page` files, allowing the same route to be either a page or an API endpoint. To determine which, SvelteKit applies the following rules:\n\n- `PUT`/`PATCH`/`DELETE`/`OPTIONS` requests are always handled by `+server.js` since they do not apply to pages\n- `GET`/`POST`/`HEAD` requests are treated as page requests if the `accept` header prioritises `text/html` (in other words, it's a browser page request), else they are handled by `+server.js`.\n- Responses to `GET` requests will include a `Vary: Accept` header, so that proxies and browsers cache HTML and JSON responses separately.\n\n## $types\n\nThroughout the examples above, we've been importing types from a `$types.d.ts` file. This is a file SvelteKit creates for you in a hidden directory if you're using TypeScript (or JavaScript with JSDoc type annotations) to give you type safety when working with your root files.\n\nFor example, annotating `let { data } = $props()` with `PageProps` (or `LayoutProps`, for a `+layout.svelte` file) tells TypeScript that the type of `data` is whatever was returned from `load`:\n\n```svelte\n<!--- file: src/routes/blog/[slug]/+page.svelte --->\n<script>\n\t/** @type {import('./$types').PageProps} */\n\tlet { data } = $props();\n</script>\n```\n\n> [!NOTE]\n> The `PageProps` and `LayoutProps` types, added in 2.16.0, are a shortcut for typing the `data` prop as `PageData` or `LayoutData`, as well as other props, such as `form` for pages, or `children` for layouts. In earlier versions, you had to type these properties manually. For example, for a page:\n>\n> ```js\n> /// file: +page.svelte\n> /** @type {{ data: import('./$types').PageData, form: import('./$types').ActionData }} */\n> let { data, form } = $props();\n> ```\n>\n> Or, for a layout:\n>\n> ```js\n> /// file: +layout.svelte\n> /** @type {{ data: import('./$types').LayoutData, children: Snippet }} */\n> let { data, children } = $props();\n> ```\n\nIn turn, annotating the `load` function with `PageLoad`, `PageServerLoad`, `LayoutLoad` or `LayoutServerLoad` (for `+page.js`, `+page.server.js`, `+layout.js` and `+layout.server.js` respectively) ensures that `params` and the return value are correctly typed.\n\nIf you're using VS Code or any IDE that supports the language server protocol and TypeScript plugins then you can omit these types _entirely_! Svelte's IDE tooling will insert the correct types for you, so you'll get type checking without writing them yourself. It also works with our command line tool `svelte-check`.\n\nYou can read more about omitting `$types` in our [blog post](/blog/zero-config-type-safety) about it.\n\n## Other files\n\nAny other files inside a route directory are ignored by SvelteKit. This means you can colocate components and utility modules with the routes that need them.\n\nIf components and modules are needed by multiple routes, it's a good idea to put them in [`$lib`]($lib).\n\n## Further reading\n\n- [Tutorial: Routing](/tutorial/kit/pages)\n- [Tutorial: API routes](/tutorial/kit/get-handlers)\n- [Docs: Advanced routing](advanced-routing)",
    "kit/load": "Before a [`+page.svelte`](routing#page-page.svelte) component (and its containing [`+layout.svelte`](routing#layout-layout.svelte) components) can be rendered, we often need to get some data. This is done by defining `load` functions.\n\n## Page data\n\nA `+page.svelte` file can have a sibling `+page.js` that exports a `load` function, the return value of which is available to the page via the `data` prop:\n\n```js\n/// file: src/routes/blog/[slug]/+page.js\n/** @type {import('./$types').PageLoad} */\nexport function load({ params }) {\n\treturn {\n\t\tpost: {\n\t\t\ttitle: `Title for ${params.slug} goes here`,\n\t\t\tcontent: `Content for ${params.slug} goes here`\n\t\t}\n\t};\n}\n```\n\n```svelte\n<!--- file: src/routes/blog/[slug]/+page.svelte --->\n<script>\n\t/** @type {import('./$types').PageProps} */\n\tlet { data } = $props();\n</script>\n\n<h1>{data.post.title}</h1>\n<div>{@html data.post.content}</div>\n```\n\n> [!LEGACY]\n> Before version 2.16.0, the props of a page and layout had to be typed individually:\n> ```js\n> /// file: +page.svelte\n> /** @type {{ data: import('./$types').PageData }} */\n> let { data } = $props();\n> ```\n>\n> In Svelte 4, you'd use `export let data` instead.\n\nThanks to the generated `$types` module, we get full type safety.\n\nA `load` function in a `+page.js` file runs both on the server and in the browser (unless combined with `export const ssr = false`, in which case it will [only run in the browser](page-options#ssr)). If your `load` function should _always_ run on the server (because it uses private environment variables, for example, or accesses a database) then it would go in a `+page.server.js` instead.\n\nA more realistic version of your blog post's `load` function, that only runs on the server and pulls data from a database, might look like this:\n\n```js\n/// file: src/routes/blog/[slug]/+page.server.js\n// @filename: ambient.d.ts\ndeclare module '$lib/server/database' {\n\texport function getPost(slug: string): Promise<{ title: string, content: string }>\n}\n\n// @filename: index.js\n// ---cut---\nimport * as db from '$lib/server/database';\n\n/** @type {import('./$types').PageServerLoad} */\nexport async function load({ params }) {\n\treturn {\n\t\tpost: await db.getPost(params.slug)\n\t};\n}\n```\n\nNotice that the type changed from `PageLoad` to `PageServerLoad`, because server `load` functions can access additional arguments. To understand when to use `+page.js` and when to use `+page.server.js`, see [Universal vs server](load#Universal-vs-server).\n\n## Layout data\n\nYour `+layout.svelte` files can also load data, via `+layout.js` or `+layout.server.js`.\n\n```js\n/// file: src/routes/blog/[slug]/+layout.server.js\n// @filename: ambient.d.ts\ndeclare module '$lib/server/database' {\n\texport function getPostSummaries(): Promise<Array<{ title: string, slug: string }>>\n}\n\n// @filename: index.js\n// ---cut---\nimport * as db from '$lib/server/database';\n\n/** @type {import('./$types').LayoutServerLoad} */\nexport async function load() {\n\treturn {\n\t\tposts: await db.getPostSummaries()\n\t};\n}\n```\n\n```svelte\n<!--- file: src/routes/blog/[slug]/+layout.svelte --->\n<script>\n\t/** @type {import('./$types').LayoutProps} */\n\tlet { data, children } = $props();\n</script>\n\n<main>\n\t<!-- +page.svelte is `@render`ed here -->\n\t{@render children()}\n</main>\n\n<aside>\n\t<h2>More posts</h2>\n\t<ul>\n\t\t{#each data.posts as post}\n\t\t\t<li>\n\t\t\t\t<a href=\"/blog/{post.slug}\">\n\t\t\t\t\t{post.title}\n\t\t\t\t</a>\n\t\t\t</li>\n\t\t{/each}\n\t</ul>\n</aside>\n```\n\n> [!LEGACY]\n> `LayoutProps` was added in 2.16.0. In earlier versions, properties had to be typed individually:\n> ```js\n> /// file: +layout.svelte\n> /** @type {{ data: import('./$types').LayoutData, children: Snippet }} */\n> let { data, children } = $props();\n> ```\n\nData returned from layout `load` functions is available to child `+layout.svelte` components and the `+page.svelte` component as well as the layout that it 'belongs' to.\n\n```svelte\n/// file: src/routes/blog/[slug]/+page.svelte\n<script>\n\t+++import { page } from '$app/state';+++\n\n\t/** @type {import('./$types').PageProps} */\n\tlet { data } = $props();\n\n+++\t// we can access `data.posts` because it's returned from\n\t// the parent layout `load` function\n\tlet index = $derived(data.posts.findIndex(post => post.slug === page.params.slug));\n\tlet next = $derived(data.posts[index + 1]);+++\n</script>\n\n<h1>{data.post.title}</h1>\n<div>{@html data.post.content}</div>\n\n+++{#if next}\n\t<p>Next post: <a href=\"/blog/{next.slug}\">{next.title}</a></p>\n{/if}+++\n```\n\n> [!NOTE] If multiple `load` functions return data with the same key, the last one 'wins' — the result of a layout `load` returning `{ a: 1, b: 2 }` and a page `load` returning `{ b: 3, c: 4 }` would be `{ a: 1, b: 3, c: 4 }`.\n\n## page.data\n\nThe `+page.svelte` component, and each `+layout.svelte` component above it, has access to its own data plus all the data from its parents.\n\nIn some cases, we might need the opposite — a parent layout might need to access page data or data from a child layout. For example, the root layout might want to access a `title` property returned from a `load` function in `+page.js` or `+page.server.js`. This can be done with `page.data`:\n\n```svelte\n<!--- file: src/routes/+layout.svelte --->\n<script>\n\timport { page } from '$app/state';\n</script>\n\n<svelte:head>\n\t<title>{page.data.title}</title>\n</svelte:head>\n```\n\nType information for `page.data` is provided by `App.PageData`.\n\n> [!LEGACY]\n> `$app/state` was added in SvelteKit 2.12. If you're using an earlier version or are using Svelte 4, use `$app/stores` instead.\n> It provides a `page` store with the same interface that you can subscribe to, e.g. `$page.data.title`.\n\n## Universal vs server\n\nAs we've seen, there are two types of `load` function:\n\n* `+page.js` and `+layout.js` files export _universal_ `load` functions that run both on the server and in the browser\n* `+page.server.js` and `+layout.server.js` files export _server_ `load` functions that only run server-side\n\nConceptually, they're the same thing, but there are some important differences to be aware of.\n\n### When does which load function run?\n\nServer `load` functions _always_ run on the server.\n\nBy default, universal `load` functions run on the server during SSR when the user first visits your page. They will then run again during hydration, reusing any responses from [fetch requests](#Making-fetch-requests). All subsequent invocations of universal `load` functions happen in the browser. You can customize the behavior through [page options](page-options). If you disable [server-side rendering](page-options#ssr), you'll get an SPA and universal `load` functions _always_ run on the client.\n\nIf a route contains both universal and server `load` functions, the server `load` runs first.\n\nA `load` function is invoked at runtime, unless you [prerender](page-options#prerender) the page — in that case, it's invoked at build time.\n\n### Input\n\nBoth universal and server `load` functions have access to properties describing the request (`params`, `route` and `url`) and various functions (`fetch`, `setHeaders`, `parent`, `depends` and `untrack`). These are described in the following sections.\n\nServer `load` functions are called with a `ServerLoadEvent`, which inherits `clientAddress`, `cookies`, `locals`, `platform` and `request` from `RequestEvent`.\n\nUniversal `load` functions are called with a `LoadEvent`, which has a `data` property. If you have `load` functions in both `+page.js` and `+page.server.js` (or `+layout.js` and `+layout.server.js`), the return value of the server `load` function is the `data` property of the universal `load` function's argument.\n\n### Output\n\nA universal `load` function can return an object containing any values, including things like custom classes and component constructors.\n\nA server `load` function must return data that can be serialized with [devalue](https://github.com/rich-harris/devalue) — anything that can be represented as JSON plus things like `BigInt`, `Date`, `Map`, `Set` and `RegExp`, or repeated/cyclical references — so that it can be transported over the network. Your data can include [promises](#Streaming-with-promises), in which case it will be streamed to browsers. If you need to serialize/deserialize custom types, use [transport hooks](hooks#Universal-hooks-transport).\n\n### When to use which\n\nServer `load` functions are convenient when you need to access data directly from a database or filesystem, or need to use private environment variables.\n\nUniversal `load` functions are useful when you need to `fetch` data from an external API and don't need private credentials, since SvelteKit can get the data directly from the API rather than going via your server. They are also useful when you need to return something that can't be serialized, such as a Svelte component constructor.\n\nIn rare cases, you might need to use both together — for example, you might need to return an instance of a custom class that was initialised with data from your server. When using both, the server `load` return value is _not_ passed directly to the page, but to the universal `load` function (as the `data` property):\n\n```js\n/// file: src/routes/+page.server.js\n/** @type {import('./$types').PageServerLoad} */\nexport async function load() {\n\treturn {\n\t\tserverMessage: 'hello from server load function'\n\t};\n}\n```\n\n```js\n/// file: src/routes/+page.js\n// @errors: 18047\n/** @type {import('./$types').PageLoad} */\nexport async function load({ data }) {\n\treturn {\n\t\tserverMessage: data.serverMessage,\n\t\tuniversalMessage: 'hello from universal load function'\n\t};\n}\n```\n\n## Using URL data\n\nOften the `load` function depends on the URL in one way or another. For this, the `load` function provides you with `url`, `route` and `params`.\n\n### url\n\nAn instance of [`URL`](https://developer.mozilla.org/en-US/docs/Web/API/URL), containing properties like the `origin`, `hostname`, `pathname` and `searchParams` (which contains the parsed query string as a [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) object). `url.hash` cannot be accessed during `load`, since it is unavailable on the server.\n\n> [!NOTE] In some environments this is derived from request headers during server-side rendering. If you're using [adapter-node](adapter-node), for example, you may need to configure the adapter in order for the URL to be correct.\n\n### route\n\nContains the name of the current route directory, relative to `src/routes`:\n\n```js\n/// file: src/routes/a/[b]/[...c]/+page.js\n/** @type {import('./$types').PageLoad} */\nexport function load({ route }) {\n\tconsole.log(route.id); // '/a/[b]/[...c]'\n}\n```\n\n### params\n\n`params` is derived from `url.pathname` and `route.id`.\n\nGiven a `route.id` of `/a/[b]/[...c]` and a `url.pathname` of `/a/x/y/z`, the `params` object would look like this:\n\n```json\n{\n\t\"b\": \"x\",\n\t\"c\": \"y/z\"\n}\n```\n\n## Making fetch requests\n\nTo get data from an external API or a `+server.js` handler, you can use the provided `fetch` function, which behaves identically to the [native `fetch` web API](https://developer.mozilla.org/en-US/docs/Web/API/fetch) with a few additional features:\n\n- It can be used to make credentialed requests on the server, as it inherits the `cookie` and `authorization` headers for the page request.\n- It can make relative requests on the server (ordinarily, `fetch` requires a URL with an origin when used in a server context).\n- Internal requests (e.g. for `+server.js` routes) go directly to the handler function when running on the server, without the overhead of an HTTP call.\n- During server-side rendering, the response will be captured and inlined into the rendered HTML by hooking into the `text`, `json` and `arrayBuffer` methods of the `Response` object. Note that headers will _not_ be serialized, unless explicitly included via [`filterSerializedResponseHeaders`](hooks#Server-hooks-handle).\n- During hydration, the response will be read from the HTML, guaranteeing consistency and preventing an additional network request - if you received a warning in your browser console when using the browser `fetch` instead of the `load` `fetch`, this is why.\n\n```js\n/// file: src/routes/items/[id]/+page.js\n/** @type {import('./$types').PageLoad} */\nexport async function load({ fetch, params }) {\n\tconst res = await fetch(`/api/items/${params.id}`);\n\tconst item = await res.json();\n\n\treturn { item };\n}\n```\n\n## Cookies\n\nA server `load` function can get and set [`cookies`](@sveltejs-kit#Cookies).\n\n```js\n/// file: src/routes/+layout.server.js\n// @filename: ambient.d.ts\ndeclare module '$lib/server/database' {\n\texport function getUser(sessionid: string | undefined): Promise<{ name: string, avatar: string }>\n}\n\n// @filename: index.js\n// ---cut---\nimport * as db from '$lib/server/database';\n\n/** @type {import('./$types').LayoutServerLoad} */\nexport async function load({ cookies }) {\n\tconst sessionid = cookies.get('sessionid');\n\n\treturn {\n\t\tuser: await db.getUser(sessionid)\n\t};\n}\n```\n\nCookies will only be passed through the provided `fetch` function if the target host is the same as the SvelteKit application or a more specific subdomain of it.\n\nFor example, if SvelteKit is serving my.domain.com:\n- domain.com WILL NOT receive cookies\n- my.domain.com WILL receive cookies\n- api.domain.com WILL NOT receive cookies\n- sub.my.domain.com WILL receive cookies\n\nOther cookies will not be passed when `credentials: 'include'` is set, because SvelteKit does not know which domain which cookie belongs to (the browser does not pass this information along), so it's not safe to forward any of them. Use the [handleFetch hook](hooks#Server-hooks-handleFetch) to work around it.\n\n## Headers\n\nBoth server and universal `load` functions have access to a `setHeaders` function that, when running on the server, can set headers for the response. (When running in the browser, `setHeaders` has no effect.) This is useful if you want the page to be cached, for example:\n\n```js\n// @errors: 2322 1360\n/// file: src/routes/products/+page.js\n/** @type {import('./$types').PageLoad} */\nexport async function load({ fetch, setHeaders }) {\n\tconst url = `https://cms.example.com/products.json`;\n\tconst response = await fetch(url);\n\n\t// Headers are only set during SSR, caching the page's HTML\n\t// for the same length of time as the underlying data.\n\tsetHeaders({\n\t\tage: response.headers.get('age'),\n\t\t'cache-control': response.headers.get('cache-control')\n\t});\n\n\treturn response.json();\n}\n```\n\nSetting the same header multiple times (even in separate `load` functions) is an error. You can only set a given header once using the `setHeaders` function. You cannot add a `set-cookie` header with `setHeaders` — use `cookies.set(name, value, options)` instead.\n\n## Using parent data\n\nOccasionally it's useful for a `load` function to access data from a parent `load` function, which can be done with `await parent()`:\n\n```js\n/// file: src/routes/+layout.js\n/** @type {import('./$types').LayoutLoad} */\nexport function load() {\n\treturn { a: 1 };\n}\n```\n\n```js\n/// file: src/routes/abc/+layout.js\n/** @type {import('./$types').LayoutLoad} */\nexport async function load({ parent }) {\n\tconst { a } = await parent();\n\treturn { b: a + 1 };\n}\n```\n\n```js\n/// file: src/routes/abc/+page.js\n/** @type {import('./$types').PageLoad} */\nexport async function load({ parent }) {\n\tconst { a, b } = await parent();\n\treturn { c: a + b };\n}\n```\n\n```svelte\n<!--- file: src/routes/abc/+page.svelte --->\n<script>\n\t/** @type {import('./$types').PageProps} */\n\tlet { data } = $props();\n</script>\n\n<!-- renders `1 + 2 = 3` -->\n<p>{data.a} + {data.b} = {data.c}</p>\n```\n\n> [!NOTE] Notice that the `load` function in `+page.js` receives the merged data from both layout `load` functions, not just the immediate parent.\n\nInside `+page.server.js` and `+layout.server.js`, `parent` returns data from parent `+layout.server.js` files.\n\nIn `+page.js` or `+layout.js` it will return data from parent `+layout.js` files. However, a missing `+layout.js` is treated as a `({ data }) => data` function, meaning that it will also return data from parent `+layout.server.js` files that are not 'shadowed' by a `+layout.js` file\n\nTake care not to introduce waterfalls when using `await parent()`. Here, for example, `getData(params)` does not depend on the result of calling `parent()`, so we should call it first to avoid a delayed render.\n\n```js\n/// file: +page.js\n// @filename: ambient.d.ts\ndeclare function getData(params: Record<string, string>): Promise<{ meta: any }>\n\n// @filename: index.js\n// ---cut---\n/** @type {import('./$types').PageLoad} */\nexport async function load({ params, parent }) {\n\t---const parentData = await parent();---\n\tconst data = await getData(params);\n\t+++const parentData = await parent();+++\n\n\treturn {\n\t\t...data,\n\t\tmeta: { ...parentData.meta, ...data.meta }\n\t};\n}\n```\n\n## Errors\n\nIf an error is thrown during `load`, the nearest [`+error.svelte`](routing#error) will be rendered. For [_expected_](errors#Expected-errors) errors, use the `error` helper from `@sveltejs/kit` to specify the HTTP status code and an optional message:\n\n```js\n/// file: src/routes/admin/+layout.server.js\n// @filename: ambient.d.ts\ndeclare namespace App {\n\tinterface Locals {\n\t\tuser?: {\n\t\t\tname: string;\n\t\t\tisAdmin: boolean;\n\t\t}\n\t}\n}\n\n// @filename: index.js\n// ---cut---\nimport { error } from '@sveltejs/kit';\n\n/** @type {import('./$types').LayoutServerLoad} */\nexport function load({ locals }) {\n\tif (!locals.user) {\n\t\terror(401, 'not logged in');\n\t}\n\n\tif (!locals.user.isAdmin) {\n\t\terror(403, 'not an admin');\n\t}\n}\n```\n\nCalling `error(...)` will throw an exception, making it easy to stop execution from inside helper functions.\n\nIf an [_unexpected_](errors#Unexpected-errors) error is thrown, SvelteKit will invoke [`handleError`](hooks#Shared-hooks-handleError) and treat it as a 500 Internal Error.\n\n> [!NOTE] [In SvelteKit 1.x](migrating-to-sveltekit-2#redirect-and-error-are-no-longer-thrown-by-you) you had to `throw` the error yourself\n\n## Redirects\n\nTo redirect users, use the `redirect` helper from `@sveltejs/kit` to specify the location to which they should be redirected alongside a `3xx` status code. Like `error(...)`, calling `redirect(...)` will throw an exception, making it easy to stop execution from inside helper functions.\n\n```js\n/// file: src/routes/user/+layout.server.js\n// @filename: ambient.d.ts\ndeclare namespace App {\n\tinterface Locals {\n\t\tuser?: {\n\t\t\tname: string;\n\t\t}\n\t}\n}\n\n// @filename: index.js\n// ---cut---\nimport { redirect } from '@sveltejs/kit';\n\n/** @type {import('./$types').LayoutServerLoad} */\nexport function load({ locals }) {\n\tif (!locals.user) {\n\t\tredirect(307, '/login');\n\t}\n}\n```\n\n> [!NOTE] Don't use `redirect()` inside a `try {...}` block, as the redirect will immediately trigger the catch statement.\n\nIn the browser, you can also navigate programmatically outside of a `load` function using [`goto`]($app-navigation#goto) from [`$app.navigation`]($app-navigation).\n\n> [!NOTE] [In SvelteKit 1.x](migrating-to-sveltekit-2#redirect-and-error-are-no-longer-thrown-by-you) you had to `throw` the `redirect` yourself\n\n## Streaming with promises\n\nWhen using a server `load`, promises will be streamed to the browser as they resolve. This is useful if you have slow, non-essential data, since you can start rendering the page before all the data is available:\n\n```js\n/// file: src/routes/blog/[slug]/+page.server.js\n// @filename: ambient.d.ts\ndeclare global {\n\tconst loadPost: (slug: string) => Promise<{ title: string, content: string }>;\n\tconst loadComments: (slug: string) => Promise<{ content: string }>;\n}\n\nexport {};\n\n// @filename: index.js\n// ---cut---\n/** @type {import('./$types').PageServerLoad} */\nexport async function load({ params }) {\n\treturn {\n\t\t// make sure the `await` happens at the end, otherwise we\n\t\t// can't start loading comments until we've loaded the post\n\t\tcomments: loadComments(params.slug),\n\t\tpost: await loadPost(params.slug)\n\t};\n}\n```\n\nThis is useful for creating skeleton loading states, for example:\n\n```svelte\n<!--- file: src/routes/blog/[slug]/+page.svelte --->\n<script>\n\t/** @type {import('./$types').PageProps} */\n\tlet { data } = $props();\n</script>\n\n<h1>{data.post.title}</h1>\n<div>{@html data.post.content}</div>\n\n{#await data.comments}\n\tLoading comments...\n{:then comments}\n\t{#each comments as comment}\n\t\t<p>{comment.content}</p>\n\t{/each}\n{:catch error}\n\t<p>error loading comments: {error.message}</p>\n{/await}\n```\n\nWhen streaming data, be careful to handle promise rejections correctly. More specifically, the server could crash with an \"unhandled promise rejection\" error if a lazy-loaded promise fails before rendering starts (at which point it's caught) and isn't handling the error in some way. When using SvelteKit's `fetch` directly in the `load` function, SvelteKit will handle this case for you. For other promises, it is enough to attach a noop-`catch` to the promise to mark it as handled.\n\n```js\n/// file: src/routes/+page.server.js\n/** @type {import('./$types').PageServerLoad} */\nexport function load({ fetch }) {\n\tconst ok_manual = Promise.reject();\n\tok_manual.catch(() => {});\n\n\treturn {\n\t\tok_manual,\n\t\tok_fetch: fetch('/fetch/that/could/fail'),\n\t\tdangerous_unhandled: Promise.reject()\n\t};\n}\n```\n\n> [!NOTE] On platforms that do not support streaming, such as AWS Lambda or Firebase, responses will be buffered. This means the page will only render once all promises resolve. If you are using a proxy (e.g. NGINX), make sure it does not buffer responses from the proxied server.\n\n> [!NOTE] Streaming data will only work when JavaScript is enabled. You should avoid returning promises from a universal `load` function if the page is server rendered, as these are _not_ streamed — instead, the promise is recreated when the function reruns in the browser.\n\n> [!NOTE] The headers and status code of a response cannot be changed once the response has started streaming, therefore you cannot `setHeaders` or throw redirects inside a streamed promise.\n\n> [!NOTE] [In SvelteKit 1.x](migrating-to-sveltekit-2#Top-level-promises-are-no-longer-awaited) top-level promises were automatically awaited, only nested promises were streamed.\n\n## Parallel loading\n\nWhen rendering (or navigating to) a page, SvelteKit runs all `load` functions concurrently, avoiding a waterfall of requests. During client-side navigation, the result of calling multiple server `load` functions are grouped into a single response. Once all `load` functions have returned, the page is rendered.\n\n## Rerunning load functions\n\nSvelteKit tracks the dependencies of each `load` function to avoid rerunning it unnecessarily during navigation.\n\nFor example, given a pair of `load` functions like these...\n\n```js\n/// file: src/routes/blog/[slug]/+page.server.js\n// @filename: ambient.d.ts\ndeclare module '$lib/server/database' {\n\texport function getPost(slug: string): Promise<{ title: string, content: string }>\n}\n\n// @filename: index.js\n// ---cut---\nimport * as db from '$lib/server/database';\n\n/** @type {import('./$types').PageServerLoad} */\nexport async function load({ params }) {\n\treturn {\n\t\tpost: await db.getPost(params.slug)\n\t};\n}\n```\n\n```js\n/// file: src/routes/blog/[slug]/+layout.server.js\n// @filename: ambient.d.ts\ndeclare module '$lib/server/database' {\n\texport function getPostSummaries(): Promise<Array<{ title: string, slug: string }>>\n}\n\n// @filename: index.js\n// ---cut---\nimport * as db from '$lib/server/database';\n\n/** @type {import('./$types').LayoutServerLoad} */\nexport async function load() {\n\treturn {\n\t\tposts: await db.getPostSummaries()\n\t};\n}\n```\n\n...the one in `+page.server.js` will rerun if we navigate from `/blog/trying-the-raw-meat-diet` to `/blog/i-regret-my-choices` because `params.slug` has changed. The one in `+layout.server.js` will not, because the data is still valid. In other words, we won't call `db.getPostSummaries()` a second time.\n\nA `load` function that calls `await parent()` will also rerun if a parent `load` function is rerun.\n\nDependency tracking does not apply _after_ the `load` function has returned — for example, accessing `params.x` inside a nested [promise](#Streaming-with-promises) will not cause the function to rerun when `params.x` changes. (Don't worry, you'll get a warning in development if you accidentally do this.) Instead, access the parameter in the main body of your `load` function.\n\nSearch parameters are tracked independently from the rest of the url. For example, accessing `event.url.searchParams.get(\"x\")` inside a `load` function will make that `load` function re-run when navigating from `?x=1` to `?x=2`, but not when navigating from `?x=1&y=1` to `?x=1&y=2`.\n\n### Untracking dependencies\n\nIn rare cases, you may wish to exclude something from the dependency tracking mechanism. You can do this with the provided `untrack` function:\n\n```js\n/// file: src/routes/+page.js\n/** @type {import('./$types').PageLoad} */\nexport async function load({ untrack, url }) {\n\t// Untrack url.pathname so that path changes don't trigger a rerun\n\tif (untrack(() => url.pathname === '/')) {\n\t\treturn { message: 'Welcome!' };\n\t}\n}\n```\n\n### Manual invalidation\n\nYou can also rerun `load` functions that apply to the current page using [`invalidate(url)`]($app-navigation#invalidate), which reruns all `load` functions that depend on `url`, and [`invalidateAll()`]($app-navigation#invalidateAll), which reruns every `load` function. Server load functions will never automatically depend on a fetched `url` to avoid leaking secrets to the client.\n\nA `load` function depends on `url` if it calls `fetch(url)` or `depends(url)`. Note that `url` can be a custom identifier that starts with `[a-z]:`:\n\n```js\n/// file: src/routes/random-number/+page.js\n/** @type {import('./$types').PageLoad} */\nexport async function load({ fetch, depends }) {\n\t// load reruns when `invalidate('https://api.example.com/random-number')` is called...\n\tconst response = await fetch('https://api.example.com/random-number');\n\n\t// ...or when `invalidate('app:random')` is called\n\tdepends('app:random');\n\n\treturn {\n\t\tnumber: await response.json()\n\t};\n}\n```\n\n```svelte\n<!--- file: src/routes/random-number/+page.svelte --->\n<script>\n\timport { invalidate, invalidateAll } from '$app/navigation';\n\n\t/** @type {import('./$types').PageProps} */\n\tlet { data } = $props();\n\n\tfunction rerunLoadFunction() {\n\t\t// any of these will cause the `load` function to rerun\n\t\tinvalidate('app:random');\n\t\tinvalidate('https://api.example.com/random-number');\n\t\tinvalidate(url => url.href.includes('random-number'));\n\t\tinvalidateAll();\n\t}\n</script>\n\n<p>random number: {data.number}</p>\n<button onclick={rerunLoadFunction}>Update random number</button>\n```\n\n### When do load functions rerun?\n\nTo summarize, a `load` function will rerun in the following situations:\n\n- It references a property of `params` whose value has changed\n- It references a property of `url` (such as `url.pathname` or `url.search`) whose value has changed. Properties in `request.url` are _not_ tracked\n- It calls `url.searchParams.get(...)`, `url.searchParams.getAll(...)` or `url.searchParams.has(...)` and the parameter in question changes. Accessing other properties of `url.searchParams` will have the same effect as accessing `url.search`.\n- It calls `await parent()` and a parent `load` function reran\n- A child `load` function calls `await parent()` and is rerunning, and the parent is a server load function\n- It declared a dependency on a specific URL via [`fetch`](#Making-fetch-requests) (universal load only) or [`depends`](@sveltejs-kit#LoadEvent), and that URL was marked invalid with [`invalidate(url)`]($app-navigation#invalidate)\n- All active `load` functions were forcibly rerun with [`invalidateAll()`]($app-navigation#invalidateAll)\n\n`params` and `url` can change in response to a `<a href=\"..\">` link click, a [`<form>` interaction](form-actions#GET-vs-POST), a [`goto`]($app-navigation#goto) invocation, or a [`redirect`](@sveltejs-kit#redirect).\n\nNote that rerunning a `load` function will update the `data` prop inside the corresponding `+layout.svelte` or `+page.svelte`; it does _not_ cause the component to be recreated. As a result, internal state is preserved. If this isn't what you want, you can reset whatever you need to reset inside an [`afterNavigate`]($app-navigation#afterNavigate) callback, and/or wrap your component in a [`{#key ...}`](../svelte/key) block.\n\n## Implications for authentication\n\nA couple features of loading data have important implications for auth checks:\n- Layout `load` functions do not run on every request, such as during client side navigation between child routes. [(When do load functions rerun?)](load#Rerunning-load-functions-When-do-load-functions-rerun)\n- Layout and page `load` functions run concurrently unless `await parent()` is called. If a layout `load` throws, the page `load` function runs, but the client will not receive the returned data.\n\nThere are a few possible strategies to ensure an auth check occurs before protected code.\n\nTo prevent data waterfalls and preserve layout `load` caches:\n- Use [hooks](hooks) to protect multiple routes before any `load` functions run\n- Use auth guards directly in `+page.server.js` `load` functions for route specific protection\n\nPutting an auth guard in `+layout.server.js` requires all child pages to call `await parent()` before protected code. Unless every child page depends on returned data from `await parent()`, the other options will be more performant.\n\n## Using `getRequestEvent`\n\nWhen running server `load` functions, the `event` object passed to the function as an argument can also be retrieved with [`getRequestEvent`]($app-server#getRequestEvent). This allows shared logic (such as authentication guards) to access information about the current request without it needing to be passed around.\n\nFor example, you might have a function that requires users to be logged in, and redirects them to `/login` if not:\n\n```js\n/// file: src/lib/server/auth.js\n// @filename: ambient.d.ts\ninterface User {\n\tname: string;\n}\n\ndeclare namespace App {\n\tinterface Locals {\n\t\tuser?: User;\n\t}\n}\n\n// @filename: index.ts\n// ---cut---\nimport { redirect } from '@sveltejs/kit';\nimport { getRequestEvent } from '$app/server';\n\nexport function requireLogin() {\n\tconst { locals, url } = getRequestEvent();\n\n\t// assume `locals.user` is populated in `handle`\n\tif (!locals.user) {\n\t\tconst redirectTo = url.pathname + url.search;\n\t\tconst params = new URLSearchParams({ redirectTo });\n\n\t\tredirect(307, `/login?${params}`);\n\t}\n\n\treturn locals.user;\n}\n```\n\nNow, you can call `requireLogin` in any `load` function (or [form action](form-actions), for example) to guarantee that the user is logged in:\n\n```js\n/// file: +page.server.js\n// @filename: ambient.d.ts\n\ndeclare module '$lib/server/auth' {\n\tinterface User {\n\t\tname: string;\n\t}\n\n\texport function requireLogin(): User;\n}\n\n// @filename: index.ts\n// ---cut---\nimport { requireLogin } from '$lib/server/auth';\n\nexport function load() {\n\tconst user = requireLogin();\n\n\t// `user` is guaranteed to be a user object here, because otherwise\n\t// `requireLogin` would throw a redirect and we wouldn't get here\n\treturn {\n\t\tmessage: `hello ${user.name}!`\n\t};\n}\n```\n\n## Further reading\n\n- [Tutorial: Loading data](/tutorial/kit/page-data)\n- [Tutorial: Errors and redirects](/tutorial/kit/error-basics)\n- [Tutorial: Advanced loading](/tutorial/kit/await-parent)",
    "kit/form-actions": "A `+page.server.js` file can export _actions_, which allow you to `POST` data to the server using the `<form>` element.\n\nWhen using `<form>`, client-side JavaScript is optional, but you can easily _progressively enhance_ your form interactions with JavaScript to provide the best user experience.\n\n## Default actions\n\nIn the simplest case, a page declares a `default` action:\n\n```js\n/// file: src/routes/login/+page.server.js\n/** @satisfies {import('./$types').Actions} */\nexport const actions = {\n\tdefault: async (event) => {\n\t\t// TODO log the user in\n\t}\n};\n```\n\nTo invoke this action from the `/login` page, just add a `<form>` — no JavaScript needed:\n\n```svelte\n<!--- file: src/routes/login/+page.svelte --->\n<form method=\"POST\">\n\t<label>\n\t\tEmail\n\t\t<input name=\"email\" type=\"email\">\n\t</label>\n\t<label>\n\t\tPassword\n\t\t<input name=\"password\" type=\"password\">\n\t</label>\n\t<button>Log in</button>\n</form>\n```\n\nIf someone were to click the button, the browser would send the form data via `POST` request to the server, running the default action.\n\n> [!NOTE] Actions always use `POST` requests, since `GET` requests should never have side-effects.\n\nWe can also invoke the action from other pages (for example if there's a login widget in the nav in the root layout) by adding the `action` attribute, pointing to the page:\n\n```html\n/// file: src/routes/+layout.svelte\n<form method=\"POST\" action=\"/login\">\n\t<!-- content -->\n</form>\n```\n\n## Named actions\n\nInstead of one `default` action, a page can have as many named actions as it needs:\n\n```js\n/// file: src/routes/login/+page.server.js\n/** @satisfies {import('./$types').Actions} */\nexport const actions = {\n---\tdefault: async (event) => {---\n+++\tlogin: async (event) => {+++\n\t\t// TODO log the user in\n\t},\n+++\tregister: async (event) => {\n\t\t// TODO register the user\n\t}+++\n};\n```\n\nTo invoke a named action, add a query parameter with the name prefixed by a `/` character:\n\n```svelte\n<!--- file: src/routes/login/+page.svelte --->\n<form method=\"POST\" action=\"?/register\">\n```\n\n```svelte\n<!--- file: src/routes/+layout.svelte --->\n<form method=\"POST\" action=\"/login?/register\">\n```\n\nAs well as the `action` attribute, we can use the `formaction` attribute on a button to `POST` the same form data to a different action than the parent `<form>`:\n\n```svelte\n/// file: src/routes/login/+page.svelte\n<form method=\"POST\" +++action=\"?/login\"+++>\n\t<label>\n\t\tEmail\n\t\t<input name=\"email\" type=\"email\">\n\t</label>\n\t<label>\n\t\tPassword\n\t\t<input name=\"password\" type=\"password\">\n\t</label>\n\t<button>Log in</button>\n\t+++<button formaction=\"?/register\">Register</button>+++\n</form>\n```\n\n> [!NOTE] We can't have default actions next to named actions, because if you POST to a named action without a redirect, the query parameter is persisted in the URL, which means the next default POST would go through the named action from before.\n\n## Anatomy of an action\n\nEach action receives a `RequestEvent` object, allowing you to read the data with `request.formData()`. After processing the request (for example, logging the user in by setting a cookie), the action can respond with data that will be available through the `form` property on the corresponding page and through `page.form` app-wide until the next update.\n\n```js\n/// file: src/routes/login/+page.server.js\n// @filename: ambient.d.ts\ndeclare module '$lib/server/db';\n\n// @filename: index.js\n// ---cut---\nimport * as db from '$lib/server/db';\n\n/** @type {import('./$types').PageServerLoad} */\nexport async function load({ cookies }) {\n\tconst user = await db.getUserFromSession(cookies.get('sessionid'));\n\treturn { user };\n}\n\n/** @satisfies {import('./$types').Actions} */\nexport const actions = {\n\tlogin: async ({ cookies, request }) => {\n\t\tconst data = await request.formData();\n\t\tconst email = data.get('email');\n\t\tconst password = data.get('password');\n\n\t\tconst user = await db.getUser(email);\n\t\tcookies.set('sessionid', await db.createSession(user), { path: '/' });\n\n\t\treturn { success: true };\n\t},\n\tregister: async (event) => {\n\t\t// TODO register the user\n\t}\n};\n```\n\n```svelte\n<!--- file: src/routes/login/+page.svelte --->\n<script>\n\t/** @type {import('./$types').PageProps} */\n\tlet { data, form } = $props();\n</script>\n\n{#if form?.success}\n\t<!-- this message is ephemeral; it exists because the page was rendered in\n\t       response to a form submission. it will vanish if the user reloads -->\n\t<p>Successfully logged in! Welcome back, {data.user.name}</p>\n{/if}\n```\n\n> [!LEGACY]\n> `PageProps` was added in 2.16.0. In earlier versions, you had to type the `data` and `form` properties individually:\n> ```js\n> /// file: +page.svelte\n> /** @type {{ data: import('./$types').PageData, form: import('./$types').ActionData }} */\n> let { data, form } = $props();\n> ```\n>\n> In Svelte 4, you'd use `export let data` and `export let form` instead to declare properties.\n\n### Validation errors\n\nIf the request couldn't be processed because of invalid data, you can return validation errors — along with the previously submitted form values — back to the user so that they can try again. The `fail` function lets you return an HTTP status code (typically 400 or 422, in the case of validation errors) along with the data. The status code is available through `page.status` and the data through `form`:\n\n```js\n/// file: src/routes/login/+page.server.js\n// @filename: ambient.d.ts\ndeclare module '$lib/server/db';\n\n// @filename: index.js\n// ---cut---\n+++import { fail } from '@sveltejs/kit';+++\nimport * as db from '$lib/server/db';\n\n/** @satisfies {import('./$types').Actions} */\nexport const actions = {\n\tlogin: async ({ cookies, request }) => {\n\t\tconst data = await request.formData();\n\t\tconst email = data.get('email');\n\t\tconst password = data.get('password');\n\n+++\t\tif (!email) {\n\t\t\treturn fail(400, { email, missing: true });\n\t\t}+++\n\n\t\tconst user = await db.getUser(email);\n\n+++\t\tif (!user || user.password !== db.hash(password)) {\n\t\t\treturn fail(400, { email, incorrect: true });\n\t\t}+++\n\n\t\tcookies.set('sessionid', await db.createSession(user), { path: '/' });\n\n\t\treturn { success: true };\n\t},\n\tregister: async (event) => {\n\t\t// TODO register the user\n\t}\n};\n```\n\n> [!NOTE] Note that as a precaution, we only return the email back to the page — not the password.\n\n```svelte\n/// file: src/routes/login/+page.svelte\n<form method=\"POST\" action=\"?/login\">\n+++\t{#if form?.missing}<p class=\"error\">The email field is required</p>{/if}\n\t{#if form?.incorrect}<p class=\"error\">Invalid credentials!</p>{/if}+++\n\t<label>\n\t\tEmail\n\t\t<input name=\"email\" type=\"email\" +++value={form?.email ?? ''}+++>\n\t</label>\n\t<label>\n\t\tPassword\n\t\t<input name=\"password\" type=\"password\">\n\t</label>\n\t<button>Log in</button>\n\t<button formaction=\"?/register\">Register</button>\n</form>\n```\n\nThe returned data must be serializable as JSON. Beyond that, the structure is entirely up to you. For example, if you had multiple forms on the page, you could distinguish which `<form>` the returned `form` data referred to with an `id` property or similar.\n\n### Redirects\n\nRedirects (and errors) work exactly the same as in [`load`](load#Redirects):\n\n```js\n// @errors: 2345\n/// file: src/routes/login/+page.server.js\n// @filename: ambient.d.ts\ndeclare module '$lib/server/db';\n\n// @filename: index.js\n// ---cut---\nimport { fail, +++redirect+++ } from '@sveltejs/kit';\nimport * as db from '$lib/server/db';\n\n/** @satisfies {import('./$types').Actions} */\nexport const actions = {\n\tlogin: async ({ cookies, request, +++url+++ }) => {\n\t\tconst data = await request.formData();\n\t\tconst email = data.get('email');\n\t\tconst password = data.get('password');\n\n\t\tconst user = await db.getUser(email);\n\t\tif (!user) {\n\t\t\treturn fail(400, { email, missing: true });\n\t\t}\n\n\t\tif (user.password !== db.hash(password)) {\n\t\t\treturn fail(400, { email, incorrect: true });\n\t\t}\n\n\t\tcookies.set('sessionid', await db.createSession(user), { path: '/' });\n\n+++\t\tif (url.searchParams.has('redirectTo')) {\n\t\t\tredirect(303, url.searchParams.get('redirectTo'));\n\t\t}+++\n\n\t\treturn { success: true };\n\t},\n\tregister: async (event) => {\n\t\t// TODO register the user\n\t}\n};\n```\n\n## Loading data\n\nAfter an action runs, the page will be re-rendered (unless a redirect or an unexpected error occurs), with the action's return value available to the page as the `form` prop. This means that your page's `load` functions will run after the action completes.\n\nNote that `handle` runs before the action is invoked, and does not rerun before the `load` functions. This means that if, for example, you use `handle` to populate `event.locals` based on a cookie, you must update `event.locals` when you set or delete the cookie in an action:\n\n```js\n/// file: src/hooks.server.js\n// @filename: ambient.d.ts\ndeclare namespace App {\n\tinterface Locals {\n\t\tuser: {\n\t\t\tname: string;\n\t\t} | null\n\t}\n}\n\n// @filename: global.d.ts\ndeclare global {\n\tfunction getUser(sessionid: string | undefined): {\n\t\tname: string;\n\t};\n}\n\nexport {};\n\n// @filename: index.js\n// ---cut---\n/** @type {import('@sveltejs/kit').Handle} */\nexport async function handle({ event, resolve }) {\n\tevent.locals.user = await getUser(event.cookies.get('sessionid'));\n\treturn resolve(event);\n}\n```\n\n```js\n/// file: src/routes/account/+page.server.js\n// @filename: ambient.d.ts\ndeclare namespace App {\n\tinterface Locals {\n\t\tuser: {\n\t\t\tname: string;\n\t\t} | null\n\t}\n}\n\n// @filename: index.js\n// ---cut---\n/** @type {import('./$types').PageServerLoad} */\nexport function load(event) {\n\treturn {\n\t\tuser: event.locals.user\n\t};\n}\n\n/** @satisfies {import('./$types').Actions} */\nexport const actions = {\n\tlogout: async (event) => {\n\t\tevent.cookies.delete('sessionid', { path: '/' });\n\t\tevent.locals.user = null;\n\t}\n};\n```\n\n## Progressive enhancement\n\nIn the preceding sections we built a `/login` action that [works without client-side JavaScript](https://kryogenix.org/code/browser/everyonehasjs.html) — not a `fetch` in sight. That's great, but when JavaScript _is_ available we can progressively enhance our form interactions to provide a better user experience.\n\n### use:enhance\n\nThe easiest way to progressively enhance a form is to add the `use:enhance` action:\n\n```svelte\n/// file: src/routes/login/+page.svelte\n<script>\n\t+++import { enhance } from '$app/forms';+++\n\n\t/** @type {import('./$types').PageProps} */\n\tlet { form } = $props();\n</script>\n\n<form method=\"POST\" +++use:enhance+++>\n```\n\n> [!NOTE] `use:enhance` can only be used with forms that have `method=\"POST\"` and point to actions defined in a `+page.server.js` file. It will not work with `method=\"GET\"`, which is the default for forms without a specified method. Attempting to use `use:enhance` on forms without `method=\"POST\"` or posting to a `+server.js` endpoint will result in an error.\n\n> [!NOTE] Yes, it's a little confusing that the `enhance` action and `<form action>` are both called 'action'. These docs are action-packed. Sorry.\n\nWithout an argument, `use:enhance` will emulate the browser-native behaviour, just without the full-page reloads. It will:\n\n- update the `form` property, `page.form` and `page.status` on a successful or invalid response, but only if the action is on the same page you're submitting from. For example, if your form looks like `<form action=\"/somewhere/else\" ..>`, the `form` prop and the `page.form` state will _not_ be updated. This is because in the native form submission case you would be redirected to the page the action is on. If you want to have them updated either way, use [`applyAction`](#Progressive-enhancement-Customising-use:enhance)\n- reset the `<form>` element\n- invalidate all data using `invalidateAll` on a successful response\n- call `goto` on a redirect response\n- render the nearest `+error` boundary if an error occurs\n- [reset focus](accessibility#Focus-management) to the appropriate element\n\n### Customising use:enhance\n\nTo customise the behaviour, you can provide a `SubmitFunction` that runs immediately before the form is submitted, and (optionally) returns a callback that runs with the `ActionResult`.\n\n```svelte\n<form\n\tmethod=\"POST\"\n\tuse:enhance={({ formElement, formData, action, cancel, submitter }) => {\n\t\t// `formElement` is this `<form>` element\n\t\t// `formData` is its `FormData` object that's about to be submitted\n\t\t// `action` is the URL to which the form is posted\n\t\t// calling `cancel()` will prevent the submission\n\t\t// `submitter` is the `HTMLElement` that caused the form to be submitted\n\n\t\treturn async ({ result, update }) => {\n\t\t\t// `result` is an `ActionResult` object\n\t\t\t// `update` is a function which triggers the default logic that would be triggered if this callback wasn't set\n\t\t};\n\t}}\n>\n```\n\nYou can use these functions to show and hide loading UI, and so on.\n\nIf you return a callback, you override the default post-submission behavior. To get it back, call `update`, which accepts `invalidateAll` and `reset` parameters, or use `applyAction` on the result:\n\n```svelte\n/// file: src/routes/login/+page.svelte\n<script>\n\timport { enhance, +++applyAction+++ } from '$app/forms';\n\n\t/** @type {import('./$types').PageProps} */\n\tlet { form } = $props();\n</script>\n\n<form\n\tmethod=\"POST\"\n\tuse:enhance={({ formElement, formData, action, cancel }) => {\n\t\treturn async ({ result }) => {\n\t\t\t// `result` is an `ActionResult` object\n+++\t\t\tif (result.type === 'redirect') {\n\t\t\t\tgoto(result.location);\n\t\t\t} else {\n\t\t\t\tawait applyAction(result);\n\t\t\t}+++\n\t\t};\n\t}}\n>\n```\n\nThe behaviour of `applyAction(result)` depends on `result.type`:\n\n- `success`, `failure` — sets `page.status` to `result.status` and updates `form` and `page.form` to `result.data` (regardless of where you are submitting from, in contrast to `update` from `enhance`)\n- `redirect` — calls `goto(result.location, { invalidateAll: true })`\n- `error` — renders the nearest `+error` boundary with `result.error`\n\nIn all cases, [focus will be reset](accessibility#Focus-management).\n\n### Custom event listener\n\nWe can also implement progressive enhancement ourselves, without `use:enhance`, with a normal event listener on the `<form>`:\n\n```svelte\n<!--- file: src/routes/login/+page.svelte --->\n<script>\n\timport { invalidateAll, goto } from '$app/navigation';\n\timport { applyAction, deserialize } from '$app/forms';\n\n\t/** @type {import('./$types').PageProps} */\n\tlet { form } = $props();\n\n\t/** @param {SubmitEvent & { currentTarget: EventTarget & HTMLFormElement}} event */\n\tasync function handleSubmit(event) {\n\t\tevent.preventDefault();\n\t\tconst data = new FormData(event.currentTarget, event.submitter);\n\n\t\tconst response = await fetch(event.currentTarget.action, {\n\t\t\tmethod: 'POST',\n\t\t\tbody: data\n\t\t});\n\n\t\t/** @type {import('@sveltejs/kit').ActionResult} */\n\t\tconst result = deserialize(await response.text());\n\n\t\tif (result.type === 'success') {\n\t\t\t// rerun all `load` functions, following the successful update\n\t\t\tawait invalidateAll();\n\t\t}\n\n\t\tapplyAction(result);\n\t}\n</script>\n\n<form method=\"POST\" onsubmit={handleSubmit}>\n\t<!-- content -->\n</form>\n```\n\nNote that you need to `deserialize` the response before processing it further using the corresponding method from `$app/forms`. `JSON.parse()` isn't enough because form actions - like `load` functions - also support returning `Date` or `BigInt` objects.\n\nIf you have a `+server.js` alongside your `+page.server.js`, `fetch` requests will be routed there by default. To `POST` to an action in `+page.server.js` instead, use the custom `x-sveltekit-action` header:\n\n```js\n// @errors: 2532 2304\nconst response = await fetch(this.action, {\n\tmethod: 'POST',\n\tbody: data,\n+++\theaders: {\n\t\t'x-sveltekit-action': 'true'\n\t}+++\n});\n```\n\n## Alternatives\n\nForm actions are the preferred way to send data to the server, since they can be progressively enhanced, but you can also use [`+server.js`](routing#server) files to expose (for example) a JSON API. Here's how such an interaction could look like:\n\n```svelte\n<!--- file: src/routes/send-message/+page.svelte --->\n<script>\n\tfunction rerun() {\n\t\tfetch('/api/ci', {\n\t\t\tmethod: 'POST'\n\t\t});\n\t}\n</script>\n\n<button onclick={rerun}>Rerun CI</button>\n```\n\n```js\n// @errors: 2355 1360 2322\n/// file: src/routes/api/ci/+server.js\n/** @type {import('./$types').RequestHandler} */\nexport function POST() {\n\t// do something\n}\n```\n\n## GET vs POST\n\nAs we've seen, to invoke a form action you must use `method=\"POST\"`.\n\nSome forms don't need to `POST` data to the server — search inputs, for example. For these you can use `method=\"GET\"` (or, equivalently, no `method` at all), and SvelteKit will treat them like `<a>` elements, using the client-side router instead of a full page navigation:\n\n```html\n<form action=\"/search\">\n\t<label>\n\t\tSearch\n\t\t<input name=\"q\">\n\t</label>\n</form>\n```\n\nSubmitting this form will navigate to `/search?q=...` and invoke your load function but will not invoke an action. As with `<a>` elements, you can set the [`data-sveltekit-reload`](link-options#data-sveltekit-reload), [`data-sveltekit-replacestate`](link-options#data-sveltekit-replacestate), [`data-sveltekit-keepfocus`](link-options#data-sveltekit-keepfocus) and [`data-sveltekit-noscroll`](link-options#data-sveltekit-noscroll) attributes on the `<form>` to control the router's behaviour.\n\n## Further reading\n\n- [Tutorial: Forms](/tutorial/kit/the-form-element)",
    "kit/page-options": "By default, SvelteKit will render (or [prerender](glossary#Prerendering)) any component first on the server and send it to the client as HTML. It will then render the component again in the browser to make it interactive in a process called [_hydration_](glossary#Hydration). For this reason, you need to ensure that components can run in both places. SvelteKit will then initialize a [_router_](routing) that takes over subsequent navigations.\n\nYou can control each of these on a page-by-page basis by exporting options from [`+page.js`](routing#page-page.js) or [`+page.server.js`](routing#page-page.server.js), or for groups of pages using a shared [`+layout.js`](routing#layout-layout.js) or [`+layout.server.js`](routing#layout-layout.server.js). To define an option for the whole app, export it from the root layout. Child layouts and pages override values set in parent layouts, so — for example — you can enable prerendering for your entire app then disable it for pages that need to be dynamically rendered.\n\nYou can mix and match these options in different areas of your app. For example, you could prerender your marketing page for maximum speed, server-render your dynamic pages for SEO and accessibility and turn your admin section into an SPA by rendering it on the client only. This makes SvelteKit very versatile.\n\n## prerender\n\nIt's likely that at least some routes of your app can be represented as a simple HTML file generated at build time. These routes can be [_prerendered_](glossary#Prerendering).\n\n```js\n/// file: +page.js/+page.server.js/+server.js\nexport const prerender = true;\n```\n\nAlternatively, you can set `export const prerender = true` in your root `+layout.js` or `+layout.server.js` and prerender everything except pages that are explicitly marked as _not_ prerenderable:\n\n```js\n/// file: +page.js/+page.server.js/+server.js\nexport const prerender = false;\n```\n\nRoutes with `prerender = true` will be excluded from manifests used for dynamic SSR, making your server (or serverless/edge functions) smaller. In some cases you might want to prerender a route but also include it in the manifest (for example, with a route like `/blog/[slug]` where you want to prerender your most recent/popular content but server-render the long tail) — for these cases, there's a third option, 'auto':\n\n```js\n/// file: +page.js/+page.server.js/+server.js\nexport const prerender = 'auto';\n```\n\n> [!NOTE] If your entire app is suitable for prerendering, you can use [`adapter-static`](adapter-static), which will output files suitable for use with any static webserver.\n\nThe prerenderer will start at the root of your app and generate files for any prerenderable pages or `+server.js` routes it finds. Each page is scanned for `<a>` elements that point to other pages that are candidates for prerendering — because of this, you generally don't need to specify which pages should be accessed. If you _do_ need to specify which pages should be accessed by the prerenderer, you can do so with [`config.kit.prerender.entries`](configuration#prerender), or by exporting an [`entries`](#entries) function from your dynamic route.\n\nWhile prerendering, the value of `building` imported from [`$app/environment`]($app-environment) will be `true`.\n\n### Prerendering server routes\n\nUnlike the other page options, `prerender` also applies to `+server.js` files. These files are _not_ affected by layouts, but will inherit default values from the pages that fetch data from them, if any. For example if a `+page.js` contains this `load` function...\n\n```js\n/// file: +page.js\nexport const prerender = true;\n\n/** @type {import('./$types').PageLoad} */\nexport async function load({ fetch }) {\n\tconst res = await fetch('/my-server-route.json');\n\treturn await res.json();\n}\n```\n\n...then `src/routes/my-server-route.json/+server.js` will be treated as prerenderable if it doesn't contain its own `export const prerender = false`.\n\n### When not to prerender\n\nThe basic rule is this: for a page to be prerenderable, any two users hitting it directly must get the same content from the server.\n\n> [!NOTE] Not all pages are suitable for prerendering. Any content that is prerendered will be seen by all users. You can of course fetch personalized data in `onMount` in a prerendered page, but this may result in a poorer user experience since it will involve blank initial content or loading indicators.\n\nNote that you can still prerender pages that load data based on the page's parameters, such as a `src/routes/blog/[slug]/+page.svelte` route.\n\nAccessing [`url.searchParams`](load#Using-URL-data-url) during prerendering is forbidden. If you need to use it, ensure you are only doing so in the browser (for example in `onMount`).\n\nPages with [actions](form-actions) cannot be prerendered, because a server must be able to handle the action `POST` requests.\n\n### Route conflicts\n\nBecause prerendering writes to the filesystem, it isn't possible to have two endpoints that would cause a directory and a file to have the same name. For example, `src/routes/foo/+server.js` and `src/routes/foo/bar/+server.js` would try to create `foo` and `foo/bar`, which is impossible.\n\nFor that reason among others, it's recommended that you always include a file extension — `src/routes/foo.json/+server.js` and `src/routes/foo/bar.json/+server.js` would result in `foo.json` and `foo/bar.json` files living harmoniously side-by-side.\n\nFor _pages_, we skirt around this problem by writing `foo/index.html` instead of `foo`.\n\n### Troubleshooting\n\nIf you encounter an error like 'The following routes were marked as prerenderable, but were not prerendered' it's because the route in question (or a parent layout, if it's a page) has `export const prerender = true` but the page wasn't reached by the prerendering crawler and thus wasn't prerendered.\n\nSince these routes cannot be dynamically server-rendered, this will cause errors when people try to access the route in question. There are a few ways to fix it:\n\n* Ensure that SvelteKit can find the route by following links from [`config.kit.prerender.entries`](configuration#prerender) or the [`entries`](#entries) page option. Add links to dynamic routes (i.e. pages with `[parameters]` ) to this option if they are not found through crawling the other entry points, else they are not prerendered because SvelteKit doesn't know what value the parameters should have. Pages not marked as prerenderable will be ignored and their links to other pages will not be crawled, even if some of them would be prerenderable.\n* Ensure that SvelteKit can find the route by discovering a link to it from one of your other prerendered pages that have server-side rendering enabled.\n* Change `export const prerender = true` to `export const prerender = 'auto'`. Routes with `'auto'` can be dynamically server rendered\n\n## entries\n\nSvelteKit will discover pages to prerender automatically, by starting at _entry points_ and crawling them. By default, all your non-dynamic routes are considered entry points — for example, if you have these routes...\n\n```sh\n/             # non-dynamic\n/blog         # non-dynamic\n/blog/[slug]  # dynamic, because of `[slug]`\n```\n\n...SvelteKit will prerender `/` and `/blog`, and in the process discover links like `<a href=\"/blog/hello-world\">` which give it new pages to prerender.\n\nMost of the time, that's enough. In some situations, links to pages like `/blog/hello-world` might not exist (or might not exist on prerendered pages), in which case we need to tell SvelteKit about their existence.\n\nThis can be done with [`config.kit.prerender.entries`](configuration#prerender), or by exporting an `entries` function from a `+page.js`, a `+page.server.js` or a `+server.js` belonging to a dynamic route:\n\n```js\n/// file: src/routes/blog/[slug]/+page.server.js\n/** @type {import('./$types').EntryGenerator} */\nexport function entries() {\n\treturn [\n\t\t{ slug: 'hello-world' },\n\t\t{ slug: 'another-blog-post' }\n\t];\n}\n\nexport const prerender = true;\n```\n\n`entries` can be an `async` function, allowing you to (for example) retrieve a list of posts from a CMS or database, in the example above.\n\n## ssr\n\nNormally, SvelteKit renders your page on the server first and sends that HTML to the client where it's [hydrated](glossary#Hydration). If you set `ssr` to `false`, it renders an empty 'shell' page instead. This is useful if your page is unable to be rendered on the server (because you use browser-only globals like `document` for example), but in most situations it's not recommended ([see appendix](glossary#SSR)).\n\n```js\n/// file: +page.js\nexport const ssr = false;\n// If both `ssr` and `csr` are `false`, nothing will be rendered!\n```\n\nIf you add `export const ssr = false` to your root `+layout.js`, your entire app will only be rendered on the client — which essentially means you turn your app into an SPA.\n\n> [!NOTE] If all your page options are boolean or string literal values, SvelteKit will evaluate them statically. If not, it will import your `+page.js` or `+layout.js` file on the server (both at build time, and at runtime if your app isn't fully static) so it can evaluate the options. In the second case, browser-only code must not run when the module is loaded. In practice, this means you should import browser-only code in your `+page.svelte` or `+layout.svelte` file instead.\n\n## csr\n\nOrdinarily, SvelteKit [hydrates](glossary#Hydration) your server-rendered HTML into an interactive client-side-rendered (CSR) page. Some pages don't require JavaScript at all — many blog posts and 'about' pages fall into this category. In these cases you can disable CSR:\n\n```js\n/// file: +page.js\nexport const csr = false;\n// If both `csr` and `ssr` are `false`, nothing will be rendered!\n```\n\nDisabling CSR does not ship any JavaScript to the client. This means:\n\n* The webpage should work with HTML and CSS only.\n* `<script>` tags inside all Svelte components are removed.\n* `<form>` elements cannot be [progressively enhanced](form-actions#Progressive-enhancement).\n* Links are handled by the browser with a full-page navigation.\n* Hot Module Replacement (HMR) will be disabled.\n\nYou can enable `csr` during development (for example to take advantage of HMR) like so:\n\n```js\n/// file: +page.js\nimport { dev } from '$app/environment';\n\nexport const csr = dev;\n```\n\n## trailingSlash\n\nBy default, SvelteKit will remove trailing slashes from URLs — if you visit `/about/`, it will respond with a redirect to `/about`. You can change this behaviour with the `trailingSlash` option, which can be one of `'never'` (the default), `'always'`, or `'ignore'`.\n\nAs with other page options, you can export this value from a `+layout.js` or a `+layout.server.js` and it will apply to all child pages. You can also export the configuration from `+server.js` files.\n\n```js\n/// file: src/routes/+layout.js\nexport const trailingSlash = 'always';\n```\n\nThis option also affects [prerendering](#prerender). If `trailingSlash` is `always`, a route like `/about` will result in an `about/index.html` file, otherwise it will create `about.html`, mirroring static webserver conventions.\n\n> [!NOTE] Ignoring trailing slashes is not recommended — the semantics of relative paths differ between the two cases (`./y` from `/x` is `/y`, but from `/x/` is `/x/y`), and `/x` and `/x/` are treated as separate URLs which is harmful to SEO.\n\n## config\n\nWith the concept of [adapters](adapters), SvelteKit is able to run on a variety of platforms. Each of these might have specific configuration to further tweak the deployment — for example on Vercel you could choose to deploy some parts of your app on the edge and others on serverless environments.\n\n`config` is an object with key-value pairs at the top level. Beyond that, the concrete shape is dependent on the adapter you're using. Every adapter should provide a `Config` interface to import for type safety. Consult the documentation of your adapter for more information.\n\n```js\n// @filename: ambient.d.ts\ndeclare module 'some-adapter' {\n\texport interface Config { runtime: string }\n}\n\n// @filename: index.js\n// ---cut---\n/// file: src/routes/+page.js\n/** @type {import('some-adapter').Config} */\nexport const config = {\n\truntime: 'edge'\n};\n```\n\n`config` objects are merged at the top level (but _not_ deeper levels). This means you don't need to repeat all the values in a `+page.js` if you want to only override some of the values in the upper `+layout.js`. For example this layout configuration...\n\n```js\n/// file: src/routes/+layout.js\nexport const config = {\n\truntime: 'edge',\n\tregions: 'all',\n\tfoo: {\n\t\tbar: true\n\t}\n}\n```\n\n...is overridden by this page configuration...\n\n```js\n/// file: src/routes/+page.js\nexport const config = {\n\tregions: ['us1', 'us2'],\n\tfoo: {\n\t\tbaz: true\n\t}\n}\n```\n\n...which results in the config value `{ runtime: 'edge', regions: ['us1', 'us2'], foo: { baz: true } }` for that page.\n\n## Further reading\n\n- [Tutorial: Page options](/tutorial/kit/page-options)",
    "kit/state-management": "If you're used to building client-only apps, state management in an app that spans server and client might seem intimidating. This section provides tips for avoiding some common gotchas.\n\n## Avoid shared state on the server\n\nBrowsers are _stateful_ — state is stored in memory as the user interacts with the application. Servers, on the other hand, are _stateless_ — the content of the response is determined entirely by the content of the request.\n\nConceptually, that is. In reality, servers are often long-lived and shared by multiple users. For that reason it's important not to store data in shared variables. For example, consider this code:\n\n```js\n// @errors: 7034 7005\n/// file: +page.server.js\nlet user;\n\n/** @type {import('./$types').PageServerLoad} */\nexport function load() {\n\treturn { user };\n}\n\n/** @satisfies {import('./$types').Actions} */\nexport const actions = {\n\tdefault: async ({ request }) => {\n\t\tconst data = await request.formData();\n\n\t\t// NEVER DO THIS!\n\t\tuser = {\n\t\t\tname: data.get('name'),\n\t\t\tembarrassingSecret: data.get('secret')\n\t\t};\n\t}\n}\n```\n\nThe `user` variable is shared by everyone who connects to this server. If Alice submitted an embarrassing secret, and Bob visited the page after her, Bob would know Alice's secret. In addition, when Alice returns to the site later in the day, the server may have restarted, losing her data.\n\nInstead, you should _authenticate_ the user using [`cookies`](load#Cookies) and persist the data to a database.\n\n## No side-effects in load\n\nFor the same reason, your `load` functions should be _pure_ — no side-effects (except maybe the occasional `console.log(...)`). For example, you might be tempted to write to a store or global state inside a `load` function so that you can use the value in your components:\n\n```js\n/// file: +page.js\n// @filename: ambient.d.ts\ndeclare module '$lib/user' {\n\texport const user: { set: (value: any) => void };\n}\n\n// @filename: index.js\n// ---cut---\nimport { user } from '$lib/user';\n\n/** @type {import('./$types').PageLoad} */\nexport async function load({ fetch }) {\n\tconst response = await fetch('/api/user');\n\n\t// NEVER DO THIS!\n\tuser.set(await response.json());\n}\n```\n\nAs with the previous example, this puts one user's information in a place that is shared by _all_ users. Instead, just return the data...\n\n```js\n/// file: +page.js\n/** @type {import('./$types').PageServerLoad} */\nexport async function load({ fetch }) {\n\tconst response = await fetch('/api/user');\n\n+++\treturn {\n\t\tuser: await response.json()\n\t};+++\n}\n```\n\n...and pass it around to the components that need it, or use [`page.data`](load#page.data).\n\nIf you're not using SSR, then there's no risk of accidentally exposing one user's data to another. But you should still avoid side-effects in your `load` functions — your application will be much easier to reason about without them.\n\n## Using state and stores with context\n\nYou might wonder how we're able to use `page.data` and other [app state]($app-state) (or [app stores]($app-stores)) if we can't use global state. The answer is that app state and app stores on the server use Svelte's [context API](/tutorial/svelte/context-api) — the state (or store) is attached to the component tree with `setContext`, and when you subscribe you retrieve it with `getContext`. We can do the same thing with our own state:\n\n```svelte\n<!--- file: src/routes/+layout.svelte --->\n<script>\n\timport { setContext } from 'svelte';\n\n\t/** @type {import('./$types').LayoutProps} */\n\tlet { data } = $props();\n\n\t// Pass a function referencing our state\n\t// to the context for child components to access\n\tsetContext('user', () => data.user);\n</script>\n```\n\n```svelte\n<!--- file: src/routes/user/+page.svelte --->\n<script>\n\timport { getContext } from 'svelte';\n\n\t// Retrieve user store from context\n\tconst user = getContext('user');\n</script>\n\n<p>Welcome {user().name}</p>\n```\n\n> [!NOTE] We're passing a function into `setContext` to keep reactivity across boundaries. Read more about it [here](/docs/svelte/$state#Passing-state-into-functions)\n\n> [!LEGACY]\n> You also use stores from `svelte/store` for this, but when using Svelte 5 it is recommended to make use of universal reactivity instead.\n\nUpdating the value of context-based state in deeper-level pages or components while the page is being rendered via SSR will not affect the value in the parent component because it has already been rendered by the time the state value is updated. In contrast, on the client (when CSR is enabled, which is the default) the value will be propagated and components, pages, and layouts higher in the hierarchy will react to the new value. Therefore, to avoid values 'flashing' during state updates during hydration, it is generally recommended to pass state down into components rather than up.\n\nIf you're not using SSR (and can guarantee that you won't need to use SSR in future) then you can safely keep state in a shared module, without using the context API.\n\n## Component and page state is preserved\n\nWhen you navigate around your application, SvelteKit reuses existing layout and page components. For example, if you have a route like this...\n\n```svelte\n<!--- file: src/routes/blog/[slug]/+page.svelte --->\n<script>\n\t/** @type {import('./$types').PageProps} */\n\tlet { data } = $props();\n\n\t// THIS CODE IS BUGGY!\n\tconst wordCount = data.content.split(' ').length;\n\tconst estimatedReadingTime = wordCount / 250;\n</script>\n\n<header>\n\t<h1>{data.title}</h1>\n\t<p>Reading time: {Math.round(estimatedReadingTime)} minutes</p>\n</header>\n\n<div>{@html data.content}</div>\n```\n\n...then navigating from `/blog/my-short-post` to `/blog/my-long-post` won't cause the layout, page and any other components within to be destroyed and recreated. Instead the `data` prop (and by extension `data.title` and `data.content`) will update (as it would with any other Svelte component) and, because the code isn't rerunning, lifecycle methods like `onMount` and `onDestroy` won't rerun and `estimatedReadingTime` won't be recalculated.\n\nInstead, we need to make the value [_reactive_](/tutorial/svelte/state):\n\n```svelte\n/// file: src/routes/blog/[slug]/+page.svelte\n<script>\n\t/** @type {import('./$types').PageProps} */\n\tlet { data } = $props();\n\n+++\tlet wordCount = $derived(data.content.split(' ').length);\n\tlet estimatedReadingTime = $derived(wordCount / 250);+++\n</script>\n```\n\n> [!NOTE] If your code in `onMount` and `onDestroy` has to run again after navigation you can use [afterNavigate]($app-navigation#afterNavigate) and [beforeNavigate]($app-navigation#beforeNavigate) respectively.\n\nReusing components like this means that things like sidebar scroll state are preserved, and you can easily animate between changing values. In the case that you do need to completely destroy and remount a component on navigation, you can use this pattern:\n\n```svelte\n<script>\n\timport { page } from '$app/state';\n</script>\n\n{#key page.url.pathname}\n\t<BlogPost title={data.title} content={data.title} />\n{/key}\n```\n\n## Storing state in the URL\n\nIf you have state that should survive a reload and/or affect SSR, such as filters or sorting rules on a table, URL search parameters (like `?sort=price&order=ascending`) are a good place to put them. You can put them in `<a href=\"...\">` or `<form action=\"...\">` attributes, or set them programmatically via `goto('?key=value')`. They can be accessed inside `load` functions via the `url` parameter, and inside components via `page.url.searchParams`.\n\n## Storing ephemeral state in snapshots\n\nSome UI state, such as 'is the accordion open?', is disposable — if the user navigates away or refreshes the page, it doesn't matter if the state is lost. In some cases, you _do_ want the data to persist if the user navigates to a different page and comes back, but storing the state in the URL or in a database would be overkill. For this, SvelteKit provides [snapshots](snapshots), which let you associate component state with a history entry.",
    "kit/remote-functions": "<blockquote class=\"since note\">\n\t<p>Available since 2.27</p>\n</blockquote>\n\nRemote functions are a tool for type-safe communication between client and server. They can be _called_ anywhere in your app, but always _run_ on the server, meaning they can safely access [server-only modules](server-only-modules) containing things like environment variables and database clients.\n\nCombined with Svelte's experimental support for [`await`](/docs/svelte/await-expressions), it allows you to load and manipulate data directly inside your components.\n\nThis feature is currently experimental, meaning it is likely to contain bugs and is subject to change without notice. You must opt in by adding the `kit.experimental.remoteFunctions` option in your `svelte.config.js` and optionally, the `compilerOptions.experimental.async` option to use `await` in components:\n\n```js\n/// file: svelte.config.js\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\texperimental: {\n\t\t\t+++remoteFunctions: true+++\n\t\t}\n\t},\n\tcompilerOptions: {\n\t\texperimental: {\n\t\t\t+++async: true+++\n\t\t}\n\t}\n};\n\nexport default config;\n```\n\n## Overview\n\nRemote functions are exported from a `.remote.js` or `.remote.ts` file, and come in four flavours: `query`, `form`, `command` and `prerender`. On the client, the exported functions are transformed to `fetch` wrappers that invoke their counterparts on the server via a generated HTTP endpoint. Remote files must be placed in your `src` directory.\n\n## query\n\nThe `query` function allows you to read dynamic data from the server (for _static_ data, consider using [`prerender`](#prerender) instead):\n\n```js\n/// file: src/routes/blog/data.remote.js\n// @filename: ambient.d.ts\ndeclare module '$lib/server/database' {\n\texport function sql(strings: TemplateStringsArray, ...values: any[]): Promise<any[]>;\n}\n// @filename: index.js\n// ---cut---\nimport { query } from '$app/server';\nimport * as db from '$lib/server/database';\n\nexport const getPosts = query(async () => {\n\tconst posts = await db.sql`\n\t\tSELECT title, slug\n\t\tFROM post\n\t\tORDER BY published_at\n\t\tDESC\n\t`;\n\n\treturn posts;\n});\n```\n\n> [!NOTE] Throughout this page, you'll see imports from fictional modules like `$lib/server/database` and `$lib/server/auth`. These are purely for illustrative purposes — you can use whatever database client and auth setup you like.\n>\n> The `db.sql` function above is a [tagged template function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates) that escapes any interpolated values.\n\nThe query returned from `getPosts` works as a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) that resolves to `posts`:\n\n```svelte\n<!--- file: src/routes/blog/+page.svelte --->\n<script>\n\timport { getPosts } from './data.remote';\n</script>\n\n<h1>Recent posts</h1>\n\n<ul>\n\t{#each await getPosts() as { title, slug }}\n\t\t<li><a href=\"/blog/{slug}\">{title}</a></li>\n\t{/each}\n</ul>\n```\n\nUntil the promise resolves — and if it errors — the nearest [`<svelte:boundary>`](../svelte/svelte-boundary) will be invoked.\n\nWhile using `await` is recommended, as an alternative the query also has `loading`, `error` and `current` properties:\n\n```svelte\n<!--- file: src/routes/blog/+page.svelte --->\n<script>\n\timport { getPosts } from './data.remote';\n\n\tconst query = getPosts();\n</script>\n\n<h1>Recent posts</h1>\n\n{#if query.error}\n\t<p>oops!</p>\n{:else if query.loading}\n\t<p>loading...</p>\n{:else}\n\t<ul>\n\t\t{#each query.current as { title, slug }}\n\t\t\t<li><a href=\"/blog/{slug}\">{title}</a></li>\n\t\t{/each}\n\t</ul>\n{/if}\n```\n\n> [!NOTE] For the rest of this document, we'll use the `await` form.\n\n### Query arguments\n\nQuery functions can accept an argument, such as the `slug` of an individual post:\n\n```svelte\n<!--- file: src/routes/blog/[slug]/+page.svelte --->\n<script>\n\timport { getPost } from '../data.remote';\n\n\tlet { params } = $props();\n\n\tconst post = $derived(await getPost(params.slug));\n</script>\n\n<h1>{post.title}</h1>\n<div>{@html post.content}</div>\n```\n\nSince `getPost` exposes an HTTP endpoint, it's important to validate this argument to be sure that it's the correct type. For this, we can use any [Standard Schema](https://standardschema.dev/) validation library such as [Zod](https://zod.dev/) or [Valibot](https://valibot.dev/):\n\n```js\n/// file: src/routes/blog/data.remote.js\n// @filename: ambient.d.ts\ndeclare module '$lib/server/database' {\n\texport function sql(strings: TemplateStringsArray, ...values: any[]): Promise<any[]>;\n}\n// @filename: index.js\n// ---cut---\nimport * as v from 'valibot';\nimport { error } from '@sveltejs/kit';\nimport { query } from '$app/server';\nimport * as db from '$lib/server/database';\n\nexport const getPosts = query(async () => { /* ... */ });\n\nexport const getPost = query(v.string(), async (slug) => {\n\tconst [post] = await db.sql`\n\t\tSELECT * FROM post\n\t\tWHERE slug = ${slug}\n\t`;\n\n\tif (!post) error(404, 'Not found');\n\treturn post;\n});\n```\n\nBoth the argument and the return value are serialized with [devalue](https://github.com/sveltejs/devalue), which handles types like `Date` and `Map` (and custom types defined in your [transport hook](hooks#Universal-hooks-transport)) in addition to JSON.\n\n### Refreshing queries\n\nAny query can be re-fetched via its `refresh` method, which retrieves the latest value from the server:\n\n```svelte\n<button onclick={() => getPosts().refresh()}>\n\tCheck for new posts\n</button>\n```\n\n> [!NOTE] Queries are cached while they're on the page, meaning `getPosts() === getPosts()`. This means you don't need a reference like `const posts = getPosts()` in order to update the query.\n\n## query.batch\n\n`query.batch` works like `query` except that it batches requests that happen within the same macrotask. This solves the so-called n+1 problem: rather than each query resulting in a separate database call (for example), simultaneous queries are grouped together.\n\nOn the server, the callback receives an array of the arguments the function was called with. It must return a function of the form `(input: Input, index: number) => Output`. SvelteKit will then call this with each of the input arguments to resolve the individual calls with their results.\n\n```js\n/// file: weather.remote.js\n// @filename: ambient.d.ts\ndeclare module '$lib/server/database' {\n\texport function sql(strings: TemplateStringsArray, ...values: any[]): Promise<any[]>;\n}\n// @filename: index.js\n// ---cut---\nimport * as v from 'valibot';\nimport { query } from '$app/server';\nimport * as db from '$lib/server/database';\n\nexport const getWeather = query.batch(v.string(), async (cities) => {\n\tconst weather = await db.sql`\n\t\tSELECT * FROM weather\n\t\tWHERE city = ANY(${cities})\n\t`;\n\tconst lookup = new Map(weather.map(w => [w.city, w]));\n\n\treturn (city) => lookup.get(city);\n});\n```\n\n```svelte\n<!--- file: Weather.svelte --->\n<script>\n\timport CityWeather from './CityWeather.svelte';\n\timport { getWeather } from './weather.remote.js';\n\n\tlet { cities } = $props();\n\tlet limit = $state(5);\n</script>\n\n<h2>Weather</h2>\n\n{#each cities.slice(0, limit) as city}\n\t<h3>{city.name}</h3>\n\t<CityWeather weather={await getWeather(city.id)} />\n{/each}\n\n{#if cities.length > limit}\n\t<button onclick={() => limit += 5}>\n\t\tLoad more\n\t</button>\n{/if}\n```\n\n## form\n\nThe `form` function makes it easy to write data to the server. It takes a callback that receives `data` constructed from the submitted [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData)...\n\n```ts\n/// file: src/routes/blog/data.remote.js\n// @filename: ambient.d.ts\ndeclare module '$lib/server/database' {\n\texport function sql(strings: TemplateStringsArray, ...values: any[]): Promise<any[]>;\n}\n\ndeclare module '$lib/server/auth' {\n\tinterface User {\n\t\tname: string;\n\t}\n\n\t/**\n\t * Gets a user's info from their cookies, using `getRequestEvent`\n\t */\n\texport function getUser(): Promise<User | null>;\n}\n// @filename: index.js\n// ---cut---\nimport * as v from 'valibot';\nimport { error, redirect } from '@sveltejs/kit';\nimport { query, form } from '$app/server';\nimport * as db from '$lib/server/database';\nimport * as auth from '$lib/server/auth';\n\nexport const getPosts = query(async () => { /* ... */ });\n\nexport const getPost = query(v.string(), async (slug) => { /* ... */ });\n\nexport const createPost = form(\n\tv.object({\n\t\ttitle: v.pipe(v.string(), v.nonEmpty()),\n\t\tcontent:v.pipe(v.string(), v.nonEmpty())\n\t}),\n\tasync ({ title, content }) => {\n\t\t// Check the user is logged in\n\t\tconst user = await auth.getUser();\n\t\tif (!user) error(401, 'Unauthorized');\n\n\t\tconst slug = title.toLowerCase().replace(/ /g, '-');\n\n\t\t// Insert into the database\n\t\tawait db.sql`\n\t\t\tINSERT INTO post (slug, title, content)\n\t\t\tVALUES (${slug}, ${title}, ${content})\n\t\t`;\n\n\t\t// Redirect to the newly created page\n\t\tredirect(303, `/blog/${slug}`);\n\t}\n);\n```\n\n...and returns an object that can be spread onto a `<form>` element. The callback is called whenever the form is submitted.\n\n```svelte\n<!--- file: src/routes/blog/new/+page.svelte --->\n<script>\n\timport { createPost } from '../data.remote';\n</script>\n\n<h1>Create a new post</h1>\n\n<form {...createPost}>\n\t<!-- form content goes here -->\n\n\t<button>Publish!</button>\n</form>\n```\n\nThe form object contains `method` and `action` properties that allow it to work without JavaScript (i.e. it submits data and reloads the page). It also has an [attachment](/docs/svelte/@attach) that progressively enhances the form when JavaScript is available, submitting data *without* reloading the entire page.\n\nAs with `query`, if the callback uses the submitted `data`, it should be [validated](#query-Query-arguments) by passing a [Standard Schema](https://standardschema.dev) as the first argument to `form`.\n\n### Fields\n\nA form is composed of a set of _fields_, which are defined by the schema. In the case of `createPost`, we have two fields, `title` and `content`, which are both strings. To get the attributes for a field, call its `.as(...)` method, specifying which [input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input#input_types) to use:\n\n```svelte\n<form {...createPost}>\n\t<label>\n\t\t<h2>Title</h2>\n\t\t+++<input {...createPost.fields.title.as('text')} />+++\n\t</label>\n\n\t<label>\n\t\t<h2>Write your post</h2>\n\t\t+++<textarea {...createPost.fields.content.as('text')}></textarea>+++\n\t</label>\n\n\t<button>Publish!</button>\n</form>\n```\n\nThese attributes allow SvelteKit to set the correct input type, set a `name` that is used to construct the `data` passed to the handler, populate the `value` of the form (for example following a failed submission, to save the user having to re-enter everything), and set the [`aria-invalid`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Attributes/aria-invalid) state.\n\nFields can be nested in objects and arrays, and their values can be strings, numbers, booleans or `File` objects. For example, if your schema looked like this...\n\n```js\n/// file: data.remote.js\nimport * as v from 'valibot';\nimport { form } from '$app/server';\n// ---cut---\nconst datingProfile = v.object({\n\tname: v.string(),\n\tphoto: v.file(),\n\tinfo: v.object({\n\t\theight: v.number(),\n\t\tlikesDogs: v.optional(v.boolean(), false)\n\t}),\n\tattributes: v.array(v.string())\n});\n\nexport const createProfile = form(datingProfile, (data) => { /* ... */ });\n```\n\n...your form could look like this:\n\n```svelte\n<script>\n\timport { createProfile } from './data.remote';\n\n\tconst { name, photo, info, attributes } = createProfile.fields;\n</script>\n\n<form {...createProfile} enctype=\"multipart/form-data\">\n\t<label>\n\t\t<input {...name.as('text')} /> Name\n\t</label>\n\n\t<label>\n\t\t<input {...photo.as('file')} /> Photo\n\t</label>\n\n\t<label>\n\t\t<input {...info.height.as('number')} /> Height (cm)\n\t</label>\n\n\t<label>\n\t\t<input {...info.likesDogs.as('checkbox')} /> I like dogs\n\t</label>\n\n\t<h2>My best attributes</h2>\n\t<input {...attributes[0].as('text')} />\n\t<input {...attributes[1].as('text')} />\n\t<input {...attributes[2].as('text')} />\n\n\t<button>submit</button>\n</form>\n```\n\nBecause our form contains a `file` input, we've added an `enctype=\"multipart/form-data\"` attribute. The values for `info.height` and `info.likesDogs` are coerced to a number and a boolean respectively.\n\n> [!NOTE] If a `checkbox` input is unchecked, the value is not included in the [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object that SvelteKit constructs the data from. As such, we have to make the value optional in our schema. In Valibot that means using `v.optional(v.boolean(), false)` instead of just `v.boolean()`, whereas in Zod it would mean using `z.coerce.boolean<boolean>()`.\n\nIn the case of `radio` and `checkbox` inputs that all belong to the same field, the `value` must be specified as a second argument to `.as(...)`:\n\n```js\n/// file: data.remote.js\nimport * as v from 'valibot';\nimport { form } from '$app/server';\n// ---cut---\nexport const survey = form(\n\tv.object({\n\t\toperatingSystem: v.picklist(['windows', 'mac', 'linux']),\n\t\tlanguages: v.optional(v.array(v.picklist(['html', 'css', 'js'])), [])\n\t}),\n\t(data) => { /* ... */ }\n);\n```\n\n```svelte\n<form {...survey}>\n\t<h2>Which operating system do you use?</h2>\n\n\t{#each ['windows', 'mac', 'linux'] as os}\n\t\t<label>\n\t\t\t<input {...survey.fields.operatingSystem.as('radio', os)}>\n\t\t\t{os}\n\t\t</label>\n\t{/each}\n\n\t<h2>Which languages do you write code in?</h2>\n\n\t{#each ['html', 'css', 'js'] as language}\n\t\t<label>\n\t\t\t<input {...survey.fields.languages.as('checkbox', language)}>\n\t\t\t{language}\n\t\t</label>\n\t{/each}\n\n\t<button>submit</button>\n</form>\n```\n\nAlternatively, you could use `select` and `select multiple`:\n\n```svelte\n<form {...survey}>\n\t<h2>Which operating system do you use?</h2>\n\n\t<select {...survey.fields.operatingSystem.as('select')}>\n\t\t<option>windows</option>\n\t\t<option>mac</option>\n\t\t<option>linux</option>\n\t</select>\n\n\t<h2>Which languages do you write code in?</h2>\n\n\t<select {...survey.fields.languages.as('select multiple')}>\n\t\t<option>html</option>\n\t\t<option>css</option>\n\t\t<option>js</option>\n\t</select>\n\n\t<button>submit</button>\n</form>\n```\n\n> [!NOTE] As with unchecked `checkbox` inputs, if no selections are made then the data will be `undefined`. For this reason, the `languages` field uses `v.optional(v.array(...), [])` rather than just `v.array(...)`.\n\n### Programmatic validation\n\nIn addition to declarative schema validation, you can programmatically mark fields as invalid inside the form handler using the `invalid` function. This is useful for cases where you can't know if something is valid until you try to perform some action:\n\n```js\n/// file: src/routes/shop/data.remote.js\nimport * as v from 'valibot';\nimport { form } from '$app/server';\nimport * as db from '$lib/server/database';\n\nexport const buyHotcakes = form(\n\tv.object({\n\t\tqty: v.pipe(\n\t\t\tv.number(),\n\t\t\tv.minValue(1, 'you must buy at least one hotcake')\n\t\t)\n\t}),\n\tasync (data, invalid) => {\n\t\ttry {\n\t\t\tawait db.buy(data.qty);\n\t\t} catch (e) {\n\t\t\tif (e.code === 'OUT_OF_STOCK') {\n\t\t\t\tinvalid(\n\t\t\t\t\tinvalid.qty(`we don't have enough hotcakes`)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n);\n```\n\nThe `invalid` function works as both a function and a proxy:\n\n- Call `invalid(issue1, issue2, ...issueN)` to throw a validation error\n- If an issue is a `string`, it applies to the form as a whole (and will show up in `fields.allIssues()`)\n- Use `invalid.fieldName(message)` to create an issue for a specific field. Like `fields` this is type-safe and you can use regular property access syntax to create issues for deeply nested objects (e.g. `invalid.profile.email('Email already exists')` or `invalid.items[0].qty('Insufficient stock')`)\n\n### Validation\n\nIf the submitted data doesn't pass the schema, the callback will not run. Instead, each invalid field's `issues()` method will return an array of `{ message: string }` objects, and the `aria-invalid` attribute (returned from `as(...)`) will be set to `true`:\n\n```svelte\n<form {...createPost}>\n\t<label>\n\t\t<h2>Title</h2>\n\n+++\t\t{#each createPost.fields.title.issues() as issue}\n\t\t\t<p class=\"issue\">{issue.message}</p>\n\t\t{/each}+++\n\n\t\t<input {...createPost.fields.title.as('text')} />\n\t</label>\n\n\t<label>\n\t\t<h2>Write your post</h2>\n\n+++\t\t{#each createPost.fields.content.issues() as issue}\n\t\t\t<p class=\"issue\">{issue.message}</p>\n\t\t{/each}+++\n\n\t\t<textarea {...createPost.fields.content.as('text')}></textarea>\n\t</label>\n\n\t<button>Publish!</button>\n</form>\n```\n\nYou don't need to wait until the form is submitted to validate the data — you can call `validate()` programmatically, for example in an `oninput` callback (which will validate the data on every keystroke) or an `onchange` callback:\n\n```svelte\n<form {...createPost} oninput={() => createPost.validate()}>\n\t<!-- -->\n</form>\n```\n\nBy default, issues will be ignored if they belong to form controls that haven't yet been interacted with. To validate _all_ inputs, call `validate({ includeUntouched: true })`.\n\nFor client-side validation, you can specify a _preflight_ schema which will populate `issues()` and prevent data being sent to the server if the data doesn't validate:\n\n```svelte\n<script>\n\timport * as v from 'valibot';\n\timport { createPost } from '../data.remote';\n\n\tconst schema = v.object({\n\t\ttitle: v.pipe(v.string(), v.nonEmpty()),\n\t\tcontent: v.pipe(v.string(), v.nonEmpty())\n\t});\n</script>\n\n<h1>Create a new post</h1>\n\n<form {...+++createPost.preflight(schema)+++}>\n\t<!-- -->\n</form>\n```\n\n> [!NOTE] The preflight schema can be the same object as your server-side schema, if appropriate, though it won't be able to do server-side checks like 'this value already exists in the database'. Note that you cannot export a schema from a `.remote.ts` or `.remote.js` file, so the schema must either be exported from a shared module, or from a `<script module>` block in the component containing the `<form>`.\n\nTo get a list of _all_ issues, rather than just those belonging to a single field, you can use the `fields.allIssues()` method:\n\n```svelte\n{#each createPost.fields.allIssues() as issue}\n\t<p>{issue.message}</p>\n{/each}\n```\n\n### Getting/setting inputs\n\nEach field has a `value()` method that reflects its current value. As the user interacts with the form, it is automatically updated:\n\n```svelte\n<form {...createPost}>\n\t<!-- -->\n</form>\n\n<div class=\"preview\">\n\t<h2>{createPost.fields.title.value()}</h2>\n\t<div>{@html render(createPost.fields.content.value())}</div>\n</div>\n```\n\nAlternatively, `createPost.fields.value()` would return a `{ title, content }` object.\n\nYou can update a field (or a collection of fields) via the `set(...)` method:\n\n```svelte\n<script>\n\timport { createPost } from '../data.remote';\n\n\t// this...\n\tcreatePost.fields.set({\n\t\ttitle: 'My new blog post',\n\t\tcontent: 'Lorem ipsum dolor sit amet...'\n\t});\n\n\t// ...is equivalent to this:\n\tcreatePost.fields.title.set('My new blog post');\n\tcreatePost.fields.content.set('Lorem ipsum dolor sit amet');\n</script>\n```\n\n### Handling sensitive data\n\nIn the case of a non-progressively-enhanced form submission (i.e. where JavaScript is unavailable, for whatever reason) `value()` is also populated if the submitted data is invalid, so that the user does not need to fill the entire form out from scratch.\n\nYou can prevent sensitive data (such as passwords and credit card numbers) from being sent back to the user by using a name with a leading underscore:\n\n```svelte\n<form {...register}>\n\t<label>\n\t\tUsername\n\t\t<input {...register.fields.username.as('text')} />\n\t</label>\n\n\t<label>\n\t\tPassword\n\t\t<input +++{...register.fields._password.as('password')}+++ />\n\t</label>\n\n\t<button>Sign up!</button>\n</form>\n```\n\nIn this example, if the data does not validate, only the first `<input>` will be populated when the page reloads.\n\n### Single-flight mutations\n\nBy default, all queries used on the page (along with any `load` functions) are automatically refreshed following a successful form submission. This ensures that everything is up-to-date, but it's also inefficient: many queries will be unchanged, and it requires a second trip to the server to get the updated data.\n\nInstead, we can specify which queries should be refreshed in response to a particular form submission. This is called a _single-flight mutation_, and there are two ways to achieve it. The first is to refresh the query on the server, inside the form handler:\n\n```js\nimport * as v from 'valibot';\nimport { error, redirect } from '@sveltejs/kit';\nimport { query, form } from '$app/server';\nconst slug = '';\nconst post = { id: '' };\n/** @type {any} */\nconst externalApi = '';\n// ---cut---\nexport const getPosts = query(async () => { /* ... */ });\n\nexport const getPost = query(v.string(), async (slug) => { /* ... */ });\n\nexport const createPost = form(\n\tv.object({/* ... */}),\n\tasync (data) => {\n\t\t// form logic goes here...\n\n\t\t// Refresh `getPosts()` on the server, and send\n\t\t// the data back with the result of `createPost`\n\t\t+++await getPosts().refresh();+++\n\n\t\t// Redirect to the newly created page\n\t\tredirect(303, `/blog/${slug}`);\n\t}\n);\n\nexport const updatePost = form(\n\tv.object({/* ... */}),\n\tasync (data) => {\n\t\t// form logic goes here...\n\t\tconst result = externalApi.update(post);\n\n\t\t// The API already gives us the updated post,\n\t\t// no need to refresh it, we can set it directly\n\t\t+++await getPost(post.id).set(result);+++\n\t}\n);\n```\n\nThe second is to drive the single-flight mutation from the client, which we'll see in the section on [`enhance`](#form-enhance).\n\n### Returns and redirects\n\nThe example above uses [`redirect(...)`](@sveltejs-kit#redirect), which sends the user to the newly created page. Alternatively, the callback could return data, in which case it would be available as `createPost.result`:\n\n```ts\n/// file: src/routes/blog/data.remote.js\n// @filename: ambient.d.ts\ndeclare module '$lib/server/database' {\n\texport function sql(strings: TemplateStringsArray, ...values: any[]): Promise<any[]>;\n}\n\ndeclare module '$lib/server/auth' {\n\tinterface User {\n\t\tname: string;\n\t}\n\n\t/**\n\t * Gets a user's info from their cookies, using `getRequestEvent`\n\t */\n\texport function getUser(): Promise<User | null>;\n}\n// @filename: index.js\nimport * as v from 'valibot';\nimport { error, redirect } from '@sveltejs/kit';\nimport { query, form } from '$app/server';\nimport * as db from '$lib/server/database';\nimport * as auth from '$lib/server/auth';\n\nexport const getPosts = query(async () => { /* ... */ });\n\nexport const getPost = query(v.string(), async (slug) => { /* ... */ });\n\n// ---cut---\nexport const createPost = form(\n\tv.object({/* ... */}),\n\tasync (data) => {\n\t\t// ...\n\n\t\treturn { success: true };\n\t}\n);\n```\n\n```svelte\n<!--- file: src/routes/blog/new/+page.svelte --->\n<script>\n\timport { createPost } from '../data.remote';\n</script>\n\n<h1>Create a new post</h1>\n\n<form {...createPost}>\n\t<!-- -->\n</form>\n\n{#if createPost.result?.success}\n\t<p>Successfully published!</p>\n{/if}\n```\n\nThis value is _ephemeral_ — it will vanish if you resubmit, navigate away, or reload the page.\n\n> [!NOTE] The `result` value need not indicate success — it can also contain validation errors, along with any data that should repopulate the form on page reload.\n\nIf an error occurs during submission, the nearest `+error.svelte` page will be rendered.\n\n### enhance\n\nWe can customize what happens when the form is submitted with the `enhance` method:\n\n```svelte\n<!--- file: src/routes/blog/new/+page.svelte --->\n<script>\n\timport { createPost } from '../data.remote';\n\timport { showToast } from '$lib/toast';\n</script>\n\n<h1>Create a new post</h1>\n\n<form {...createPost.enhance(async ({ form, data, submit }) => {\n\ttry {\n\t\tawait submit();\n\t\tform.reset();\n\n\t\tshowToast('Successfully published!');\n\t} catch (error) {\n\t\tshowToast('Oh no! Something went wrong');\n\t}\n})}>\n\t<!-- -->\n</form>\n```\n\n> When using `enhance`, the `<form>` is not automatically reset — you must call `form.reset()` if you want to clear the inputs.\n\nThe callback receives the `form` element, the `data` it contains, and a `submit` function.\n\nTo enable client-driven [single-flight mutations](#form-Single-flight-mutations), use `submit().updates(...)`. For example, if the `getPosts()` query was used on this page, we could refresh it like so:\n\n```ts\nimport type { RemoteQuery, RemoteQueryOverride } from '@sveltejs/kit';\ninterface Post {}\ndeclare function submit(): Promise<any> & {\n\tupdates(...queries: Array<RemoteQuery<any> | RemoteQueryOverride>): Promise<any>;\n}\n\ndeclare function getPosts(): RemoteQuery<Post[]>;\n// ---cut---\nawait submit().updates(getPosts());\n```\n\nWe can also _override_ the current data while the submission is ongoing:\n\n```ts\nimport type { RemoteQuery, RemoteQueryOverride } from '@sveltejs/kit';\ninterface Post {}\ndeclare function submit(): Promise<any> & {\n\tupdates(...queries: Array<RemoteQuery<any> | RemoteQueryOverride>): Promise<any>;\n}\n\ndeclare function getPosts(): RemoteQuery<Post[]>;\ndeclare const newPost: Post;\n// ---cut---\nawait submit().updates(\n\tgetPosts().withOverride((posts) => [newPost, ...posts])\n);\n```\n\nThe override will be applied immediately, and released when the submission completes (or fails).\n\n### Multiple instances of a form\n\nSome forms may be repeated as part of a list. In this case you can create separate instances of a form function via `for(id)` to achieve isolation.\n\n```svelte\n<!--- file: src/routes/todos/+page.svelte --->\n<script>\n\timport { getTodos, modifyTodo } from '../data.remote';\n</script>\n\n<h1>Todos</h1>\n\n{#each await getTodos() as todo}\n\t{@const modify = modifyTodo.for(todo.id)}\n\t<form {...modify}>\n\t\t<!-- -->\n\t\t<button disabled={!!modify.pending}>save changes</button>\n\t</form>\n{/each}\n```\n\n### buttonProps\n\nBy default, submitting a form will send a request to the URL indicated by the `<form>` element's [`action`](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/form#attributes_for_form_submission) attribute, which in the case of a remote function is a property on the form object generated by SvelteKit.\n\nIt's possible for a `<button>` inside the `<form>` to send the request to a _different_ URL, using the [`formaction`](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/button#formaction) attribute. For example, you might have a single form that allows you to log in or register depending on which button was clicked.\n\nThis attribute exists on the `buttonProps` property of a form object:\n\n```svelte\n<!--- file: src/routes/login/+page.svelte --->\n<script>\n\timport { login, register } from '$lib/auth';\n</script>\n\n<form {...login}>\n\t<label>\n\t\tYour username\n\t\t<input {...login.fields.username.as('text')} />\n\t</label>\n\n\t<label>\n\t\tYour password\n\t\t<input {...login.fields._password.as('password')} />\n\t</label>\n\n\t<button>login</button>\n\t<button {...register.buttonProps}>register</button>\n</form>\n```\n\nLike the form object itself, `buttonProps` has an `enhance` method for customizing submission behaviour.\n\n## command\n\nThe `command` function, like `form`, allows you to write data to the server. Unlike `form`, it's not specific to an element and can be called from anywhere.\n\n> [!NOTE] Prefer `form` where possible, since it gracefully degrades if JavaScript is disabled or fails to load.\n\nAs with `query` and `form`, if the function accepts an argument, it should be [validated](#query-Query-arguments) by passing a [Standard Schema](https://standardschema.dev) as the first argument to `command`.\n\n```ts\n/// file: likes.remote.js\n// @filename: ambient.d.ts\ndeclare module '$lib/server/database' {\n\texport function sql(strings: TemplateStringsArray, ...values: any[]): Promise<any[]>;\n}\n// @filename: index.js\n// ---cut---\nimport * as v from 'valibot';\nimport { query, command } from '$app/server';\nimport * as db from '$lib/server/database';\n\nexport const getLikes = query(v.string(), async (id) => {\n\tconst [row] = await db.sql`\n\t\tSELECT likes\n\t\tFROM item\n\t\tWHERE id = ${id}\n\t`;\n\n\treturn row.likes;\n});\n\nexport const addLike = command(v.string(), async (id) => {\n\tawait db.sql`\n\t\tUPDATE item\n\t\tSET likes = likes + 1\n\t\tWHERE id = ${id}\n\t`;\n});\n```\n\nNow simply call `addLike`, from (for example) an event handler:\n\n```svelte\n<!--- file: +page.svelte --->\n<script>\n\timport { getLikes, addLike } from './likes.remote';\n\timport { showToast } from '$lib/toast';\n\n\tlet { item } = $props();\n</script>\n\n<button\n\tonclick={async () => {\n\t\ttry {\n\t\t\tawait addLike(item.id);\n\t\t} catch (error) {\n\t\t\tshowToast('Something went wrong!');\n\t\t}\n\t}}\n>\n\tadd like\n</button>\n\n<p>likes: {await getLikes(item.id)}</p>\n```\n\n> [!NOTE] Commands cannot be called during render.\n\n### Updating queries\n\nTo update `getLikes(item.id)`, or any other query, we need to tell SvelteKit _which_ queries need to be refreshed (unlike `form`, which by default invalidates everything, to approximate the behaviour of a native form submission).\n\nWe either do that inside the command itself...\n\n```js\n/// file: likes.remote.js\n// @filename: ambient.d.ts\ndeclare module '$lib/server/database' {\n\texport function sql(strings: TemplateStringsArray, ...values: any[]): Promise<any[]>;\n}\n// @filename: index.js\n// ---cut---\nimport * as v from 'valibot';\nimport { query, command } from '$app/server';\nimport * as db from '$lib/server/database';\n// ---cut---\nexport const getLikes = query(v.string(), async (id) => { /* ... */ });\n\nexport const addLike = command(v.string(), async (id) => {\n\tawait db.sql`\n\t\tUPDATE item\n\t\tSET likes = likes + 1\n\t\tWHERE id = ${id}\n\t`;\n\n\t+++getLikes(id).refresh();+++\n\t// Just like within form functions you can also do\n\t// getLikes(id).set(...)\n\t// in case you have the result already\n});\n```\n\n...or when we call it:\n\n```ts\nimport { RemoteCommand, RemoteQueryFunction } from '@sveltejs/kit';\n\ninterface Item { id: string }\n\ndeclare const addLike: RemoteCommand<string, void>;\ndeclare const getLikes: RemoteQueryFunction<string, number>;\ndeclare function showToast(message: string): void;\ndeclare const item: Item;\n// ---cut---\ntry {\n\tawait addLike(item.id).+++updates(getLikes(item.id))+++;\n} catch (error) {\n\tshowToast('Something went wrong!');\n}\n```\n\nAs before, we can use `withOverride` for optimistic updates:\n\n```ts\nimport { RemoteCommand, RemoteQueryFunction } from '@sveltejs/kit';\n\ninterface Item { id: string }\n\ndeclare const addLike: RemoteCommand<string, void>;\ndeclare const getLikes: RemoteQueryFunction<string, number>;\ndeclare function showToast(message: string): void;\ndeclare const item: Item;\n// ---cut---\ntry {\n\tawait addLike(item.id).updates(\n\t\tgetLikes(item.id).+++withOverride((n) => n + 1)+++\n\t);\n} catch (error) {\n\tshowToast('Something went wrong!');\n}\n```\n\n## prerender\n\nThe `prerender` function is similar to `query`, except that it will be invoked at build time to prerender the result. Use this for data that changes at most once per redeployment.\n\n```js\n/// file: src/routes/blog/data.remote.js\n// @filename: ambient.d.ts\ndeclare module '$lib/server/database' {\n\texport function sql(strings: TemplateStringsArray, ...values: any[]): Promise<any[]>;\n}\n// @filename: index.js\n// ---cut---\nimport { prerender } from '$app/server';\nimport * as db from '$lib/server/database';\n\nexport const getPosts = prerender(async () => {\n\tconst posts = await db.sql`\n\t\tSELECT title, slug\n\t\tFROM post\n\t\tORDER BY published_at\n\t\tDESC\n\t`;\n\n\treturn posts;\n});\n```\n\nYou can use `prerender` functions on pages that are otherwise dynamic, allowing for partial prerendering of your data. This results in very fast navigation, since prerendered data can live on a CDN along with your other static assets.\n\nIn the browser, prerendered data is saved using the [`Cache`](https://developer.mozilla.org/en-US/docs/Web/API/Cache) API. This cache survives page reloads, and will be cleared when the user first visits a new deployment of your app.\n\n> [!NOTE] When the entire page has `export const prerender = true`, you cannot use queries, as they are dynamic.\n\n### Prerender arguments\n\nAs with queries, prerender functions can accept an argument, which should be [validated](#query-Query-arguments) with a [Standard Schema](https://standardschema.dev/):\n\n```js\n/// file: src/routes/blog/data.remote.js\n// @filename: ambient.d.ts\ndeclare module '$lib/server/database' {\n\texport function sql(strings: TemplateStringsArray, ...values: any[]): Promise<any[]>;\n}\n// @filename: index.js\n// ---cut---\nimport * as v from 'valibot';\nimport { error } from '@sveltejs/kit';\nimport { prerender } from '$app/server';\nimport * as db from '$lib/server/database';\n\nexport const getPosts = prerender(async () => { /* ... */ });\n\nexport const getPost = prerender(v.string(), async (slug) => {\n\tconst [post] = await db.sql`\n\t\tSELECT * FROM post\n\t\tWHERE slug = ${slug}\n\t`;\n\n\tif (!post) error(404, 'Not found');\n\treturn post;\n});\n```\n\nAny calls to `getPost(...)` found by SvelteKit's crawler while [prerendering pages](page-options#prerender) will be saved automatically, but you can also specify which values it should be called with using the `inputs` option:\n\n```js\n/// file: src/routes/blog/data.remote.js\nimport * as v from 'valibot';\nimport { prerender } from '$app/server';\n// ---cut---\n\nexport const getPost = prerender(\n\tv.string(),\n\tasync (slug) => { /* ... */ },\n\t{\n\t\tinputs: () => [\n\t\t\t'first-post',\n\t\t\t'second-post',\n\t\t\t'third-post'\n\t\t]\n\t}\n);\n```\n\n> [!NOTE] Svelte does not yet support asynchronous server-side rendering, so it's likely that you're only calling remote functions from the browser, rather than during prerendering. Because of this, you will need to use `inputs`, for now. We're actively working on this roadblock.\n\nBy default, prerender functions are excluded from your server bundle, which means that you cannot call them with any arguments that were _not_ prerendered. You can set `dynamic: true` to change this behaviour:\n\n```js\n/// file: src/routes/blog/data.remote.js\nimport * as v from 'valibot';\nimport { prerender } from '$app/server';\n// ---cut---\n\nexport const getPost = prerender(\n\tv.string(),\n\tasync (slug) => { /* ... */ },\n\t{\n\t\t+++dynamic: true+++,\n\t\tinputs: () => [\n\t\t\t'first-post',\n\t\t\t'second-post',\n\t\t\t'third-post'\n\t\t]\n\t}\n);\n```\n\n## Handling validation errors\n\nAs long as _you're_ not passing invalid data to your remote functions, there are only two reasons why the argument passed to a `command`, `query` or `prerender` function would fail validation:\n\n- the function signature changed between deployments, and some users are currently on an older version of your app\n- someone is trying to attack your site by poking your exposed endpoints with bad data\n\nIn the second case, we don't want to give the attacker any help, so SvelteKit will generate a generic [400 Bad Request](https://http.dog/400) response. You can control the message by implementing the [`handleValidationError`](hooks#Server-hooks-handleValidationError) server hook, which, like [`handleError`](hooks#Shared-hooks-handleError), must return an [`App.Error`](errors#Type-safety) (which defaults to `{ message: string }`):\n\n```js\n/// file: src/hooks.server.ts\n/** @type {import('@sveltejs/kit').HandleValidationError} */\nexport function handleValidationError({ event, issues }) {\n\treturn {\n\t\tmessage: 'Nice try, hacker!'\n\t};\n}\n```\n\nIf you know what you're doing and want to opt out of validation, you can pass the string `'unchecked'` in place of a schema:\n\n```ts\n/// file: data.remote.ts\nimport { query } from '$app/server';\n\nexport const getStuff = query('unchecked', async ({ id }: { id: string }) => {\n\t// the shape might not actually be what TypeScript thinks\n\t// since bad actors might call this function with other arguments\n});\n```\n\n## Using `getRequestEvent`\n\nInside `query`, `form` and `command` you can use [`getRequestEvent`]($app-server#getRequestEvent) to get the current [`RequestEvent`](@sveltejs-kit#RequestEvent) object. This makes it easy to build abstractions for interacting with cookies, for example:\n\n```ts\n/// file: user.remote.ts\nimport { getRequestEvent, query } from '$app/server';\nimport { findUser } from '$lib/server/database';\n\nexport const getProfile = query(async () => {\n\tconst user = await getUser();\n\n\treturn {\n\t\tname: user.name,\n\t\tavatar: user.avatar\n\t};\n});\n\n// this query could be called from multiple places, but\n// the function will only run once per request\nconst getUser = query(() => {\n\tconst { cookies } = getRequestEvent();\n\n\treturn await findUser(cookies.get('session_id'));\n});\n```\n\nNote that some properties of `RequestEvent` are different inside remote functions:\n\n- you cannot set headers (other than writing cookies, and then only inside `form` and `command` functions)\n- `route`, `params` and `url` relate to the page the remote function was called from, _not_ the URL of the endpoint SvelteKit creates for the remote function. Queries are not re-run when the user navigates (unless the argument to the query changes as a result of navigation), and so you should be mindful of how you use these values. In particular, never use them to determine whether or not a user is authorized to access certain data.\n\n## Redirects\n\nInside `query`, `form` and `prerender` functions it is possible to use the [`redirect(...)`](@sveltejs-kit#redirect) function. It is *not* possible inside `command` functions, as you should avoid redirecting here. (If you absolutely have to, you can return a `{ redirect: location }` object and deal with it in the client.)",
    "kit/building-your-app": "Building a SvelteKit app happens in two stages, which both happen when you run `vite build` (usually via `npm run build`).\n\nFirstly, Vite creates an optimized production build of your server code, your browser code, and your service worker (if you have one). [Prerendering](page-options#prerender) is executed at this stage, if appropriate.\n\nSecondly, an _adapter_ takes this production build and tunes it for your target environment — more on this on the following pages.\n\n## During the build\n\nSvelteKit will load your `+page/layout(.server).js` files (and all files they import) for analysis during the build. Any code that should _not_ be executed at this stage must check that `building` from [`$app/environment`]($app-environment) is `false`:\n\n```js\n+++import { building } from '$app/environment';+++\nimport { setupMyDatabase } from '$lib/server/database';\n\n+++if (!building) {+++\n\tsetupMyDatabase();\n+++}+++\n\nexport function load() {\n\t// ...\n}\n```\n\n## Preview your app\n\nAfter building, you can view your production build locally with `vite preview` (via `npm run preview`). Note that this will run the app in Node, and so is not a perfect reproduction of your deployed app — adapter-specific adjustments like the [`platform` object](adapters#Platform-specific-context) do not apply to previews.",
    "kit/adapters": "Before you can deploy your SvelteKit app, you need to _adapt_ it for your deployment target. Adapters are small plugins that take the built app as input and generate output for deployment.\n\nOfficial adapters exist for a variety of platforms — these are documented on the following pages:\n\n- [`@sveltejs/adapter-cloudflare`](adapter-cloudflare) for Cloudflare Workers and Cloudflare Pages\n- [`@sveltejs/adapter-netlify`](adapter-netlify) for Netlify\n- [`@sveltejs/adapter-node`](adapter-node) for Node servers\n- [`@sveltejs/adapter-static`](adapter-static) for static site generation (SSG)\n- [`@sveltejs/adapter-vercel`](adapter-vercel) for Vercel\n\nAdditional [community-provided adapters](/packages#sveltekit-adapters) exist for other platforms.\n\n## Using adapters\n\nYour adapter is specified in `svelte.config.js`:\n\n```js\n/// file: svelte.config.js\n// @filename: ambient.d.ts\ndeclare module 'svelte-adapter-foo' {\n\tconst adapter: (opts: any) => import('@sveltejs/kit').Adapter;\n\texport default adapter;\n}\n\n// @filename: index.js\n// ---cut---\nimport adapter from 'svelte-adapter-foo';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\t// adapter options go here\n\t\t})\n\t}\n};\n\nexport default config;\n```\n\n## Platform-specific context\n\nSome adapters may have access to additional information about the request. For example, Cloudflare Workers can access an `env` object containing KV namespaces etc. This can be passed to the `RequestEvent` used in [hooks](hooks) and [server routes](routing#server) as the `platform` property — consult each adapter's documentation to learn more.",
    "kit/adapter-auto": "When you create a new SvelteKit project with `npx sv create`, it installs [`adapter-auto`](https://github.com/sveltejs/kit/tree/main/packages/adapter-auto) by default. This adapter automatically installs and uses the correct adapter for supported environments when you deploy:\n\n- [`@sveltejs/adapter-cloudflare`](adapter-cloudflare) for [Cloudflare Pages](https://developers.cloudflare.com/pages/)\n- [`@sveltejs/adapter-netlify`](adapter-netlify) for [Netlify](https://netlify.com/)\n- [`@sveltejs/adapter-vercel`](adapter-vercel) for [Vercel](https://vercel.com/)\n- [`svelte-adapter-azure-swa`](https://github.com/geoffrich/svelte-adapter-azure-swa) for [Azure Static Web Apps](https://docs.microsoft.com/en-us/azure/static-web-apps/)\n- [`svelte-kit-sst`](https://github.com/sst/v2/tree/master/packages/svelte-kit-sst) for [AWS via SST](https://sst.dev/docs/start/aws/svelte)\n- [`@sveltejs/adapter-node`](adapter-node) for [Google Cloud Run](https://cloud.google.com/run)\n\nIt's recommended to install the appropriate adapter to your `devDependencies` once you've settled on a target environment, since this will add the adapter to your lockfile and slightly improve install times on CI.\n\n## Environment-specific configuration\n\nTo add configuration options, such as `{ edge: true }` in [`adapter-vercel`](adapter-vercel) and [`adapter-netlify`](adapter-netlify), you must install the underlying adapter — `adapter-auto` does not take any options.\n\n## Adding community adapters\n\nYou can add zero-config support for additional adapters by editing [adapters.js](https://github.com/sveltejs/kit/blob/main/packages/adapter-auto/adapters.js) and opening a pull request.",
    "kit/adapter-node": "To generate a standalone Node server, use [`adapter-node`](https://github.com/sveltejs/kit/tree/main/packages/adapter-node).\n\n## Usage\n\nInstall with `npm i -D @sveltejs/adapter-node`, then add the adapter to your `svelte.config.js`:\n\n```js\n// @errors: 2307\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-node';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter()\n\t}\n};\n\nexport default config;\n```\n\n## Deploying\n\nFirst, build your app with `npm run build`. This will create the production server in the output directory specified in the adapter options, defaulting to `build`.\n\nYou will need the output directory, the project's `package.json`, and the production dependencies in `node_modules` to run the application. Production dependencies can be generated by copying the `package.json` and `package-lock.json` and then running `npm ci --omit dev` (you can skip this step if your app doesn't have any dependencies). You can then start your app with this command:\n\n```sh\nnode build\n```\n\nDevelopment dependencies will be bundled into your app using [Rollup](https://rollupjs.org). To control whether a given package is bundled or externalised, place it in `devDependencies` or `dependencies` respectively in your `package.json`.\n\n### Compressing responses\n\nYou will typically want to compress responses coming from the server. If you're already deploying your server behind a reverse proxy for SSL or load balancing, it typically results in better performance to also handle compression at that layer since Node.js is single-threaded.\n\nHowever, if you're building a [custom server](#Custom-server) and do want to add a compression middleware there, note that we would recommend using [`@polka/compression`](https://www.npmjs.com/package/@polka/compression) since SvelteKit streams responses and the more popular `compression` package does not support streaming and may cause errors when used.\n\n## Environment variables\n\nIn `dev` and `preview`, SvelteKit will read environment variables from your `.env` file (or `.env.local`, or `.env.[mode]`, [as determined by Vite](https://vitejs.dev/guide/env-and-mode.html#env-files).)\n\nIn production, `.env` files are _not_ automatically loaded. To do so, install `dotenv` in your project...\n\n```sh\nnpm install dotenv\n```\n\n...and invoke it before running the built app:\n\n```sh\nnode +++-r dotenv/config+++ build\n```\n\nIf you use Node.js v20.6+, you can use the [`--env-file`](https://nodejs.org/en/learn/command-line/how-to-read-environment-variables-from-nodejs) flag instead:\n\n```sh\nnode +++--env-file=.env+++ build\n```\n\n### `PORT`, `HOST` and `SOCKET_PATH`\n\nBy default, the server will accept connections on `0.0.0.0` using port 3000. These can be customised with the `PORT` and `HOST` environment variables:\n\n```sh\nHOST=127.0.0.1 PORT=4000 node build\n```\n\nAlternatively, the server can be configured to accept connections on a specified socket path. When this is done using the `SOCKET_PATH` environment variable, the `HOST` and `PORT` environment variables will be disregarded.\n\n```sh\nSOCKET_PATH=/tmp/socket node build\n```\n\n### `ORIGIN`, `PROTOCOL_HEADER`, `HOST_HEADER`, and `PORT_HEADER`\n\nHTTP doesn't give SvelteKit a reliable way to know the URL that is currently being requested. The simplest way to tell SvelteKit where the app is being served is to set the `ORIGIN` environment variable:\n\n```sh\nORIGIN=https://my.site node build\n\n# or e.g. for local previewing and testing\nORIGIN=http://localhost:3000 node build\n```\n\nWith this, a request for the `/stuff` pathname will correctly resolve to `https://my.site/stuff`. Alternatively, you can specify headers that tell SvelteKit about the request protocol and host, from which it can construct the origin URL:\n\n```sh\nPROTOCOL_HEADER=x-forwarded-proto HOST_HEADER=x-forwarded-host node build\n```\n\n> [!NOTE] [`x-forwarded-proto`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Proto) and [`x-forwarded-host`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Host) are de facto standard headers that forward the original protocol and host if you're using a reverse proxy (think load balancers and CDNs). You should only set these variables if your server is behind a trusted reverse proxy; otherwise, it'd be possible for clients to spoof these headers.\n>\n> If you're hosting your proxy on a non-standard port and your reverse proxy supports `x-forwarded-port`, you can also set `PORT_HEADER=x-forwarded-port`.\n\nIf `adapter-node` can't correctly determine the URL of your deployment, you may experience this error when using [form actions](form-actions):\n\n> [!NOTE] Cross-site POST form submissions are forbidden\n\n### `ADDRESS_HEADER` and `XFF_DEPTH`\n\nThe [`RequestEvent`](@sveltejs-kit#RequestEvent) object passed to hooks and endpoints includes an `event.getClientAddress()` function that returns the client's IP address. By default this is the connecting `remoteAddress`. If your server is behind one or more proxies (such as a load balancer), this value will contain the innermost proxy's IP address rather than the client's, so we need to specify an `ADDRESS_HEADER` to read the address from:\n\n```sh\nADDRESS_HEADER=True-Client-IP node build\n```\n\n> [!NOTE] Headers can easily be spoofed. As with `PROTOCOL_HEADER` and `HOST_HEADER`, you should [know what you're doing](https://adam-p.ca/blog/2022/03/x-forwarded-for/) before setting these.\n\nIf the `ADDRESS_HEADER` is `X-Forwarded-For`, the header value will contain a comma-separated list of IP addresses. The `XFF_DEPTH` environment variable should specify how many trusted proxies sit in front of your server. E.g. if there are three trusted proxies, proxy 3 will forward the addresses of the original connection and the first two proxies:\n\n```\n<client address>, <proxy 1 address>, <proxy 2 address>\n```\n\nSome guides will tell you to read the left-most address, but this leaves you [vulnerable to spoofing](https://adam-p.ca/blog/2022/03/x-forwarded-for/):\n\n```\n<spoofed address>, <client address>, <proxy 1 address>, <proxy 2 address>\n```\n\nWe instead read from the _right_, accounting for the number of trusted proxies. In this case, we would use `XFF_DEPTH=3`.\n\n> [!NOTE] If you need to read the left-most address instead (and don't care about spoofing) — for example, to offer a geolocation service, where it's more important for the IP address to be _real_ than _trusted_, you can do so by inspecting the `x-forwarded-for` header within your app.\n\n### `BODY_SIZE_LIMIT`\n\nThe maximum request body size to accept in bytes including while streaming. The body size can also be specified with a unit suffix for kilobytes (`K`), megabytes (`M`), or gigabytes (`G`). For example, `512K` or `1M`. Defaults to 512kb. You can disable this option with a value of `Infinity` (0 in older versions of the adapter) and implement a custom check in [`handle`](hooks#Server-hooks-handle) if you need something more advanced.\n\n### `SHUTDOWN_TIMEOUT`\n\nThe number of seconds to wait before forcefully closing any remaining connections after receiving a `SIGTERM` or `SIGINT` signal. Defaults to `30`. Internally the adapter calls [`closeAllConnections`](https://nodejs.org/api/http.html#servercloseallconnections). See [Graceful shutdown](#Graceful-shutdown) for more details.\n\n### `IDLE_TIMEOUT`\n\nWhen using systemd socket activation, `IDLE_TIMEOUT` specifies the number of seconds after which the app is automatically put to sleep when receiving no requests. If not set, the app runs continuously. See [Socket activation](#Socket-activation) for more details.\n\n## Options\n\nThe adapter can be configured with various options:\n\n```js\n// @errors: 2307\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-node';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\t// default options are shown\n\t\t\tout: 'build',\n\t\t\tprecompress: true,\n\t\t\tenvPrefix: ''\n\t\t})\n\t}\n};\n\nexport default config;\n```\n\n### out\n\nThe directory to build the server to. It defaults to `build` — i.e. `node build` would start the server locally after it has been created.\n\n### precompress\n\nEnables precompressing using gzip and brotli for assets and prerendered pages. It defaults to `true`.\n\n### envPrefix\n\nIf you need to change the name of the environment variables used to configure the deployment (for example, to deconflict with environment variables you don't control), you can specify a prefix:\n\n```js\nenvPrefix: 'MY_CUSTOM_';\n```\n\n```sh\nMY_CUSTOM_HOST=127.0.0.1 \\\nMY_CUSTOM_PORT=4000 \\\nMY_CUSTOM_ORIGIN=https://my.site \\\nnode build\n```\n\n## Graceful shutdown\n\nBy default `adapter-node` gracefully shuts down the HTTP server when a `SIGTERM` or `SIGINT` signal is received. It will:\n\n1. reject new requests ([`server.close`](https://nodejs.org/api/http.html#serverclosecallback))\n2. wait for requests that have already been made but not received a response yet to finish and close connections once they become idle ([`server.closeIdleConnections`](https://nodejs.org/api/http.html#servercloseidleconnections))\n3. and finally, close any remaining connections that are still active after [`SHUTDOWN_TIMEOUT`](#Environment-variables-SHUTDOWN_TIMEOUT) seconds. ([`server.closeAllConnections`](https://nodejs.org/api/http.html#servercloseallconnections))\n\n> [!NOTE] If you want to customize this behaviour you can use a [custom server](#Custom-server).\n\nYou can listen to the `sveltekit:shutdown` event which is emitted after the HTTP server has closed all connections. Unlike Node's `exit` event, the `sveltekit:shutdown` event supports asynchronous operations and is always emitted when all connections are closed even if the server has dangling work such as open database connections.\n\n```js\n// @errors: 2304\nprocess.on('sveltekit:shutdown', async (reason) => {\n  await jobs.stop();\n  await db.close();\n});\n```\n\nThe parameter `reason` has one of the following values:\n\n- `SIGINT` - shutdown was triggered by a `SIGINT` signal\n- `SIGTERM` - shutdown was triggered by a `SIGTERM` signal\n- `IDLE` - shutdown was triggered by [`IDLE_TIMEOUT`](#Environment-variables-IDLE_TIMEOUT)\n\n## Socket activation\n\nMost Linux operating systems today use a modern process manager called systemd to start the server and run and manage services. You can configure your server to allocate a socket and start and scale your app on demand. This is called [socket activation](https://0pointer.de/blog/projects/socket-activated-containers.html). In this case, the OS will pass two environment variables to your app — `LISTEN_PID` and `LISTEN_FDS`. The adapter will then listen on file descriptor 3 which refers to a systemd socket unit that you will have to create.\n\n> [!NOTE] You can still use [`envPrefix`](#Options-envPrefix) with systemd socket activation. `LISTEN_PID` and `LISTEN_FDS` are always read without a prefix.\n\nTo take advantage of socket activation follow these steps.\n\n1. Run your app as a [systemd service](https://www.freedesktop.org/software/systemd/man/latest/systemd.service.html). It can either run directly on the host system or inside a container (using Docker or a systemd portable service for example). If you additionally pass an [`IDLE_TIMEOUT`](#Environment-variables-IDLE_TIMEOUT) environment variable to your app it will gracefully shutdown if there are no requests for `IDLE_TIMEOUT` seconds. systemd will automatically start your app again when new requests are coming in.\n\n```ini\n/// file: /etc/systemd/system/myapp.service\n[Service]\nEnvironment=NODE_ENV=production IDLE_TIMEOUT=60\nExecStart=/usr/bin/node /usr/bin/myapp/build\n```\n\n2. Create an accompanying [socket unit](https://www.freedesktop.org/software/systemd/man/latest/systemd.socket.html). The adapter only accepts a single socket.\n\n```ini\n/// file: /etc/systemd/system/myapp.socket\n[Socket]\nListenStream=3000\n\n[Install]\nWantedBy=sockets.target\n```\n\n3. Make sure systemd has recognised both units by running `sudo systemctl daemon-reload`. Then enable the socket on boot and start it immediately using `sudo systemctl enable --now myapp.socket`. The app will then automatically start once the first request is made to `localhost:3000`.\n\n## Custom server\n\nThe adapter creates two files in your build directory — `index.js` and `handler.js`. Running `index.js` — e.g. `node build`, if you use the default build directory — will start a server on the configured port.\n\nAlternatively, you can import the `handler.js` file, which exports a handler suitable for use with [Express](https://github.com/expressjs/express), [Connect](https://github.com/senchalabs/connect) or [Polka](https://github.com/lukeed/polka) (or even just the built-in [`http.createServer`](https://nodejs.org/dist/latest/docs/api/http.html#httpcreateserveroptions-requestlistener)) and set up your own server:\n\n```js\n// @errors: 2307 7006\n/// file: my-server.js\nimport { handler } from './build/handler.js';\nimport express from 'express';\n\nconst app = express();\n\n// add a route that lives separately from the SvelteKit app\napp.get('/healthcheck', (req, res) => {\n\tres.end('ok');\n});\n\n// let SvelteKit handle everything else, including serving prerendered pages and static assets\napp.use(handler);\n\napp.listen(3000, () => {\n\tconsole.log('listening on port 3000');\n});\n```",
    "kit/adapter-static": "To use SvelteKit as a static site generator (SSG), use [`adapter-static`](https://github.com/sveltejs/kit/tree/main/packages/adapter-static).\n\nThis will prerender your entire site as a collection of static files. If you'd like to prerender only some pages and dynamically server-render others, you will need to use a different adapter together with [the `prerender` option](page-options#prerender).\n\n## Usage\n\nInstall with `npm i -D @sveltejs/adapter-static`, then add the adapter to your `svelte.config.js`:\n\n```js\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-static';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\t// default options are shown. On some platforms\n\t\t\t// these options are set automatically — see below\n\t\t\tpages: 'build',\n\t\t\tassets: 'build',\n\t\t\tfallback: undefined,\n\t\t\tprecompress: false,\n\t\t\tstrict: true\n\t\t})\n\t}\n};\n\nexport default config;\n```\n\n...and add the [`prerender`](page-options#prerender) option to your root layout:\n\n```js\n/// file: src/routes/+layout.js\n// If you're using a fallback (i.e. SPA mode) you don't need to prerender all\n// pages by setting this here, but should prerender as many as possible to\n// avoid large performance and SEO impacts\nexport const prerender = true;\n```\n\n> [!NOTE] You must ensure SvelteKit's [`trailingSlash`](page-options#trailingSlash) option is set appropriately for your environment. If your host does not render `/a.html` upon receiving a request for `/a` then you will need to set `trailingSlash: 'always'` in your root layout to create `/a/index.html` instead.\n\n## Zero-config support\n\nSome platforms have zero-config support (more to come in future):\n\n- [Vercel](https://vercel.com)\n\nOn these platforms, you should omit the adapter options so that `adapter-static` can provide the optimal configuration:\n\n```js\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-static';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter(---{...}---)\n\t}\n};\n\nexport default config;\n```\n\n## Options\n\n### pages\n\nThe directory to write prerendered pages to. It defaults to `build`.\n\n### assets\n\nThe directory to write static assets (the contents of `static`, plus client-side JS and CSS generated by SvelteKit) to. Ordinarily this should be the same as `pages`, and it will default to whatever the value of `pages` is, but in rare circumstances you might need to output pages and assets to separate locations.\n\n### fallback\n\nTo create a [single page app (SPA)](single-page-apps) you must specify the name of the fallback page to be generated by SvelteKit, which is used as the entry point for URLs that have not been prerendered. This is commonly `200.html`, but can vary depending on your deployment platform. You should avoid `index.html` where possible to avoid conflicting with a prerendered homepage. \n\n> This option has large negative performance and SEO impacts. It is only recommended in certain circumstances such as wrapping the site in a mobile app. See the [single page apps](single-page-apps) documentation for more details and alternatives.\n\n### precompress\n\nIf `true`, precompresses files with brotli and gzip. This will generate `.br` and `.gz` files.\n\n### strict\n\nBy default, `adapter-static` checks that either all pages and endpoints (if any) of your app were prerendered, or you have the `fallback` option set. This check exists to prevent you from accidentally publishing an app where some parts of it are not accessible, because they are not contained in the final output. If you know this is ok (for example when a certain page only exists conditionally), you can set `strict` to `false` to turn off this check.\n\n## GitHub Pages\n\nWhen building for [GitHub Pages](https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages), if your repo name is not equivalent to `your-username.github.io`, make sure to update [`config.kit.paths.base`](configuration#paths) to match your repo name. This is because the site will be served from `https://your-username.github.io/your-repo-name` rather than from the root.\n\nYou'll also want to generate a fallback `404.html` page to replace the default 404 page shown by GitHub Pages.\n\nA config for GitHub Pages might look like the following:\n\n```js\n// @errors: 2322\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-static';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\tfallback: '404.html'\n\t\t}),\n\t\tpaths: {\n\t\t\tbase: process.argv.includes('dev') ? '' : process.env.BASE_PATH\n\t\t}\n\t}\n};\n\nexport default config;\n```\n\nYou can use GitHub actions to automatically deploy your site to GitHub Pages when you make a change. Here's an example workflow:\n\n```yaml\n### file: .github/workflows/deploy.yml\nname: Deploy to GitHub Pages\n\non:\n  push:\n    branches: 'main'\n\njobs:\n  build_site:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      # If you're using pnpm, add this step then change the commands and cache key below to use `pnpm`\n      # - name: Install pnpm\n      #   uses: pnpm/action-setup@v3\n      #   with:\n      #     version: 8\n\n      - name: Install Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: 20\n          cache: npm\n\n      - name: Install dependencies\n        run: npm i\n\n      - name: build\n        env:\n          BASE_PATH: '/${{ github.event.repository.name }}'\n        run: |\n          npm run build\n\n      - name: Upload Artifacts\n        uses: actions/upload-pages-artifact@v3\n        with:\n          # this should match the `pages` option in your adapter-static options\n          path: 'build/'\n\n  deploy:\n    needs: build_site\n    runs-on: ubuntu-latest\n\n    permissions:\n      pages: write\n      id-token: write\n\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n\n    steps:\n      - name: Deploy\n        id: deployment\n        uses: actions/deploy-pages@v4\n```\n\nIf you're not using GitHub actions to deploy your site (for example, you're pushing the built site to its own repo), add an empty `.nojekyll` file in your `static` directory to prevent Jekyll from interfering.",
    "kit/single-page-apps": "You can turn a SvelteKit app into a fully client-rendered single-page app (SPA) by specifying a _fallback page_. This page will be served for any URLs that can't be served by other means such as returning a prerendered page.\n\n> [!NOTE] SPA mode has a large negative performance impact by forcing multiple network round trips (for the blank HTML document, then for the JavaScript, and then for any data needed for the page) before content can be shown. Unless you are serving the app from a local network (e.g.a mobile app that wraps a locally-served SPA) this will delay startup, especially when considering the latency of mobile devices. It also harms SEO by often causing sites to be downranked for performance (SPAs are much more likely to fail [Core Web Vitals](https://web.dev/explore/learn-core-web-vitals)), excluding search engines that don't render JS, and causing your site to receive less frequent updates from those that do. And finally, it makes your app inaccessible to users if JavaScript fails or is disabled (which happens [more often than you probably think](https://kryogenix.org/code/browser/everyonehasjs.html)).\n>\n> You can avoid these drawbacks by [prerendering](#Prerendering-individual-pages) as many pages as possible when using SPA mode (especially your homepage). If you can prerender all pages, you can simply use [static site generation](adapter-static) rather than a SPA. Otherwise, you should strongly consider using an adapter which supports server side rendering. SvelteKit has officially supported adapters for various providers with generous free tiers.\n\n## Usage\n\nFirst, disable SSR for the pages you don't want to prerender. These pages will be served via the fallback page. E.g. to serve all pages via the fallback by default, you can update the root layout as shown below. You should [opt back into prerendering individual pages and directories](#Prerendering-individual-pages) where possible.\n```js\n/// file: src/routes/+layout.js\nexport const ssr = false;\n```\n\nIf you don't have any server-side logic (i.e. `+page.server.js`, `+layout.server.js` or `+server.js` files) you can use [`adapter-static`](adapter-static) to create your SPA. Install `adapter-static` with `npm i -D @sveltejs/adapter-static` and add it to your `svelte.config.js` with the `fallback` option:\n\n```js\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-static';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\tfallback: '200.html' // may differ from host to host\n\t\t})\n\t}\n};\n\nexport default config;\n```\n\nThe `fallback` page is an HTML page created by SvelteKit from your page template (e.g. `app.html`) that loads your app and navigates to the correct route. For example [Surge](https://surge.sh/help/adding-a-200-page-for-client-side-routing), a static web host, lets you add a `200.html` file that will handle any requests that don't correspond to static assets or prerendered pages.\n\nOn some hosts it may be something else entirely — consult your platform's documentation. We recommend avoiding `index.html` if possible as it may conflict with prerendering.\n\n> [!NOTE] Note that the fallback page will always contain absolute asset paths (i.e. beginning with `/` rather than `.`) regardless of the value of [`paths.relative`](configuration#paths), since it is used to respond to requests for arbitrary paths.\n\n## Prerendering individual pages\n\nIf you want certain pages to be prerendered, you can re-enable `ssr` alongside `prerender` for just those parts of your app:\n\n```js\n/// file: src/routes/my-prerendered-page/+page.js\nexport const prerender = true;\nexport const ssr = true;\n```\n\nYou won't need a Node server or server capable of running JavaScript to deploy this page. It will only server render your page while building your project for the purposes of outputting an `.html` page that can be served from any static web host.\n\n## Apache\n\nTo run an SPA on [Apache](https://httpd.apache.org/), you should add a `static/.htaccess` file to route requests to the fallback page:\n\n```\n<IfModule mod_rewrite.c>\n\tRewriteEngine On\n\tRewriteBase /\n\tRewriteRule ^200\\.html$ - [L]\n\tRewriteCond %{REQUEST_FILENAME} !-f\n\tRewriteCond %{REQUEST_FILENAME} !-d\n\tRewriteRule . /200.html [L]\n</IfModule>\n```",
    "kit/adapter-cloudflare": "To deploy to [Cloudflare Workers](https://workers.cloudflare.com/) or [Cloudflare Pages](https://pages.cloudflare.com/), use [`adapter-cloudflare`](https://github.com/sveltejs/kit/tree/main/packages/adapter-cloudflare).\n\nThis adapter will be installed by default when you use [`adapter-auto`](adapter-auto). If you plan on staying with Cloudflare, you can switch from [`adapter-auto`](adapter-auto) to using this adapter directly so that `event.platform` is emulated during local development, type declarations are automatically applied, and the ability to set Cloudflare-specific options is provided.\n\n## Comparisons\n\n- `adapter-cloudflare` – supports all SvelteKit features; builds for Cloudflare Workers Static Assets and Cloudflare Pages\n- `adapter-cloudflare-workers` – deprecated. Supports all SvelteKit features; builds for Cloudflare Workers Sites\n- `adapter-static` – only produces client-side static assets; compatible with Cloudflare Workers Static Assets and Cloudflare Pages\n\n## Usage\n\nInstall with `npm i -D @sveltejs/adapter-cloudflare`, then add the adapter to your `svelte.config.js`:\n\n```js\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-cloudflare';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\t// See below for an explanation of these options\n\t\t\tconfig: undefined,\n\t\t\tplatformProxy: {\n\t\t\t\tconfigPath: undefined,\n\t\t\t\tenvironment: undefined,\n\t\t\t\tpersist: undefined\n\t\t\t},\n\t\t\tfallback: 'plaintext',\n\t\t\troutes: {\n\t\t\t\tinclude: ['/*'],\n\t\t\t\texclude: ['<all>']\n\t\t\t}\n\t\t})\n\t}\n};\n\nexport default config;\n```\n\n## Options\n\n### config\n\nPath to your [Wrangler configuration file](https://developers.cloudflare.com/workers/wrangler/configuration/). If you would like to use a Wrangler configuration filename other than `wrangler.jsonc`, `wrangler.json`, or `wrangler.toml` you can specify it using this option.\n\n### platformProxy\n\nPreferences for the emulated `platform.env` local bindings. See the [getPlatformProxy](https://developers.cloudflare.com/workers/wrangler/api/#parameters-1) Wrangler API documentation for a full list of options.\n\n### fallback\n\nWhether to render a plaintext 404.html page or a rendered SPA fallback page for non-matching asset requests.\n\nFor Cloudflare Workers, the default behaviour is to return a null-body 404-status response for non-matching assets requests. However, if the [`assets.not_found_handling`](https://developers.cloudflare.com/workers/static-assets/routing/#2-not_found_handling) Wrangler configuration setting is set to `\"404-page\"`, this page will be served if a request fails to match an asset. If `assets.not_found_handling` is set to `\"single-page-application\"`, the adapter will render a SPA fallback index.html page regardless of the `fallback` option specified.\n\nFor Cloudflare Pages, this page will only be served when a request that matches an entry in `routes.exclude` fails to match an asset.\n\nMost of the time `plaintext` is sufficient, but if you are using `routes.exclude` to manually\nexclude a set of prerendered pages without exceeding the 100 route limit, you may wish to\nuse `spa` instead to avoid showing an unstyled 404 page to users.\n\nSee Cloudflare Pages' [Not Found behaviour](https://developers.cloudflare.com/pages/configuration/serving-pages/#not-found-behavior) for more info.\n\n### routes\n\nOnly for Cloudflare Pages. Allows you to customise the [`_routes.json`](https://developers.cloudflare.com/pages/functions/routing/#create-a-_routesjson-file) file generated by `adapter-cloudflare`.\n\n- `include` defines routes that will invoke a function, and defaults to `['/*']`\n- `exclude` defines routes that will _not_ invoke a function — this is a faster and cheaper way to serve your app's static assets. This array can include the following special values:\n\t- `<build>` contains your app's build artifacts (the files generated by Vite)\n\t- `<files>` contains the contents of your `static` directory\n\t- `<prerendered>` contains a list of prerendered pages\n\t- `<all>` (the default) contains all of the above\n\nYou can have up to 100 `include` and `exclude` rules combined. Generally you can omit the `routes` options, but if (for example) your `<prerendered>` paths exceed that limit, you may find it helpful to manually create an `exclude` list that includes `'/articles/*'` instead of the auto-generated `['/articles/foo', '/articles/bar', '/articles/baz', ...]`.\n\n## Cloudflare Workers\n\n### Basic configuration\n\nWhen building for Cloudflare Workers, this adapter expects to find a [Wrangler configuration file](https://developers.cloudflare.com/workers/configuration/sites/configuration/) in the project root. It should look something like this:\n\n```jsonc\n/// file: wrangler.jsonc\n{\n\t\"name\": \"<any-name-you-want>\",\n\t\"main\": \".svelte-kit/cloudflare/_worker.js\",\n\t\"compatibility_date\": \"2025-01-01\",\n\t\"assets\": {\n\t\t\"binding\": \"ASSETS\",\n\t\t\"directory\": \".svelte-kit/cloudflare\",\n\t}\n}\n```\n\n### Deployment\n\nPlease follow the [framework guide](https://developers.cloudflare.com/workers/frameworks/framework-guides/svelte/) for Cloudflare Workers to begin.\n\n## Cloudflare Pages\n\n### Deployment\n\nPlease follow the [Get Started Guide](https://developers.cloudflare.com/pages/get-started/) for Cloudflare Pages to begin.\n\nIf you're using the [Git integration](https://developers.cloudflare.com/pages/get-started/git-integration/), your build settings should look like this:\n\n- Framework preset – SvelteKit\n- Build command – `npm run build` or `vite build`\n- Build output directory – `.svelte-kit/cloudflare`\n\n### Further reading\n\nYou may wish to refer to [Cloudflare's documentation for deploying a SvelteKit site on Cloudflare Pages](https://developers.cloudflare.com/pages/framework-guides/deploy-a-svelte-kit-site/).\n\n### Notes\n\nFunctions contained in the [`/functions` directory](https://developers.cloudflare.com/pages/functions/routing/) at the project's root will _not_ be included in the deployment. Instead, functions should be implemented as [server endpoints](routing#server) in your SvelteKit app, which is compiled to a [single `_worker.js` file](https://developers.cloudflare.com/pages/functions/advanced-mode/).\n\n## Runtime APIs\n\nThe [`env`](https://developers.cloudflare.com/workers/runtime-apis/fetch-event#parameters) object contains your project's [bindings](https://developers.cloudflare.com/workers/runtime-apis/bindings/), which consist of KV/DO namespaces, etc. It is passed to SvelteKit via the `platform` property, along with [`ctx`](https://developers.cloudflare.com/workers/runtime-apis/context/), [`caches`](https://developers.cloudflare.com/workers/runtime-apis/cache/), and [`cf`](https://developers.cloudflare.com/workers/runtime-apis/request/#incomingrequestcfproperties), meaning that you can access it in hooks and endpoints:\n\n```js\n// @filename: ambient.d.ts\nimport { DurableObjectNamespace } from '@cloudflare/workers-types';\n\ndeclare global {\n\tnamespace App {\n\t\tinterface Platform {\n\t\t\tenv: {\n\t\t\t\tYOUR_DURABLE_OBJECT_NAMESPACE: DurableObjectNamespace;\n\t\t\t};\n\t\t}\n\t}\n}\n// @filename: +server.js\n// ---cut---\n// @errors: 2355 2322\n/// file: +server.js\n/** @type {import('./$types').RequestHandler} */\nexport async function POST({ request, platform }) {\n\tconst x = platform?.env.YOUR_DURABLE_OBJECT_NAMESPACE.idFromName('x');\n}\n```\n\n> [!NOTE] SvelteKit's built-in [`$env` module]($env-static-private) should be preferred for environment variables.\n\nTo make these types available to your app, install [`@cloudflare/workers-types`](https://www.npmjs.com/package/@cloudflare/workers-types) and reference them in your `src/app.d.ts`:\n\n```ts\n/// file: src/app.d.ts\n+++import { KVNamespace, DurableObjectNamespace } from '@cloudflare/workers-types';+++\n\ndeclare global {\n\tnamespace App {\n\t\tinterface Platform {\n+++\t\t\tenv: {\n\t\t\t\tYOUR_KV_NAMESPACE: KVNamespace;\n\t\t\t\tYOUR_DURABLE_OBJECT_NAMESPACE: DurableObjectNamespace;\n\t\t\t};+++\n\t\t}\n\t}\n}\n\nexport {};\n```\n\n### Testing locally\n\nCloudflare specific values in the `platform` property are emulated during dev and preview modes. Local [bindings](https://developers.cloudflare.com/workers/wrangler/configuration/#bindings) are created based on your [Wrangler configuration file](https://developers.cloudflare.com/workers/wrangler/) and are used to populate `platform.env` during development and preview. Use the adapter config [`platformProxy` option](#Options-platformProxy) to change your preferences for the bindings.\n\nFor testing the build, you should use [Wrangler](https://developers.cloudflare.com/workers/wrangler/) version 4. Once you have built your site, run `wrangler dev .svelte-kit/cloudflare` if you're testing for Cloudflare Workers or `wrangler pages dev .svelte-kit/cloudflare` for Cloudflare Pages.\n\n## Headers and redirects\n\nThe [`_headers`](https://developers.cloudflare.com/pages/configuration/headers/) and [`_redirects`](https://developers.cloudflare.com/pages/configuration/redirects/) files, specific to Cloudflare, can be used for static asset responses (like images) by putting them into the project root folder.\n\nHowever, they will have no effect on responses dynamically rendered by SvelteKit, which should return custom headers or redirect responses from [server endpoints](routing#server) or with the [`handle`](hooks#Server-hooks-handle) hook.\n\n## Troubleshooting\n\n### Node.js compatibility\n\nIf you would like to enable [Node.js compatibility](https://developers.cloudflare.com/workers/runtime-apis/nodejs/), you can add the `nodejs_compat` compatibility flag to your Wrangler configuration file:\n\n```jsonc\n/// file: wrangler.jsonc\n{\n\t\"compatibility_flags\": [\"nodejs_compat\"]\n}\n```\n\n### Worker size limits\n\nWhen deploying your application, the server generated by SvelteKit is bundled into a single file. Wrangler will fail to publish your worker if it exceeds [the size limits](https://developers.cloudflare.com/workers/platform/limits/#worker-size) after minification. You're unlikely to hit this limit usually, but some large libraries can cause this to happen. In that case, you can try to reduce the size of your worker by only importing such libraries on the client side. See [the FAQ](./faq#How-do-I-use-a-client-side-library-accessing-document-or-window) for more information.\n\n### Accessing the file system\n\nYou can't use `fs` in Cloudflare Workers.\n\nInstead, use the [`read`]($app-server#read) function from `$app/server` to access your files. It works by fetching the file from the deployed public assets location.\n\nAlternatively, you can [prerender](page-options#prerender) the routes in question.\n\n## Migrating from Workers Sites\n\nCloudflare no longer recommends using [Workers Sites](https://developers.cloudflare.com/workers/configuration/sites/configuration/) and instead recommends using [Workers Static Assets](https://developers.cloudflare.com/workers/static-assets/). To migrate, replace `@sveltejs/adapter-cloudflare-workers` with `@sveltejs/adapter-cloudflare` and remove all `site` configuration settings from your Wrangler configuration file, then add the `assets.directory` and `assets.binding` configuration settings:\n\n### svelte.config.js\n\n```js\n// @errors: 2307\n/// file: svelte.config.js\n---import adapter from '@sveltejs/adapter-cloudflare-workers';---\n+++import adapter from '@sveltejs/adapter-cloudflare';+++\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter()\n\t}\n};\n\nexport default config;\n```\n\n### wrangler.toml\n\n```toml\n/// file: wrangler.toml\n---site.bucket = \".cloudflare/public\"---\n+++assets.directory = \".cloudflare/public\"\nassets.binding = \"ASSETS\" # Exclude this if you don't have a `main` key configured.+++\n```\n\n### wrangler.jsonc\n\n```jsonc\n/// file: wrangler.jsonc\n{\n---\t\"site\": {\n\t\t\"bucket\": \".cloudflare/public\"\n\t},---\n+++\t\"assets\": {\n\t\t\"directory\": \".cloudflare/public\",\n\t\t\"binding\": \"ASSETS\" // Exclude this if you don't have a `main` key configured.\n\t}+++\n}\n```",
    "kit/adapter-cloudflare-workers": "> [!NOTE] `adapter-cloudflare-workers` has been deprecated in favour of [`adapter-cloudflare`](adapter-cloudflare). We recommend using `adapter-cloudflare` to deploy to Cloudflare Workers with [Static Assets](https://developers.cloudflare.com/workers/static-assets/) since Cloudflare Workers Sites will be deprecated in favour of it.\n\nTo deploy to [Cloudflare Workers](https://workers.cloudflare.com/) with [Workers Sites](https://developers.cloudflare.com/workers/configuration/sites/), use `adapter-cloudflare-workers`.\n\n## Usage\n\nInstall with `npm i -D @sveltejs/adapter-cloudflare-workers`, then add the adapter to your `svelte.config.js`:\n\n```js\n// @errors: 2307\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-cloudflare-workers';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\t// see below for options that can be set here\n\t\t})\n\t}\n};\n\nexport default config;\n```\n\n## Options\n\n### config\n\nPath to your [Wrangler configuration file](https://developers.cloudflare.com/workers/wrangler/configuration/). If you would like to use a Wrangler configuration filename other than `wrangler.jsonc`, `wrangler.json`, or `wrangler.toml` you can specify it using this option.\n\n### platformProxy\n\nPreferences for the emulated `platform.env` local bindings. See the [getPlatformProxy](https://developers.cloudflare.com/workers/wrangler/api/#parameters-1) Wrangler API documentation for a full list of options.\n\n## Basic Configuration\n\nThis adapter expects to find a [Wrangler configuration file](https://developers.cloudflare.com/workers/configuration/sites/configuration/) in the project root. It should look something like this:\n\n```jsonc\n/// file: wrangler.jsonc\n{\n\t\"name\": \"<your-service-name>\",\n\t\"account_id\": \"<your-account-id>\",\n\t\"main\": \"./.cloudflare/worker.js\",\n\t\"site\": {\n\t\t\"bucket\": \"./.cloudflare/public\"\n\t},\n\t\"build\": {\n\t\t\"command\": \"npm run build\"\n\t},\n\t\"compatibility_date\": \"2021-11-12\"\n}\n```\n\n`<your-service-name>` can be anything. `<your-account-id>` can be found by running `wrangler whoami` using the Wrangler CLI tool or by logging into your [Cloudflare dashboard](https://dash.cloudflare.com) and grabbing it from the end of the URL:\n\n```\nhttps://dash.cloudflare.com/<your-account-id>/home\n```\n\n> [!NOTE] You should add the `.cloudflare` directory (or whichever directories you specified for `main` and `site.bucket`) and the `.wrangler` directory to your `.gitignore`.\n\nYou will need to install [Wrangler](https://developers.cloudflare.com/workers/wrangler/install-and-update/) and log in, if you haven't already:\n\n```sh\nnpm i -D wrangler\nwrangler login\n```\n\nThen, you can build your app and deploy it:\n\n```sh\nwrangler deploy\n```\n\n## Runtime APIs\n\nThe [`env`](https://developers.cloudflare.com/workers/runtime-apis/fetch-event#parameters) object contains your project's [bindings](https://developers.cloudflare.com/workers/runtime-apis/bindings/), which consist of KV/DO namespaces, etc. It is passed to SvelteKit via the `platform` property, along with [`ctx`](https://developers.cloudflare.com/workers/runtime-apis/context/), [`caches`](https://developers.cloudflare.com/workers/runtime-apis/cache/), and [`cf`](https://developers.cloudflare.com/workers/runtime-apis/request/#incomingrequestcfproperties), meaning that you can access it in hooks and endpoints:\n\n```js\n// @filename: ambient.d.ts\nimport { DurableObjectNamespace } from '@cloudflare/workers-types';\n\ndeclare global {\n\tnamespace App {\n\t\tinterface Platform {\n\t\t\tenv: {\n\t\t\t\tYOUR_DURABLE_OBJECT_NAMESPACE: DurableObjectNamespace;\n\t\t\t};\n\t\t}\n\t}\n}\n// @filename: +server.js\n// ---cut---\n// @errors: 2355 2322\n/// file: +server.js\n/** @type {import('./$types').RequestHandler} */\nexport async function POST({ request, platform }) {\n\tconst x = platform?.env.YOUR_DURABLE_OBJECT_NAMESPACE.idFromName('x');\n}\n```\n\n> [!NOTE] SvelteKit's built-in [`$env` module]($env-static-private) should be preferred for environment variables.\n\nTo make these types available to your app, install [`@cloudflare/workers-types`](https://www.npmjs.com/package/@cloudflare/workers-types) and reference them in your `src/app.d.ts`:\n\n```ts\n/// file: src/app.d.ts\n+++import { KVNamespace, DurableObjectNamespace } from '@cloudflare/workers-types';+++\n\ndeclare global {\n\tnamespace App {\n\t\tinterface Platform {\n+++\t\t\tenv?: {\n\t\t\t\tYOUR_KV_NAMESPACE: KVNamespace;\n\t\t\t\tYOUR_DURABLE_OBJECT_NAMESPACE: DurableObjectNamespace;\n\t\t\t};+++\n\t\t}\n\t}\n}\n\nexport {};\n```\n\n### Testing Locally\n\nCloudflare Workers specific values in the `platform` property are emulated during dev and preview modes. Local [bindings](https://developers.cloudflare.com/workers/wrangler/configuration/#bindings) are created based on your [Wrangler configuration file](https://developers.cloudflare.com/workers/wrangler/) and are used to populate `platform.env` during development and preview. Use the adapter config [`platformProxy` option](#Options-platformProxy) to change your preferences for the bindings.\n\nFor testing the build, you should use [Wrangler](https://developers.cloudflare.com/workers/wrangler/) version 4. Once you have built your site, run `wrangler dev`.\n\n## Troubleshooting\n\n### Node.js compatibility\n\nIf you would like to enable [Node.js compatibility](https://developers.cloudflare.com/workers/runtime-apis/nodejs/), you can add the `nodejs_compat` compatibility flag to your Wrangler configuration file:\n\n```jsonc\n/// file: wrangler.jsonc\n{\n\t\"compatibility_flags\": [\"nodejs_compat\"]\n}\n```\n\n### Worker size limits\n\nWhen deploying your application, the server generated by SvelteKit is bundled into a single file. Wrangler will fail to publish your worker if it exceeds [the size limits](https://developers.cloudflare.com/workers/platform/limits/#worker-size) after minification. You're unlikely to hit this limit usually, but some large libraries can cause this to happen. In that case, you can try to reduce the size of your worker by only importing such libraries on the client side. See [the FAQ](./faq#How-do-I-use-a-client-side-library-accessing-document-or-window) for more information.\n\n### Accessing the file system\n\nYou can't use `fs` in Cloudflare Workers — you must [prerender](page-options#prerender) the routes in question.",
    "kit/adapter-netlify": "To deploy to Netlify, use [`adapter-netlify`](https://github.com/sveltejs/kit/tree/main/packages/adapter-netlify).\n\nThis adapter will be installed by default when you use [`adapter-auto`](adapter-auto), but adding it to your project allows you to specify Netlify-specific options.\n\n## Usage\n\nInstall with `npm i -D @sveltejs/adapter-netlify`, then add the adapter to your `svelte.config.js`:\n\n```js\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-netlify';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\t// default options are shown\n\t\tadapter: adapter({\n\t\t\t// if true, will create a Netlify Edge Function rather\n\t\t\t// than using standard Node-based functions\n\t\t\tedge: false,\n\n\t\t\t// if true, will split your app into multiple functions\n\t\t\t// instead of creating a single one for the entire app.\n\t\t\t// if `edge` is true, this option cannot be used\n\t\t\tsplit: false\n\t\t})\n\t}\n};\n\nexport default config;\n```\n\nThen, make sure you have a [netlify.toml](https://docs.netlify.com/configure-builds/file-based-configuration) file in the project root. This will determine where to write static assets based on the `build.publish` settings, as per this sample configuration:\n\n```toml\n[build]\n\tcommand = \"npm run build\"\n\tpublish = \"build\"\n```\n\nIf the `netlify.toml` file or the `build.publish` value is missing, a default value of `\"build\"` will be used. Note that if you have set the publish directory in the Netlify UI to something else then you will need to set it in `netlify.toml` too, or use the default value of `\"build\"`.\n\n### Node version\n\nNew projects will use the current Node LTS version by default. However, if you're upgrading a project you created a while ago it may be stuck on an older version. See [the Netlify docs](https://docs.netlify.com/configure-builds/manage-dependencies/#node-js-and-javascript) for details on manually specifying a current Node version.\n\n## Netlify Edge Functions\n\nSvelteKit supports [Netlify Edge Functions](https://docs.netlify.com/build/edge-functions/overview/). If you pass the option `edge: true` to the `adapter` function, server-side rendering will happen in a Deno-based edge function that's deployed close to the site visitor. If set to `false` (the default), the site will deploy to Node-based Netlify Functions.\n\n```js\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-netlify';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\t// will create a Netlify Edge Function using Deno-based\n\t\t\t// rather than using standard Node-based functions\n\t\t\tedge: true\n\t\t})\n\t}\n};\n\nexport default config;\n```\n\n## Netlify alternatives to SvelteKit functionality\n\nYou may build your app using functionality provided directly by SvelteKit without relying on any Netlify functionality. Using the SvelteKit versions of these features will allow them to be used in dev mode, tested with integration tests, and to work with other adapters should you ever decide to switch away from Netlify. However, in some scenarios you may find it beneficial to use the Netlify versions of these features. One example would be if you're migrating an app that's already hosted on Netlify to SvelteKit.\n\n### `_headers` and `_redirects`\n\nThe [`_headers`](https://docs.netlify.com/routing/headers/#syntax-for-the-headers-file) and [`_redirects`](https://docs.netlify.com/routing/redirects/redirect-options/) files specific to Netlify can be used for static asset responses (like images) by putting them into the project root folder.\n\n### Redirect rules\n\nDuring compilation, redirect rules are automatically appended to your `_redirects` file. (If it doesn't exist yet, it will be created.) That means:\n\n- `[[redirects]]` in `netlify.toml` will never match as `_redirects` has a [higher priority](https://docs.netlify.com/routing/redirects/#rule-processing-order). So always put your rules in the [`_redirects` file](https://docs.netlify.com/routing/redirects/#syntax-for-the-redirects-file).\n- `_redirects` shouldn't have any custom \"catch all\" rules such as `/* /foobar/:splat`. Otherwise the automatically appended rule will never be applied as Netlify is only processing [the first matching rule](https://docs.netlify.com/routing/redirects/#rule-processing-order).\n\n### Netlify Forms\n\n1. Create your Netlify HTML form as described [here](https://docs.netlify.com/forms/setup/#html-forms), e.g. as `/routes/contact/+page.svelte`. (Don't forget to add the hidden `form-name` input element!)\n2. Netlify's build bot parses your HTML files at deploy time, which means your form must be [prerendered](page-options#prerender) as HTML. You can either add `export const prerender = true` to your `contact.svelte` to prerender just that page or set the `kit.prerender.force: true` option to prerender all pages.\n3. If your Netlify form has a [custom success message](https://docs.netlify.com/forms/setup/#success-messages) like `<form netlify ... action=\"/success\">` then ensure the corresponding `/routes/success/+page.svelte` exists and is prerendered.\n\n### Netlify Functions\n\nWith this adapter, SvelteKit endpoints are hosted as [Netlify Functions](https://docs.netlify.com/functions/overview/). Netlify function handlers have additional context, including [Netlify Identity](https://docs.netlify.com/visitor-access/identity/) information. You can access this context via the `event.platform.context` field inside your hooks and `+page.server` or `+layout.server` endpoints. These are [serverless functions](https://docs.netlify.com/functions/overview/) when the `edge` property is `false` in the adapter config or [edge functions](https://docs.netlify.com/edge-functions/overview/#app) when it is `true`.\n\n```js\n// @errors: 2339\n// @filename: ambient.d.ts\n/// <reference types=\"@sveltejs/adapter-netlify\" />\n// @filename: +page.server.js\n// ---cut---\n/// file: +page.server.js\n/** @type {import('./$types').PageServerLoad} */\nexport const load = async (event) => {\n\tconst context = event.platform?.context;\n\tconsole.log(context); // shows up in your functions log in the Netlify app\n};\n```\n\nAdditionally, you can add your own Netlify functions by creating a directory for them and adding the configuration to your `netlify.toml` file. For example:\n\n```toml\n[build]\n\tcommand = \"npm run build\"\n\tpublish = \"build\"\n\n[functions]\n\tdirectory = \"functions\"\n```\n\n## Troubleshooting\n\n### Accessing the file system\n\nYou can't use `fs` in edge deployments.\n\nYou _can_ use it in serverless deployments, but it won't work as expected, since files are not copied from your project into your deployment. Instead, use the [`read`]($app-server#read) function from `$app/server` to access your files. It also works inside edge deployments by fetching the file from the deployed public assets location.\n\nAlternatively, you can [prerender](page-options#prerender) the routes in question.",
    "kit/adapter-vercel": "To deploy to Vercel, use [`adapter-vercel`](https://github.com/sveltejs/kit/tree/main/packages/adapter-vercel).\n\nThis adapter will be installed by default when you use [`adapter-auto`](adapter-auto), but adding it to your project allows you to specify Vercel-specific options.\n\n## Usage\n\nInstall with `npm i -D @sveltejs/adapter-vercel`, then add the adapter to your `svelte.config.js`:\n\n```js\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-vercel';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\t// see below for options that can be set here\n\t\t})\n\t}\n};\n\nexport default config;\n```\n\n## Deployment configuration\n\nTo control how your routes are deployed to Vercel as functions, you can specify deployment configuration, either through the option shown above or with [`export const config`](page-options#config) inside `+server.js`, `+page(.server).js` and `+layout(.server).js` files.\n\nFor example you could deploy one specific route as an individual serverless function, separate from the rest of your app:\n\n```js\n/// file: about/+page.js\n/** @type {import('@sveltejs/adapter-vercel').Config} */\nexport const config = {\n\tsplit: true\n};\n```\n\nThe following options apply to all functions:\n\n- `runtime`: `'edge'`, `'nodejs18.x'`, `'nodejs20.x'` or `'nodejs22.x'`. By default, the adapter will select the `'nodejs<version>.x'` corresponding to the Node version your project is configured to use on the Vercel dashboard\n  > [!NOTE] This option is deprecated and will be removed in a future version, at which point all your functions will use whichever Node version is specified in the project configuration on Vercel\n- `regions`: an array of [edge network regions](https://vercel.com/docs/concepts/edge-network/regions) (defaulting to `[\"iad1\"]` for serverless functions) or `'all'` if `runtime` is `edge` (its default). Note that multiple regions for serverless functions are only supported on Enterprise plans\n- `split`: if `true`, causes a route to be deployed as an individual function. If `split` is set to `true` at the adapter level, all routes will be deployed as individual functions\n\nAdditionally, the following option applies to edge functions:\n- `external`: an array of dependencies that esbuild should treat as external when bundling functions. This should only be used to exclude optional dependencies that will not run outside Node\n\nAnd the following option apply to serverless functions:\n- `memory`: the amount of memory available to the function. Defaults to `1024` Mb, and can be decreased to `128` Mb or [increased](https://vercel.com/docs/concepts/limits/overview#serverless-function-memory) in 64Mb increments up to `3008` Mb on Pro or Enterprise accounts\n- `maxDuration`: [maximum execution duration](https://vercel.com/docs/functions/runtimes#max-duration) of the function. Defaults to `10` seconds for Hobby accounts, `15` for Pro and `900` for Enterprise\n- `isr`: configuration Incremental Static Regeneration, described below\n\nConfiguration set in a layout applies to all the routes beneath that layout, unless overridden at a more granular level.\n\nIf your functions need to access data in a specific region, it's recommended that they be deployed in the same region (or close to it) for optimal performance.\n\n## Image Optimization\n\nYou may set the `images` config to control how Vercel builds your images. See the [image configuration reference](https://vercel.com/docs/build-output-api/v3/configuration#images) for full details. As an example, you may set:\n\n```js\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-vercel';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\timages: {\n\t\t\t\tsizes: [640, 828, 1200, 1920, 3840],\n\t\t\t\tformats: ['image/avif', 'image/webp'],\n\t\t\t\tminimumCacheTTL: 300,\n\t\t\t\tdomains: ['example-app.vercel.app'],\n\t\t\t}\n\t\t})\n\t}\n};\n\nexport default config;\n```\n\n## Incremental Static Regeneration\n\nVercel supports [Incremental Static Regeneration](https://vercel.com/docs/incremental-static-regeneration) (ISR), which provides the performance and cost advantages of prerendered content with the flexibility of dynamically rendered content.\n\n> [!NOTE] Use ISR only on routes where every visitor should see the same content (much like when you prerender). If there's anything user-specific happening (like session cookies), they should happen on the client via JavaScript only to not leak sensitive information across visits\n\nTo add ISR to a route, include the `isr` property in your `config` object:\n\n```js\nimport { BYPASS_TOKEN } from '$env/static/private';\n\n/** @type {import('@sveltejs/adapter-vercel').Config} */\nexport const config = {\n\tisr: {\n\t\texpiration: 60,\n\t\tbypassToken: BYPASS_TOKEN,\n\t\tallowQuery: ['search']\n\t}\n};\n```\n\n> [!NOTE] Using ISR on a route with `export const prerender = true` will have no effect, since the route is prerendered at build time\n\nThe `expiration` property is required; all others are optional. The properties are discussed in more detail below.\n\n### expiration\n\nThe expiration time (in seconds) before the cached asset will be re-generated by invoking the Serverless Function. Setting the value to `false` means it will never expire. In that case, you likely want to define a bypass token to re-generate on demand.\n\n### bypassToken\n\nA random token that can be provided in the URL to bypass the cached version of the asset, by requesting the asset with a `__prerender_bypass=<token>` cookie.\n\nMaking a `GET` or `HEAD` request with `x-prerender-revalidate: <token>` will force the asset to be re-validated.\n\nNote that the `BYPASS_TOKEN` string must be at least 32 characters long. You could generate one using the JavaScript console like so:\n\n```js\ncrypto.randomUUID();\n```\n\nSet this string as an environment variable on Vercel by logging in and going to your project then Settings > Environment Variables. For \"Key\" put `BYPASS_TOKEN` and for \"value\" use the string generated above, then hit \"Save\".\n\nTo get this key known about for local development, you can use the [Vercel CLI](https://vercel.com/docs/cli/env) by running the `vercel env pull` command locally like so:\n\n```sh\nvercel env pull .env.development.local\n```\n\n### allowQuery\n\nA list of valid query parameters that contribute to the cache key. Other parameters (such as utm tracking codes) will be ignored, ensuring that they do not result in content being re-generated unnecessarily. By default, query parameters are ignored.\n\n> [!NOTE] Pages that are  [prerendered](page-options#prerender) will ignore ISR configuration.\n\n## Environment variables\n\nVercel makes a set of [deployment-specific environment variables](https://vercel.com/docs/concepts/projects/environment-variables#system-environment-variables) available. Like other environment variables, these are accessible from `$env/static/private` and `$env/dynamic/private` (sometimes — more on that later), and inaccessible from their public counterparts. To access one of these variables from the client:\n\n```js\n/// file: +layout.server.js\nimport { VERCEL_COMMIT_REF } from '$env/static/private';\n\n/** @type {import('./$types').LayoutServerLoad} */\nexport function load() {\n\treturn {\n\t\tdeploymentGitBranch: VERCEL_COMMIT_REF\n\t};\n}\n```\n\n```svelte\n<!--- file: +layout.svelte --->\n<script>\n\t/** @type {import('./$types').LayoutProps} */\n\tlet { data } = $props();\n</script>\n\n<p>This staging environment was deployed from {data.deploymentGitBranch}.</p>\n```\n\nSince all of these variables are unchanged between build time and run time when building on Vercel, we recommend using `$env/static/private` — which will statically replace the variables, enabling optimisations like dead code elimination — rather than `$env/dynamic/private`.\n\n## Skew protection\n\nWhen a new version of your app is deployed, assets belonging to the previous version may no longer be accessible. If a user is actively using your app when this happens, it can cause errors when they navigate — this is known as _version skew_. SvelteKit mitigates this by detecting errors resulting from version skew and causing a hard reload to get the latest version of the app, but this will cause any client-side state to be lost. (You can also proactively mitigate it by observing [`updated.current`]($app-state#updated) from `$app/state`, which tells clients when a new version has been deployed.)\n\n[Skew protection](https://vercel.com/docs/deployments/skew-protection) is a Vercel feature that routes client requests to their original deployment. When a user visits your app, a cookie is set with the deployment ID, and any subsequent requests will be routed to that deployment for as long as skew protection is active. When they reload the page, they will get the newest deployment. (`updated.current` is exempted from this behaviour, and so will continue to report new deployments.) To enable it, visit the Advanced section of your project settings on Vercel.\n\nCookie-based skew protection comes with one caveat: if a user has multiple versions of your app open in multiple tabs, requests from older versions will be routed to the newer one, meaning they will fall back to SvelteKit's built-in skew protection.\n\n## Notes\n\n### Vercel functions\n\nIf you have Vercel functions contained in the `api` directory at the project's root, any requests for `/api/*` will _not_ be handled by SvelteKit. You should implement these as [API routes](routing#server) in your SvelteKit app instead, unless you need to use a non-JavaScript language in which case you will need to ensure that you don't have any `/api/*` routes in your SvelteKit app.\n\n### Node version\n\nProjects created before a certain date may default to using an older Node version than what SvelteKit currently requires. You can [change the Node version in your project settings](https://vercel.com/docs/concepts/functions/serverless-functions/runtimes/node-js#node.js-version).\n\n## Troubleshooting\n\n### Accessing the file system\n\nYou can't use `fs` in edge functions.\n\nYou _can_ use it in serverless functions, but it won't work as expected, since files are not copied from your project into your deployment. Instead, use the [`read`]($app-server#read) function from `$app/server` to access your files. It also works inside routes deployed as edge functions by fetching the file from the deployed public assets location.\n\nAlternatively, you can [prerender](page-options#prerender) the routes in question.\n\n### Deployment protection\n\nIf using [`read`]($app-server#read) in an edge function, SvelteKit will `fetch` the file in question from your deployment. If you are using [Deployment Protection](https://vercel.com/docs/deployment-protection), you must also enable [Protection Bypass for Automation](https://vercel.com/docs/deployment-protection/methods-to-bypass-deployment-protection/protection-bypass-automation) so that the request does not result in a [401 Unauthorized](https://http.dog/401) response.",
    "kit/writing-adapters": "If an adapter for your preferred environment doesn't yet exist, you can build your own. We recommend [looking at the source for an adapter](https://github.com/sveltejs/kit/tree/main/packages) to a platform similar to yours and copying it as a starting point.\n\nAdapter packages implement the following API, which creates an `Adapter`:\n\n```js\n// @errors: 2322\n// @filename: ambient.d.ts\ntype AdapterSpecificOptions = any;\n\n// @filename: index.js\n// ---cut---\n/** @param {AdapterSpecificOptions} options */\nexport default function (options) {\n\t/** @type {import('@sveltejs/kit').Adapter} */\n\tconst adapter = {\n\t\tname: 'adapter-package-name',\n\t\tasync adapt(builder) {\n\t\t\t// adapter implementation\n\t\t},\n\t\tasync emulate() {\n\t\t\treturn {\n\t\t\t\tasync platform({ config, prerender }) {\n\t\t\t\t\t// the returned object becomes `event.platform` during dev, build and\n\t\t\t\t\t// preview. Its shape is that of `App.Platform`\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tsupports: {\n\t\t\tread: ({ config, route }) => {\n\t\t\t\t// Return `true` if the route with the given `config` can use `read`\n\t\t\t\t// from `$app/server` in production, return `false` if it can't.\n\t\t\t\t// Or throw a descriptive error describing how to configure the deployment\n\t\t\t},\n\t\t\ttracing: () => {\n\t\t\t\t// Return `true` if this adapter supports loading `tracing.server.js`.\n\t\t\t\t// Return `false if it can't, or throw a descriptive error.\n\t\t\t}\n\t\t}\n\t};\n\n\treturn adapter;\n}\n```\n\nOf these, `name` and `adapt` are required. `emulate` and `supports` are optional.\n\nWithin the `adapt` method, there are a number of things that an adapter should do:\n\n- Clear out the build directory\n- Write SvelteKit output with `builder.writeClient`, `builder.writeServer`, and `builder.writePrerendered`\n- Output code that:\n\t- Imports `Server` from `${builder.getServerDirectory()}/index.js`\n\t- Instantiates the app with a manifest generated with `builder.generateManifest({ relativePath })`\n\t- Listens for requests from the platform, converts them to a standard [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request) if necessary, calls the `server.respond(request, { getClientAddress })` function to generate a [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) and responds with it\n\t- expose any platform-specific information to SvelteKit via the `platform` option passed to `server.respond`\n\t- Globally shims `fetch` to work on the target platform, if necessary. SvelteKit provides a `@sveltejs/kit/node/polyfills` helper for platforms that can use `undici`\n- Bundle the output to avoid needing to install dependencies on the target platform, if necessary\n- Put the user's static files and the generated JS/CSS in the correct location for the target platform\n\nWhere possible, we recommend putting the adapter output under the `build/` directory with any intermediate output placed under `.svelte-kit/[adapter-name]`.",
    "kit/advanced-routing": "## Rest parameters\n\nIf the number of route segments is unknown, you can use rest syntax — for example you might implement GitHub's file viewer like so...\n\n```sh\n/[org]/[repo]/tree/[branch]/[...file]\n```\n\n...in which case a request for `/sveltejs/kit/tree/main/documentation/docs/04-advanced-routing.md` would result in the following parameters being available to the page:\n\n```js\n// @noErrors\n{\n\torg: 'sveltejs',\n\trepo: 'kit',\n\tbranch: 'main',\n\tfile: 'documentation/docs/04-advanced-routing.md'\n}\n```\n\n> [!NOTE] `src/routes/a/[...rest]/z/+page.svelte` will match `/a/z` (i.e. there's no parameter at all) as well as `/a/b/z` and `/a/b/c/z` and so on. Make sure you check that the value of the rest parameter is valid, for example using a [matcher](#Matching).\n\n### 404 pages\n\nRest parameters also allow you to render custom 404s. Given these routes...\n\n```tree\nsrc/routes/\n├ marx-brothers/\n│ ├ chico/\n│ ├ harpo/\n│ ├ groucho/\n│ └ +error.svelte\n└ +error.svelte\n```\n\n...the `marx-brothers/+error.svelte` file will _not_ be rendered if you visit `/marx-brothers/karl`, because no route was matched. If you want to render the nested error page, you should create a route that matches any `/marx-brothers/*` request, and return a 404 from it:\n\n```tree\nsrc/routes/\n├ marx-brothers/\n+++| ├ [...path]/+++\n│ ├ chico/\n│ ├ harpo/\n│ ├ groucho/\n│ └ +error.svelte\n└ +error.svelte\n```\n\n```js\n/// file: src/routes/marx-brothers/[...path]/+page.js\nimport { error } from '@sveltejs/kit';\n\n/** @type {import('./$types').PageLoad} */\nexport function load(event) {\n\terror(404, 'Not Found');\n}\n```\n\n> [!NOTE] If you don't handle 404 cases, they will appear in [`handleError`](hooks#Shared-hooks-handleError)\n\n## Optional parameters\n\nA route like `[lang]/home` contains a parameter named `lang` which is required. Sometimes it's beneficial to make these parameters optional, so that in this example both `home` and `en/home` point to the same page. You can do that by wrapping the parameter in another bracket pair: `[[lang]]/home`\n\nNote that an optional route parameter cannot follow a rest parameter (`[...rest]/[[optional]]`), since parameters are matched 'greedily' and the optional parameter would always be unused.\n\n## Matching\n\nA route like `src/routes/fruits/[page]` would match `/fruits/apple`, but it would also match `/fruits/rocketship`. We don't want that. You can ensure that route parameters are well-formed by adding a _matcher_ — which takes the parameter string (`\"apple\"` or `\"rocketship\"`) and returns `true` if it is valid — to your [`params`](configuration#files) directory...\n\n```js\n/// file: src/params/fruit.js\n/**\n * @param {string} param\n * @return {param is ('apple' | 'orange')}\n * @satisfies {import('@sveltejs/kit').ParamMatcher}\n */\nexport function match(param) {\n\treturn param === 'apple' || param === 'orange';\n}\n```\n\n...and augmenting your routes:\n\n```\nsrc/routes/fruits/[page+++=fruit+++]\n```\n\nIf the pathname doesn't match, SvelteKit will try to match other routes (using the sort order specified below), before eventually returning a 404.\n\nEach module in the `params` directory corresponds to a matcher, with the exception of `*.test.js` and `*.spec.js` files which may be used to unit test your matchers.\n\n> [!NOTE] Matchers run both on the server and in the browser.\n\n## Sorting\n\nIt's possible for multiple routes to match a given path. For example each of these routes would match `/foo-abc`:\n\n```sh\nsrc/routes/[...catchall]/+page.svelte\nsrc/routes/[[a=x]]/+page.svelte\nsrc/routes/[b]/+page.svelte\nsrc/routes/foo-[c]/+page.svelte\nsrc/routes/foo-abc/+page.svelte\n```\n\nSvelteKit needs to know which route is being requested. To do so, it sorts them according to the following rules...\n\n- More specific routes are higher priority (e.g. a route with no parameters is more specific than a route with one dynamic parameter, and so on)\n- Parameters with [matchers](#Matching) (`[name=type]`) are higher priority than those without (`[name]`)\n- `[[optional]]` and `[...rest]` parameters are ignored unless they are the final part of the route, in which case they are treated with lowest priority. In other words `x/[[y]]/z` is treated equivalently to `x/z` for the purposes of sorting\n- Ties are resolved alphabetically\n\n...resulting in this ordering, meaning that `/foo-abc` will invoke `src/routes/foo-abc/+page.svelte`, and `/foo-def` will invoke `src/routes/foo-[c]/+page.svelte` rather than less specific routes:\n\n```sh\nsrc/routes/foo-abc/+page.svelte\nsrc/routes/foo-[c]/+page.svelte\nsrc/routes/[[a=x]]/+page.svelte\nsrc/routes/[b]/+page.svelte\nsrc/routes/[...catchall]/+page.svelte\n```\n\n## Encoding\n\nSome characters can't be used on the filesystem — `/` on Linux and Mac, `\\ / : * ? \" < > |` on Windows. The `#` and `%` characters have special meaning in URLs, and the `[ ] ( )` characters have special meaning to SvelteKit, so these also can't be used directly as part of your route.\n\nTo use these characters in your routes, you can use hexadecimal escape sequences, which have the format `[x+nn]` where `nn` is a hexadecimal character code:\n\n- `\\` — `[x+5c]`\n- `/` — `[x+2f]`\n- `:` — `[x+3a]`\n- `*` — `[x+2a]`\n- `?` — `[x+3f]`\n- `\"` — `[x+22]`\n- `<` — `[x+3c]`\n- `>` — `[x+3e]`\n- `|` — `[x+7c]`\n- `#` — `[x+23]`\n- `%` — `[x+25]`\n- `[` — `[x+5b]`\n- `]` — `[x+5d]`\n- `(` — `[x+28]`\n- `)` — `[x+29]`\n\nFor example, to create a `/smileys/:-)` route, you would create a `src/routes/smileys/[x+3a]-[x+29]/+page.svelte` file.\n\nYou can determine the hexadecimal code for a character with JavaScript:\n\n```js\n':'.charCodeAt(0).toString(16); // '3a', hence '[x+3a]'\n```\n\nYou can also use Unicode escape sequences. Generally you won't need to as you can use the unencoded character directly, but if — for some reason — you can't have a filename with an emoji in it, for example, then you can use the escaped characters. In other words, these are equivalent:\n\n```\nsrc/routes/[u+d83e][u+dd2a]/+page.svelte\nsrc/routes/🤪/+page.svelte\n```\n\nThe format for a Unicode escape sequence is `[u+nnnn]` where `nnnn` is a valid value between `0000` and `10ffff`. (Unlike JavaScript string escaping, there's no need to use surrogate pairs to represent code points above `ffff`.) To learn more about Unicode encodings, consult [Programming with Unicode](https://unicodebook.readthedocs.io/unicode_encodings.html).\n\n> [!NOTE] Since TypeScript [struggles](https://github.com/microsoft/TypeScript/issues/13399) with directories with a leading `.` character, you may find it useful to encode these characters when creating e.g. [`.well-known`](https://en.wikipedia.org/wiki/Well-known_URI) routes: `src/routes/[x+2e]well-known/...`\n\n## Advanced layouts\n\nBy default, the _layout hierarchy_ mirrors the _route hierarchy_. In some cases, that might not be what you want.\n\n### (group)\n\nPerhaps you have some routes that are 'app' routes that should have one layout (e.g. `/dashboard` or `/item`), and others that are 'marketing' routes that should have a different layout (`/about` or `/testimonials`). We can group these routes with a directory whose name is wrapped in parentheses — unlike normal directories, `(app)` and `(marketing)` do not affect the URL pathname of the routes inside them:\n\n```tree\nsrc/routes/\n+++│ (app)/+++\n│ ├ dashboard/\n│ ├ item/\n│ └ +layout.svelte\n+++│ (marketing)/+++\n│ ├ about/\n│ ├ testimonials/\n│ └ +layout.svelte\n├ admin/\n└ +layout.svelte\n```\n\nYou can also put a `+page` directly inside a `(group)`, for example if `/` should be an `(app)` or a `(marketing)` page.\n\n### Breaking out of layouts\n\nThe root layout applies to every page of your app — if omitted, it defaults to `{@render children()}`. If you want some pages to have a different layout hierarchy than the rest, then you can put your entire app inside one or more groups _except_ the routes that should not inherit the common layouts.\n\nIn the example above, the `/admin` route does not inherit either the `(app)` or `(marketing)` layouts.\n\n### +page@\n\nPages can break out of the current layout hierarchy on a route-by-route basis. Suppose we have an `/item/[id]/embed` route inside the `(app)` group from the previous example:\n\n```tree\nsrc/routes/\n├ (app)/\n│ ├ item/\n│ │ ├ [id]/\n│ │ │ ├ embed/\n+++│ │ │ │ └ +page.svelte+++\n│ │ │ └ +layout.svelte\n│ │ └ +layout.svelte\n│ └ +layout.svelte\n└ +layout.svelte\n```\n\nOrdinarily, this would inherit the root layout, the `(app)` layout, the `item` layout and the `[id]` layout. We can reset to one of those layouts by appending `@` followed by the segment name — or, for the root layout, the empty string. In this example, we can choose from the following options:\n\n- `+page@[id].svelte` - inherits from `src/routes/(app)/item/[id]/+layout.svelte`\n- `+page@item.svelte` - inherits from `src/routes/(app)/item/+layout.svelte`\n- `+page@(app).svelte` - inherits from `src/routes/(app)/+layout.svelte`\n- `+page@.svelte` - inherits from `src/routes/+layout.svelte`\n\n```tree\nsrc/routes/\n├ (app)/\n│ ├ item/\n│ │ ├ [id]/\n│ │ │ ├ embed/\n+++│ │ │ │ └ +page@(app).svelte+++\n│ │ │ └ +layout.svelte\n│ │ └ +layout.svelte\n│ └ +layout.svelte\n└ +layout.svelte\n```\n\n### +layout@\n\nLike pages, layouts can _themselves_ break out of their parent layout hierarchy, using the same technique. For example, a `+layout@.svelte` component would reset the hierarchy for all its child routes.\n\n```\nsrc/routes/\n├ (app)/\n│ ├ item/\n│ │ ├ [id]/\n│ │ │ ├ embed/\n│ │ │ │ └ +page.svelte  // uses (app)/item/[id]/+layout.svelte\n│ │ │ ├ +layout.svelte  // inherits from (app)/item/+layout@.svelte\n│ │ │ └ +page.svelte    // uses (app)/item/+layout@.svelte\n│ │ └ +layout@.svelte   // inherits from root layout, skipping (app)/+layout.svelte\n│ └ +layout.svelte\n└ +layout.svelte\n```\n\n### When to use layout groups\n\nNot all use cases are suited for layout grouping, nor should you feel compelled to use them. It might be that your use case would result in complex `(group)` nesting, or that you don't want to introduce a `(group)` for a single outlier. It's perfectly fine to use other means such as composition (reusable `load` functions or Svelte components) or if-statements to achieve what you want. The following example shows a layout that rewinds to the root layout and reuses components and functions that other layouts can also use:\n\n```svelte\n<!--- file: src/routes/nested/route/+layout@.svelte --->\n<script>\n\timport ReusableLayout from '$lib/ReusableLayout.svelte';\n\tlet { data, children } = $props();\n</script>\n\n<ReusableLayout {data}>\n\t{@render children()}\n</ReusableLayout>\n```\n\n```js\n/// file: src/routes/nested/route/+layout.js\n// @filename: ambient.d.ts\ndeclare module \"$lib/reusable-load-function\" {\n\texport function reusableLoad(event: import('@sveltejs/kit').LoadEvent): Promise<Record<string, any>>;\n}\n// @filename: index.js\n// ---cut---\nimport { reusableLoad } from '$lib/reusable-load-function';\n\n/** @type {import('./$types').PageLoad} */\nexport function load(event) {\n\t// Add additional logic here, if needed\n\treturn reusableLoad(event);\n}\n```\n\n## Further reading\n\n- [Tutorial: Advanced Routing](/tutorial/kit/optional-params)",
    "kit/hooks": "'Hooks' are app-wide functions you declare that SvelteKit will call in response to specific events, giving you fine-grained control over the framework's behaviour.\n\nThere are three hooks files, all optional:\n\n- `src/hooks.server.js` — your app's server hooks\n- `src/hooks.client.js` — your app's client hooks\n- `src/hooks.js` — your app's hooks that run on both the client and server\n\nCode in these modules will run when the application starts up, making them useful for initializing database clients and so on.\n\n> [!NOTE] You can configure the location of these files with [`config.kit.files.hooks`](configuration#files).\n\n## Server hooks\n\nThe following hooks can be added to `src/hooks.server.js`:\n\n### handle\n\nThis function runs every time the SvelteKit server receives a [request](web-standards#Fetch-APIs-Request) — whether that happens while the app is running, or during [prerendering](page-options#prerender) — and determines the [response](web-standards#Fetch-APIs-Response). It receives an `event` object representing the request and a function called `resolve`, which renders the route and generates a `Response`. This allows you to modify response headers or bodies, or bypass SvelteKit entirely (for implementing routes programmatically, for example).\n\n```js\n/// file: src/hooks.server.js\n/** @type {import('@sveltejs/kit').Handle} */\nexport async function handle({ event, resolve }) {\n\tif (event.url.pathname.startsWith('/custom')) {\n\t\treturn new Response('custom response');\n\t}\n\n\tconst response = await resolve(event);\n\treturn response;\n}\n```\n\n> [!NOTE] Requests for static assets — which includes pages that were already prerendered — are _not_ handled by SvelteKit.\n\nIf unimplemented, defaults to `({ event, resolve }) => resolve(event)`.\n\nDuring prerendering, SvelteKit crawls your pages for links and renders each route it finds. Rendering the route invokes the `handle` function (and all other route dependencies, like `load`). If you need to exclude some code from running during this phase, check that the app is not [`building`]($app-environment#building) beforehand.\n\n### locals\n\nTo add custom data to the request, which is passed to handlers in `+server.js` and server `load` functions, populate the `event.locals` object, as shown below.\n\n```js\n/// file: src/hooks.server.js\n// @filename: ambient.d.ts\ntype User = {\n\tname: string;\n}\n\ndeclare namespace App {\n\tinterface Locals {\n\t\tuser: User;\n\t}\n}\n\nconst getUserInformation: (cookie: string | void) => Promise<User>;\n\n// @filename: index.js\n// ---cut---\n/** @type {import('@sveltejs/kit').Handle} */\nexport async function handle({ event, resolve }) {\n\tevent.locals.user = await getUserInformation(event.cookies.get('sessionid'));\n\n\tconst response = await resolve(event);\n\n\t// Note that modifying response headers isn't always safe.\n\t// Response objects can have immutable headers\n\t// (e.g. Response.redirect() returned from an endpoint).\n\t// Modifying immutable headers throws a TypeError.\n\t// In that case, clone the response or avoid creating a\n\t// response object with immutable headers.\n\tresponse.headers.set('x-custom-header', 'potato');\n\n\treturn response;\n}\n```\n\nYou can define multiple `handle` functions and execute them with [the `sequence` helper function](@sveltejs-kit-hooks).\n\n`resolve` also supports a second, optional parameter that gives you more control over how the response will be rendered. That parameter is an object that can have the following fields:\n\n- `transformPageChunk(opts: { html: string, done: boolean }): MaybePromise<string | undefined>` — applies custom transforms to HTML. If `done` is true, it's the final chunk. Chunks are not guaranteed to be well-formed HTML (they could include an element's opening tag but not its closing tag, for example) but they will always be split at sensible boundaries such as `%sveltekit.head%` or layout/page components.\n- `filterSerializedResponseHeaders(name: string, value: string): boolean` — determines which headers should be included in serialized responses when a `load` function loads a resource with `fetch`. By default, none will be included.\n- `preload(input: { type: 'js' | 'css' | 'font' | 'asset', path: string }): boolean` — determines what files should be added to the `<head>` tag to preload it. The method is called with each file that was found at build time while constructing the code chunks — so if you for example have `import './styles.css` in your `+page.svelte`, `preload` will be called with the resolved path to that CSS file when visiting that page. Note that in dev mode `preload` is _not_ called, since it depends on analysis that happens at build time. Preloading can improve performance by downloading assets sooner, but it can also hurt if too much is downloaded unnecessarily. By default, `js` and `css` files will be preloaded. `asset` files are not preloaded at all currently, but we may add this later after evaluating feedback.\n\n```js\n/// file: src/hooks.server.js\n/** @type {import('@sveltejs/kit').Handle} */\nexport async function handle({ event, resolve }) {\n\tconst response = await resolve(event, {\n\t\ttransformPageChunk: ({ html }) => html.replace('old', 'new'),\n\t\tfilterSerializedResponseHeaders: (name) => name.startsWith('x-'),\n\t\tpreload: ({ type, path }) => type === 'js' || path.includes('/important/')\n\t});\n\n\treturn response;\n}\n```\n\nNote that `resolve(...)` will never throw an error, it will always return a `Promise<Response>` with the appropriate status code. If an error is thrown elsewhere during `handle`, it is treated as fatal, and SvelteKit will respond with a JSON representation of the error or a fallback error page — which can be customised via `src/error.html` — depending on the `Accept` header. You can read more about error handling [here](errors).\n\n### handleFetch\n\nThis function allows you to modify (or replace) the result of an [`event.fetch`](load#Making-fetch-requests) call that runs on the server (or during prerendering) inside an endpoint, `load`, `action`, `handle`, `handleError` or `reroute`.\n\nFor example, your `load` function might make a request to a public URL like `https://api.yourapp.com` when the user performs a client-side navigation to the respective page, but during SSR it might make sense to hit the API directly (bypassing whatever proxies and load balancers sit between it and the public internet).\n\n```js\n/// file: src/hooks.server.js\n/** @type {import('@sveltejs/kit').HandleFetch} */\nexport async function handleFetch({ request, fetch }) {\n\tif (request.url.startsWith('https://api.yourapp.com/')) {\n\t\t// clone the original request, but change the URL\n\t\trequest = new Request(\n\t\t\trequest.url.replace('https://api.yourapp.com/', 'http://localhost:9999/'),\n\t\t\trequest\n\t\t);\n\t}\n\n\treturn fetch(request);\n}\n```\n\nRequests made with `event.fetch` follow the browser's credentials model — for same-origin requests, `cookie` and `authorization` headers are forwarded unless the `credentials` option is set to `\"omit\"`. For cross-origin requests, `cookie` will be included if the request URL belongs to a subdomain of the app — for example if your app is on `my-domain.com`, and your API is on `api.my-domain.com`, cookies will be included in the request.\n\nThere is one caveat: if your app and your API are on sibling subdomains — `www.my-domain.com` and `api.my-domain.com` for example — then a cookie belonging to a common parent domain like `my-domain.com` will _not_ be included, because SvelteKit has no way to know which domain the cookie belongs to. In these cases you will need to manually include the cookie using `handleFetch`:\n\n```js\n/// file: src/hooks.server.js\n// @errors: 2345\n/** @type {import('@sveltejs/kit').HandleFetch} */\nexport async function handleFetch({ event, request, fetch }) {\n\tif (request.url.startsWith('https://api.my-domain.com/')) {\n\t\trequest.headers.set('cookie', event.request.headers.get('cookie'));\n\t}\n\n\treturn fetch(request);\n}\n```\n\n### handleValidationError\n\nThis hook is called when a remote function is called with an argument that does not match the provided [Standard Schema](https://standardschema.dev/). It must return an object matching the shape of [`App.Error`](types#Error).\n\nSay you have a remote function that expects a string as its argument ...\n\n```js\n/// file: todos.remote.js\nimport * as v from 'valibot';\nimport { query } from '$app/server';\n\nexport const getTodo = query(v.string(), (id) => {\n\t// implementation...\n});\n```\n\n...but it is called with something that doesn't match the schema — such as a number (e.g `await getTodos(1)`) — then validation will fail, the server will respond with a [400 status code](https://http.dog/400), and the function will throw with the message 'Bad Request'.\n\nTo customise this message and add additional properties to the error object, implement `handleValidationError`:\n\n```js\n/// file: src/hooks.server.js\n/** @type {import('@sveltejs/kit').HandleValidationError} */\nexport function handleValidationError({ issues }) {\n\treturn {\n\t\tmessage: 'No thank you'\n\t};\n}\n```\n\nBe thoughtful about what information you expose here, as the most likely reason for validation to fail is that someone is sending malicious requests to your server.\n\n## Shared hooks\n\nThe following can be added to `src/hooks.server.js` _and_ `src/hooks.client.js`:\n\n### handleError\n\nIf an [unexpected error](errors#Unexpected-errors) is thrown during loading, rendering, or from an endpoint, this function will be called with the `error`, `event`, `status` code and `message`. This allows for two things:\n\n- you can log the error\n- you can generate a custom representation of the error that is safe to show to users, omitting sensitive details like messages and stack traces. The returned value, which defaults to `{ message }`, becomes the value of `$page.error`.\n\nFor errors thrown from your code (or library code called by your code) the status will be 500 and the message will be \"Internal Error\". While `error.message` may contain sensitive information that should not be exposed to users, `message` is safe (albeit meaningless to the average user).\n\nTo add more information to the `$page.error` object in a type-safe way, you can customize the expected shape by declaring an `App.Error` interface (which must include `message: string`, to guarantee sensible fallback behavior). This allows you to — for example — append a tracking ID for users to quote in correspondence with your technical support staff:\n\n```ts\n/// file: src/app.d.ts\ndeclare global {\n\tnamespace App {\n\t\tinterface Error {\n\t\t\tmessage: string;\n\t\t\terrorId: string;\n\t\t}\n\t}\n}\n\nexport {};\n```\n\n```js\n/// file: src/hooks.server.js\n// @errors: 2322 2353\n// @filename: ambient.d.ts\ndeclare module '@sentry/sveltekit' {\n\texport const init: (opts: any) => void;\n\texport const captureException: (error: any, opts: any) => void;\n}\n\n// @filename: index.js\n// ---cut---\nimport * as Sentry from '@sentry/sveltekit';\n\nSentry.init({/*...*/})\n\n/** @type {import('@sveltejs/kit').HandleServerError} */\nexport async function handleError({ error, event, status, message }) {\n\tconst errorId = crypto.randomUUID();\n\n\t// example integration with https://sentry.io/\n\tSentry.captureException(error, {\n\t\textra: { event, errorId, status }\n\t});\n\n\treturn {\n\t\tmessage: 'Whoops!',\n\t\terrorId\n\t};\n}\n```\n\n```js\n/// file: src/hooks.client.js\n// @errors: 2322 2353\n// @filename: ambient.d.ts\ndeclare module '@sentry/sveltekit' {\n\texport const init: (opts: any) => void;\n\texport const captureException: (error: any, opts: any) => void;\n}\n\n// @filename: index.js\n// ---cut---\nimport * as Sentry from '@sentry/sveltekit';\n\nSentry.init({/*...*/})\n\n/** @type {import('@sveltejs/kit').HandleClientError} */\nexport async function handleError({ error, event, status, message }) {\n\tconst errorId = crypto.randomUUID();\n\n\t// example integration with https://sentry.io/\n\tSentry.captureException(error, {\n\t\textra: { event, errorId, status }\n\t});\n\n\treturn {\n\t\tmessage: 'Whoops!',\n\t\terrorId\n\t};\n}\n```\n\n> [!NOTE] In `src/hooks.client.js`, the type of `handleError` is `HandleClientError` instead of `HandleServerError`, and `event` is a `NavigationEvent` rather than a `RequestEvent`.\n\nThis function is not called for _expected_ errors (those thrown with the [`error`](@sveltejs-kit#error) function imported from `@sveltejs/kit`).\n\nDuring development, if an error occurs because of a syntax error in your Svelte code, the passed in error has a `frame` property appended highlighting the location of the error.\n\n> [!NOTE] Make sure that `handleError` _never_ throws an error\n\n### init\n\nThis function runs once, when the server is created or the app starts in the browser, and is a useful place to do asynchronous work such as initializing a database connection.\n\n> [!NOTE] If your environment supports top-level await, the `init` function is really no different from writing your initialisation logic at the top level of the module, but some environments — most notably, Safari — don't.\n\n```js\n// @errors: 2307\n/// file: src/hooks.server.js\nimport * as db from '$lib/server/database';\n\n/** @type {import('@sveltejs/kit').ServerInit} */\nexport async function init() {\n\tawait db.connect();\n}\n```\n\n> [!NOTE]\n> In the browser, asynchronous work in `init` will delay hydration, so be mindful of what you put in there.\n\n## Universal hooks\n\nThe following can be added to `src/hooks.js`. Universal hooks run on both server and client (not to be confused with shared hooks, which are environment-specific).\n\n### reroute\n\nThis function runs before `handle` and allows you to change how URLs are translated into routes. The returned pathname (which defaults to `url.pathname`) is used to select the route and its parameters.\n\nFor example, you might have a `src/routes/[[lang]]/about/+page.svelte` page, which should be accessible as `/en/about` or `/de/ueber-uns` or `/fr/a-propos`. You could implement this with `reroute`:\n\n```js\n// @errors: 2345 2304\n/// file: src/hooks.js\n\n/** @type {Record<string, string>} */\nconst translated = {\n\t'/en/about': '/en/about',\n\t'/de/ueber-uns': '/de/about',\n\t'/fr/a-propos': '/fr/about',\n};\n\n/** @type {import('@sveltejs/kit').Reroute} */\nexport function reroute({ url }) {\n\tif (url.pathname in translated) {\n\t\treturn translated[url.pathname];\n\t}\n}\n```\n\nThe `lang` parameter will be correctly derived from the returned pathname.\n\nUsing `reroute` will _not_ change the contents of the browser's address bar, or the value of `event.url`.\n\nSince version 2.18, the `reroute` hook can be asynchronous, allowing it to (for example) fetch data from your backend to decide where to reroute to. Use this carefully and make sure it's fast, as it will delay navigation otherwise. If you need to fetch data, use the `fetch` provided as an argument. It has the [same benefits](load#Making-fetch-requests) as the `fetch` provided to `load` functions, with the caveat that `params` and `id` are unavailable to [`handleFetch`](#Server-hooks-handleFetch) because the route is not yet known.\n\n```js\n// @errors: 2345 2304\n/// file: src/hooks.js\n\n/** @type {import('@sveltejs/kit').Reroute} */\nexport async function reroute({ url, fetch }) {\n\t// Ask a special endpoint within your app about the destination\n\tif (url.pathname === '/api/reroute') return;\n\n\tconst api = new URL('/api/reroute', url);\n\tapi.searchParams.set('pathname', url.pathname);\n\n\tconst result = await fetch(api).then(r => r.json());\n\treturn result.pathname;\n}\n```\n\n\n> [!NOTE] `reroute` is considered a pure, idempotent function. As such, it must always return the same output for the same input and not have side effects. Under these assumptions, SvelteKit caches the result of `reroute` on the client so it is only called once per unique URL.\n\n### transport\n\nThis is a collection of _transporters_, which allow you to pass custom types — returned from `load` and form actions — across the server/client boundary. Each transporter contains an `encode` function, which encodes values on the server (or returns a falsy value for anything that isn't an instance of the type) and a corresponding `decode` function:\n\n```js\n// @errors: 2307\n/// file: src/hooks.js\nimport { Vector } from '$lib/math';\n\n/** @type {import('@sveltejs/kit').Transport} */\nexport const transport = {\n\tVector: {\n\t\tencode: (value) => value instanceof Vector && [value.x, value.y],\n\t\tdecode: ([x, y]) => new Vector(x, y)\n\t}\n};\n```\n\n\n## Further reading\n\n- [Tutorial: Hooks](/tutorial/kit/handle)",
    "kit/errors": "Errors are an inevitable fact of software development. SvelteKit handles errors differently depending on where they occur, what kind of errors they are, and the nature of the incoming request.\n\n## Error objects\n\nSvelteKit distinguishes between expected and unexpected errors, both of which are represented as simple `{ message: string }` objects by default.\n\nYou can add additional properties, like a `code` or a tracking `id`, as shown in the examples below. (When using TypeScript this requires you to redefine the `Error` type as described in  [type safety](errors#Type-safety)).\n\n## Expected errors\n\nAn _expected_ error is one created with the [`error`](@sveltejs-kit#error) helper imported from `@sveltejs/kit`:\n\n```js\n/// file: src/routes/blog/[slug]/+page.server.js\n// @filename: ambient.d.ts\ndeclare module '$lib/server/database' {\n\texport function getPost(slug: string): Promise<{ title: string, content: string } | undefined>\n}\n\n// @filename: index.js\n// ---cut---\nimport { error } from '@sveltejs/kit';\nimport * as db from '$lib/server/database';\n\n/** @type {import('./$types').PageServerLoad} */\nexport async function load({ params }) {\n\tconst post = await db.getPost(params.slug);\n\n\tif (!post) {\n\t\terror(404, {\n\t\t\tmessage: 'Not found'\n\t\t});\n\t}\n\n\treturn { post };\n}\n```\n\nThis throws an exception that SvelteKit catches, causing it to set the response status code to 404 and render an [`+error.svelte`](routing#error) component, where `page.error` is the object provided as the second argument to `error(...)`.\n\n```svelte\n<!--- file: src/routes/+error.svelte --->\n<script>\n\timport { page } from '$app/state';\n</script>\n\n<h1>{page.error.message}</h1>\n```\n\n> [!LEGACY]\n> `$app/state` was added in SvelteKit 2.12. If you're using an earlier version or are using Svelte 4, use `$app/stores` instead.\n\nYou can add extra properties to the error object if needed...\n\n```js\n// @filename: ambient.d.ts\ndeclare global {\n\tnamespace App {\n\t\tinterface Error {\n\t\t\tmessage: string;\n\t\t\tcode: string;\n\t\t}\n\t}\n}\nexport {}\n\n// @filename: index.js\nimport { error } from '@sveltejs/kit';\n// ---cut---\nerror(404, {\n\tmessage: 'Not found',\n\t+++code: 'NOT_FOUND'+++\n});\n```\n\n...otherwise, for convenience, you can pass a string as the second argument:\n\n```js\nimport { error } from '@sveltejs/kit';\n// ---cut---\n---error(404, { message: 'Not found' });---\n+++error(404, 'Not found');+++\n```\n\n> [!NOTE] [In SvelteKit 1.x](migrating-to-sveltekit-2#redirect-and-error-are-no-longer-thrown-by-you) you had to `throw` the `error` yourself\n\n## Unexpected errors\n\nAn _unexpected_ error is any other exception that occurs while handling a request. Since these can contain sensitive information, unexpected error messages and stack traces are not exposed to users.\n\nBy default, unexpected errors are printed to the console (or, in production, your server logs), while the error that is exposed to the user has a generic shape:\n\n```json\n{ \"message\": \"Internal Error\" }\n```\n\nUnexpected errors will go through the [`handleError`](hooks#Shared-hooks-handleError) hook, where you can add your own error handling — for example, sending errors to a reporting service, or returning a custom error object which becomes `$page.error`.\n\n## Responses\n\nIf an error occurs inside `handle` or inside a [`+server.js`](routing#server) request handler, SvelteKit will respond with either a fallback error page or a JSON representation of the error object, depending on the request's `Accept` headers.\n\nYou can customise the fallback error page by adding a `src/error.html` file:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>%sveltekit.error.message%</title>\n\t</head>\n\t<body>\n\t\t<h1>My custom error page</h1>\n\t\t<p>Status: %sveltekit.status%</p>\n\t\t<p>Message: %sveltekit.error.message%</p>\n\t</body>\n</html>\n```\n\nSvelteKit will replace `%sveltekit.status%` and `%sveltekit.error.message%` with their corresponding values.\n\nIf the error instead occurs inside a `load` function while rendering a page, SvelteKit will render the [`+error.svelte`](routing#error) component nearest to where the error occurred. If the error occurs inside a `load` function in `+layout(.server).js`, the closest error boundary in the tree is an `+error.svelte` file _above_ that layout (not next to it).\n\nThe exception is when the error occurs inside the root `+layout.js` or `+layout.server.js`, since the root layout would ordinarily _contain_ the `+error.svelte` component. In this case, SvelteKit uses the fallback error page.\n\n## Type safety\n\nIf you're using TypeScript and need to customize the shape of errors, you can do so by declaring an `App.Error` interface in your app (by convention, in `src/app.d.ts`, though it can live anywhere that TypeScript can 'see'):\n\n```ts\n/// file: src/app.d.ts\ndeclare global {\n\tnamespace App {\n\t\tinterface Error {\n+++\t\t\tcode: string;\n\t\t\tid: string;+++\n\t\t}\n\t}\n}\n\nexport {};\n```\n\nThis interface always includes a `message: string` property.\n\n## Further reading\n\n- [Tutorial: Errors and redirects](/tutorial/kit/error-basics)\n- [Tutorial: Hooks](/tutorial/kit/handle)",
    "kit/link-options": "In SvelteKit, `<a>` elements (rather than framework-specific `<Link>` components) are used to navigate between the routes of your app. If the user clicks on a link whose `href` is 'owned' by the app (as opposed to, say, a link to an external site) then SvelteKit will navigate to the new page by importing its code and then calling any `load` functions it needs to fetch data.\n\nYou can customise the behaviour of links with `data-sveltekit-*` attributes. These can be applied to the `<a>` itself, or to a parent element.\n\nThese options also apply to `<form>` elements with [`method=\"GET\"`](form-actions#GET-vs-POST).\n\n## data-sveltekit-preload-data\n\nBefore the browser registers that the user has clicked on a link, we can detect that they've hovered the mouse over it (on desktop) or that a `touchstart` or `mousedown` event was triggered. In both cases, we can make an educated guess that a `click` event is coming.\n\nSvelteKit can use this information to get a head start on importing the code and fetching the page's data, which can give us an extra couple of hundred milliseconds — the difference between a user interface that feels laggy and one that feels snappy.\n\nWe can control this behaviour with the `data-sveltekit-preload-data` attribute, which can have one of two values:\n\n- `\"hover\"` means that preloading will start if the mouse comes to a rest over a link. On mobile, preloading begins on `touchstart`\n- `\"tap\"` means that preloading will start as soon as a `touchstart` or `mousedown` event is registered\n\nThe default project template has a `data-sveltekit-preload-data=\"hover\"` attribute applied to the `<body>` element in `src/app.html`, meaning that every link is preloaded on hover by default:\n\n```html\n<body data-sveltekit-preload-data=\"hover\">\n\t<div style=\"display: contents\">%sveltekit.body%</div>\n</body>\n```\n\nSometimes, calling `load` when the user hovers over a link might be undesirable, either because it's likely to result in false positives (a click needn't follow a hover) or because data is updating very quickly and a delay could mean staleness.\n\nIn these cases, you can specify the `\"tap\"` value, which causes SvelteKit to call `load` only when the user taps or clicks on a link:\n\n```html\n<a data-sveltekit-preload-data=\"tap\" href=\"/stonks\">\n\tGet current stonk values\n</a>\n```\n\n> [!NOTE] You can also programmatically invoke `preloadData` from `$app/navigation`.\n\nData will never be preloaded if the user has chosen reduced data usage, meaning [`navigator.connection.saveData`](https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/saveData) is `true`.\n\n## data-sveltekit-preload-code\n\nEven in cases where you don't want to preload _data_ for a link, it can be beneficial to preload the _code_. The `data-sveltekit-preload-code` attribute works similarly to `data-sveltekit-preload-data`, except that it can take one of four values, in decreasing 'eagerness':\n\n- `\"eager\"` means that links will be preloaded straight away\n- `\"viewport\"` means that links will be preloaded once they enter the viewport\n- `\"hover\"` - as above, except that only code is preloaded\n- `\"tap\"` - as above, except that only code is preloaded\n\nNote that `viewport` and `eager` only apply to links that are present in the DOM immediately following navigation — if a link is added later (in an `{#if ...}` block, for example) it will not be preloaded until triggered by `hover` or `tap`. This is to avoid performance pitfalls resulting from aggressively observing the DOM for changes.\n\n> [!NOTE] Since preloading code is a prerequisite for preloading data, this attribute will only have an effect if it specifies a more eager value than any `data-sveltekit-preload-data` attribute that is present.\n\nAs with `data-sveltekit-preload-data`, this attribute will be ignored if the user has chosen reduced data usage.\n\n## data-sveltekit-reload\n\nOccasionally, we need to tell SvelteKit not to handle a link, but allow the browser to handle it. Adding a `data-sveltekit-reload` attribute to a link...\n\n```html\n<a data-sveltekit-reload href=\"/path\">Path</a>\n```\n\n...will cause a full-page navigation when the link is clicked.\n\nLinks with a `rel=\"external\"` attribute will receive the same treatment. In addition, they will be ignored during [prerendering](page-options#prerender).\n\n## data-sveltekit-replacestate\n\nSometimes you don't want navigation to create a new entry in the browser's session history. Adding a `data-sveltekit-replacestate` attribute to a link...\n\n```html\n<a data-sveltekit-replacestate href=\"/path\">Path</a>\n```\n\n...will replace the current `history` entry rather than creating a new one with `pushState` when the link is clicked.\n\n## data-sveltekit-keepfocus\n\nSometimes you don't want [focus to be reset](accessibility#Focus-management) after navigation. For example, maybe you have a search form that submits as the user is typing, and you want to keep focus on the text input.  Adding a `data-sveltekit-keepfocus` attribute to it...\n\n```html\n<form data-sveltekit-keepfocus>\n\t<input type=\"text\" name=\"query\">\n</form>\n```\n\n...will cause the currently focused element to retain focus after navigation. In general, avoid using this attribute on links, since the focused element would be the `<a>` tag (and not a previously focused element) and screen reader and other assistive technology users often expect focus to be moved after a navigation. You should also only use this attribute on elements that still exist after navigation. If the element no longer exists, the user's focus will be lost, making for a confusing experience for assistive technology users.\n\n## data-sveltekit-noscroll\n\nWhen navigating to internal links, SvelteKit mirrors the browser's default navigation behaviour: it will change the scroll position to 0,0 so that the user is at the very top left of the page (unless the link includes a `#hash`, in which case it will scroll to the element with a matching ID).\n\nIn certain cases, you may wish to disable this behaviour. Adding a `data-sveltekit-noscroll` attribute to a link...\n\n```html\n<a href=\"path\" data-sveltekit-noscroll>Path</a>\n```\n\n...will prevent scrolling after the link is clicked.\n\n## Disabling options\n\nTo disable any of these options inside an element where they have been enabled, use the `\"false\"` value:\n\n```html\n<div data-sveltekit-preload-data>\n\t<!-- these links will be preloaded -->\n\t<a href=\"/a\">a</a>\n\t<a href=\"/b\">b</a>\n\t<a href=\"/c\">c</a>\n\n\t<div data-sveltekit-preload-data=\"false\">\n\t\t<!-- these links will NOT be preloaded -->\n\t\t<a href=\"/d\">d</a>\n\t\t<a href=\"/e\">e</a>\n\t\t<a href=\"/f\">f</a>\n\t</div>\n</div>\n```\n\nTo apply an attribute to an element conditionally, do this:\n\n```svelte\n<div data-sveltekit-preload-data={condition ? 'hover' : false}>\n```",
    "kit/service-workers": "Service workers act as proxy servers that handle network requests inside your app. This makes it possible to make your app work offline, but even if you don't need offline support (or can't realistically implement it because of the type of app you're building), it's often worth using service workers to speed up navigation by precaching your built JS and CSS.\n\nIn SvelteKit, if you have a `src/service-worker.js` file (or `src/service-worker/index.js`) it will be bundled and automatically registered. You can change the [location of your service worker](configuration#files) if you need to.\n\nYou can [disable automatic registration](configuration#serviceWorker) if you need to register the service worker with your own logic or use another solution. The default registration looks something like this:\n\n```js\nif ('serviceWorker' in navigator) {\n\taddEventListener('load', function () {\n\t\tnavigator.serviceWorker.register('./path/to/service-worker.js');\n\t});\n}\n```\n\n## Inside the service worker\n\nInside the service worker you have access to the [`$service-worker` module]($service-worker), which provides you with the paths to all static assets, build files and prerendered pages. You're also provided with an app version string, which you can use for creating a unique cache name, and the deployment's `base` path. If your Vite config specifies `define` (used for global variable replacements), this will be applied to service workers as well as your server/client builds.\n\nThe following example caches the built app and any files in `static` eagerly, and caches all other requests as they happen. This would make each page work offline once visited.\n\n```js\n/// file: src/service-worker.js\n// Disables access to DOM typings like `HTMLElement` which are not available\n// inside a service worker and instantiates the correct globals\n/// <reference no-default-lib=\"true\"/>\n/// <reference lib=\"esnext\" />\n/// <reference lib=\"webworker\" />\n\n// Ensures that the `$service-worker` import has proper type definitions\n/// <reference types=\"@sveltejs/kit\" />\n\n// Only necessary if you have an import from `$env/static/public`\n/// <reference types=\"../.svelte-kit/ambient.d.ts\" />\n\nimport { build, files, version } from '$service-worker';\n\n// This gives `self` the correct types\nconst self = /** @type {ServiceWorkerGlobalScope} */ (/** @type {unknown} */ (globalThis.self));\n\n// Create a unique cache name for this deployment\nconst CACHE = `cache-${version}`;\n\nconst ASSETS = [\n\t...build, // the app itself\n\t...files  // everything in `static`\n];\n\nself.addEventListener('install', (event) => {\n\t// Create a new cache and add all files to it\n\tasync function addFilesToCache() {\n\t\tconst cache = await caches.open(CACHE);\n\t\tawait cache.addAll(ASSETS);\n\t}\n\n\tevent.waitUntil(addFilesToCache());\n});\n\nself.addEventListener('activate', (event) => {\n\t// Remove previous cached data from disk\n\tasync function deleteOldCaches() {\n\t\tfor (const key of await caches.keys()) {\n\t\t\tif (key !== CACHE) await caches.delete(key);\n\t\t}\n\t}\n\n\tevent.waitUntil(deleteOldCaches());\n});\n\nself.addEventListener('fetch', (event) => {\n\t// ignore POST requests etc\n\tif (event.request.method !== 'GET') return;\n\n\tasync function respond() {\n\t\tconst url = new URL(event.request.url);\n\t\tconst cache = await caches.open(CACHE);\n\n\t\t// `build`/`files` can always be served from the cache\n\t\tif (ASSETS.includes(url.pathname)) {\n\t\t\tconst response = await cache.match(url.pathname);\n\n\t\t\tif (response) {\n\t\t\t\treturn response;\n\t\t\t}\n\t\t}\n\n\t\t// for everything else, try the network first, but\n\t\t// fall back to the cache if we're offline\n\t\ttry {\n\t\t\tconst response = await fetch(event.request);\n\n\t\t\t// if we're offline, fetch can return a value that is not a Response\n\t\t\t// instead of throwing - and we can't pass this non-Response to respondWith\n\t\t\tif (!(response instanceof Response)) {\n\t\t\t\tthrow new Error('invalid response from fetch');\n\t\t\t}\n\n\t\t\tif (response.status === 200) {\n\t\t\t\tcache.put(event.request, response.clone());\n\t\t\t}\n\n\t\t\treturn response;\n\t\t} catch (err) {\n\t\t\tconst response = await cache.match(event.request);\n\n\t\t\tif (response) {\n\t\t\t\treturn response;\n\t\t\t}\n\n\t\t\t// if there's no cache, then just error out\n\t\t\t// as there is nothing we can do to respond to this request\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tevent.respondWith(respond());\n});\n```\n\n> [!NOTE] Be careful when caching! In some cases, stale data might be worse than data that's unavailable while offline. Since browsers will empty caches if they get too full, you should also be careful about caching large assets like video files.\n\n## During development\n\nThe service worker is bundled for production, but not during development. For that reason, only browsers that support [modules in service workers](https://web.dev/es-modules-in-sw) will be able to use them at dev time. If you are manually registering your service worker, you will need to pass the `{ type: 'module' }` option in development:\n\n```js\nimport { dev } from '$app/environment';\n\nnavigator.serviceWorker.register('/service-worker.js', {\n\ttype: dev ? 'module' : 'classic'\n});\n```\n\n> [!NOTE] `build` and `prerendered` are empty arrays during development\n\n## Other solutions\n\nSvelteKit's service worker implementation is designed to be easy to work with and is probably a good solution for most users. However, outside of SvelteKit, many PWA applications leverage the [Workbox](https://web.dev/learn/pwa/workbox) library. If you're used to using Workbox you may prefer [Vite PWA plugin](https://vite-pwa-org.netlify.app/frameworks/sveltekit.html).\n\n## References\n\nFor more general information on service workers, we recommend [the MDN web docs](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers).",
    "kit/server-only-modules": "Like a good friend, SvelteKit keeps your secrets. When writing your backend and frontend in the same repository, it can be easy to accidentally import sensitive data into your front-end code (environment variables containing API keys, for example). SvelteKit provides a way to prevent this entirely: server-only modules.\n\n## Private environment variables\n\nThe [`$env/static/private`]($env-static-private) and [`$env/dynamic/private`]($env-dynamic-private) modules can only be imported into modules that only run on the server, such as [`hooks.server.js`](hooks#Server-hooks) or [`+page.server.js`](routing#page-page.server.js).\n\n## Server-only utilities\n\nThe [`$app/server`]($app-server) module, which contains a [`read`]($app-server#read) function for reading assets from the filesystem, can likewise only be imported by code that runs on the server.\n\n## Your modules\n\nYou can make your own modules server-only in two ways:\n\n- adding `.server` to the filename, e.g. `secrets.server.js`\n- placing them in `$lib/server`, e.g. `$lib/server/secrets.js`\n\n## How it works\n\nAny time you have public-facing code that imports server-only code (whether directly or indirectly)...\n\n```js\n// @errors: 7005\n/// file: $lib/server/secrets.js\nexport const atlantisCoordinates = [/* redacted */];\n```\n\n```js\n// @errors: 2307 7006 7005\n/// file: src/routes/utils.js\nexport { atlantisCoordinates } from '$lib/server/secrets.js';\n\nexport const add = (a, b) => a + b;\n```\n\n```html\n/// file: src/routes/+page.svelte\n<script>\n\timport { add } from './utils.js';\n</script>\n```\n\n...SvelteKit will error:\n\n```\nCannot import $lib/server/secrets.ts into code that runs in the browser, as this could leak sensitive information.\n\n src/routes/+page.svelte imports\n  src/routes/utils.js imports\n   $lib/server/secrets.ts\n\nIf you're only using the import as a type, change it to `import type`.\n```\n\nEven though the public-facing code — `src/routes/+page.svelte` — only uses the `add` export and not the secret `atlantisCoordinates` export, the secret code could end up in JavaScript that the browser downloads, and so the import chain is considered unsafe.\n\nThis feature also works with dynamic imports, even interpolated ones like ``await import(`./${foo}.js`)``.\n\n> [!NOTE] Unit testing frameworks like Vitest do not distinguish between server-only and public-facing code. For this reason, illegal import detection is disabled when running tests, as determined by `process.env.TEST === 'true'`.\n\n## Further reading\n\n- [Tutorial: Environment variables](/tutorial/kit/env-static-private)",
    "kit/snapshots": "Ephemeral DOM state — like scroll positions on sidebars, the content of `<input>` elements and so on — is discarded when you navigate from one page to another.\n\nFor example, if the user fills out a form but navigates away and then back before submitting, or if the user refreshes the page, the values they filled in will be lost. In cases where it's valuable to preserve that input, you can take a _snapshot_ of DOM state, which can then be restored if the user navigates back.\n\nTo do this, export a `snapshot` object with `capture` and `restore` methods from a `+page.svelte` or `+layout.svelte`:\n\n```svelte\n<!--- file: +page.svelte --->\n<script>\n\tlet comment = $state('');\n\n\t/** @type {import('./$types').Snapshot<string>} */\n\texport const snapshot = {\n\t\tcapture: () => comment,\n\t\trestore: (value) => comment = value\n\t};\n</script>\n\n<form method=\"POST\">\n\t<label for=\"comment\">Comment</label>\n\t<textarea id=\"comment\" bind:value={comment} />\n\t<button>Post comment</button>\n</form>\n```\n\nWhen you navigate away from this page, the `capture` function is called immediately before the page updates, and the returned value is associated with the current entry in the browser's history stack. If you navigate back, the `restore` function is called with the stored value as soon as the page is updated.\n\nThe data must be serializable as JSON so that it can be persisted to `sessionStorage`. This allows the state to be restored when the page is reloaded, or when the user navigates back from a different site.\n\n> [!NOTE] Avoid returning very large objects from `capture` — once captured, objects will be retained in memory for the duration of the session, and in extreme cases may be too large to persist to `sessionStorage`.",
    "kit/shallow-routing": "As you navigate around a SvelteKit app, you create _history entries_. Clicking the back and forward buttons traverses through this list of entries, re-running any `load` functions and replacing page components as necessary.\n\nSometimes, it's useful to create history entries _without_ navigating. For example, you might want to show a modal dialog that the user can dismiss by navigating back. This is particularly valuable on mobile devices, where swipe gestures are often more natural than interacting directly with the UI. In these cases, a modal that is _not_ associated with a history entry can be a source of frustration, as a user may swipe backwards in an attempt to dismiss it and find themselves on the wrong page.\n\nSvelteKit makes this possible with the [`pushState`]($app-navigation#pushState) and [`replaceState`]($app-navigation#replaceState) functions, which allow you to associate state with a history entry without navigating. For example, to implement a history-driven modal:\n\n```svelte\n<!--- file: +page.svelte --->\n<script>\n\timport { pushState } from '$app/navigation';\n\timport { page } from '$app/state';\n\timport Modal from './Modal.svelte';\n\n\tfunction showModal() {\n\t\tpushState('', {\n\t\t\tshowModal: true\n\t\t});\n\t}\n</script>\n\n{#if page.state.showModal}\n\t<Modal close={() => history.back()} />\n{/if}\n```\n\nThe modal can be dismissed by navigating back (unsetting `page.state.showModal`) or by interacting with it in a way that causes the `close` callback to run, which will navigate back programmatically.\n\n## API\n\nThe first argument to `pushState` is the URL, relative to the current URL. To stay on the current URL, use `''`.\n\nThe second argument is the new page state, which can be accessed via the [page object]($app-state#page) as `page.state`. You can make page state type-safe by declaring an [`App.PageState`](types#PageState) interface (usually in `src/app.d.ts`).\n\nTo set page state without creating a new history entry, use `replaceState` instead of `pushState`.\n\n> [!LEGACY]\n> `page.state` from `$app/state` was added in SvelteKit 2.12. If you're using an earlier version or are using Svelte 4, use `$page.state` from `$app/stores` instead.\n\n## Loading data for a route\n\nWhen shallow routing, you may want to render another `+page.svelte` inside the current page. For example, clicking on a photo thumbnail could pop up the detail view without navigating to the photo page.\n\nFor this to work, you need to load the data that the `+page.svelte` expects. A convenient way to do this is to use [`preloadData`]($app-navigation#preloadData) inside the `click` handler of an `<a>` element. If the element (or a parent) uses [`data-sveltekit-preload-data`](link-options#data-sveltekit-preload-data), the data will have already been requested, and `preloadData` will reuse that request.\n\n```svelte\n<!--- file: src/routes/photos/+page.svelte --->\n<script>\n\timport { preloadData, pushState, goto } from '$app/navigation';\n\timport { page } from '$app/state';\n\timport Modal from './Modal.svelte';\n\timport PhotoPage from './[id]/+page.svelte';\n\n\tlet { data } = $props();\n</script>\n\n{#each data.thumbnails as thumbnail}\n\t<a\n\t\thref=\"/photos/{thumbnail.id}\"\n\t\tonclick={async (e) => {\n\t\t\tif (innerWidth < 640        // bail if the screen is too small\n\t\t\t\t|| e.shiftKey             // or the link is opened in a new window\n\t\t\t\t|| e.metaKey || e.ctrlKey // or a new tab (mac: metaKey, win/linux: ctrlKey)\n\t\t\t\t// should also consider clicking with a mouse scroll wheel\n\t\t\t) return;\n\n\t\t\t// prevent navigation\n\t\t\te.preventDefault();\n\n\t\t\tconst { href } = e.currentTarget;\n\n\t\t\t// run `load` functions (or rather, get the result of the `load` functions\n\t\t\t// that are already running because of `data-sveltekit-preload-data`)\n\t\t\tconst result = await preloadData(href);\n\n\t\t\tif (result.type === 'loaded' && result.status === 200) {\n\t\t\t\tpushState(href, { selected: result.data });\n\t\t\t} else {\n\t\t\t\t// something bad happened! try navigating\n\t\t\t\tgoto(href);\n\t\t\t}\n\t\t}}\n\t>\n\t\t<img alt={thumbnail.alt} src={thumbnail.src} />\n\t</a>\n{/each}\n\n{#if page.state.selected}\n\t<Modal onclose={() => history.back()}>\n\t\t<!-- pass page data to the +page.svelte component,\n\t\t     just like SvelteKit would on navigation -->\n\t\t<PhotoPage data={page.state.selected} />\n\t</Modal>\n{/if}\n```\n\n## Caveats\n\nDuring server-side rendering, `page.state` is always an empty object. The same is true for the first page the user lands on — if the user reloads the page (or returns from another document), state will _not_ be applied until they navigate.\n\nShallow routing is a feature that requires JavaScript to work. Be mindful when using it and try to think of sensible fallback behavior in case JavaScript isn't available.",
    "kit/observability": "<blockquote class=\"since note\">\n\t<p>Available since 2.31</p>\n</blockquote>\n\nSometimes, you may need to observe how your application is behaving in order to improve performance or find the root cause of a pesky bug. To help with this, SvelteKit can emit server-side [OpenTelemetry](https://opentelemetry.io) spans for the following:\n\n- The [`handle`](hooks#Server-hooks-handle) hook and `handle` functions running in a [`sequence`](@sveltejs-kit-hooks#sequence) (these will show up as children of each other and the root `handle` hook)\n- Server [`load`](load) functions and universal `load` functions when they're run on the server\n- [Form actions](form-actions)\n- [Remote functions](remote-functions)\n\nJust telling SvelteKit to emit spans won't get you far, though — you need to actually collect them somewhere to be able to view them. SvelteKit provides `src/instrumentation.server.ts` as a place to write your tracing setup and instrumentation code. It's guaranteed to be run prior to your application code being imported, providing your deployment platform supports it and your adapter is aware of it.\n\nBoth of these features are currently experimental, meaning they are likely to contain bugs and are subject to change without notice. You must opt in by adding the `kit.experimental.tracing.server` and `kit.experimental.instrumentation.server` option in your `svelte.config.js`:\n\n```js\n/// file: svelte.config.js\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\texperimental: {\n\t\t\t+++tracing: {\n\t\t\t\tserver: true\n\t\t\t},\n\t\t\tinstrumentation: {\n\t\t\t\tserver: true\n\t\t\t}+++\n\t\t}\n\t}\n};\n\nexport default config;\n```\n\n> [!NOTE] Tracing — and more significantly, observability instrumentation — can have a nontrivial overhead. Before you go all-in on tracing, consider whether or not you really need it, or if it might be more appropriate to turn it on in development and preview environments only.\n\n## Augmenting the built-in tracing\n\nSvelteKit provides access to the `root` span and the `current` span on the request event. The root span is the one associated with your root `handle` function, and the current span could be associated with `handle`, `load`, a form action, or a remote function, depending on the context. You can annotate these spans with any attributes you wish to record:\n\n```js\n/// file: $lib/authenticate.ts\n\n// @filename: ambient.d.ts\ndeclare module '$lib/auth-core' {\n\texport function getAuthenticatedUser(): Promise<{ id: string }>\n}\n\n// @filename: index.js\n// ---cut---\nimport { getRequestEvent } from '$app/server';\nimport { getAuthenticatedUser } from '$lib/auth-core';\n\nasync function authenticate() {\n\tconst user = await getAuthenticatedUser();\n\tconst event = getRequestEvent();\n\tevent.tracing.root.setAttribute('userId', user.id);\n}\n```\n\n## Development quickstart\n\nTo view your first trace, you'll need to set up a local collector. We'll use [Jaeger](https://www.jaegertracing.io/docs/getting-started/) in this example, as they provide an easy-to-use quickstart command. Once your collector is running locally:\n\n- Turn on the experimental flags mentioned earlier in your `svelte.config.js` file\n- Use your package manager to install the dependencies you'll need:\n  ```sh\n  npm i @opentelemetry/sdk-node @opentelemetry/auto-instrumentations-node @opentelemetry/exporter-trace-otlp-proto import-in-the-middle\n  ```\n- Create `src/instrumentation.server.js` with the following:\n\n```js\n/// file: src/instrumentation.server.js\nimport { NodeSDK } from '@opentelemetry/sdk-node';\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-proto';\nimport { createAddHookMessageChannel } from 'import-in-the-middle';\nimport { register } from 'node:module';\n\nconst { registerOptions } = createAddHookMessageChannel();\nregister('import-in-the-middle/hook.mjs', import.meta.url, registerOptions);\n\nconst sdk = new NodeSDK({\n\tserviceName: 'test-sveltekit-tracing',\n\ttraceExporter: new OTLPTraceExporter(),\n\tinstrumentations: [getNodeAutoInstrumentations()]\n});\n\nsdk.start();\n```\n\nNow, server-side requests will begin generating traces, which you can view in Jaeger's web console at [localhost:16686](http://localhost:16686).\n\n## `@opentelemetry/api`\n\nSvelteKit uses `@opentelemetry/api` to generate its spans. This is declared as an optional peer dependency so that users not needing traces see no impact on install size or runtime performance. In most cases, if you're configuring your application to collect SvelteKit's spans, you'll end up installing a library like `@opentelemetry/sdk-node` or `@vercel/otel`, which in turn depend on `@opentelemetry/api`, which will satisfy SvelteKit's dependency as well. If you see an error from SvelteKit telling you it can't find `@opentelemetry/api`, it may just be because you haven't set up your trace collection yet. If you _have_ done that and are still seeing the error, you can install `@opentelemetry/api` yourself.",
    "kit/packaging": "You can use SvelteKit to build apps as well as component libraries, using the `@sveltejs/package` package (`npx sv create` has an option to set this up for you).\n\nWhen you're creating an app, the contents of `src/routes` is the public-facing stuff; [`src/lib`]($lib) contains your app's internal library.\n\nA component library has the exact same structure as a SvelteKit app, except that `src/lib` is the public-facing bit, and your root `package.json` is used to publish the package. `src/routes` might be a documentation or demo site that accompanies the library, or it might just be a sandbox you use during development.\n\nRunning the `svelte-package` command from `@sveltejs/package` will take the contents of `src/lib` and generate a `dist` directory (which can be [configured](#Options)) containing the following:\n\n- All the files in `src/lib`. Svelte components will be preprocessed, TypeScript files will be transpiled to JavaScript.\n- Type definitions (`d.ts` files) which are generated for Svelte, JavaScript and TypeScript files. You need to install `typescript >= 4.0.0` for this. Type definitions are placed next to their implementation, hand-written `d.ts` files are copied over as is. You can [disable generation](#Options), but we strongly recommend against it — people using your library might use TypeScript, for which they require these type definition files.\n\n> [!NOTE] `@sveltejs/package` version 1 generated a `package.json`. This is no longer the case and it will now use the `package.json` from your project and validate that it is correct instead. If you're still on version 1, see [this PR](https://github.com/sveltejs/kit/pull/8922) for migration instructions.\n\n## Anatomy of a package.json\n\nSince you're now building a library for public use, the contents of your `package.json` will become more important. Through it, you configure the entry points of your package, which files are published to npm, and which dependencies your library has. Let's go through the most important fields one by one.\n\n### name\n\nThis is the name of your package. It will be available for others to install using that name, and visible on `https://npmjs.com/package/<name>`.\n\n```json\n{\n\t\"name\": \"your-library\"\n}\n```\n\nRead more about it [here](https://docs.npmjs.com/cli/v9/configuring-npm/package-json#name).\n\n### license\n\nEvery package should have a license field so people know how they are allowed to use it. A very popular license which is also very permissive in terms of distribution and reuse without warranty is `MIT`.\n\n```json\n{\n\t\"license\": \"MIT\"\n}\n```\n\nRead more about it [here](https://docs.npmjs.com/cli/v9/configuring-npm/package-json#license). Note that you should also include a `LICENSE` file in your package.\n\n### files\n\nThis tells npm which files it will pack up and upload to npm. It should contain your output folder (`dist` by default). Your `package.json` and `README` and `LICENSE` will always be included, so you don't need to specify them.\n\n```json\n{\n\t\"files\": [\"dist\"]\n}\n```\n\nTo exclude unnecessary files (such as unit tests, or modules that are only imported from `src/routes` etc) you can add them to an `.npmignore` file. This will result in smaller packages that are faster to install.\n\nRead more about it [here](https://docs.npmjs.com/cli/v9/configuring-npm/package-json#files).\n\n### exports\n\nThe `\"exports\"` field contains the package's entry points. If you set up a new library project through `npx sv create`, it's set to a single export, the package root:\n\n```json\n{\n\t\"exports\": {\n\t\t\".\": {\n\t\t\t\"types\": \"./dist/index.d.ts\",\n\t\t\t\"svelte\": \"./dist/index.js\"\n\t\t}\n\t}\n}\n```\n\nThis tells bundlers and tooling that your package only has one entry point, the root, and everything should be imported through that, like this:\n\n```js\n// @errors: 2307\nimport { Something } from 'your-library';\n```\n\nThe `types` and `svelte` keys are [export conditions](https://nodejs.org/api/packages.html#conditional-exports). They tell tooling what file to import when they look up the `your-library` import:\n\n- TypeScript sees the `types` condition and looks up the type definition file. If you don't publish type definitions, omit this condition.\n- Svelte-aware tooling sees the `svelte` condition and knows this is a Svelte component library. If you publish a library that does not export any Svelte components and that could also work in non-Svelte projects (for example a Svelte store library), you can replace this condition with `default`.\n\n> [!NOTE] Previous versions of `@sveltejs/package` also added a `package.json` export. This is no longer part of the template because all tooling can now deal with a `package.json` not being explicitly exported.\n\nYou can adjust `exports` to your liking and provide more entry points. For example, if instead of a `src/lib/index.js` file that re-exported components you wanted to expose a `src/lib/Foo.svelte` component directly, you could create the following export map...\n\n```json\n{\n\t\"exports\": {\n\t\t\"./Foo.svelte\": {\n\t\t\t\"types\": \"./dist/Foo.svelte.d.ts\",\n\t\t\t\"svelte\": \"./dist/Foo.svelte\"\n\t\t}\n\t}\n}\n```\n\n...and a consumer of your library could import the component like so:\n\n```js\n// @filename: ambient.d.ts\ndeclare module 'your-library/Foo.svelte';\n\n// @filename: index.js\n// ---cut---\nimport Foo from 'your-library/Foo.svelte';\n```\n\n> [!NOTE] Beware that doing this will need additional care if you provide type definitions. Read more about the caveat [here](#TypeScript)\n\nIn general, each key of the exports map is the path the user will have to use to import something from your package, and the value is the path to the file that will be imported or a map of export conditions which in turn contains these file paths.\n\nRead more about `exports` [here](https://nodejs.org/docs/latest-v18.x/api/packages.html#package-entry-points).\n\n### svelte\n\nThis is a legacy field that enabled tooling to recognise Svelte component libraries. It's no longer necessary when using the `svelte` [export condition](#Anatomy-of-a-package.json-exports), but for backwards compatibility with outdated tooling that doesn't yet know about export conditions it's good to keep it around. It should point towards your root entry point.\n\n```json\n{\n\t\"svelte\": \"./dist/index.js\"\n}\n```\n\n### sideEffects\n\nThe `sideEffects` field in `package.json` is used by bundlers to determine if a module may contain code that has side effects. A module is considered to have side effects if it makes changes that are observable from other scripts outside the module when it's imported. For example, side effects include modifying global variables or the prototype of built-in JavaScript objects. Because a side effect could potentially affect the behavior of other parts of the application, these files/modules will be included in the final bundle regardless of whether their exports are used in the application. It is a best practice to avoid side effects in your code.\n\nSetting the `sideEffects` field in `package.json` can help the bundler to be more aggressive in eliminating unused exports from the final bundle, a process known as tree-shaking. This results in smaller and more efficient bundles. Different bundlers handle `sideEffects` in various manners. While not necessary for Vite, we recommend that libraries state that all CSS files have side effects so that your library will be [compatible with webpack](https://webpack.js.org/guides/tree-shaking/#mark-the-file-as-side-effect-free). This is the configuration that comes with newly created projects:\n\n```json\n/// file: package.json\n{\n\t\"sideEffects\": [\"**/*.css\"]\n}\n```\n\n> [!NOTE] If the scripts in your library have side effects, ensure that you update the `sideEffects` field. All scripts are marked as side effect free by default in newly created projects. If a file with side effects is incorrectly marked as having no side effects, it can result in broken functionality.\n\nIf your package has files with side effects, you can specify them in an array:\n\n```json\n/// file: package.json\n{\n    \"sideEffects\": [\n    \t\"**/*.css\",\n    \t\"./dist/sideEffectfulFile.js\"\n    ]\n}\n```\n\nThis will treat only the specified files as having side effects.\n\n## TypeScript\n\nYou should ship type definitions for your library even if you don't use TypeScript yourself so that people who do get proper intellisense when using your library. `@sveltejs/package` makes the process of generating types mostly opaque to you. By default, when packaging your library, type definitions are auto-generated for JavaScript, TypeScript and Svelte files. All you need to ensure is that the `types` condition in the [exports](#Anatomy-of-a-package.json-exports) map points to the correct files. When initialising a library project through `npx sv create`, this is automatically setup for the root export.\n\nIf you have something else than a root export however — for example providing a `your-library/foo` import — you need to take additional care for providing type definitions. Unfortunately, TypeScript by default will _not_ resolve the `types` condition for an export like `{ \"./foo\": { \"types\": \"./dist/foo.d.ts\", ... }}`. Instead, it will search for a `foo.d.ts` relative to the root of your library (i.e. `your-library/foo.d.ts` instead of `your-library/dist/foo.d.ts`). To fix this, you have two options:\n\nThe first option is to require people using your library to set the `moduleResolution` option in their `tsconfig.json` (or `jsconfig.json`) to `bundler` (available since TypeScript 5, the best and recommended option in the future), `node16` or `nodenext`. This opts TypeScript into actually looking at the exports map and resolving the types correctly.\n\nThe second option is to (ab)use the `typesVersions` feature from TypeScript to wire up the types. This is a field inside `package.json` TypeScript uses to check for different type definitions depending on the TypeScript version, and also contains a path mapping feature for that. We leverage that path mapping feature to get what we want. For the mentioned `foo` export above, the corresponding `typesVersions` looks like this:\n\n```json\n{\n\t\"exports\": {\n\t\t\"./foo\": {\n\t\t\t\"types\": \"./dist/foo.d.ts\",\n\t\t\t\"svelte\": \"./dist/foo.js\"\n\t\t}\n\t},\n\t\"typesVersions\": {\n\t\t\">4.0\": {\n\t\t\t\"foo\": [\"./dist/foo.d.ts\"]\n\t\t}\n\t}\n}\n```\n\n`>4.0` tells TypeScript to check the inner map if the used TypeScript version is greater than 4 (which should in practice always be true). The inner map tells TypeScript that the typings for `your-library/foo` are found within `./dist/foo.d.ts`, which essentially replicates the `exports` condition. You also have `*` as a wildcard at your disposal to make many type definitions at once available without repeating yourself. Note that if you opt into `typesVersions` you have to declare all type imports through it, including the root import (which is defined as `\"index.d.ts\": [..]`).\n\nYou can read more about that feature [here](https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html#version-selection-with-typesversions).\n\n## Best practices\n\nYou should avoid using SvelteKit-specific modules like `$app/environment` in your packages unless you intend for them to only be consumable by other SvelteKit projects. E.g. rather than using `import { browser } from '$app/environment'` you could use `import { BROWSER } from 'esm-env'` ([see esm-env docs](https://github.com/benmccann/esm-env)). You may also wish to pass in things like the current URL or a navigation action as a prop rather than relying directly on `$app/state`, `$app/navigation`, etc. Writing your app in this more generic fashion will also make it easier to setup tools for testing, UI demos and so on.\n\nEnsure that you add [aliases](configuration#alias) via `svelte.config.js` (not `vite.config.js` or `tsconfig.json`), so that they are processed by `svelte-package`.\n\nYou should think carefully about whether or not the changes you make to your package are a bug fix, a new feature, or a breaking change, and update the package version accordingly. Note that if you remove any paths from `exports` or any `export` conditions inside them from your existing library, that should be regarded as a breaking change.\n\n```json\n{\n\t\"exports\": {\n\t\t\".\": {\n\t\t\t\"types\": \"./dist/index.d.ts\",\n// changing `svelte` to `default` is a breaking change:\n---\t\t\t\"svelte\": \"./dist/index.js\"---\n+++\t\t\t\"default\": \"./dist/index.js\"+++\n\t\t},\n// removing this is a breaking change:\n---\t\t\"./foo\": {\n\t\t\t\"types\": \"./dist/foo.d.ts\",\n\t\t\t\"svelte\": \"./dist/foo.js\",\n\t\t\t\"default\": \"./dist/foo.js\"\n\t\t},---\n// adding this is ok:\n+++\t\t\"./bar\": {\n\t\t\t\"types\": \"./dist/bar.d.ts\",\n\t\t\t\"svelte\": \"./dist/bar.js\",\n\t\t\t\"default\": \"./dist/bar.js\"\n\t\t}+++\n\t}\n}\n```\n\n## Source maps\n\nYou can create so-called declaration maps (`d.ts.map` files) by setting `\"declarationMap\": true` in your `tsconfig.json`. This will allow editors such as VS Code to go to the original `.ts` or `.svelte` file when using features like _Go to Definition_. This means you also need to publish your source files alongside your dist folder in a way that the relative path inside the declaration files leads to a file on disk. Assuming that you have all your library code inside `src/lib` as suggested by Svelte's CLI, this is as simple as adding `src/lib` to `files` in your `package.json`:\n\n```json\n{\n\t\"files\": [\n\t\t\"dist\",\n\t\t\"!dist/**/*.test.*\",\n\t\t\"!dist/**/*.spec.*\",\n\t\t+++\"src/lib\",\n\t\t\"!src/lib/**/*.test.*\",\n\t\t\"!src/lib/**/*.spec.*\"+++\n\t]\n}\n```\n\n## Options\n\n`svelte-package` accepts the following options:\n\n- `-w`/`--watch` — watch files in `src/lib` for changes and rebuild the package\n- `-i`/`--input` — the input directory which contains all the files of the package. Defaults to `src/lib`\n- `-o`/`--output` — the output directory where the processed files are written to. Your `package.json`'s `exports` should point to files inside there, and the `files` array should include that folder. Defaults to `dist`\n- `-p`/`--preserve-output` — prevent deletion of the output directory before packaging. Defaults to `false`, which means that the output directory will be emptied first\n- `-t`/`--types` — whether or not to create type definitions (`d.ts` files). We strongly recommend doing this as it fosters ecosystem library quality. Defaults to `true`\n- `--tsconfig` - the path to a tsconfig or jsconfig. When not provided, searches for the next upper tsconfig/jsconfig in the workspace path.\n\n## Publishing\n\nTo publish the generated package:\n\n```sh\nnpm publish\n```\n\n## Caveats\n\nAll relative file imports need to be fully specified, adhering to Node's ESM algorithm. This means that for a file like `src/lib/something/index.js`, you must include the filename with the extension:\n\n```js\n// @errors: 2307\nimport { something } from './something+++/index.js+++';\n```\n\nIf you are using TypeScript, you need to import `.ts` files the same way, but using a `.js` file ending, _not_ a `.ts` file ending. (This is a TypeScript design decision outside our control.) Setting `\"moduleResolution\": \"NodeNext\"` in your `tsconfig.json` or `jsconfig.json` will help you with this.\n\nAll files except Svelte files (preprocessed) and TypeScript files (transpiled to JavaScript) are copied across as-is.",
    "kit/auth": "Auth refers to authentication and authorization, which are common needs when building a web application. Authentication means verifying that the user is who they say they are based on their provided credentials. Authorization means determining which actions they are allowed to take.\n\n## Sessions vs tokens\n\nAfter the user has provided their credentials such as a username and password, we want to allow them to use the application without needing to provide their credentials again for future requests. Users are commonly authenticated on subsequent requests with either a session identifier or signed token such as a JSON Web Token (JWT).\n\nSession IDs are most commonly stored in a database. They can be immediately revoked, but require a database query to be made on each request.\n\nIn contrast, JWT generally are not checked against a datastore, which means they cannot be immediately revoked. The advantage of this method is improved latency and reduced load on your datastore.\n\n## Integration points\n\nAuth [cookies](@sveltejs-kit#Cookies) can be checked inside [server hooks](hooks#Server-hooks). If a user is found matching the provided credentials, the user information can be stored in [`locals`](hooks#Server-hooks-locals).\n\n## Guides\n\n[Lucia](https://lucia-auth.com/) is a good reference for session-based web app auth. It contains example code snippets and projects for implementing session-based auth within SvelteKit and other JS projects. You can add code which follows the Lucia guide to your project with `npx sv create` when creating a new project or `npx sv add lucia` for an existing project.\n\nAn auth system is tightly coupled to a web framework because most of the code lies in validating user input, handling errors, and directing users to the appropriate next page. As a result, many of the generic JS auth libraries include one or more web frameworks within them. For this reason, many users will find it preferrable to follow a SvelteKit-specific guide such as the examples found in [Lucia](https://lucia-auth.com/) rather than having multiple web frameworks inside their project.",
    "kit/performance": "Out of the box, SvelteKit does a lot of work to make your applications as performant as possible:\n\n- Code-splitting, so that only the code you need for the current page is loaded\n- Asset preloading, so that 'waterfalls' (of files requesting other files) are prevented\n- File hashing, so that your assets can be cached forever\n- Request coalescing, so that data fetched from separate server `load` functions is grouped into a single HTTP request\n- Parallel loading, so that separate universal `load` functions fetch data simultaneously\n- Data inlining, so that requests made with `fetch` during server rendering can be replayed in the browser without issuing a new request\n- Conservative invalidation, so that `load` functions are only re-run when necessary\n- Prerendering (configurable on a per-route basis, if necessary) so that pages without dynamic data can be served instantaneously\n- Link preloading, so that data and code requirements for a client-side navigation are eagerly anticipated\n\nNevertheless, we can't (yet) eliminate all sources of slowness. To eke out maximum performance, you should be mindful of the following tips.\n\n## Diagnosing issues\n\nGoogle's [PageSpeed Insights](https://pagespeed.web.dev/) and (for more advanced analysis) [WebPageTest](https://www.webpagetest.org/) are excellent ways to understand the performance characteristics of a site that is already deployed to the internet.\n\nYour browser also includes useful developer tools for analysing your site, whether deployed or running locally:\n\n* Chrome - [Lighthouse](https://developer.chrome.com/docs/lighthouse/overview#devtools), [Network](https://developer.chrome.com/docs/devtools/network), and [Performance](https://developer.chrome.com/docs/devtools/performance) devtools\n* Edge - [Lighthouse](https://learn.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/lighthouse/lighthouse-tool), [Network](https://learn.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/network/), and [Performance](https://learn.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/evaluate-performance/) devtools\n* Firefox - [Network](https://firefox-source-docs.mozilla.org/devtools-user/network_monitor/) and [Performance](https://hacks.mozilla.org/2022/03/performance-tool-in-firefox-devtools-reloaded/) devtools\n* Safari - [enhancing the performance of your webpage](https://developer.apple.com/library/archive/documentation/NetworkingInternetWeb/Conceptual/Web_Inspector_Tutorial/EnhancingyourWebpagesPerformance/EnhancingyourWebpagesPerformance.html)\n\nNote that your site running locally in `dev` mode will exhibit different behaviour than your production app, so you should do performance testing in [preview](building-your-app#Preview-your-app) mode after building.\n\n### Instrumenting\n\nIf you see in the network tab of your browser that an API call is taking a long time and you'd like to understand why, you may consider instrumenting your backend with a tool like [OpenTelemetry](https://opentelemetry.io/) or [Server-Timing headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Server-Timing).\n\n## Optimizing assets\n\n### Images\n\nReducing the size of image files is often one of the most impactful changes you can make to a site's performance. Svelte provides the `@sveltejs/enhanced-img` package, detailed on the [images](images) page, for making this easier. Additionally, Lighthouse is useful for identifying the worst offenders.\n\n### Videos\n\nVideo files can be very large, so extra care should be taken to ensure that they're optimized:\n\n- Compress videos with tools such as [Handbrake](https://handbrake.fr/). Consider converting the videos to web-friendly formats such as `.webm` or `.mp4`.\n- You can [lazy-load videos](https://web.dev/articles/lazy-loading-video) located below the fold with `preload=\"none\"` (though note that this will slow down playback when the user _does_ initiate it).\n- Strip the audio track out of muted videos using a tool like [FFmpeg](https://ffmpeg.org/).\n\n### Fonts\n\nSvelteKit automatically preloads critical `.js` and `.css` files when the user visits a page, but it does _not_ preload fonts by default, since this may cause unnecessary files (such as font weights that are referenced by your CSS but not actually used on the current page) to be downloaded. Having said that, preloading fonts correctly can make a big difference to how fast your site feels. In your [`handle`](hooks#Server-hooks-handle) hook, you can call `resolve` with a `preload` filter that includes your fonts.\n\nYou can reduce the size of font files by [subsetting](https://web.dev/learn/performance/optimize-web-fonts#subset_your_web_fonts) your fonts.\n\n## Reducing code size\n\n### Svelte version\n\nWe recommend running the latest version of Svelte. Svelte 5 is smaller and faster than Svelte 4, which is smaller and faster than Svelte 3.\n\n### Packages\n\n[`rollup-plugin-visualizer`](https://www.npmjs.com/package/rollup-plugin-visualizer) can be helpful for identifying which packages are contributing the most to the size of your site. You may also find opportunities to remove code by manually inspecting the build output (use `build: { minify: false }` in your [Vite config](https://vitejs.dev/config/build-options.html#build-minify) to make the output readable, but remember to undo that before deploying your app), or via the network tab of your browser's devtools.\n\n### External scripts\n\nTry to minimize the number of third-party scripts running in the browser. For example, instead of using JavaScript-based analytics consider using server-side implementations, such as those offered by many platforms with SvelteKit adapters including [Cloudflare](https://www.cloudflare.com/web-analytics/), [Netlify](https://docs.netlify.com/monitor-sites/site-analytics/), and [Vercel](https://vercel.com/docs/analytics).\n\nTo run third party scripts in a web worker (which avoids blocking the main thread), use [Partytown's SvelteKit integration](https://partytown.builder.io/sveltekit).\n\n### Selective loading\n\nCode imported with static `import` declarations will be automatically bundled with the rest of your page. If there is a piece of code you need only when some condition is met, use the dynamic `import(...)` form to selectively lazy-load the component.\n\n## Navigation\n\n### Preloading\n\nYou can speed up client-side navigations by eagerly preloading the necessary code and data, using [link options](link-options). This is configured by default on the `<body>` element when you create a new SvelteKit app.\n\n### Non-essential data\n\nFor slow-loading data that isn't needed immediately, the object returned from your `load` function can contain promises rather than the data itself. For server `load` functions, this will cause the data to [stream](load#Streaming-with-promises) in after the navigation (or initial page load).\n\n### Preventing waterfalls\n\nOne of the biggest performance killers is what is referred to as a _waterfall_, which is a series of requests that is made sequentially. This can happen on the server or in the browser, but is especially costly when dealing with data that has to travel further or across slower networks, such as a mobile user making a call to a distant server.\n\nIn the browser, waterfalls can occur when your HTML kicks off request chains such as requesting JS which requests CSS which requests a background image and web font. SvelteKit will largely solve this class of problems for you by adding [`modulepreload`](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/modulepreload) tags or headers, but you should view [the network tab in your devtools](#Diagnosing-issues) to check whether additional resources need to be preloaded.\n- Pay special attention to this if you use [web fonts](#Optimizing-assets-Fonts) since they need to be handled manually.\n- Enabling [single page app (SPA) mode](single-page-apps) will cause such waterfalls. With SPA mode, an empty page is generated, which fetches JavaScript, which ultimately loads and renders the page. This results in extra network round trips before a single pixel can be displayed.\n\nWaterfalls can also occur on calls to the backend whether made from the browser or server. E.g. if a universal `load` function makes an API call to fetch the current user, then uses the details from that response to fetch a list of saved items, and then uses _that_ response to fetch the details for each item, the browser will end up making multiple sequential requests. This is deadly for performance, especially for users that are physically located far from your backend.\n- Avoid this issue by using [server `load` functions](load#Universal-vs-server) to make requests to backend services that are dependencies from the server rather than from the browser. Note, however, that server `load` functions are also not immune to waterfalls (though they are much less costly since they rarely involve round trips with high latency). For example, if you query a database to get the current user and then use that data to make a second query for a list of saved items, it will typically be more performant to issue a single query with a database join.\n\n## Hosting\n\nYour frontend should be located in the same data center as your backend to minimize latency. For sites with no central backend, many SvelteKit adapters support deploying to the _edge_, which means handling each user's requests from a nearby server. This can reduce load times significantly. Some adapters even support [configuring deployment on a per-route basis](page-options#config). You should also consider serving images from a CDN (which are typically edge networks) — the hosts for many SvelteKit adapters will do this automatically.\n\nEnsure your host uses HTTP/2 or newer. Vite's code splitting creates numerous small files for improved cacheability, which results in excellent performance, but this does assume that your files can be loaded in parallel with HTTP/2.\n\n## Further reading\n\nFor the most part, building a performant SvelteKit app is the same as building any performant web app. You should be able to apply information from general performance resources such as [Core Web Vitals](https://web.dev/explore/learn-core-web-vitals) to any web experience you build.",
    "kit/icons": "## CSS\n\nA great way to use icons is to define them purely via CSS. Iconify offers support for [many popular icon sets](https://icon-sets.iconify.design/) that [can be included via CSS](https://iconify.design/docs/usage/css/). This method can also be used with popular CSS frameworks by leveraging the Iconify [Tailwind CSS plugin](https://iconify.design/docs/usage/css/tailwind/) or [UnoCSS plugin](https://iconify.design/docs/usage/css/unocss/). As opposed to libraries based on Svelte components, it doesn't require each icon to be imported into your `.svelte` file.\n\n## Svelte\n\nThere are many [icon libraries for Svelte](/packages#icons). When choosing an icon library, it is recommended to avoid those that provide a `.svelte` file per icon as these libraries can have thousands of `.svelte` files which really slow down [Vite's dependency optimization](https://vite.dev/guide/dep-pre-bundling.html). This can become especially pathological if the icons are imported both via an umbrella import and subpath import [as described in the `vite-plugin-svelte` FAQ](https://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/faq.md#what-is-going-on-with-vite-and-pre-bundling-dependencies).",
    "kit/images": "Images can have a big impact on your app's performance. For best results, you should optimize them by doing the following:\n\n- generate optimal formats like `.avif` and `.webp`\n- create different sizes for different screens\n- ensure that assets can be cached effectively\n\nDoing this manually is tedious. There are a variety of techniques you can use, depending on your needs and preferences.\n\n## Vite's built-in handling\n\n[Vite will automatically process imported assets](https://vitejs.dev/guide/assets.html) for improved performance. This includes assets referenced via the CSS `url()` function. Hashes will be added to the filenames so that they can be cached, and assets smaller than `assetsInlineLimit` will be inlined. Vite's asset handling is most often used for images, but is also useful for video, audio, etc.\n\n```svelte\n<script>\n\timport logo from '$lib/assets/logo.png';\n</script>\n\n<img alt=\"The project logo\" src={logo} />\n```\n\n## @sveltejs/enhanced-img\n\n`@sveltejs/enhanced-img` is a plugin offered on top of Vite's built-in asset handling. It provides plug and play image processing that serves smaller file formats like `avif` or `webp`, automatically sets the intrinsic `width` and `height` of the image to avoid layout shift, creates images of multiple sizes for various devices, and strips EXIF data for privacy. It will work in any Vite-based project including, but not limited to, SvelteKit projects.\n\n> [!NOTE] As a build plugin, `@sveltejs/enhanced-img` can only optimize files located on your machine during the build process. If you have an image located elsewhere (such as a path served from your database, CMS, or backend), please read about [loading images dynamically from a CDN](#Loading-images-dynamically-from-a-CDN).\n\n### Setup\n\nInstall:\n\n```sh\nnpm i -D @sveltejs/enhanced-img\n```\n\nAdjust `vite.config.js`:\n\n```js\nimport { sveltekit } from '@sveltejs/kit/vite';\n+++import { enhancedImages } from '@sveltejs/enhanced-img';+++\nimport { defineConfig } from 'vite';\n\nexport default defineConfig({\n\tplugins: [\n\t\t+++enhancedImages(), // must come before the SvelteKit plugin+++\n\t\tsveltekit()\n\t]\n});\n```\n\nBuilding will take longer on the first build due to the computational expense of transforming images. However, the build output will be cached in `./node_modules/.cache/imagetools` so that subsequent builds will be fast.\n\n### Basic usage\n\nUse in your `.svelte` components by using `<enhanced:img>` rather than `<img>` and referencing the image file with a [Vite asset import](https://vitejs.dev/guide/assets.html#static-asset-handling) path:\n\n```svelte\n<enhanced:img src=\"./path/to/your/image.jpg\" alt=\"An alt text\" />\n```\n\nAt build time, your `<enhanced:img>` tag will be replaced with an `<img>` wrapped by a `<picture>` providing multiple image types and sizes. It's only possible to downscale images without losing quality, which means that you should provide the highest resolution image that you need — smaller versions will be generated for the various device types that may request an image.\n\nYou should provide your image at 2x resolution for HiDPI displays (a.k.a. retina displays). `<enhanced:img>` will automatically take care of serving smaller versions to smaller devices.\n\n> [!NOTE] if you wish to use a [tag name CSS selector](https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Styling_basics/Basic_selectors#type_selectors) in your `<style>` block you will need to write `enhanced\\:img` to escape the colon in the tag name.\n\n### Dynamically choosing an image\n\nYou can also manually import an image asset and pass it to an `<enhanced:img>`. This is useful when you have a collection of static images and would like to dynamically choose one or [iterate over them](https://github.com/sveltejs/kit/blob/0ab1733e394b6310895a1d3bf0f126ce34531170/sites/kit.svelte.dev/src/routes/home/Showcase.svelte). In this case you will need to update both the `import` statement and `<img>` element as shown below to indicate you'd like process them.\n\n```svelte\n<script>\n\timport MyImage from './path/to/your/image.jpg?enhanced';\n</script>\n\n<enhanced:img src={MyImage} alt=\"some alt text\" />\n```\n\nYou can also use [Vite's `import.meta.glob`](https://vitejs.dev/guide/features.html#glob-import). Note that you will have to specify `enhanced` via a [custom query](https://vitejs.dev/guide/features.html#custom-queries):\n\n```svelte\n<script>\n\tconst imageModules = import.meta.glob(\n\t\t'/path/to/assets/*.{avif,gif,heif,jpeg,jpg,png,tiff,webp,svg}',\n\t\t{\n\t\t\teager: true,\n\t\t\tquery: {\n\t\t\t\tenhanced: true\n\t\t\t}\n\t\t}\n\t)\n</script>\n\n{#each Object.entries(imageModules) as [_path, module]}\n\t<enhanced:img src={module.default} alt=\"some alt text\" />\n{/each}\n```\n\n### Intrinsic Dimensions\n\n`width` and `height` are optional as they can be inferred from the source image and will be automatically added when the `<enhanced:img>` tag is preprocessed. With these attributes, the browser can reserve the correct amount of space, preventing [layout shift](https://web.dev/articles/cls). If you'd like to use a different `width` and `height` you can style the image with CSS. Because the preprocessor adds a `width` and `height` for you, if you'd like one of the dimensions to be automatically calculated then you will need to specify that:\n\n```svelte\n<style>\n\t.hero-image img {\n\t\twidth: var(--size);\n\t\theight: auto;\n\t}\n</style>\n```\n\n### `srcset` and `sizes`\n\nIf you have a large image, such as a hero image taking the width of the design, you should specify `sizes` so that smaller versions are requested on smaller devices. E.g. if you have a 1280px image you may want to specify something like:\n\n```svelte\n<enhanced:img src=\"./image.png\" sizes=\"min(1280px, 100vw)\"/>\n```\n\nIf `sizes` is specified, `<enhanced:img>` will generate small images for smaller devices and populate the `srcset` attribute.\n\nThe smallest picture generated automatically will have a width of 540px. If you'd like smaller images or would otherwise like to specify custom widths, you can do that with the `w` query parameter:\n```svelte\n<enhanced:img\n  src=\"./image.png?w=1280;640;400\"\n  sizes=\"(min-width:1920px) 1280px, (min-width:1080px) 640px, (min-width:768px) 400px\"\n/>\n```\n\nIf `sizes` is not provided, then a HiDPI/Retina image and a standard resolution image will be generated. The image you provide should be 2x the resolution you wish to display so that the browser can display that image on devices with a high [device pixel ratio](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio).\n\n### Per-image transforms\n\nBy default, enhanced images will be transformed to more efficient formats. However, you may wish to apply other transforms such as a blur, quality, flatten, or rotate operation. You can run per-image transforms by appending a query string:\n\n```svelte\n<enhanced:img src=\"./path/to/your/image.jpg?blur=15\" alt=\"An alt text\" />\n```\n\n[See the imagetools repo for the full list of directives](https://github.com/JonasKruckenberg/imagetools/blob/main/docs/directives.md).\n\n## Loading images dynamically from a CDN\n\nIn some cases, the images may not be accessible at build time — e.g. they may live inside a content management system or elsewhere.\n\nUsing a content delivery network (CDN) can allow you to optimize these images dynamically, and provides more flexibility with regards to sizes, but it may involve some setup overhead and usage costs. Depending on caching strategy, the browser may not be able to use a cached copy of the asset until a [304 response](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/304) is received from the CDN. Building HTML to target CDNs allows using an `<img>` tag since the CDN can serve the appropriate format based on the `User-Agent` header, whereas build-time optimizations must produce `<picture>` tags with multiple sources. Finally, some CDNs may generate images lazily, which could have a negative performance impact for sites with low traffic and frequently changing images.\n\nCDNs can generally be used without any need for a library. However, there are a number of libraries with Svelte support that make it easier. [`@unpic/svelte`](https://unpic.pics/img/svelte/) is a CDN-agnostic library with support for a large number of providers. You may also find that specific CDNs like [Cloudinary](https://svelte.cloudinary.dev/) have Svelte support. Finally, some content management systems (CMS) which support Svelte (such as [Contentful](https://www.contentful.com/sveltekit-starter-guide/), [Storyblok](https://github.com/storyblok/storyblok-svelte), and [Contentstack](https://www.contentstack.com/docs/developers/sample-apps/build-a-starter-website-with-sveltekit-and-contentstack)) have built-in support for image handling.\n\n## Best practices\n\n- For each image type, use the appropriate solution from those discussed above. You can mix and match all three solutions in one project. For example, you may use Vite's built-in handling to provide images for `<meta>` tags, display images on your homepage with `@sveltejs/enhanced-img`, and display user-submitted content with a dynamic approach.\n- Consider serving all images via CDN regardless of the image optimization types you use. CDNs reduce latency by distributing copies of static assets globally.\n- Your original images should have a good quality/resolution and should have 2x the width it will be displayed at to serve HiDPI devices. Image processing can size images down to save bandwidth when serving smaller screens, but it would be a waste of bandwidth to invent pixels to size images up.\n- For images which are much larger than the width of a mobile device (roughly 400px), such as a hero image taking the width of the page design, specify `sizes` so that smaller images can be served on smaller devices.\n- For important images, such as the [largest contentful paint (LCP)](https://web.dev/articles/lcp) image, set `fetchpriority=\"high\"` and avoid `loading=\"lazy\"` to prioritize loading as early as possible.\n- Give the image a container or styling so that it is constrained and does not jump around while the page is loading affecting your [cumulative layout shift (CLS)](https://web.dev/articles/cls). `width` and `height` help the browser to reserve space while the image is still loading, so `@sveltejs/enhanced-img` will add a `width` and `height` for you.\n- Always provide a good `alt` text. The Svelte compiler will warn you if you don't do this.\n- Do not use `em` or `rem` in `sizes` and change the default size of these measures. When used in `sizes` or `@media` queries, `em` and `rem` are both defined to mean the user's default `font-size`. For a `sizes` declaration like `sizes=\"(min-width: 768px) min(100vw, 108rem), 64rem\"`, the actual `em` or `rem` that controls how the image is laid out on the page can be different if changed by CSS. For example, do not do something like `html { font-size: 62.5%; }` as the slot reserved by the browser preloader will now end up being larger than the actual slot of the CSS object model once it has been created.",
    "kit/accessibility": "SvelteKit strives to provide an accessible platform for your app by default. Svelte's [compile-time accessibility checks](../svelte/compiler-warnings) will also apply to any SvelteKit application you build.\n\nHere's how SvelteKit's built-in accessibility features work and what you need to do to help these features to work as well as possible. Keep in mind that while SvelteKit provides an accessible foundation, you are still responsible for making sure your application code is accessible. If you're new to accessibility, see the [\"further reading\"](accessibility#Further-reading) section of this guide for additional resources.\n\nWe recognize that accessibility can be hard to get right. If you want to suggest improvements to how SvelteKit handles accessibility, please [open a GitHub issue](https://github.com/sveltejs/kit/issues).\n\n## Route announcements\n\nIn traditional server-rendered applications, every navigation (e.g. clicking on an `<a>` tag) triggers a full page reload. When this happens, screen readers and other assistive technology will read out the new page's title so that users understand that the page has changed.\n\nSince navigation between pages in SvelteKit happens without reloading the page (known as [client-side routing](glossary#Routing)), SvelteKit injects a [live region](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions) onto the page that will read out the new page name after each navigation. This determines the page name to announce by inspecting the `<title>` element.\n\nBecause of this behavior, every page in your app should have a unique, descriptive title. In SvelteKit, you can do this by placing a `<svelte:head>` element on each page:\n\n```svelte\n<!--- file: src/routes/+page.svelte --->\n<svelte:head>\n\t<title>Todo List</title>\n</svelte:head>\n```\n\nThis will allow screen readers and other assistive technology to identify the new page after a navigation occurs. Providing a descriptive title is also important for [SEO](seo#Manual-setup-title-and-meta).\n\n## Focus management\n\nIn traditional server-rendered applications, every navigation will reset focus to the top of the page. This ensures that people browsing the web with a keyboard or screen reader will start interacting with the page from the beginning.\n\nTo simulate this behavior during client-side routing, SvelteKit focuses the `<body>` element after each navigation and [enhanced form submission](form-actions#Progressive-enhancement). There is one exception - if an element with the [`autofocus`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus) attribute is present, SvelteKit will focus that element instead. Make sure to [consider the implications for assistive technology](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus#accessibility_considerations) when using that attribute.\n\nIf you want to customize SvelteKit's focus management, you can use the `afterNavigate` hook:\n\n```js\n/// <reference types=\"@sveltejs/kit\" />\n// ---cut---\nimport { afterNavigate } from '$app/navigation';\n\nafterNavigate(() => {\n\t/** @type {HTMLElement | null} */\n\tconst to_focus = document.querySelector('.focus-me');\n\tto_focus?.focus();\n});\n```\n\nYou can also programmatically navigate to a different page using the [`goto`]($app-navigation#goto) function. By default, this will have the same client-side routing behavior as clicking on a link. However, `goto` also accepts a `keepFocus` option that will preserve the currently-focused element instead of resetting focus. If you enable this option, make sure the currently-focused element still exists on the page after navigation. If the element no longer exists, the user's focus will be lost, making for a confusing experience for assistive technology users.\n\n## The \"lang\" attribute\n\nBy default, SvelteKit's page template sets the default language of the document to English. If your content is not in English, you should update the `<html>` element in `src/app.html` to have the correct [`lang`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang#accessibility) attribute. This will ensure that any assistive technology reading the document uses the correct pronunciation. For example, if your content is in German, you should update `app.html` to the following:\n\n```html\n/// file: src/app.html\n<html lang=\"de\">\n```\n\nIf your content is available in multiple languages, you should set the `lang` attribute based on the language of the current page. You can do this with SvelteKit's [handle hook](hooks#Server-hooks-handle):\n\n```html\n/// file: src/app.html\n<html lang=\"%lang%\">\n```\n\n```js\n/// file: src/hooks.server.js\n/**\n * @param {import('@sveltejs/kit').RequestEvent} event\n */\nfunction get_lang(event) {\n\treturn 'en';\n}\n// ---cut---\n/** @type {import('@sveltejs/kit').Handle} */\nexport function handle({ event, resolve }) {\n\treturn resolve(event, {\n\t\ttransformPageChunk: ({ html }) => html.replace('%lang%', get_lang(event))\n\t});\n}\n```\n\n## Further reading\n\nFor the most part, building an accessible SvelteKit app is the same as building an accessible web app. You should be able to apply information from the following general accessibility resources to any web experience you build:\n\n- [MDN Web Docs: Accessibility](https://developer.mozilla.org/en-US/docs/Learn/Accessibility)\n- [The A11y Project](https://www.a11yproject.com/)\n- [How to Meet WCAG (Quick Reference)](https://www.w3.org/WAI/WCAG21/quickref/)",
    "kit/seo": "The most important aspect of SEO is to create high-quality content that is widely linked to from around the web. However, there are a few technical considerations for building sites that rank well.\n\n## Out of the box\n\n### SSR\n\nWhile search engines have got better in recent years at indexing content that was rendered with client-side JavaScript, server-side rendered content is indexed more frequently and reliably. SvelteKit employs SSR by default, and while you can disable it in [`handle`](hooks#Server-hooks-handle), you should leave it on unless you have a good reason not to.\n\n> [!NOTE] SvelteKit's rendering is highly configurable and you can implement [dynamic rendering](https://developers.google.com/search/docs/advanced/javascript/dynamic-rendering) if necessary. It's not generally recommended, since SSR has other benefits beyond SEO.\n\n### Performance\n\nSignals such as [Core Web Vitals](https://web.dev/vitals/#core-web-vitals) impact search engine ranking. Because Svelte and SvelteKit introduce minimal overhead, they make it easier to build high performance sites. You can test your site's performance using Google's [PageSpeed Insights](https://pagespeed.web.dev/) or [Lighthouse](https://developers.google.com/web/tools/lighthouse). With just a few key actions like using SvelteKit's default [hybrid rendering](glossary#Hybrid-app) mode and [optimizing your images](images), you can greatly improve your site's speed. Read [the performance page](performance) for more details.\n\n### Normalized URLs\n\nSvelteKit redirects pathnames with trailing slashes to ones without (or vice versa depending on your [configuration](page-options#trailingSlash)), as duplicate URLs are bad for SEO.\n\n## Manual setup\n\n### &lt;title&gt; and &lt;meta&gt;\n\nEvery page should have well-written and unique `<title>` and `<meta name=\"description\">` elements inside a [`<svelte:head>`](../svelte/svelte-head). Guidance on how to write descriptive titles and descriptions, along with other suggestions on making content understandable by search engines, can be found on Google's [Lighthouse SEO audits](https://web.dev/lighthouse-seo/) documentation.\n\n> [!NOTE] A common pattern is to return SEO-related `data` from page [`load`](load) functions, then use it (as [`page.data`]($app-state)) in a `<svelte:head>` in your root [layout](routing#layout).\n\n### Sitemaps\n\n[Sitemaps](https://developers.google.com/search/docs/advanced/sitemaps/build-sitemap) help search engines prioritize pages within your site, particularly when you have a large amount of content. You can create a sitemap dynamically using an endpoint:\n\n```js\n/// file: src/routes/sitemap.xml/+server.js\nexport async function GET() {\n\treturn new Response(\n\t\t`\n\t\t<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t\t<urlset\n\t\t\txmlns=\"https://www.sitemaps.org/schemas/sitemap/0.9\"\n\t\t\txmlns:xhtml=\"https://www.w3.org/1999/xhtml\"\n\t\t\txmlns:mobile=\"https://www.google.com/schemas/sitemap-mobile/1.0\"\n\t\t\txmlns:news=\"https://www.google.com/schemas/sitemap-news/0.9\"\n\t\t\txmlns:image=\"https://www.google.com/schemas/sitemap-image/1.1\"\n\t\t\txmlns:video=\"https://www.google.com/schemas/sitemap-video/1.1\"\n\t\t>\n\t\t\t<!-- <url> elements go here -->\n\t\t</urlset>`.trim(),\n\t\t{\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/xml'\n\t\t\t}\n\t\t}\n\t);\n}\n```\n\n### AMP\n\nAn unfortunate reality of modern web development is that it is sometimes necessary to create an [Accelerated Mobile Pages (AMP)](https://amp.dev/) version of your site. In SvelteKit this can be done by setting the [`inlineStyleThreshold`](configuration#inlineStyleThreshold) option...\n\n```js\n/// file: svelte.config.js\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\t// since <link rel=\"stylesheet\"> isn't\n\t\t// allowed, inline all styles\n\t\tinlineStyleThreshold: Infinity\n\t}\n};\n\nexport default config;\n```\n\n...disabling `csr` in your root `+layout.js`/`+layout.server.js`...\n\n```js\n/// file: src/routes/+layout.server.js\nexport const csr = false;\n```\n\n...adding `amp` to your `app.html`\n\n```html\n<html amp>\n...\n```\n\n...and transforming the HTML using `transformPageChunk` along with `transform` imported from `@sveltejs/amp`:\n\n```js\n/// file: src/hooks.server.js\nimport * as amp from '@sveltejs/amp';\n\n/** @type {import('@sveltejs/kit').Handle} */\nexport async function handle({ event, resolve }) {\n\tlet buffer = '';\n\treturn await resolve(event, {\n\t\ttransformPageChunk: ({ html, done }) => {\n\t\t\tbuffer += html;\n\t\t\tif (done) return amp.transform(buffer);\n\t\t}\n\t});\n}\n```\n\nTo prevent shipping any unused CSS as a result of transforming the page to amp, we can use [`dropcss`](https://www.npmjs.com/package/dropcss):\n\n```js\n// @filename: ambient.d.ts\ndeclare module 'dropcss';\n\n// @filename: index.js\n// ---cut---\n/// file: src/hooks.server.js\n// @errors: 2307\nimport * as amp from '@sveltejs/amp';\nimport dropcss from 'dropcss';\n\n/** @type {import('@sveltejs/kit').Handle} */\nexport async function handle({ event, resolve }) {\n\tlet buffer = '';\n\n\treturn await resolve(event, {\n\t\ttransformPageChunk: ({ html, done }) => {\n\t\t\tbuffer += html;\n\n\t\t\tif (done) {\n\t\t\t\tlet css = '';\n\t\t\t\tconst markup = amp\n\t\t\t\t\t.transform(buffer)\n\t\t\t\t\t.replace('⚡', 'amp') // dropcss can't handle this character\n\t\t\t\t\t.replace(/<style amp-custom([^>]*?)>([^]+?)<\\/style>/, (match, attributes, contents) => {\n\t\t\t\t\t\tcss = contents;\n\t\t\t\t\t\treturn `<style amp-custom${attributes}></style>`;\n\t\t\t\t\t});\n\n\t\t\t\tcss = dropcss({ css, html: markup }).css;\n\t\t\t\treturn markup.replace('</style>', `${css}</style>`);\n\t\t\t}\n\t\t}\n\t});\n}\n\n```\n\n> [!NOTE] It's a good idea to use the `handle` hook to validate the transformed HTML using `amphtml-validator`, but only if you're prerendering pages since it's very slow.",
    "kit/faq": "## Other resources\n\nPlease see [the Svelte FAQ](../svelte/faq) and [`vite-plugin-svelte` FAQ](https://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/faq.md) as well for the answers to questions deriving from those libraries.\n\n## What can I make with SvelteKit?\n\nSee [the documentation regarding project types](project-types) for more details.\n\n## How do I include details from package.json in my application?\n\nIf you'd like to include your application's version number or other information from `package.json` in your application, you can load JSON like so:\n\n```ts\n// @errors: 2732\n/// file: svelte.config.js\nimport pkg from './package.json' with { type: 'json' };\n```\n\n## How do I fix the error I'm getting trying to include a package?\n\nMost issues related to including a library are due to incorrect packaging. You can check if a library's packaging is compatible with Node.js by entering it into [the publint website](https://publint.dev/).\n\nHere are a few things to keep in mind when checking if a library is packaged correctly:\n\n- `exports` takes precedence over the other entry point fields such as `main` and `module`. Adding an `exports` field may not be backwards-compatible as it prevents deep imports.\n- ESM files should end with `.mjs` unless `\"type\": \"module\"` is set in which any case CommonJS files should end with `.cjs`.\n- `main` should be defined if `exports` is not. It should be either a CommonJS or ESM file and adhere to the previous bullet. If a `module` field is defined, it should refer to an ESM file.\n- Svelte components should be distributed as uncompiled `.svelte` files with any JS in the package written as ESM only. Custom script and style languages, like TypeScript and SCSS, should be preprocessed as vanilla JS and CSS respectively. We recommend using [`svelte-package`](./packaging) for packaging Svelte libraries, which will do this for you.\n\nLibraries work best in the browser with Vite when they distribute an ESM version, especially if they are dependencies of a Svelte component library. You may wish to suggest to library authors that they provide an ESM version. However, CommonJS (CJS) dependencies should work as well since, by default, [`vite-plugin-svelte` will ask Vite to pre-bundle them](https://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/faq.md#what-is-going-on-with-vite-and-pre-bundling-dependencies) using `esbuild` to convert them to ESM.\n\nIf you are still encountering issues we recommend searching both [the Vite issue tracker](https://github.com/vitejs/vite/issues) and the issue tracker of the library in question. Sometimes issues can be worked around by fiddling with the [`optimizeDeps`](https://vitejs.dev/config/#dep-optimization-options) or [`ssr`](https://vitejs.dev/config/#ssr-options) config values though we recommend this as only a short-term workaround in favor of fixing the library in question.\n\n## How do I use the view transitions API?\n\nWhile SvelteKit does not have any specific integration with [view transitions](https://developer.chrome.com/docs/web-platform/view-transitions/), you can call `document.startViewTransition` in [`onNavigate`]($app-navigation#onNavigate) to trigger a view transition on every client-side navigation.\n\n```js\n// @errors: 2339 2810\nimport { onNavigate } from '$app/navigation';\n\nonNavigate((navigation) => {\n\tif (!document.startViewTransition) return;\n\n\treturn new Promise((resolve) => {\n\t\tdocument.startViewTransition(async () => {\n\t\t\tresolve();\n\t\t\tawait navigation.complete;\n\t\t});\n\t});\n});\n```\n\nFor more, see [\"Unlocking view transitions\"](/blog/view-transitions) on the Svelte blog.\n\n## How do I set up a database?\n\nPut the code to query your database in a [server route](./routing#server) - don't query the database in .svelte files. You can create a `db.js` or similar that sets up a connection immediately and makes the client accessible throughout the app as a singleton. You can execute any one-time setup code in `hooks.server.js` and import your database helpers into any endpoint that needs them.\n\nYou can use [the Svelte CLI](/docs/cli/overview) to automatically set up database integrations.\n\n## How do I use a client-side library accessing `document` or `window`?\n\nIf you need access to the `document` or `window` variables or otherwise need code to run only on the client-side you can wrap it in a `browser` check:\n\n```js\n/// <reference types=\"@sveltejs/kit\" />\n// ---cut---\nimport { browser } from '$app/environment';\n\nif (browser) {\n\t// client-only code here\n}\n```\n\nYou can also run code in `onMount` if you'd like to run it after the component has been first rendered to the DOM:\n\n```js\n// @filename: ambient.d.ts\n// @lib: ES2015\ndeclare module 'some-browser-only-library';\n\n// @filename: index.js\n// ---cut---\nimport { onMount } from 'svelte';\n\nonMount(async () => {\n\tconst { method } = await import('some-browser-only-library');\n\tmethod('hello world');\n});\n```\n\nIf the library you'd like to use is side-effect free you can also statically import it and it will be tree-shaken out in the server-side build where `onMount` will be automatically replaced with a no-op:\n\n```js\n// @filename: ambient.d.ts\n// @lib: ES2015\ndeclare module 'some-browser-only-library';\n\n// @filename: index.js\n// ---cut---\nimport { onMount } from 'svelte';\nimport { method } from 'some-browser-only-library';\n\nonMount(() => {\n\tmethod('hello world');\n});\n```\n\nFinally, you may also consider using an `{#await}` block:\n```svelte\n<!--- file: index.svelte --->\n<script>\n\timport { browser } from '$app/environment';\n\n\tconst ComponentConstructor = browser ?\n\t\timport('some-browser-only-library').then((module) => module.Component) :\n\t\tnew Promise(() => {});\n</script>\n\n{#await ComponentConstructor}\n\t<p>Loading...</p>\n{:then component}\n\t<svelte:component this={component} />\n{:catch error}\n\t<p>Something went wrong: {error.message}</p>\n{/await}\n```\n\n## How do I use a different backend API server?\n\nYou can use [`event.fetch`](./load#Making-fetch-requests) to request data from an external API server, but be aware that you would need to deal with [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS), which will result in complications such as generally requiring requests to be preflighted resulting in higher latency. Requests to a separate subdomain may also increase latency due to an additional DNS lookup, TLS setup, etc. If you wish to use this method, you may find [`handleFetch`](./hooks#Server-hooks-handleFetch) helpful.\n\nAnother approach is to set up a proxy to bypass CORS headaches. In production, you would rewrite a path like `/api` to the API server; for local development, use Vite's [`server.proxy`](https://vitejs.dev/config/server-options.html#server-proxy) option.\n\nHow to setup rewrites in production will depend on your deployment platform. If rewrites aren't an option, you could alternatively add an [API route](./routing#server):\n\n```js\n/// file: src/routes/api/[...path]/+server.js\n/** @type {import('./$types').RequestHandler} */\nexport function GET({ params, url }) {\n\treturn fetch(`https://example.com/${params.path + url.search}`);\n}\n```\n\n(Note that you may also need to proxy `POST`/`PATCH` etc requests, and forward `request.headers`, depending on your needs.)\n\n## How do I use middleware?\n\n`adapter-node` builds a middleware that you can use with your own server for production mode. In dev, you can add middleware to Vite by using a Vite plugin. For example:\n\n```js\n// @errors: 2322\n// @filename: ambient.d.ts\ndeclare module '@sveltejs/kit/vite'; // TODO this feels unnecessary, why can't it 'see' the declarations?\n\n// @filename: index.js\n// ---cut---\nimport { sveltekit } from '@sveltejs/kit/vite';\n\n/** @type {import('vite').Plugin} */\nconst myPlugin = {\n\tname: 'log-request-middleware',\n\tconfigureServer(server) {\n\t\tserver.middlewares.use((req, res, next) => {\n\t\t\tconsole.log(`Got request ${req.url}`);\n\t\t\tnext();\n\t\t});\n\t}\n};\n\n/** @type {import('vite').UserConfig} */\nconst config = {\n\tplugins: [myPlugin, sveltekit()]\n};\n\nexport default config;\n```\n\nSee [Vite's `configureServer` docs](https://vitejs.dev/guide/api-plugin.html#configureserver) for more details including how to control ordering.\n\n## How do I use Yarn?\n\n### Does it work with Yarn 2?\n\nSort of. The Plug'n'Play feature, aka 'pnp', is broken (it deviates from the Node module resolution algorithm, and [doesn't yet work with native JavaScript modules](https://github.com/yarnpkg/berry/issues/638) which SvelteKit — along with an [increasing number of packages](https://blog.sindresorhus.com/get-ready-for-esm-aa53530b3f77) — uses). You can use `nodeLinker: 'node-modules'` in your [`.yarnrc.yml`](https://yarnpkg.com/configuration/yarnrc#nodeLinker) file to disable pnp, but it's probably easier to just use npm or [pnpm](https://pnpm.io/), which is similarly fast and efficient but without the compatibility headaches.\n\n### How do I use with Yarn 3?\n\nCurrently ESM Support within the latest Yarn (version 3) is considered [experimental](https://github.com/yarnpkg/berry/pull/2161).\n\nThe below seems to work although your results may vary. First create a new application:\n\n```sh\nyarn create svelte myapp\ncd myapp\n```\n\nAnd enable Yarn Berry:\n\n```sh\nyarn set version berry\nyarn install\n```\n\nOne of the more interesting features of Yarn Berry is the ability to have a single global cache for packages, instead of having multiple copies for each project on the disk. However, setting `enableGlobalCache` to true causes building to fail, so it is recommended to add the following to the `.yarnrc.yml` file:\n\n```yaml\nnodeLinker: node-modules\n```\n\nThis will cause packages to be downloaded into a local node_modules directory but avoids the above problem and is your best bet for using version 3 of Yarn at this point in time.",
    "kit/integrations": "## `vitePreprocess`\n\nIncluding [`vitePreprocess`](https://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/preprocess.md) in your project will allow you to use the various flavors of CSS that Vite supports: PostCSS, SCSS, Less, Stylus, and SugarSS. If you set your project up with TypeScript it will be included by default:\n\n```js\n// svelte.config.js\nimport { vitePreprocess } from '@sveltejs/vite-plugin-svelte';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n  preprocess: [vitePreprocess()]\n};\n\nexport default config;\n```\n\nYou will also need to use a preprocessor if you're using TypeScript with Svelte 4. TypeScript is supported natively in Svelte 5 if you're using only the type syntax. To use more complex TypeScript syntax in Svelte 5, you will need still need a preprocessor and can use `vitePreprocess({ script: true })`.\n\n## Add-ons\n\nRun [`npx sv add`](/docs/cli/sv-add) to setup many different complex integrations with a single command including:\n- prettier (formatting)\n- eslint (linting)\n- vitest (unit testing)\n- playwright (e2e testing)\n- lucia (auth)\n- tailwind (CSS)\n- drizzle (DB)\n- paraglide (i18n)\n- mdsvex (markdown)\n- storybook (frontend workshop)\n\n## Packages\n\nCheck out [the packages page](/packages) for a curated set of high quality Svelte packages. You can also see [sveltesociety.dev](https://sveltesociety.dev/) for additional libraries, templates, and resources.\n\n## Additional integrations\n\n### `svelte-preprocess`\n\n`svelte-preprocess` has some additional functionality not found in `vitePreprocess` such as support for Pug, Babel, and global styles. However, `vitePreprocess` may be faster and require less configuration, so it is used by default. Note that CoffeeScript is [not supported](https://github.com/sveltejs/kit/issues/2920#issuecomment-996469815) by SvelteKit.\n\nYou will need to install `svelte-preprocess` with `npm i -D svelte-preprocess` and [add it to your `svelte.config.js`](https://github.com/sveltejs/svelte-preprocess/blob/main/docs/usage.md#with-svelte-config). After that, you will often need to [install the corresponding library](https://github.com/sveltejs/svelte-preprocess/blob/main/docs/getting-started.md) such as `npm i -D sass` or `npm i -D less`.\n\n## Vite plugins\n\nSince SvelteKit projects are built with Vite, you can use Vite plugins to enhance your project. See a list of available plugins at [`vitejs/awesome-vite`](https://github.com/vitejs/awesome-vite?tab=readme-ov-file#plugins).\n\n## Integration FAQs\n\n[The SvelteKit FAQ](./faq) answers many questions about how to do X with SvelteKit, which may be helpful if you still have questions.",
    "kit/debugging": "In addition to the [`@debug`](../svelte/@debug) tag, you can also debug Svelte and SvelteKit projects using breakpoints within various tools and development environments. This includes both frontend and backend code.\n\nThe following guides assume your JavaScript runtime environment is Node.js.\n\n## Visual Studio Code\n\nWith the built-in debug terminal, you can set up breakpoints in source files within VSCode.\n\n1. Open the command palette: `CMD/Ctrl` + `Shift` + `P`.\n2. Find and launch \"Debug: JavaScript Debug Terminal\".\n3. Start your project using the debug terminal. For example: `npm run dev`.\n4. Set some breakpoints in your client or server-side source code.\n5. Trigger the breakpoint.\n\n### Launch via debug pane\n\nYou may alternatively set up a `.vscode/launch.json` in your project. To set one up automatically:\n\n1. Go to the \"Run and Debug\" pane.\n2. In the \"Run\" select menu, choose \"Node.js...\".\n3. Select the \"run script\" that corresponds to your project, such as \"Run script: dev\".\n4. Press the \"Start debugging\" play button, or hit `F5` to begin breakpoint debugging.\n\nHere's an example `launch.json`:\n\n```json\n{\n\t\"version\": \"0.2.0\",\n\t\"configurations\": [\n\t\t{\n\t\t\t\"command\": \"npm run dev\",\n\t\t\t\"name\": \"Run development server\",\n\t\t\t\"request\": \"launch\",\n\t\t\t\"type\": \"node-terminal\"\n\t\t}\n\t]\n}\n```\n\nFurther reading: <https://code.visualstudio.com/docs/editor/debugging>.\n\n## Other Editors\n\nIf you use a different editor, these community guides might be useful for you:\n\n- [WebStorm Svelte: Debug Your Application](https://www.jetbrains.com/help/webstorm/svelte.html#ws_svelte_debug)\n- [Debugging JavaScript Frameworks in Neovim](https://theosteiner.de/debugging-javascript-frameworks-in-neovim)\n\n## Google Chrome and Microsoft Edge Developer Tools\n\nIt's possible to debug Node.js applications using a browser-based debugger.\n\n> [!NOTE] Note this only works with debugging client-side SvelteKit source maps.\n\n1. Run the `--inspect` flag when starting the Vite server with Node.js. For instance: `NODE_OPTIONS=\"--inspect\" npm run dev`\n2. Open your site in a new tab. Typically at `localhost:5173`.\n3. Open your browser's dev tools, and click on the \"Open dedicated DevTools for Node.js\" icon near the top-left. It should display the Node.js logo.\n4. Set up breakpoints and debug your application.\n\nYou may alternatively open the debugger devtools by navigating to `chrome://inspect` in Google Chrome, or `edge://inspect` in Microsoft Edge.\n\n## References\n\n- [Debugging Node.js](https://nodejs.org/en/learn/getting-started/debugging)",
    "kit/migrating-to-sveltekit-2": "Upgrading from SvelteKit version 1 to version 2 should be mostly seamless. There are a few breaking changes to note, which are listed here. You can use `npx sv migrate sveltekit-2` to migrate some of these changes automatically.\n\nWe highly recommend upgrading to the most recent 1.x version before upgrading to 2.0, so that you can take advantage of targeted deprecation warnings. We also recommend [updating to Svelte 4](../svelte/v4-migration-guide) first: Later versions of SvelteKit 1.x support it, and SvelteKit 2.0 requires it.\n\n## `redirect` and `error` are no longer thrown by you\n\nPreviously, you had to `throw` the values returned from `error(...)` and `redirect(...)` yourself. In SvelteKit 2 this is no longer the case — calling the functions is sufficient.\n\n```js\nimport { error } from '@sveltejs/kit'\n\n// ...\n---throw error(500, 'something went wrong');---\n+++error(500, 'something went wrong');+++\n```\n\n`svelte-migrate` will do these changes automatically for you.\n\nIf the error or redirect is thrown inside a `try {...}` block (hint: don't do this!), you can distinguish them from unexpected errors using [`isHttpError`](@sveltejs-kit#isHttpError) and [`isRedirect`](@sveltejs-kit#isRedirect) imported from `@sveltejs/kit`.\n\n## path is required when setting cookies\n\nWhen receiving a `Set-Cookie` header that doesn't specify a `path`, browsers will [set the cookie path](https://www.rfc-editor.org/rfc/rfc6265#section-5.1.4) to the parent of the resource in question. This behaviour isn't particularly helpful or intuitive, and frequently results in bugs because the developer expected the cookie to apply to the domain as a whole.\n\nAs of SvelteKit 2.0, you need to set a `path` when calling `cookies.set(...)`, `cookies.delete(...)` or `cookies.serialize(...)` so that there's no ambiguity. Most of the time, you probably want to use `path: '/'`, but you can set it to whatever you like, including relative paths — `''` means 'the current path', `'.'` means 'the current directory'.\n\n```js\n/** @type {import('./$types').PageServerLoad} */\nexport function load({ cookies }) {\n\tcookies.set(name, value, +++{ path: '/' }+++);\n\treturn { response }\n}\n```\n\n`svelte-migrate` will add comments highlighting the locations that need to be adjusted.\n\n## Top-level promises are no longer awaited\n\nIn SvelteKit version 1, if the top-level properties of the object returned from a `load` function were promises, they were automatically awaited. With the introduction of [streaming](/blog/streaming-snapshots-sveltekit) this behavior became a bit awkward as it forces you to nest your streamed data one level deep.\n\nAs of version 2, SvelteKit no longer differentiates between top-level and non-top-level promises. To get back the blocking behavior, use `await` (with `Promise.all` to prevent waterfalls, where appropriate):\n\n```js\n// @filename: ambient.d.ts\ndeclare const url: string;\n\n// @filename: index.js\n// ---cut---\n// If you have a single promise\n/** @type {import('./$types').PageServerLoad} */\nexport +++async+++ function load({ fetch }) {\n\tconst response = +++await+++ fetch(url).then(r => r.json());\n\treturn { response }\n}\n```\n\n```js\n// @filename: ambient.d.ts\ndeclare const url1: string;\ndeclare const url2: string;\n\n// @filename: index.js\n// ---cut---\n// If you have multiple promises\n/** @type {import('./$types').PageServerLoad} */\nexport +++async+++ function load({ fetch }) {\n---\tconst a = fetch(url1).then(r => r.json());---\n---\tconst b = fetch(url2).then(r => r.json());---\n+++\tconst [a, b] = await Promise.all([\n\t  fetch(url1).then(r => r.json()),\n\t  fetch(url2).then(r => r.json()),\n\t]);+++\n\treturn { a, b };\n}\n```\n\n## goto(...) changes\n\n`goto(...)` no longer accepts external URLs. To navigate to an external URL, use `window.location.href = url`. The `state` object now determines `$page.state` and must adhere to the `App.PageState` interface, if declared. See [shallow routing](shallow-routing) for more details.\n\n## paths are now relative by default\n\nIn SvelteKit 1, `%sveltekit.assets%` in your `app.html` was replaced with a relative path by default (i.e. `.` or `..` or `../..` etc, depending on the path being rendered) during server-side rendering unless the [`paths.relative`](configuration#paths) config option was explicitly set to `false`. The same was true for `base` and `assets` imported from `$app/paths`, but only if the `paths.relative` option was explicitly set to `true`.\n\nThis inconsistency is fixed in version 2. Paths are either always relative or always absolute, depending on the value of [`paths.relative`](configuration#paths). It defaults to `true` as this results in more portable apps: if the `base` is something other than the app expected (as is the case when viewed on the [Internet Archive](https://archive.org/), for example) or unknown at build time (as is the case when deploying to [IPFS](https://ipfs.tech/) and so on), fewer things are likely to break.\n\n## Server fetches are not trackable anymore\n\nPreviously it was possible to track URLs from `fetch`es on the server in order to rerun load functions. This poses a possible security risk (private URLs leaking), and for this reason it was behind the `dangerZone.trackServerFetches` setting, which is now removed.\n\n## `preloadCode` arguments must be prefixed with `base`\n\nSvelteKit exposes two functions, [`preloadCode`]($app-navigation#preloadCode) and [`preloadData`]($app-navigation#preloadData), for programmatically loading the code and data associated with a particular path. In version 1, there was a subtle inconsistency — the path passed to `preloadCode` did not need to be prefixed with the `base` path (if set), while the path passed to `preloadData` did.\n\nThis is fixed in SvelteKit 2 — in both cases, the path should be prefixed with `base` if it is set.\n\nAdditionally, `preloadCode` now takes a single argument rather than _n_ arguments.\n\n## `resolvePath` has been removed\n\nSvelteKit 1 included a function called `resolvePath` which allows you to resolve a route ID (like `/blog/[slug]`) and a set of parameters (like `{ slug: 'hello' }`) to a pathname. Unfortunately the return value didn't include the `base` path, limiting its usefulness in cases where `base` was set.\n\nFor this reason, SvelteKit 2 replaces `resolvePath` with a (slightly better named) function called `resolveRoute`, which is imported from `$app/paths` and which takes `base` into account.\n\n```js\n---import { resolvePath } from '@sveltejs/kit';\nimport { base } from '$app/paths';---\n+++import { resolveRoute } from '$app/paths';+++\n\n---const path = base + resolvePath('/blog/[slug]', { slug });---\n+++const path = resolveRoute('/blog/[slug]', { slug });+++\n```\n\n`svelte-migrate` will do the method replacement for you, though if you later prepend the result with `base`, you need to remove that yourself.\n\n## Improved error handling\n\nErrors are handled inconsistently in SvelteKit 1. Some errors trigger the `handleError` hook but there is no good way to discern their status (for example, the only way to tell a 404 from a 500 is by seeing if `event.route.id` is `null`), while others (such as 405 errors for `POST` requests to pages without actions) don't trigger `handleError` at all, but should. In the latter case, the resulting `$page.error` will deviate from the [`App.Error`](types#Error) type, if it is specified.\n\nSvelteKit 2 cleans this up by calling `handleError` hooks with two new properties: `status` and `message`. For errors thrown from your code (or library code called by your code) the status will be `500` and the message will be `Internal Error`. While `error.message` may contain sensitive information that should not be exposed to users, `message` is safe.\n\n## Dynamic environment variables cannot be used during prerendering\n\nThe `$env/dynamic/public` and `$env/dynamic/private` modules provide access to _run time_ environment variables, as opposed to the _build time_ environment variables exposed by `$env/static/public` and `$env/static/private`.\n\nDuring prerendering in SvelteKit 1, they are one and the same. This means that prerendered pages that make use of 'dynamic' environment variables are really 'baking in' build time values, which is incorrect. Worse, `$env/dynamic/public` is populated in the browser with these stale values if the user happens to land on a prerendered page before navigating to dynamically-rendered pages.\n\nBecause of this, dynamic environment variables can no longer be read during prerendering in SvelteKit 2 — you should use the `static` modules instead. If the user lands on a prerendered page, SvelteKit will request up-to-date values for `$env/dynamic/public` from the server (by default from a module called `/_app/env.js`) instead of reading them from the server-rendered HTML.\n\n## `form` and `data` have been removed from `use:enhance` callbacks\n\nIf you provide a callback to [`use:enhance`](form-actions#Progressive-enhancement-use:enhance), it will be called with an object containing various useful properties.\n\nIn SvelteKit 1, those properties included `form` and `data`. These were deprecated some time ago in favour of `formElement` and `formData`, and have been removed altogether in SvelteKit 2.\n\n## Forms containing file inputs must use `multipart/form-data`\n\nIf a form contains an `<input type=\"file\">` but does not have an `enctype=\"multipart/form-data\"` attribute, non-JS submissions will omit the file. SvelteKit 2 will throw an error if it encounters a form like this during a `use:enhance` submission to ensure that your forms work correctly when JavaScript is not present.\n\n## Generated `tsconfig.json` is more strict\n\nPreviously, the generated `tsconfig.json` was trying its best to still produce a somewhat valid config when your `tsconfig.json` included `paths` or `baseUrl`. In SvelteKit 2, the validation is more strict and will warn when you use either `paths` or `baseUrl` in your `tsconfig.json`. These settings are used to generate path aliases and you should use [the `alias` config](configuration#alias) option in your `svelte.config.js` instead, to also create a corresponding alias for the bundler.\n\n## `getRequest` no longer throws errors\n\nThe `@sveltejs/kit/node` module exports helper functions for use in Node environments, including `getRequest` which turns a Node [`ClientRequest`](https://nodejs.org/api/http.html#class-httpclientrequest) into a standard [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request) object.\n\nIn SvelteKit 1, `getRequest` could throw if the `Content-Length` header exceeded the specified size limit. In SvelteKit 2, the error will not be thrown until later, when the request body (if any) is being read. This enables better diagnostics and simpler code.\n\n## `vitePreprocess` is no longer exported from `@sveltejs/kit/vite`\n\nSince `@sveltejs/vite-plugin-svelte` is now a peer dependency, SvelteKit 2 no longer re-exports `vitePreprocess`. You should import it directly from `@sveltejs/vite-plugin-svelte`.\n\n## Updated dependency requirements\n\nSvelteKit 2 requires Node `18.13` or higher, and the following minimum dependency versions:\n\n- `svelte@4`\n- `vite@5`\n- `typescript@5`\n- `@sveltejs/vite-plugin-svelte@3` (this is now required as a `peerDependency` of SvelteKit — previously it was directly depended upon)\n- `@sveltejs/adapter-cloudflare@3` (if you're using these adapters)\n- `@sveltejs/adapter-cloudflare-workers@2`\n- `@sveltejs/adapter-netlify@3`\n- `@sveltejs/adapter-node@2`\n- `@sveltejs/adapter-static@3`\n- `@sveltejs/adapter-vercel@4`\n\n`svelte-migrate` will update your `package.json` for you.\n\nAs part of the TypeScript upgrade, the generated `tsconfig.json` (the one your `tsconfig.json` extends from) now uses `\"moduleResolution\": \"bundler\"` (which is recommended by the TypeScript team, as it properly resolves types from packages with an `exports` map in package.json) and `verbatimModuleSyntax` (which replaces the existing `importsNotUsedAsValues ` and `preserveValueImports` flags — if you have those in your `tsconfig.json`, remove them. `svelte-migrate` will do this for you).\n\n## SvelteKit 2.12: $app/stores deprecated\n\nSvelteKit 2.12 introduced `$app/state` based on the [Svelte 5 runes API](/docs/svelte/what-are-runes). `$app/state` provides everything that `$app/stores` provides but with more flexibility as to where and how you use it. Most importantly, the `page` object is now fine-grained, e.g. updates to `page.state` will not invalidate `page.data` and vice-versa.\n\nAs a consequence, `$app/stores` is deprecated and subject to be removed in SvelteKit 3. We recommend [upgrading to Svelte 5](/docs/svelte/v5-migration-guide), if you haven't already, and then migrate away from `$app/stores`. Most of the replacements should be pretty simple: Replace the `$app/stores` import with `$app/state` and remove the `$` prefixes from the usage sites.\n\n```svelte\n<script>\n\t---import { page } from '$app/stores';---\n\t+++import { page } from '$app/state';+++\n</script>\n\n---{$page.data}---\n+++{page.data}+++\n```\n\nUse `npx sv migrate app-state` to auto-migrate most of your `$app/stores` usages inside `.svelte` components.",
    "kit/migrating": "SvelteKit is the successor to Sapper and shares many elements of its design.\n\nIf you have an existing Sapper app that you plan to migrate to SvelteKit, there are a number of changes you will need to make. You may find it helpful to view [some examples](additional-resources#Examples) while migrating.\n\n## package.json\n\n### type: \"module\"\n\nAdd `\"type\": \"module\"` to your `package.json`. You can do this step separately from the rest as part of an incremental migration if you are using Sapper 0.29.3\nor newer.\n\n### dependencies\n\nRemove `polka` or `express`, if you're using one of those, and any middleware such as `sirv` or `compression`.\n\n### devDependencies\n\nRemove `sapper` from your `devDependencies` and replace it with `@sveltejs/kit` and whichever [adapter](adapters) you plan to use (see [next section](migrating#Project-files-Configuration)).\n\n### scripts\n\nAny scripts that reference `sapper` should be updated:\n\n- `sapper build` should become `vite build` using the Node [adapter](adapters)\n- `sapper export` should become `vite build` using the static [adapter](adapters)\n- `sapper dev` should become `vite dev`\n- `node __sapper__/build` should become `node build`\n\n## Project files\n\nThe bulk of your app, in `src/routes`, can be left where it is, but several project files will need to be moved or updated.\n\n### Configuration\n\nYour `webpack.config.js` or `rollup.config.js` should be replaced with a `svelte.config.js`, as documented [here](configuration). Svelte preprocessor options should be moved to `config.preprocess`.\n\nYou will need to add an [adapter](adapters). `sapper build` is roughly equivalent to [adapter-node](adapter-node) while `sapper export` is roughly equivalent to [adapter-static](adapter-static), though you might prefer to use an adapter designed for the platform you're deploying to.\n\nIf you were using plugins for filetypes that are not automatically handled by [Vite](https://vitejs.dev), you will need to find Vite equivalents and add them to the [Vite config](project-structure#Project-files-vite.config.js).\n\n### src/client.js\n\nThis file has no equivalent in SvelteKit. Any custom logic (beyond `sapper.start(...)`) should be expressed in your `+layout.svelte` file, inside an `onMount` callback.\n\n### src/server.js\n\nWhen using `adapter-node` the equivalent is a [custom server](adapter-node#Custom-server). Otherwise, this file has no direct equivalent, since SvelteKit apps can run in serverless environments.\n\n### src/service-worker.js\n\nMost imports from `@sapper/service-worker` have equivalents in [`$service-worker`]($service-worker):\n\n- `files` is unchanged\n- `routes` has been removed\n- `shell` is now `build`\n- `timestamp` is now `version`\n\n### src/template.html\n\nThe `src/template.html` file should be renamed `src/app.html`.\n\nRemove `%sapper.base%`, `%sapper.scripts%` and `%sapper.styles%`. Replace `%sapper.head%` with `%sveltekit.head%` and `%sapper.html%` with `%sveltekit.body%`. The `<div id=\"sapper\">` is no longer necessary.\n\n### src/node_modules\n\nA common pattern in Sapper apps is to put your internal library in a directory inside `src/node_modules`. This doesn't work with Vite, so we use [`src/lib`]($lib) instead.\n\n## Pages and layouts\n\n### Renamed files\n\nRoutes now are made up of the folder name exclusively to remove ambiguity, the folder names leading up to a `+page.svelte` correspond to the route. See [the routing docs](routing) for an overview. The following shows a old/new comparison:\n\n| Old                       | New                       |\n| ------------------------- | ------------------------- |\n| routes/about/index.svelte | routes/about/+page.svelte |\n| routes/about.svelte       | routes/about/+page.svelte |\n\nYour custom error page component should be renamed from `_error.svelte` to `+error.svelte`. Any `_layout.svelte` files should likewise be renamed `+layout.svelte`. [Any other files are ignored](routing#Other-files).\n\n### Imports\n\nThe `goto`, `prefetch` and `prefetchRoutes` imports from `@sapper/app` should be replaced with `goto`, `preloadData` and `preloadCode` imports respectively from [`$app/navigation`]($app-navigation).\n\nThe `stores` import from `@sapper/app` should be replaced — see the [Stores](migrating#Pages-and-layouts-Stores) section below.\n\nAny files you previously imported from directories in `src/node_modules` will need to be replaced with [`$lib`]($lib) imports.\n\n### Preload\n\nAs before, pages and layouts can export a function that allows data to be loaded before rendering takes place.\n\nThis function has been renamed from `preload` to [`load`](load), it now lives in a `+page.js` (or `+layout.js`) next to its `+page.svelte` (or `+layout.svelte`), and its API has changed. Instead of two arguments — `page` and `session` — there is a single `event` argument.\n\nThere is no more `this` object, and consequently no `this.fetch`, `this.error` or `this.redirect`. Instead, you can get [`fetch`](load#Making-fetch-requests) from the input methods, and both [`error`](load#Errors) and [`redirect`](load#Redirects) are now thrown.\n\n### Stores\n\nIn Sapper, you would get references to provided stores like so:\n\n```js\n// @filename: ambient.d.ts\ndeclare module '@sapper/app';\n\n// @filename: index.js\n// ---cut---\nimport { stores } from '@sapper/app';\nconst { preloading, page, session } = stores();\n```\n\nThe `page` store still exists; `preloading` has been replaced with a `navigating` store that contains `from` and `to` properties. `page` now has `url` and `params` properties, but no `path` or `query`.\n\nYou access them differently in SvelteKit. `stores` is now `getStores`, but in most cases it is unnecessary since you can import `navigating`, and `page` directly from [`$app/stores`]($app-stores). If you're on Svelte 5 and SvelteKit 2.12 or higher, consider using [`$app/state`]($app-state) instead.\n\n### Routing\n\nRegex routes are no longer supported. Instead, use [advanced route matching](advanced-routing#Matching).\n\n### Segments\n\nPreviously, layout components received a `segment` prop indicating the child segment. This has been removed; you should use the more flexible `$page.url.pathname` (or `page.url.pathname`) value to derive the segment you're interested in.\n\n### URLs\n\nIn Sapper, all relative URLs were resolved against the base URL — usually `/`, unless the `basepath` option was used — rather than against the current page.\n\nThis caused problems and is no longer the case in SvelteKit. Instead, relative URLs are resolved against the current page (or the destination page, for `fetch` URLs in `load` functions) instead. In most cases, it's easier to use root-relative (i.e. starts with `/`) URLs, since their meaning is not context-dependent.\n\n### &lt;a&gt; attributes\n\n- `sapper:prefetch` is now `data-sveltekit-preload-data`\n- `sapper:noscroll` is now `data-sveltekit-noscroll`\n\n## Endpoints\n\nIn Sapper, [server routes](routing#server) received the `req` and `res` objects exposed by Node's `http` module (or the augmented versions provided by frameworks like Polka and Express).\n\nSvelteKit is designed to be agnostic as to where the app is running — it could be running on a Node server, but could equally be running on a serverless platform or in a Cloudflare Worker. For that reason, you no longer interact directly with `req` and `res`. Your endpoints will need to be updated to match the new signature.\n\nTo support this environment-agnostic behavior, `fetch` is now available in the global context, so you don't need to import `node-fetch`, `cross-fetch`, or similar server-side fetch implementations in order to use it.\n\n## Integrations\n\nSee [integrations](./integrations) for detailed information about integrations.\n\n### HTML minifier\n\nSapper includes `html-minifier` by default. SvelteKit does not include this, but you can add it as a prod dependency and then use it through a [hook](hooks#Server-hooks-handle):\n\n```js\n// @filename: ambient.d.ts\n/// <reference types=\"@sveltejs/kit\" />\ndeclare module 'html-minifier';\n\n// @filename: index.js\n// ---cut---\nimport { minify } from 'html-minifier';\nimport { building } from '$app/environment';\n\nconst minification_options = {\n\tcollapseBooleanAttributes: true,\n\tcollapseWhitespace: true,\n\tconservativeCollapse: true,\n\tdecodeEntities: true,\n\thtml5: true,\n\tignoreCustomComments: [/^#/],\n\tminifyCSS: true,\n\tminifyJS: false,\n\tremoveAttributeQuotes: true,\n\tremoveComments: false, // some hydration code needs comments, so leave them in\n\tremoveOptionalTags: true,\n\tremoveRedundantAttributes: true,\n\tremoveScriptTypeAttributes: true,\n\tremoveStyleLinkTypeAttributes: true,\n\tsortAttributes: true,\n\tsortClassName: true\n};\n\n/** @type {import('@sveltejs/kit').Handle} */\nexport async function handle({ event, resolve }) {\n\tlet page = '';\n\n\treturn resolve(event, {\n\t\ttransformPageChunk: ({ html, done }) => {\n\t\t\tpage += html;\n\t\t\tif (done) {\n\t\t\t\treturn building ? minify(page, minification_options) : page;\n\t\t\t}\n\t\t}\n\t});\n}\n```\n\nNote that `prerendering` is `false` when using `vite preview` to test the production build of the site, so to verify the results of minifying, you'll need to inspect the built HTML files directly.",
    "kit/additional-resources": "## FAQs\n\nPlease see the [SvelteKit FAQ](faq) for solutions to common issues and helpful tips and tricks.\n\nThe [Svelte FAQ](../svelte/faq) and [`vite-plugin-svelte` FAQ](https://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/faq.md) may also be helpful for questions deriving from those libraries.\n\n## Examples\n\nWe've written and published a few different SvelteKit sites as examples:\n\n- [`sveltejs/realworld`](https://github.com/sveltejs/realworld) contains an example blog site\n- [A HackerNews clone](https://github.com/sveltejs/sites/tree/master/sites/hn.svelte.dev)\n- [`svelte.dev`](https://github.com/sveltejs/svelte.dev)\n\nSvelteKit users have also published plenty of examples on GitHub, under the [#sveltekit](https://github.com/topics/sveltekit) and [#sveltekit-template](https://github.com/topics/sveltekit-template) topics, as well as on [the Svelte Society site](https://sveltesociety.dev/templates?category=sveltekit). Note that these have not been vetted by the maintainers and may not be up to date.\n\n## Support\n\nYou can ask for help on [Discord](/chat) and [StackOverflow](https://stackoverflow.com/questions/tagged/sveltekit). Please first search for information related to your issue in the FAQ, Google or another search engine, issue tracker, and Discord chat history in order to be respectful of others' time. There are many more people asking questions than answering them, so this will help in allowing the community to grow in a scalable fashion.",
    "kit/glossary": "The core of SvelteKit provides a highly configurable rendering engine. This section describes some of the terms used when discussing rendering. A reference for setting these options is provided in the documentation above.\n\n## CSR\n\nClient-side rendering (CSR) is the generation of the page contents in the web browser using JavaScript.\n\nIn SvelteKit, client-side rendering will be used by default, but you can turn off JavaScript with [the `csr = false` page option](page-options#csr).\n\n## Edge\n\nRendering on the edge refers to rendering an application in a content delivery network (CDN) near the user. Edge rendering allows the request and response for a page to travel a shorter distance thus improving latency.\n\n## Hybrid app\n\nSvelteKit uses a hybrid rendering mode by default where it loads the initial HTML from the server (SSR), and then updates the page contents on subsequent navigations via client-side rendering (CSR).\n\n## Hydration\n\nSvelte components store some state and update the DOM when the state is updated. When fetching data during SSR, by default SvelteKit will store this data and transmit it to the client along with the server-rendered HTML. The components can then be initialized on the client with that data without having to call the same API endpoints again. Svelte will then check that the DOM is in the expected state and attach event listeners in a process called hydration. Once the components are fully hydrated, they can react to changes to their properties just like any newly created Svelte component.\n\nIn SvelteKit, pages will be hydrated by default, but you can turn off JavaScript with [the `csr = false` page option](page-options#csr).\n\n## ISR\n\nIncremental static regeneration (ISR) allows you to generate static pages on your site as visitors request those pages without redeploying. This may reduces build times compared to [SSG](#SSG) sites with a large number of pages. You can do [ISR with `adapter-vercel`](adapter-vercel#Incremental-Static-Regeneration).\n\n## MPA\n\nTraditional applications that render each page view on the server — such as those written in languages other than JavaScript — are often referred to as multi-page apps (MPA).\n\n## Prerendering\n\nPrerendering means computing the contents of a page at build time and saving the HTML for display. This approach has the same benefits as traditional server-rendered pages, but avoids recomputing the page for each visitor and so scales nearly for free as the number of visitors increases. The tradeoff is that the build process is more expensive and prerendered content can only be updated by building and deploying a new version of the application.\n\nNot all pages can be prerendered. The basic rule is this: for content to be prerenderable, any two users hitting it directly must get the same content from the server, and the page must not contain [actions](form-actions). Note that you can still prerender content that is loaded based on the page's parameters as long as all users will be seeing the same prerendered content.\n\nPre-rendered pages are not limited to static content. You can build personalized pages if user-specific data is fetched and rendered client-side. This is subject to the caveat that you will experience the downsides of not doing SSR for that content as discussed above.\n\nIn SvelteKit, you can control prerendering with [the `prerender` page option](page-options#prerender) and [`prerender` config](configuration#prerender) in `svelte.config.js`.\n\n## PWA\n\nA progressive web app (PWA) is an app that's built using web APIs and technologies, but functions like a mobile or desktop app. Sites served as [PWAs can be installed](https://web.dev/learn/pwa/installation), allowing you to add a shortcut to the application on your launcher, home screen, or start menu. Many PWAs will utilize [service workers](service-workers) to build offline capabilities.\n\n## Routing\n\nBy default, when you navigate to a new page (by clicking on a link or using the browser's forward or back buttons), SvelteKit will intercept the attempted navigation and handle it instead of allowing the browser to send a request to the server for the destination page. SvelteKit will then update the displayed contents on the client by rendering the component for the new page, which in turn can make calls to the necessary API endpoints. This process of updating the page on the client in response to attempted navigation is called client-side routing.\n\nIn SvelteKit, client-side routing will be used by default, but you can skip it with [`data-sveltekit-reload`](link-options#data-sveltekit-reload).\n\n## SPA\n\nA single-page app (SPA) is an application in which all requests to the server load a single HTML file which then does client-side rendering based on the requested URL. All navigation is handled on the client-side in a process called client-side routing with per-page contents being updated and common layout elements remaining largely unchanged. Throughout this site, when we refer to a SPA, we use this definition where a SPA simply serves an empty shell on the initial request. It should not be confused with a [hybrid app](#Hybrid-app), which serves HTML on the initial request. It has a large performance impact by forcing two network round trips before rendering can begin. Because SPA mode has large negative performance and SEO impacts, it is recommended only in very limited circumstances such as when being wrapped in a mobile app.\n\nIn SvelteKit, you can [build SPAs with `adapter-static`](single-page-apps).\n\n## SSG\n\nStatic Site Generation (SSG) is a term that refers to a site where every page is prerendered. One benefit of fully prerendering a site is that you do not need to maintain or pay for servers to perform SSR. Once generated, the site can be served from CDNs, leading to great “time to first byte” performance. This delivery model is often referred to as JAMstack.\n\nIn SvelteKit, you can do static site generation by using [`adapter-static`](adapter-static) or by configuring every page to be prerendered using [the `prerender` page option](page-options#prerender) or [`prerender` config](configuration#prerender) in `svelte.config.js`.\n\n## SSR\n\nServer-side rendering (SSR) is the generation of the page contents on the server. Returning the page contents from the server via SSR or prerendering is highly preferred for performance and SEO. It significantly improves performance by avoiding the introduction of extra round trips necessary in a SPA, and makes your app accessible to users if JavaScript fails or is disabled (which happens [more often than you probably think](https://kryogenix.org/code/browser/everyonehasjs.html)). While some search engines can index content that is dynamically generated on the client-side, it is likely to take longer even in these cases.\n\nIn SvelteKit, pages are server-side rendered by default. You can disable SSR with [the `ssr` page option](page-options#ssr).",
    "kit/@sveltejs-kit": "```js\n// @noErrors\nimport {\n\tServer,\n\tVERSION,\n\terror,\n\tfail,\n\tisActionFailure,\n\tisHttpError,\n\tisRedirect,\n\tjson,\n\tnormalizeUrl,\n\tredirect,\n\ttext\n} from '@sveltejs/kit';\n```\n\n## Server\n\n<div class=\"ts-block\">\n\n```dts\nclass Server {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nconstructor(manifest: SSRManifest);\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ninit(options: ServerInitOptions): Promise<void>;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nrespond(request: Request, options: RequestOptions): Promise<Response>;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n\n\n## VERSION\n\n<div class=\"ts-block\">\n\n```dts\nconst VERSION: string;\n```\n\n</div>\n\n\n\n## error\n\nThrows an error with a HTTP status code and an optional message.\nWhen called during request handling, this will cause SvelteKit to\nreturn an error response without invoking `handleError`.\nMake sure you're not catching the thrown error, which would prevent SvelteKit from handling it.\n\n<div class=\"ts-block\">\n\n```dts\nfunction error(status: number, body: App.Error): never;\n```\n\n</div>\n\n<div class=\"ts-block\">\n\n```dts\nfunction error(\n\tstatus: number,\n\tbody?: {\n\t\tmessage: string;\n\t} extends App.Error\n\t\t? App.Error | string | undefined\n\t\t: never\n): never;\n```\n\n</div>\n\n\n\n## fail\n\nCreate an `ActionFailure` object. Call when form submission fails.\n\n<div class=\"ts-block\">\n\n```dts\nfunction fail(status: number): ActionFailure<undefined>;\n```\n\n</div>\n\n<div class=\"ts-block\">\n\n```dts\nfunction fail<T = undefined>(\n\tstatus: number,\n\tdata: T\n): ActionFailure<T>;\n```\n\n</div>\n\n\n\n## isActionFailure\n\nChecks whether this is an action failure thrown by `fail`.\n\n<div class=\"ts-block\">\n\n```dts\nfunction isActionFailure(e: unknown): e is ActionFailure;\n```\n\n</div>\n\n\n\n## isHttpError\n\nChecks whether this is an error thrown by `error`.\n\n<div class=\"ts-block\">\n\n```dts\nfunction isHttpError<T extends number>(\n\te: unknown,\n\tstatus?: T\n): e is HttpError_1 & {\n\tstatus: T extends undefined ? never : T;\n};\n```\n\n</div>\n\n\n\n## isRedirect\n\nChecks whether this is a redirect thrown by `redirect`.\n\n<div class=\"ts-block\">\n\n```dts\nfunction isRedirect(e: unknown): e is Redirect_1;\n```\n\n</div>\n\n\n\n## json\n\nCreate a JSON `Response` object from the supplied data.\n\n<div class=\"ts-block\">\n\n```dts\nfunction json(data: any, init?: ResponseInit): Response;\n```\n\n</div>\n\n\n\n## normalizeUrl\n\n<blockquote class=\"since note\">\n\nAvailable since 2.18.0\n\n</blockquote>\n\nStrips possible SvelteKit-internal suffixes and trailing slashes from the URL pathname.\nReturns the normalized URL as well as a method for adding the potential suffix back\nbased on a new pathname (possibly including search) or URL.\n```js\n// @errors: 7031\nimport { normalizeUrl } from '@sveltejs/kit';\n\nconst { url, denormalize } = normalizeUrl('/blog/post/__data.json');\nconsole.log(url.pathname); // /blog/post\nconsole.log(denormalize('/blog/post/a')); // /blog/post/a/__data.json\n```\n\n<div class=\"ts-block\">\n\n```dts\nfunction normalizeUrl(url: URL | string): {\n\turl: URL;\n\twasNormalized: boolean;\n\tdenormalize: (url?: string | URL) => URL;\n};\n```\n\n</div>\n\n\n\n## redirect\n\nRedirect a request. When called during request handling, SvelteKit will return a redirect response.\nMake sure you're not catching the thrown redirect, which would prevent SvelteKit from handling it.\n\nMost common status codes:\n * `303 See Other`: redirect as a GET request (often used after a form POST request)\n * `307 Temporary Redirect`: redirect will keep the request method\n * `308 Permanent Redirect`: redirect will keep the request method, SEO will be transferred to the new page\n\n[See all redirect status codes](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#redirection_messages)\n\n<div class=\"ts-block\">\n\n```dts\nfunction redirect(\n\tstatus:\n\t\t| 300\n\t\t| 301\n\t\t| 302\n\t\t| 303\n\t\t| 304\n\t\t| 305\n\t\t| 306\n\t\t| 307\n\t\t| 308\n\t\t| ({} & number),\n\tlocation: string | URL\n): never;\n```\n\n</div>\n\n\n\n## text\n\nCreate a `Response` object from the supplied body.\n\n<div class=\"ts-block\">\n\n```dts\nfunction text(body: string, init?: ResponseInit): Response;\n```\n\n</div>\n\n\n\n## Action\n\nShape of a form action method that is part of `export const actions = {...}` in `+page.server.js`.\nSee [form actions](/docs/kit/form-actions) for more information.\n\n<div class=\"ts-block\">\n\n```dts\ntype Action<\n\tParams extends\n\t\tAppLayoutParams<'/'> = AppLayoutParams<'/'>,\n\tOutputData extends Record<string, any> | void = Record<\n\t\tstring,\n\t\tany\n\t> | void,\n\tRouteId extends AppRouteId | null = AppRouteId | null\n> = (\n\tevent: RequestEvent<Params, RouteId>\n) => MaybePromise<OutputData>;\n```\n\n</div>\n\n## ActionFailure\n\n<div class=\"ts-block\">\n\n```dts\ninterface ActionFailure<T = undefined> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nstatus: number;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ndata: T;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n[uniqueSymbol]: true;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n## ActionResult\n\nWhen calling a form action via fetch, the response will be one of these shapes.\n```svelte\n<form method=\"post\" use:enhance={() => {\n\treturn ({ result }) => {\n\t\t// result is of type ActionResult\n\t};\n}}\n```\n\n<div class=\"ts-block\">\n\n```dts\ntype ActionResult<\n\tSuccess extends\n\t\t| Record<string, unknown>\n\t\t| undefined = Record<string, any>,\n\tFailure extends\n\t\t| Record<string, unknown>\n\t\t| undefined = Record<string, any>\n> =\n\t| { type: 'success'; status: number; data?: Success }\n\t| { type: 'failure'; status: number; data?: Failure }\n\t| { type: 'redirect'; status: number; location: string }\n\t| { type: 'error'; status?: number; error: any };\n```\n\n</div>\n\n## Actions\n\nShape of the `export const actions = {...}` object in `+page.server.js`.\nSee [form actions](/docs/kit/form-actions) for more information.\n\n<div class=\"ts-block\">\n\n```dts\ntype Actions<\n\tParams extends\n\t\tAppLayoutParams<'/'> = AppLayoutParams<'/'>,\n\tOutputData extends Record<string, any> | void = Record<\n\t\tstring,\n\t\tany\n\t> | void,\n\tRouteId extends AppRouteId | null = AppRouteId | null\n> = Record<string, Action<Params, OutputData, RouteId>>;\n```\n\n</div>\n\n## Adapter\n\n[Adapters](/docs/kit/adapters) are responsible for taking the production build and turning it into something that can be deployed to a platform of your choosing.\n\n<div class=\"ts-block\">\n\n```dts\ninterface Adapter {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nname: string;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe name of the adapter, using for logging. Will typically correspond to the package name.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nadapt: (builder: Builder) => MaybePromise<void>;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- `builder` An object provided by SvelteKit that contains methods for adapting the app\n\n</div>\n\nThis function is called after SvelteKit has built your app.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nsupports?: {/*…*/}\n```\n\n<div class=\"ts-block-property-details\">\n\nChecks called during dev and build to determine whether specific features will work in production with this adapter.\n\n<div class=\"ts-block-property-children\"><div class=\"ts-block-property\">\n\n```dts\nread?: (details: { config: any; route: { id: string } }) => boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- `details.config` The merged route config\n\n</div>\n\nTest support for `read` from `$app/server`.\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```dts\ninstrumentation?: () => boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag since\">available since</span> v2.31.0\n\n</div>\n\nTest support for `instrumentation.server.js`. To pass, the adapter must support running `instrumentation.server.js` prior to the application code.\n\n</div>\n</div></div>\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nemulate?: () => MaybePromise<Emulator>;\n```\n\n<div class=\"ts-block-property-details\">\n\nCreates an `Emulator`, which allows the adapter to influence the environment\nduring dev, build and prerendering.\n\n</div>\n</div></div>\n\n## AfterNavigate\n\nThe argument passed to [`afterNavigate`](/docs/kit/$app-navigation#afterNavigate) callbacks.\n\n<div class=\"ts-block\">\n\n```dts\ntype AfterNavigate = (Navigation | NavigationEnter) & {\n\t/**\n\t * The type of navigation:\n\t * - `enter`: The app has hydrated/started\n\t * - `form`: The user submitted a `<form method=\"GET\">`\n\t * - `link`: Navigation was triggered by a link click\n\t * - `goto`: Navigation was triggered by a `goto(...)` call or a redirect\n\t * - `popstate`: Navigation was triggered by back/forward navigation\n\t */\n\ttype: Exclude<NavigationType, 'leave'>;\n\t/**\n\t * Since `afterNavigate` callbacks are called after a navigation completes, they will never be called with a navigation that unloads the page.\n\t */\n\twillUnload: false;\n};\n```\n\n</div>\n\n## AwaitedActions\n\n<div class=\"ts-block\">\n\n```dts\ntype AwaitedActions<\n\tT extends Record<string, (...args: any) => any>\n> = OptionalUnion<\n\t{\n\t\t[Key in keyof T]: UnpackValidationError<\n\t\t\tAwaited<ReturnType<T[Key]>>\n\t\t>;\n\t}[keyof T]\n>;\n```\n\n</div>\n\n## BeforeNavigate\n\nThe argument passed to [`beforeNavigate`](/docs/kit/$app-navigation#beforeNavigate) callbacks.\n\n<div class=\"ts-block\">\n\n```dts\ntype BeforeNavigate = Navigation & {\n\t/**\n\t * Call this to prevent the navigation from starting.\n\t */\n\tcancel: () => void;\n};\n```\n\n</div>\n\n## Builder\n\nThis object is passed to the `adapt` function of adapters.\nIt contains various methods and properties that are useful for adapting the app.\n\n<div class=\"ts-block\">\n\n```dts\ninterface Builder {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nlog: Logger;\n```\n\n<div class=\"ts-block-property-details\">\n\nPrint messages to the console. `log.info` and `log.minor` are silent unless Vite's `logLevel` is `info`.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nrimraf: (dir: string) => void;\n```\n\n<div class=\"ts-block-property-details\">\n\nRemove `dir` and all its contents.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nmkdirp: (dir: string) => void;\n```\n\n<div class=\"ts-block-property-details\">\n\nCreate `dir` and any required parent directories.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nconfig: ValidatedConfig;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe fully resolved Svelte config.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nprerendered: Prerendered;\n```\n\n<div class=\"ts-block-property-details\">\n\nInformation about prerendered pages and assets, if any.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nroutes: RouteDefinition[];\n```\n\n<div class=\"ts-block-property-details\">\n\nAn array of all routes (including prerendered)\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ncreateEntries: (fn: (route: RouteDefinition) => AdapterEntry) => Promise<void>;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- `fn` A function that groups a set of routes into an entry point\n- <span class=\"tag deprecated\">deprecated</span> Use `builder.routes` instead\n\n</div>\n\nCreate separate functions that map to one or more routes of your app.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nfindServerAssets: (routes: RouteDefinition[]) => string[];\n```\n\n<div class=\"ts-block-property-details\">\n\nFind all the assets imported by server files belonging to `routes`\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ngenerateFallback: (dest: string) => Promise<void>;\n```\n\n<div class=\"ts-block-property-details\">\n\nGenerate a fallback page for a static webserver to use when no route is matched. Useful for single-page apps.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ngenerateEnvModule: () => void;\n```\n\n<div class=\"ts-block-property-details\">\n\nGenerate a module exposing build-time environment variables as `$env/dynamic/public`.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ngenerateManifest: (opts: { relativePath: string; routes?: RouteDefinition[] }) => string;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- `opts` a relative path to the base directory of the app and optionally in which format (esm or cjs) the manifest should be generated\n\n</div>\n\nGenerate a server-side manifest to initialise the SvelteKit [server](/docs/kit/@sveltejs-kit#Server) with.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ngetBuildDirectory: (name: string) => string;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- `name` path to the file, relative to the build directory\n\n</div>\n\nResolve a path to the `name` directory inside `outDir`, e.g. `/path/to/.svelte-kit/my-adapter`.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ngetClientDirectory: () => string;\n```\n\n<div class=\"ts-block-property-details\">\n\nGet the fully resolved path to the directory containing client-side assets, including the contents of your `static` directory.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ngetServerDirectory: () => string;\n```\n\n<div class=\"ts-block-property-details\">\n\nGet the fully resolved path to the directory containing server-side code.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ngetAppPath: () => string;\n```\n\n<div class=\"ts-block-property-details\">\n\nGet the application path including any configured `base` path, e.g. `my-base-path/_app`.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nwriteClient: (dest: string) => string[];\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- `dest` the destination folder\n- <span class=\"tag\">returns</span> an array of files written to `dest`\n\n</div>\n\nWrite client assets to `dest`.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nwritePrerendered: (dest: string) => string[];\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- `dest` the destination folder\n- <span class=\"tag\">returns</span> an array of files written to `dest`\n\n</div>\n\nWrite prerendered files to `dest`.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nwriteServer: (dest: string) => string[];\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- `dest` the destination folder\n- <span class=\"tag\">returns</span> an array of files written to `dest`\n\n</div>\n\nWrite server-side code to `dest`.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ncopy: (\n\tfrom: string,\n\tto: string,\n\topts?: {\n\t\tfilter?(basename: string): boolean;\n\t\treplace?: Record<string, string>;\n\t}\n) => string[];\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- `from` the source file or directory\n- `to` the destination file or directory\n- `opts.filter` a function to determine whether a file or directory should be copied\n- `opts.replace` a map of strings to replace\n- <span class=\"tag\">returns</span> an array of files that were copied\n\n</div>\n\nCopy a file or directory.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nhasServerInstrumentationFile: () => boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">returns</span> true if the server instrumentation file exists, false otherwise\n- <span class=\"tag since\">available since</span> v2.31.0\n\n</div>\n\nCheck if the server instrumentation file exists.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ninstrument: (args: {\n\tentrypoint: string;\n\tinstrumentation: string;\n\tstart?: string;\n\tmodule?:\n\t\t| {\n\t\t\t\texports: string[];\n\t\t  }\n\t\t| {\n\t\t\t\tgenerateText: (args: { instrumentation: string; start: string }) => string;\n\t\t  };\n}) => void;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- `options` an object containing the following properties:\n- `options.entrypoint` the path to the entrypoint to trace.\n- `options.instrumentation` the path to the instrumentation file.\n- `options.start` the name of the start file. This is what `entrypoint` will be renamed to.\n- `options.module` configuration for the resulting entrypoint module.\n- `options.module.generateText` a function that receives the relative paths to the instrumentation and start files, and generates the text of the module to be traced. If not provided, the default implementation will be used, which uses top-level await.\n- <span class=\"tag since\">available since</span> v2.31.0\n\n</div>\n\nInstrument `entrypoint` with `instrumentation`.\n\nRenames `entrypoint` to `start` and creates a new module at\n`entrypoint` which imports `instrumentation` and then dynamically imports `start`. This allows\nthe module hooks necessary for instrumentation libraries to be loaded prior to any application code.\n\nCaveats:\n- \"Live exports\" will not work. If your adapter uses live exports, your users will need to manually import the server instrumentation on startup.\n- If `tla` is `false`, OTEL auto-instrumentation may not work properly. Use it if your environment supports it.\n- Use `hasServerInstrumentationFile` to check if the user has a server instrumentation file; if they don't, you shouldn't do this.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ncompress: (directory: string) => Promise<void>;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- `directory` The directory containing the files to be compressed\n\n</div>\n\nCompress files in `directory` with gzip and brotli, where appropriate. Generates `.gz` and `.br` files alongside the originals.\n\n</div>\n</div></div>\n\n## ClientInit\n\n<blockquote class=\"since note\">\n\nAvailable since 2.10.0\n\n</blockquote>\n\nThe [`init`](/docs/kit/hooks#Shared-hooks-init) will be invoked once the app starts in the browser\n\n<div class=\"ts-block\">\n\n```dts\ntype ClientInit = () => MaybePromise<void>;\n```\n\n</div>\n\n## Config\n\nSee the [configuration reference](/docs/kit/configuration) for details.\n\n## Cookies\n\n<div class=\"ts-block\">\n\n```dts\ninterface Cookies {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nget: (name: string, opts?: import('cookie').CookieParseOptions) => string | undefined;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- `name` the name of the cookie\n- `opts` the options, passed directly to `cookie.parse`. See documentation [here](https://github.com/jshttp/cookie#cookieparsestr-options)\n\n</div>\n\nGets a cookie that was previously set with `cookies.set`, or from the request headers.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ngetAll: (opts?: import('cookie').CookieParseOptions) => Array<{ name: string; value: string }>;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- `opts` the options, passed directly to `cookie.parse`. See documentation [here](https://github.com/jshttp/cookie#cookieparsestr-options)\n\n</div>\n\nGets all cookies that were previously set with `cookies.set`, or from the request headers.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nset: (\n\tname: string,\n\tvalue: string,\n\topts: import('cookie').CookieSerializeOptions & { path: string }\n) => void;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- `name` the name of the cookie\n- `value` the cookie value\n- `opts` the options, passed directly to `cookie.serialize`. See documentation [here](https://github.com/jshttp/cookie#cookieserializename-value-options)\n\n</div>\n\nSets a cookie. This will add a `set-cookie` header to the response, but also make the cookie available via `cookies.get` or `cookies.getAll` during the current request.\n\nThe `httpOnly` and `secure` options are `true` by default (except on http://localhost, where `secure` is `false`), and must be explicitly disabled if you want cookies to be readable by client-side JavaScript and/or transmitted over HTTP. The `sameSite` option defaults to `lax`.\n\nYou must specify a `path` for the cookie. In most cases you should explicitly set `path: '/'` to make the cookie available throughout your app. You can use relative paths, or set `path: ''` to make the cookie only available on the current path and its children\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ndelete: (name: string, opts: import('cookie').CookieSerializeOptions & { path: string }) => void;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- `name` the name of the cookie\n- `opts` the options, passed directly to `cookie.serialize`. The `path` must match the path of the cookie you want to delete. See documentation [here](https://github.com/jshttp/cookie#cookieserializename-value-options)\n\n</div>\n\nDeletes a cookie by setting its value to an empty string and setting the expiry date in the past.\n\nYou must specify a `path` for the cookie. In most cases you should explicitly set `path: '/'` to make the cookie available throughout your app. You can use relative paths, or set `path: ''` to make the cookie only available on the current path and its children\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nserialize: (\n\tname: string,\n\tvalue: string,\n\topts: import('cookie').CookieSerializeOptions & { path: string }\n) => string;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- `name` the name of the cookie\n- `value` the cookie value\n- `opts` the options, passed directly to `cookie.serialize`. See documentation [here](https://github.com/jshttp/cookie#cookieserializename-value-options)\n\n</div>\n\nSerialize a cookie name-value pair into a `Set-Cookie` header string, but don't apply it to the response.\n\nThe `httpOnly` and `secure` options are `true` by default (except on http://localhost, where `secure` is `false`), and must be explicitly disabled if you want cookies to be readable by client-side JavaScript and/or transmitted over HTTP. The `sameSite` option defaults to `lax`.\n\nYou must specify a `path` for the cookie. In most cases you should explicitly set `path: '/'` to make the cookie available throughout your app. You can use relative paths, or set `path: ''` to make the cookie only available on the current path and its children\n\n</div>\n</div></div>\n\n## Emulator\n\nA collection of functions that influence the environment during dev, build and prerendering\n\n<div class=\"ts-block\">\n\n```dts\ninterface Emulator {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nplatform?(details: { config: any; prerender: PrerenderOption }): MaybePromise<App.Platform>;\n```\n\n<div class=\"ts-block-property-details\">\n\nA function that is called with the current route `config` and `prerender` option\nand returns an `App.Platform` object\n\n</div>\n</div></div>\n\n## Handle\n\nThe [`handle`](/docs/kit/hooks#Server-hooks-handle) hook runs every time the SvelteKit server receives a [request](/docs/kit/web-standards#Fetch-APIs-Request) and\ndetermines the [response](/docs/kit/web-standards#Fetch-APIs-Response).\nIt receives an `event` object representing the request and a function called `resolve`, which renders the route and generates a `Response`.\nThis allows you to modify response headers or bodies, or bypass SvelteKit entirely (for implementing routes programmatically, for example).\n\n<div class=\"ts-block\">\n\n```dts\ntype Handle = (input: {\n\tevent: RequestEvent;\n\tresolve: (\n\t\tevent: RequestEvent,\n\t\topts?: ResolveOptions\n\t) => MaybePromise<Response>;\n}) => MaybePromise<Response>;\n```\n\n</div>\n\n## HandleClientError\n\nThe client-side [`handleError`](/docs/kit/hooks#Shared-hooks-handleError) hook runs when an unexpected error is thrown while navigating.\n\nIf an unexpected error is thrown during loading or the following render, this function will be called with the error and the event.\nMake sure that this function _never_ throws an error.\n\n<div class=\"ts-block\">\n\n```dts\ntype HandleClientError = (input: {\n\terror: unknown;\n\tevent: NavigationEvent;\n\tstatus: number;\n\tmessage: string;\n}) => MaybePromise<void | App.Error>;\n```\n\n</div>\n\n## HandleFetch\n\nThe [`handleFetch`](/docs/kit/hooks#Server-hooks-handleFetch) hook allows you to modify (or replace) the result of an [`event.fetch`](/docs/kit/load#Making-fetch-requests) call that runs on the server (or during prerendering) inside an endpoint, `load`, `action`, `handle`, `handleError` or `reroute`.\n\n<div class=\"ts-block\">\n\n```dts\ntype HandleFetch = (input: {\n\tevent: RequestEvent;\n\trequest: Request;\n\tfetch: typeof fetch;\n}) => MaybePromise<Response>;\n```\n\n</div>\n\n## HandleServerError\n\nThe server-side [`handleError`](/docs/kit/hooks#Shared-hooks-handleError) hook runs when an unexpected error is thrown while responding to a request.\n\nIf an unexpected error is thrown during loading or rendering, this function will be called with the error and the event.\nMake sure that this function _never_ throws an error.\n\n<div class=\"ts-block\">\n\n```dts\ntype HandleServerError = (input: {\n\terror: unknown;\n\tevent: RequestEvent;\n\tstatus: number;\n\tmessage: string;\n}) => MaybePromise<void | App.Error>;\n```\n\n</div>\n\n## HandleValidationError\n\nThe [`handleValidationError`](/docs/kit/hooks#Server-hooks-handleValidationError) hook runs when the argument to a remote function fails validation.\n\nIt will be called with the validation issues and the event, and must return an object shape that matches `App.Error`.\n\n<div class=\"ts-block\">\n\n```dts\ntype HandleValidationError<\n\tIssue extends\n\t\tStandardSchemaV1.Issue = StandardSchemaV1.Issue\n> = (input: {\n\tissues: Issue[];\n\tevent: RequestEvent;\n}) => MaybePromise<App.Error>;\n```\n\n</div>\n\n## HttpError\n\nThe object returned by the [`error`](/docs/kit/@sveltejs-kit#error) function.\n\n<div class=\"ts-block\">\n\n```dts\ninterface HttpError {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nstatus: number;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe [HTTP status code](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses), in the range 400-599.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nbody: App.Error;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe content of the error.\n\n</div>\n</div></div>\n\n## Invalid\n\nA function and proxy object used to imperatively create validation errors in form handlers.\n\nCall `invalid(issue1, issue2, ...issueN)` to throw a validation error.\nIf an issue is a `string`, it applies to the form as a whole (and will show up in `fields.allIssues()`)\nAccess properties to create field-specific issues: `invalid.fieldName('message')`.\nThe type structure mirrors the input data structure for type-safe field access.\n\n<div class=\"ts-block\">\n\n```dts\ntype Invalid<Input = any> = ((\n\t...issues: Array<string | StandardSchemaV1.Issue>\n) => never) &\n\tInvalidField<Input>;\n```\n\n</div>\n\n## KitConfig\n\nSee the [configuration reference](/docs/kit/configuration) for details.\n\n## LessThan\n\n<div class=\"ts-block\">\n\n```dts\ntype LessThan<\n\tTNumber extends number,\n\tTArray extends any[] = []\n> = TNumber extends TArray['length']\n\t? TArray[number]\n\t: LessThan<TNumber, [...TArray, TArray['length']]>;\n```\n\n</div>\n\n## Load\n\nThe generic form of `PageLoad` and `LayoutLoad`. You should import those from `./$types` (see [generated types](/docs/kit/types#Generated-types))\nrather than using `Load` directly.\n\n<div class=\"ts-block\">\n\n```dts\ntype Load<\n\tParams extends\n\t\tAppLayoutParams<'/'> = AppLayoutParams<'/'>,\n\tInputData extends Record<string, unknown> | null = Record<\n\t\tstring,\n\t\tany\n\t> | null,\n\tParentData extends Record<string, unknown> = Record<\n\t\tstring,\n\t\tany\n\t>,\n\tOutputData extends Record<\n\t\tstring,\n\t\tunknown\n\t> | void = Record<string, any> | void,\n\tRouteId extends AppRouteId | null = AppRouteId | null\n> = (\n\tevent: LoadEvent<Params, InputData, ParentData, RouteId>\n) => MaybePromise<OutputData>;\n```\n\n</div>\n\n## LoadEvent\n\nThe generic form of `PageLoadEvent` and `LayoutLoadEvent`. You should import those from `./$types` (see [generated types](/docs/kit/types#Generated-types))\nrather than using `LoadEvent` directly.\n\n<div class=\"ts-block\">\n\n```dts\ninterface LoadEvent<\n\tParams extends\n\t\tAppLayoutParams<'/'> = AppLayoutParams<'/'>,\n\tData extends Record<string, unknown> | null = Record<\n\t\tstring,\n\t\tany\n\t> | null,\n\tParentData extends Record<string, unknown> = Record<\n\t\tstring,\n\t\tany\n\t>,\n\tRouteId extends AppRouteId | null = AppRouteId | null\n> extends NavigationEvent<Params, RouteId> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nfetch: typeof fetch;\n```\n\n<div class=\"ts-block-property-details\">\n\n`fetch` is equivalent to the [native `fetch` web API](https://developer.mozilla.org/en-US/docs/Web/API/fetch), with a few additional features:\n\n- It can be used to make credentialed requests on the server, as it inherits the `cookie` and `authorization` headers for the page request.\n- It can make relative requests on the server (ordinarily, `fetch` requires a URL with an origin when used in a server context).\n- Internal requests (e.g. for `+server.js` routes) go directly to the handler function when running on the server, without the overhead of an HTTP call.\n- During server-side rendering, the response will be captured and inlined into the rendered HTML by hooking into the `text` and `json` methods of the `Response` object. Note that headers will _not_ be serialized, unless explicitly included via [`filterSerializedResponseHeaders`](/docs/kit/hooks#Server-hooks-handle)\n- During hydration, the response will be read from the HTML, guaranteeing consistency and preventing an additional network request.\n\nYou can learn more about making credentialed requests with cookies [here](/docs/kit/load#Cookies)\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ndata: Data;\n```\n\n<div class=\"ts-block-property-details\">\n\nContains the data returned by the route's server `load` function (in `+layout.server.js` or `+page.server.js`), if any.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nsetHeaders: (headers: Record<string, string>) => void;\n```\n\n<div class=\"ts-block-property-details\">\n\nIf you need to set headers for the response, you can do so using the this method. This is useful if you want the page to be cached, for example:\n\n```js\n// @errors: 7031\n/// file: src/routes/blog/+page.js\nexport async function load({ fetch, setHeaders }) {\n\tconst url = `https://cms.example.com/articles.json`;\n\tconst response = await fetch(url);\n\n\tsetHeaders({\n\t\tage: response.headers.get('age'),\n\t\t'cache-control': response.headers.get('cache-control')\n\t});\n\n\treturn response.json();\n}\n```\n\nSetting the same header multiple times (even in separate `load` functions) is an error — you can only set a given header once.\n\nYou cannot add a `set-cookie` header with `setHeaders` — use the [`cookies`](/docs/kit/@sveltejs-kit#Cookies) API in a server-only `load` function instead.\n\n`setHeaders` has no effect when a `load` function runs in the browser.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nparent: () => Promise<ParentData>;\n```\n\n<div class=\"ts-block-property-details\">\n\n`await parent()` returns data from parent `+layout.js` `load` functions.\nImplicitly, a missing `+layout.js` is treated as a `({ data }) => data` function, meaning that it will return and forward data from parent `+layout.server.js` files.\n\nBe careful not to introduce accidental waterfalls when using `await parent()`. If for example you only want to merge parent data into the returned output, call it _after_ fetching your other data.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ndepends: (...deps: Array<`${string}:${string}`>) => void;\n```\n\n<div class=\"ts-block-property-details\">\n\nThis function declares that the `load` function has a _dependency_ on one or more URLs or custom identifiers, which can subsequently be used with [`invalidate()`](/docs/kit/$app-navigation#invalidate) to cause `load` to rerun.\n\nMost of the time you won't need this, as `fetch` calls `depends` on your behalf — it's only necessary if you're using a custom API client that bypasses `fetch`.\n\nURLs can be absolute or relative to the page being loaded, and must be [encoded](https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding).\n\nCustom identifiers have to be prefixed with one or more lowercase letters followed by a colon to conform to the [URI specification](https://www.rfc-editor.org/rfc/rfc3986.html).\n\nThe following example shows how to use `depends` to register a dependency on a custom identifier, which is `invalidate`d after a button click, making the `load` function rerun.\n\n```js\n// @errors: 7031\n/// file: src/routes/+page.js\nlet count = 0;\nexport async function load({ depends }) {\n\tdepends('increase:count');\n\n\treturn { count: count++ };\n}\n```\n\n```html\n/// file: src/routes/+page.svelte\n<script>\n\timport { invalidate } from '$app/navigation';\n\n\tlet { data } = $props();\n\n\tconst increase = async () => {\n\t\tawait invalidate('increase:count');\n\t}\n</script>\n\n<p>{data.count}<p>\n<button on:click={increase}>Increase Count</button>\n```\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nuntrack: <T>(fn: () => T) => T;\n```\n\n<div class=\"ts-block-property-details\">\n\nUse this function to opt out of dependency tracking for everything that is synchronously called within the callback. Example:\n\n```js\n// @errors: 7031\n/// file: src/routes/+page.server.js\nexport async function load({ untrack, url }) {\n\t// Untrack url.pathname so that path changes don't trigger a rerun\n\tif (untrack(() => url.pathname === '/')) {\n\t\treturn { message: 'Welcome!' };\n\t}\n}\n```\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ntracing: {/*…*/}\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag since\">available since</span> v2.31.0\n\n</div>\n\nAccess to spans for tracing. If tracing is not enabled or the function is being run in the browser, these spans will do nothing.\n\n<div class=\"ts-block-property-children\"><div class=\"ts-block-property\">\n\n```dts\nenabled: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\nWhether tracing is enabled.\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```dts\nroot: Span;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe root span for the request. This span is named `sveltekit.handle.root`.\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```dts\ncurrent: Span;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe span associated with the current `load` function.\n\n</div>\n</div></div>\n\n</div>\n</div></div>\n\n## LoadProperties\n\n<div class=\"ts-block\">\n\n```dts\ntype LoadProperties<\n\tinput extends Record<string, any> | void\n> = input extends void\n\t? undefined // needs to be undefined, because void will break intellisense\n\t: input extends Record<string, any>\n\t\t? input\n\t\t: unknown;\n```\n\n</div>\n\n## Navigation\n\n<div class=\"ts-block\">\n\n```dts\ntype Navigation =\n\t| NavigationExternal\n\t| NavigationFormSubmit\n\t| NavigationPopState\n\t| NavigationLink;\n```\n\n</div>\n\n## NavigationBase\n\n<div class=\"ts-block\">\n\n```dts\ninterface NavigationBase {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nfrom: NavigationTarget | null;\n```\n\n<div class=\"ts-block-property-details\">\n\nWhere navigation was triggered from\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nto: NavigationTarget | null;\n```\n\n<div class=\"ts-block-property-details\">\n\nWhere navigation is going to/has gone to\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nwillUnload: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\nWhether or not the navigation will result in the page being unloaded (i.e. not a client-side navigation)\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ncomplete: Promise<void>;\n```\n\n<div class=\"ts-block-property-details\">\n\nA promise that resolves once the navigation is complete, and rejects if the navigation\nfails or is aborted. In the case of a `willUnload` navigation, the promise will never resolve\n\n</div>\n</div></div>\n\n## NavigationEnter\n\n<div class=\"ts-block\">\n\n```dts\ninterface NavigationEnter extends NavigationBase {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\ntype: 'enter';\n```\n\n<div class=\"ts-block-property-details\">\n\nThe type of navigation:\n- `form`: The user submitted a `<form method=\"GET\">`\n- `leave`: The app is being left either because the tab is being closed or a navigation to a different document is occurring\n- `link`: Navigation was triggered by a link click\n- `goto`: Navigation was triggered by a `goto(...)` call or a redirect\n- `popstate`: Navigation was triggered by back/forward navigation\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ndelta?: undefined;\n```\n\n<div class=\"ts-block-property-details\">\n\nIn case of a history back/forward navigation, the number of steps to go back/forward\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nevent?: undefined;\n```\n\n<div class=\"ts-block-property-details\">\n\nDispatched `Event` object when navigation occured by `popstate` or `link`.\n\n</div>\n</div></div>\n\n## NavigationEvent\n\n<div class=\"ts-block\">\n\n```dts\ninterface NavigationEvent<\n\tParams extends\n\t\tAppLayoutParams<'/'> = AppLayoutParams<'/'>,\n\tRouteId extends AppRouteId | null = AppRouteId | null\n> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nparams: Params;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe parameters of the current page - e.g. for a route like `/blog/[slug]`, a `{ slug: string }` object\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nroute: {/*…*/}\n```\n\n<div class=\"ts-block-property-details\">\n\nInfo about the current route\n\n<div class=\"ts-block-property-children\"><div class=\"ts-block-property\">\n\n```dts\nid: RouteId;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe ID of the current route - e.g. for `src/routes/blog/[slug]`, it would be `/blog/[slug]`. It is `null` when no route is matched.\n\n</div>\n</div></div>\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nurl: URL;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe URL of the current page\n\n</div>\n</div></div>\n\n## NavigationExternal\n\n<div class=\"ts-block\">\n\n```dts\ninterface NavigationExternal extends NavigationBase {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\ntype: Exclude<NavigationType, 'enter' | 'popstate' | 'link' | 'form'>;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe type of navigation:\n- `form`: The user submitted a `<form method=\"GET\">`\n- `leave`: The app is being left either because the tab is being closed or a navigation to a different document is occurring\n- `link`: Navigation was triggered by a link click\n- `goto`: Navigation was triggered by a `goto(...)` call or a redirect\n- `popstate`: Navigation was triggered by back/forward navigation\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ndelta?: undefined;\n```\n\n<div class=\"ts-block-property-details\">\n\nIn case of a history back/forward navigation, the number of steps to go back/forward\n\n</div>\n</div></div>\n\n## NavigationFormSubmit\n\n<div class=\"ts-block\">\n\n```dts\ninterface NavigationFormSubmit extends NavigationBase {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\ntype: 'form';\n```\n\n<div class=\"ts-block-property-details\">\n\nThe type of navigation:\n- `form`: The user submitted a `<form method=\"GET\">`\n- `leave`: The app is being left either because the tab is being closed or a navigation to a different document is occurring\n- `link`: Navigation was triggered by a link click\n- `goto`: Navigation was triggered by a `goto(...)` call or a redirect\n- `popstate`: Navigation was triggered by back/forward navigation\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nevent: SubmitEvent;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe `SubmitEvent` that caused the navigation\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ndelta?: undefined;\n```\n\n<div class=\"ts-block-property-details\">\n\nIn case of a history back/forward navigation, the number of steps to go back/forward\n\n</div>\n</div></div>\n\n## NavigationLink\n\n<div class=\"ts-block\">\n\n```dts\ninterface NavigationLink extends NavigationBase {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\ntype: 'link';\n```\n\n<div class=\"ts-block-property-details\">\n\nThe type of navigation:\n- `form`: The user submitted a `<form method=\"GET\">`\n- `leave`: The app is being left either because the tab is being closed or a navigation to a different document is occurring\n- `link`: Navigation was triggered by a link click\n- `goto`: Navigation was triggered by a `goto(...)` call or a redirect\n- `popstate`: Navigation was triggered by back/forward navigation\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nevent: PointerEvent;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe `PointerEvent` that caused the navigation\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ndelta?: undefined;\n```\n\n<div class=\"ts-block-property-details\">\n\nIn case of a history back/forward navigation, the number of steps to go back/forward\n\n</div>\n</div></div>\n\n## NavigationPopState\n\n<div class=\"ts-block\">\n\n```dts\ninterface NavigationPopState extends NavigationBase {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\ntype: 'popstate';\n```\n\n<div class=\"ts-block-property-details\">\n\nThe type of navigation:\n- `form`: The user submitted a `<form method=\"GET\">`\n- `leave`: The app is being left either because the tab is being closed or a navigation to a different document is occurring\n- `link`: Navigation was triggered by a link click\n- `goto`: Navigation was triggered by a `goto(...)` call or a redirect\n- `popstate`: Navigation was triggered by back/forward navigation\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ndelta: number;\n```\n\n<div class=\"ts-block-property-details\">\n\nIn case of a history back/forward navigation, the number of steps to go back/forward\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nevent: PopStateEvent;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe `PopStateEvent` that caused the navigation\n\n</div>\n</div></div>\n\n## NavigationTarget\n\nInformation about the target of a specific navigation.\n\n<div class=\"ts-block\">\n\n```dts\ninterface NavigationTarget<\n\tParams extends\n\t\tAppLayoutParams<'/'> = AppLayoutParams<'/'>,\n\tRouteId extends AppRouteId | null = AppRouteId | null\n> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nparams: Params | null;\n```\n\n<div class=\"ts-block-property-details\">\n\nParameters of the target page - e.g. for a route like `/blog/[slug]`, a `{ slug: string }` object.\nIs `null` if the target is not part of the SvelteKit app (could not be resolved to a route).\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nroute: {/*…*/}\n```\n\n<div class=\"ts-block-property-details\">\n\nInfo about the target route\n\n<div class=\"ts-block-property-children\"><div class=\"ts-block-property\">\n\n```dts\nid: RouteId | null;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe ID of the current route - e.g. for `src/routes/blog/[slug]`, it would be `/blog/[slug]`. It is `null` when no route is matched.\n\n</div>\n</div></div>\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nurl: URL;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe URL that is navigated to\n\n</div>\n</div></div>\n\n## NavigationType\n\n- `enter`: The app has hydrated/started\n- `form`: The user submitted a `<form method=\"GET\">`\n- `leave`: The app is being left either because the tab is being closed or a navigation to a different document is occurring\n- `link`: Navigation was triggered by a link click\n- `goto`: Navigation was triggered by a `goto(...)` call or a redirect\n- `popstate`: Navigation was triggered by back/forward navigation\n\n<div class=\"ts-block\">\n\n```dts\ntype NavigationType =\n\t| 'enter'\n\t| 'form'\n\t| 'leave'\n\t| 'link'\n\t| 'goto'\n\t| 'popstate';\n```\n\n</div>\n\n## NumericRange\n\n<div class=\"ts-block\">\n\n```dts\ntype NumericRange<\n\tTStart extends number,\n\tTEnd extends number\n> = Exclude<TEnd | LessThan<TEnd>, LessThan<TStart>>;\n```\n\n</div>\n\n## OnNavigate\n\nThe argument passed to [`onNavigate`](/docs/kit/$app-navigation#onNavigate) callbacks.\n\n<div class=\"ts-block\">\n\n```dts\ntype OnNavigate = Navigation & {\n\t/**\n\t * The type of navigation:\n\t * - `form`: The user submitted a `<form method=\"GET\">`\n\t * - `link`: Navigation was triggered by a link click\n\t * - `goto`: Navigation was triggered by a `goto(...)` call or a redirect\n\t * - `popstate`: Navigation was triggered by back/forward navigation\n\t */\n\ttype: Exclude<NavigationType, 'enter' | 'leave'>;\n\t/**\n\t * Since `onNavigate` callbacks are called immediately before a client-side navigation, they will never be called with a navigation that unloads the page.\n\t */\n\twillUnload: false;\n};\n```\n\n</div>\n\n## Page\n\nThe shape of the [`page`](/docs/kit/$app-state#page) reactive object and the [`$page`](/docs/kit/$app-stores) store.\n\n<div class=\"ts-block\">\n\n```dts\ninterface Page<\n\tParams extends\n\t\tAppLayoutParams<'/'> = AppLayoutParams<'/'>,\n\tRouteId extends AppRouteId | null = AppRouteId | null\n> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nurl: URL & { pathname: ResolvedPathname };\n```\n\n<div class=\"ts-block-property-details\">\n\nThe URL of the current page.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nparams: Params;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe parameters of the current page - e.g. for a route like `/blog/[slug]`, a `{ slug: string }` object.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nroute: {/*…*/}\n```\n\n<div class=\"ts-block-property-details\">\n\nInfo about the current route.\n\n<div class=\"ts-block-property-children\"><div class=\"ts-block-property\">\n\n```dts\nid: RouteId;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe ID of the current route - e.g. for `src/routes/blog/[slug]`, it would be `/blog/[slug]`. It is `null` when no route is matched.\n\n</div>\n</div></div>\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nstatus: number;\n```\n\n<div class=\"ts-block-property-details\">\n\nHTTP status code of the current page.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nerror: App.Error | null;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe error object of the current page, if any. Filled from the `handleError` hooks.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ndata: App.PageData & Record<string, any>;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe merged result of all data from all `load` functions on the current page. You can type a common denominator through `App.PageData`.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nstate: App.PageState;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe page state, which can be manipulated using the [`pushState`](/docs/kit/$app-navigation#pushState) and [`replaceState`](/docs/kit/$app-navigation#replaceState) functions from `$app/navigation`.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nform: any;\n```\n\n<div class=\"ts-block-property-details\">\n\nFilled only after a form submission. See [form actions](/docs/kit/form-actions) for more info.\n\n</div>\n</div></div>\n\n## ParamMatcher\n\nThe shape of a param matcher. See [matching](/docs/kit/advanced-routing#Matching) for more info.\n\n<div class=\"ts-block\">\n\n```dts\ntype ParamMatcher = (param: string) => boolean;\n```\n\n</div>\n\n## PrerenderOption\n\n<div class=\"ts-block\">\n\n```dts\ntype PrerenderOption = boolean | 'auto';\n```\n\n</div>\n\n## Redirect\n\nThe object returned by the [`redirect`](/docs/kit/@sveltejs-kit#redirect) function.\n\n<div class=\"ts-block\">\n\n```dts\ninterface Redirect {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nstatus: 300 | 301 | 302 | 303 | 304 | 305 | 306 | 307 | 308;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe [HTTP status code](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#redirection_messages), in the range 300-308.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nlocation: string;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe location to redirect to.\n\n</div>\n</div></div>\n\n## RemoteCommand\n\nThe return value of a remote `command` function. See [Remote functions](/docs/kit/remote-functions#command) for full documentation.\n\n<div class=\"ts-block\">\n\n```dts\ntype RemoteCommand<Input, Output> = {\n\t(arg: Input): Promise<Awaited<Output>> & {\n\t\tupdates(\n\t\t\t...queries: Array<\n\t\t\t\tRemoteQuery<any> | RemoteQueryOverride\n\t\t\t>\n\t\t): Promise<Awaited<Output>>;\n\t};\n\t/** The number of pending command executions */\n\tget pending(): number;\n};\n```\n\n</div>\n\n## RemoteForm\n\nThe return value of a remote `form` function. See [Remote functions](/docs/kit/remote-functions#form) for full documentation.\n\n<div class=\"ts-block\">\n\n```dts\ntype RemoteForm<\n\tInput extends RemoteFormInput | void,\n\tOutput\n> = {\n\t/** Attachment that sets up an event handler that intercepts the form submission on the client to prevent a full page reload */\n\t[attachment: symbol]: (node: HTMLFormElement) => void;\n\tmethod: 'POST';\n\t/** The URL to send the form to. */\n\taction: string;\n\t/** Use the `enhance` method to influence what happens when the form is submitted. */\n\tenhance(\n\t\tcallback: (opts: {\n\t\t\tform: HTMLFormElement;\n\t\t\tdata: Input;\n\t\t\tsubmit: () => Promise<void> & {\n\t\t\t\tupdates: (\n\t\t\t\t\t...queries: Array<\n\t\t\t\t\t\tRemoteQuery<any> | RemoteQueryOverride\n\t\t\t\t\t>\n\t\t\t\t) => Promise<void>;\n\t\t\t};\n\t\t}) => void | Promise<void>\n\t): {\n\t\tmethod: 'POST';\n\t\taction: string;\n\t\t[attachment: symbol]: (node: HTMLFormElement) => void;\n\t};\n\t/**\n\t * Create an instance of the form for the given `id`.\n\t * The `id` is stringified and used for deduplication to potentially reuse existing instances.\n\t * Useful when you have multiple forms that use the same remote form action, for example in a loop.\n\t * ```svelte\n\t * {#each todos as todo}\n\t *\t{@const todoForm = updateTodo.for(todo.id)}\n\t *\t<form {...todoForm}>\n\t *\t\t{#if todoForm.result?.invalid}<p>Invalid data</p>{/if}\n\t *\t\t...\n\t *\t</form>\n\t *\t{/each}\n\t * ```\n\t */\n\tfor(\n\t\tid: ExtractId<Input>\n\t): Omit<RemoteForm<Input, Output>, 'for'>;\n\t/** Preflight checks */\n\tpreflight(\n\t\tschema: StandardSchemaV1<Input, any>\n\t): RemoteForm<Input, Output>;\n\t/** Validate the form contents programmatically */\n\tvalidate(options?: {\n\t\tincludeUntouched?: boolean;\n\t\t/** Perform validation as if the form was submitted by the given button. */\n\t\tsubmitter?: HTMLButtonElement | HTMLInputElement;\n\t}): Promise<void>;\n\t/** The result of the form submission */\n\tget result(): Output | undefined;\n\t/** The number of pending submissions */\n\tget pending(): number;\n\t/** Access form fields using object notation */\n\tfields: Input extends void\n\t\t? never\n\t\t: RemoteFormFields<Input>;\n\t/** Spread this onto a `<button>` or `<input type=\"submit\">` */\n\tbuttonProps: {\n\t\ttype: 'submit';\n\t\tformmethod: 'POST';\n\t\tformaction: string;\n\t\tonclick: (event: Event) => void;\n\t\t/** Use the `enhance` method to influence what happens when the form is submitted. */\n\t\tenhance(\n\t\t\tcallback: (opts: {\n\t\t\t\tform: HTMLFormElement;\n\t\t\t\tdata: Input;\n\t\t\t\tsubmit: () => Promise<void> & {\n\t\t\t\t\tupdates: (\n\t\t\t\t\t\t...queries: Array<\n\t\t\t\t\t\t\tRemoteQuery<any> | RemoteQueryOverride\n\t\t\t\t\t\t>\n\t\t\t\t\t) => Promise<void>;\n\t\t\t\t};\n\t\t\t}) => void | Promise<void>\n\t\t): {\n\t\t\ttype: 'submit';\n\t\t\tformmethod: 'POST';\n\t\t\tformaction: string;\n\t\t\tonclick: (event: Event) => void;\n\t\t};\n\t\t/** The number of pending submissions */\n\t\tget pending(): number;\n\t};\n};\n```\n\n</div>\n\n## RemoteFormField\n\nForm field accessor type that provides name(), value(), and issues() methods\n\n<div class=\"ts-block\">\n\n```dts\ntype RemoteFormField<Value extends RemoteFormFieldValue> =\n\tRemoteFormFieldMethods<Value> & {\n\t\t/**\n\t\t * Returns an object that can be spread onto an input element with the correct type attribute,\n\t\t * aria-invalid attribute if the field is invalid, and appropriate value/checked property getters/setters.\n\t\t * @example\n\t\t * ```svelte\n\t\t * <input {...myForm.fields.myString.as('text')} />\n\t\t * <input {...myForm.fields.myNumber.as('number')} />\n\t\t * <input {...myForm.fields.myBoolean.as('checkbox')} />\n\t\t * ```\n\t\t */\n\t\tas<T extends RemoteFormFieldType<Value>>(\n\t\t\t...args: AsArgs<T, Value>\n\t\t): InputElementProps<T>;\n\t};\n```\n\n</div>\n\n## RemoteFormFieldType\n\n<div class=\"ts-block\">\n\n```dts\ntype RemoteFormFieldType<T> = {\n\t[K in keyof InputTypeMap]: T extends InputTypeMap[K]\n\t\t? K\n\t\t: never;\n}[keyof InputTypeMap];\n```\n\n</div>\n\n## RemoteFormFieldValue\n\n<div class=\"ts-block\">\n\n```dts\ntype RemoteFormFieldValue =\n\t| string\n\t| string[]\n\t| number\n\t| boolean\n\t| File\n\t| File[];\n```\n\n</div>\n\n## RemoteFormInput\n\n<div class=\"ts-block\">\n\n```dts\ninterface RemoteFormInput {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\n[key: string]: MaybeArray<string | number | boolean | File | RemoteFormInput>;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n## RemoteFormIssue\n\n<div class=\"ts-block\">\n\n```dts\ninterface RemoteFormIssue {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nmessage: string;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n## RemotePrerenderFunction\n\nThe return value of a remote `prerender` function. See [Remote functions](/docs/kit/remote-functions#prerender) for full documentation.\n\n<div class=\"ts-block\">\n\n```dts\ntype RemotePrerenderFunction<Input, Output> = (\n\targ: Input\n) => RemoteResource<Output>;\n```\n\n</div>\n\n## RemoteQuery\n\n<div class=\"ts-block\">\n\n```dts\ntype RemoteQuery<T> = RemoteResource<T> & {\n\t/**\n\t * On the client, this function will update the value of the query without re-fetching it.\n\t *\n\t * On the server, this can be called in the context of a `command` or `form` and the specified data will accompany the action response back to the client.\n\t * This prevents SvelteKit needing to refresh all queries on the page in a second server round-trip.\n\t */\n\tset(value: T): void;\n\t/**\n\t * On the client, this function will re-fetch the query from the server.\n\t *\n\t * On the server, this can be called in the context of a `command` or `form` and the refreshed data will accompany the action response back to the client.\n\t * This prevents SvelteKit needing to refresh all queries on the page in a second server round-trip.\n\t */\n\trefresh(): Promise<void>;\n\t/**\n\t * Temporarily override the value of a query. This is used with the `updates` method of a [command](https://svelte.dev/docs/kit/remote-functions#command-Updating-queries) or [enhanced form submission](https://svelte.dev/docs/kit/remote-functions#form-enhance) to provide optimistic updates.\n\t *\n\t * ```svelte\n\t * <script>\n\t *   import { getTodos, addTodo } from './todos.remote.js';\n\t *   const todos = getTodos();\n\t * </script>\n\t *\n\t * <form {...addTodo.enhance(async ({ data, submit }) => {\n\t *   await submit().updates(\n\t *     todos.withOverride((todos) => [...todos, { text: data.get('text') }])\n\t *   );\n\t * })}>\n\t *   <input type=\"text\" name=\"text\" />\n\t *   <button type=\"submit\">Add Todo</button>\n\t * </form>\n\t * ```\n\t */\n\twithOverride(\n\t\tupdate: (current: Awaited<T>) => Awaited<T>\n\t): RemoteQueryOverride;\n};\n```\n\n</div>\n\n## RemoteQueryFunction\n\nThe return value of a remote `query` function. See [Remote functions](/docs/kit/remote-functions#query) for full documentation.\n\n<div class=\"ts-block\">\n\n```dts\ntype RemoteQueryFunction<Input, Output> = (\n\targ: Input\n) => RemoteQuery<Output>;\n```\n\n</div>\n\n## RemoteQueryOverride\n\n<div class=\"ts-block\">\n\n```dts\ninterface RemoteQueryOverride {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\n_key: string;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nrelease(): void;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n## RemoteResource\n\n<div class=\"ts-block\">\n\n```dts\ntype RemoteResource<T> = Promise<Awaited<T>> & {\n\t/** The error in case the query fails. Most often this is a [`HttpError`](https://svelte.dev/docs/kit/@sveltejs-kit#HttpError) but it isn't guaranteed to be. */\n\tget error(): any;\n\t/** `true` before the first result is available and during refreshes */\n\tget loading(): boolean;\n} & (\n\t\t| {\n\t\t\t\t/** The current value of the query. Undefined until `ready` is `true` */\n\t\t\t\tget current(): undefined;\n\t\t\t\tready: false;\n\t\t  }\n\t\t| {\n\t\t\t\t/** The current value of the query. Undefined until `ready` is `true` */\n\t\t\t\tget current(): Awaited<T>;\n\t\t\t\tready: true;\n\t\t  }\n\t);\n```\n\n</div>\n\n## RequestEvent\n\n<div class=\"ts-block\">\n\n```dts\ninterface RequestEvent<\n\tParams extends\n\t\tAppLayoutParams<'/'> = AppLayoutParams<'/'>,\n\tRouteId extends AppRouteId | null = AppRouteId | null\n> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\ncookies: Cookies;\n```\n\n<div class=\"ts-block-property-details\">\n\nGet or set cookies related to the current request\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nfetch: typeof fetch;\n```\n\n<div class=\"ts-block-property-details\">\n\n`fetch` is equivalent to the [native `fetch` web API](https://developer.mozilla.org/en-US/docs/Web/API/fetch), with a few additional features:\n\n- It can be used to make credentialed requests on the server, as it inherits the `cookie` and `authorization` headers for the page request.\n- It can make relative requests on the server (ordinarily, `fetch` requires a URL with an origin when used in a server context).\n- Internal requests (e.g. for `+server.js` routes) go directly to the handler function when running on the server, without the overhead of an HTTP call.\n- During server-side rendering, the response will be captured and inlined into the rendered HTML by hooking into the `text` and `json` methods of the `Response` object. Note that headers will _not_ be serialized, unless explicitly included via [`filterSerializedResponseHeaders`](/docs/kit/hooks#Server-hooks-handle)\n- During hydration, the response will be read from the HTML, guaranteeing consistency and preventing an additional network request.\n\nYou can learn more about making credentialed requests with cookies [here](/docs/kit/load#Cookies).\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ngetClientAddress: () => string;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe client's IP address, set by the adapter.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nlocals: App.Locals;\n```\n\n<div class=\"ts-block-property-details\">\n\nContains custom data that was added to the request within the [`server handle hook`](/docs/kit/hooks#Server-hooks-handle).\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nparams: Params;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe parameters of the current route - e.g. for a route like `/blog/[slug]`, a `{ slug: string }` object.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nplatform: Readonly<App.Platform> | undefined;\n```\n\n<div class=\"ts-block-property-details\">\n\nAdditional data made available through the adapter.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nrequest: Request;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe original request object.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nroute: {/*…*/}\n```\n\n<div class=\"ts-block-property-details\">\n\nInfo about the current route.\n\n<div class=\"ts-block-property-children\"><div class=\"ts-block-property\">\n\n```dts\nid: RouteId;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe ID of the current route - e.g. for `src/routes/blog/[slug]`, it would be `/blog/[slug]`. It is `null` when no route is matched.\n\n</div>\n</div></div>\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nsetHeaders: (headers: Record<string, string>) => void;\n```\n\n<div class=\"ts-block-property-details\">\n\nIf you need to set headers for the response, you can do so using the this method. This is useful if you want the page to be cached, for example:\n\n```js\n// @errors: 7031\n/// file: src/routes/blog/+page.js\nexport async function load({ fetch, setHeaders }) {\n\tconst url = `https://cms.example.com/articles.json`;\n\tconst response = await fetch(url);\n\n\tsetHeaders({\n\t\tage: response.headers.get('age'),\n\t\t'cache-control': response.headers.get('cache-control')\n\t});\n\n\treturn response.json();\n}\n```\n\nSetting the same header multiple times (even in separate `load` functions) is an error — you can only set a given header once.\n\nYou cannot add a `set-cookie` header with `setHeaders` — use the [`cookies`](/docs/kit/@sveltejs-kit#Cookies) API instead.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nurl: URL;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe requested URL.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nisDataRequest: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n`true` if the request comes from the client asking for `+page/layout.server.js` data. The `url` property will be stripped of the internal information\nrelated to the data request in this case. Use this property instead if the distinction is important to you.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nisSubRequest: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n`true` for `+server.js` calls coming from SvelteKit without the overhead of actually making an HTTP request. This happens when you make same-origin `fetch` requests on the server.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ntracing: {/*…*/}\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag since\">available since</span> v2.31.0\n\n</div>\n\nAccess to spans for tracing. If tracing is not enabled, these spans will do nothing.\n\n<div class=\"ts-block-property-children\"><div class=\"ts-block-property\">\n\n```dts\nenabled: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\nWhether tracing is enabled.\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```dts\nroot: Span;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe root span for the request. This span is named `sveltekit.handle.root`.\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```dts\ncurrent: Span;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe span associated with the current `handle` hook, `load` function, or form action.\n\n</div>\n</div></div>\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nisRemoteRequest: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n`true` if the request comes from the client via a remote function. The `url` property will be stripped of the internal information\nrelated to the data request in this case. Use this property instead if the distinction is important to you.\n\n</div>\n</div></div>\n\n## RequestHandler\n\nA `(event: RequestEvent) => Response` function exported from a `+server.js` file that corresponds to an HTTP verb (`GET`, `PUT`, `PATCH`, etc) and handles requests with that method.\n\nIt receives `Params` as the first generic argument, which you can skip by using [generated types](/docs/kit/types#Generated-types) instead.\n\n<div class=\"ts-block\">\n\n```dts\ntype RequestHandler<\n\tParams extends\n\t\tAppLayoutParams<'/'> = AppLayoutParams<'/'>,\n\tRouteId extends AppRouteId | null = AppRouteId | null\n> = (\n\tevent: RequestEvent<Params, RouteId>\n) => MaybePromise<Response>;\n```\n\n</div>\n\n## Reroute\n\n<blockquote class=\"since note\">\n\nAvailable since 2.3.0\n\n</blockquote>\n\nThe [`reroute`](/docs/kit/hooks#Universal-hooks-reroute) hook allows you to modify the URL before it is used to determine which route to render.\n\n<div class=\"ts-block\">\n\n```dts\ntype Reroute = (event: {\n\turl: URL;\n\tfetch: typeof fetch;\n}) => MaybePromise<void | string>;\n```\n\n</div>\n\n## ResolveOptions\n\n<div class=\"ts-block\">\n\n```dts\ninterface ResolveOptions {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\ntransformPageChunk?: (input: { html: string; done: boolean }) => MaybePromise<string | undefined>;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- `input` the html chunk and the info if this is the last chunk\n\n</div>\n\nApplies custom transforms to HTML. If `done` is true, it's the final chunk. Chunks are not guaranteed to be well-formed HTML\n(they could include an element's opening tag but not its closing tag, for example)\nbut they will always be split at sensible boundaries such as `%sveltekit.head%` or layout/page components.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nfilterSerializedResponseHeaders?: (name: string, value: string) => boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- `name` header name\n- `value` header value\n\n</div>\n\nDetermines which headers should be included in serialized responses when a `load` function loads a resource with `fetch`.\nBy default, none will be included.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\npreload?: (input: { type: 'font' | 'css' | 'js' | 'asset'; path: string }) => boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- `input` the type of the file and its path\n\n</div>\n\nDetermines what should be added to the `<head>` tag to preload it.\nBy default, `js` and `css` files will be preloaded.\n\n</div>\n</div></div>\n\n## RouteDefinition\n\n<div class=\"ts-block\">\n\n```dts\ninterface RouteDefinition<Config = any> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nid: string;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\napi: {\n\tmethods: Array<HttpMethod | '*'>;\n};\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\npage: {\n\tmethods: Array<Extract<HttpMethod, 'GET' | 'POST'>>;\n};\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\npattern: RegExp;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nprerender: PrerenderOption;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nsegments: RouteSegment[];\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nmethods: Array<HttpMethod | '*'>;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nconfig: Config;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n## SSRManifest\n\n<div class=\"ts-block\">\n\n```dts\ninterface SSRManifest {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nappDir: string;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nappPath: string;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nassets: Set<string>;\n```\n\n<div class=\"ts-block-property-details\">\n\nStatic files from `kit.config.files.assets` and the service worker (if any).\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nmimeTypes: Record<string, string>;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n_: {/*…*/}\n```\n\n<div class=\"ts-block-property-details\">\n\nprivate fields\n\n<div class=\"ts-block-property-children\"><div class=\"ts-block-property\">\n\n```dts\nclient: NonNullable<BuildData['client']>;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n<div class=\"ts-block-property\">\n\n```dts\nnodes: SSRNodeLoader[];\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n<div class=\"ts-block-property\">\n\n```dts\nremotes: Record<string, () => Promise<any>>;\n```\n\n<div class=\"ts-block-property-details\">\n\nhashed filename -> import to that file\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```dts\nroutes: SSRRoute[];\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n<div class=\"ts-block-property\">\n\n```dts\nprerendered_routes: Set<string>;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n<div class=\"ts-block-property\">\n\n```dts\nmatchers: () => Promise<Record<string, ParamMatcher>>;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n<div class=\"ts-block-property\">\n\n```dts\nserver_assets: Record<string, number>;\n```\n\n<div class=\"ts-block-property-details\">\n\nA `[file]: size` map of all assets imported by server code.\n\n</div>\n</div></div>\n\n</div>\n</div></div>\n\n## ServerInit\n\n<blockquote class=\"since note\">\n\nAvailable since 2.10.0\n\n</blockquote>\n\nThe [`init`](/docs/kit/hooks#Shared-hooks-init) will be invoked before the server responds to its first request\n\n<div class=\"ts-block\">\n\n```dts\ntype ServerInit = () => MaybePromise<void>;\n```\n\n</div>\n\n## ServerInitOptions\n\n<div class=\"ts-block\">\n\n```dts\ninterface ServerInitOptions {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nenv: Record<string, string>;\n```\n\n<div class=\"ts-block-property-details\">\n\nA map of environment variables.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nread?: (file: string) => MaybePromise<ReadableStream | null>;\n```\n\n<div class=\"ts-block-property-details\">\n\nA function that turns an asset filename into a `ReadableStream`. Required for the `read` export from `$app/server` to work.\n\n</div>\n</div></div>\n\n## ServerLoad\n\nThe generic form of `PageServerLoad` and `LayoutServerLoad`. You should import those from `./$types` (see [generated types](/docs/kit/types#Generated-types))\nrather than using `ServerLoad` directly.\n\n<div class=\"ts-block\">\n\n```dts\ntype ServerLoad<\n\tParams extends\n\t\tAppLayoutParams<'/'> = AppLayoutParams<'/'>,\n\tParentData extends Record<string, any> = Record<\n\t\tstring,\n\t\tany\n\t>,\n\tOutputData extends Record<string, any> | void = Record<\n\t\tstring,\n\t\tany\n\t> | void,\n\tRouteId extends AppRouteId | null = AppRouteId | null\n> = (\n\tevent: ServerLoadEvent<Params, ParentData, RouteId>\n) => MaybePromise<OutputData>;\n```\n\n</div>\n\n## ServerLoadEvent\n\n<div class=\"ts-block\">\n\n```dts\ninterface ServerLoadEvent<\n\tParams extends\n\t\tAppLayoutParams<'/'> = AppLayoutParams<'/'>,\n\tParentData extends Record<string, any> = Record<\n\t\tstring,\n\t\tany\n\t>,\n\tRouteId extends AppRouteId | null = AppRouteId | null\n> extends RequestEvent<Params, RouteId> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nparent: () => Promise<ParentData>;\n```\n\n<div class=\"ts-block-property-details\">\n\n`await parent()` returns data from parent `+layout.server.js` `load` functions.\n\nBe careful not to introduce accidental waterfalls when using `await parent()`. If for example you only want to merge parent data into the returned output, call it _after_ fetching your other data.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ndepends: (...deps: string[]) => void;\n```\n\n<div class=\"ts-block-property-details\">\n\nThis function declares that the `load` function has a _dependency_ on one or more URLs or custom identifiers, which can subsequently be used with [`invalidate()`](/docs/kit/$app-navigation#invalidate) to cause `load` to rerun.\n\nMost of the time you won't need this, as `fetch` calls `depends` on your behalf — it's only necessary if you're using a custom API client that bypasses `fetch`.\n\nURLs can be absolute or relative to the page being loaded, and must be [encoded](https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding).\n\nCustom identifiers have to be prefixed with one or more lowercase letters followed by a colon to conform to the [URI specification](https://www.rfc-editor.org/rfc/rfc3986.html).\n\nThe following example shows how to use `depends` to register a dependency on a custom identifier, which is `invalidate`d after a button click, making the `load` function rerun.\n\n```js\n// @errors: 7031\n/// file: src/routes/+page.js\nlet count = 0;\nexport async function load({ depends }) {\n\tdepends('increase:count');\n\n\treturn { count: count++ };\n}\n```\n\n```html\n/// file: src/routes/+page.svelte\n<script>\n\timport { invalidate } from '$app/navigation';\n\n\tlet { data } = $props();\n\n\tconst increase = async () => {\n\t\tawait invalidate('increase:count');\n\t}\n</script>\n\n<p>{data.count}<p>\n<button on:click={increase}>Increase Count</button>\n```\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nuntrack: <T>(fn: () => T) => T;\n```\n\n<div class=\"ts-block-property-details\">\n\nUse this function to opt out of dependency tracking for everything that is synchronously called within the callback. Example:\n\n```js\n// @errors: 7031\n/// file: src/routes/+page.js\nexport async function load({ untrack, url }) {\n\t// Untrack url.pathname so that path changes don't trigger a rerun\n\tif (untrack(() => url.pathname === '/')) {\n\t\treturn { message: 'Welcome!' };\n\t}\n}\n```\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ntracing: {/*…*/}\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag since\">available since</span> v2.31.0\n\n</div>\n\nAccess to spans for tracing. If tracing is not enabled, these spans will do nothing.\n\n<div class=\"ts-block-property-children\"><div class=\"ts-block-property\">\n\n```dts\nenabled: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\nWhether tracing is enabled.\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```dts\nroot: Span;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe root span for the request. This span is named `sveltekit.handle.root`.\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```dts\ncurrent: Span;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe span associated with the current server `load` function.\n\n</div>\n</div></div>\n\n</div>\n</div></div>\n\n## Snapshot\n\nThe type of `export const snapshot` exported from a page or layout component.\n\n<div class=\"ts-block\">\n\n```dts\ninterface Snapshot<T = any> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\ncapture: () => T;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nrestore: (snapshot: T) => void;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n## SubmitFunction\n\n<div class=\"ts-block\">\n\n```dts\ntype SubmitFunction<\n\tSuccess extends\n\t\t| Record<string, unknown>\n\t\t| undefined = Record<string, any>,\n\tFailure extends\n\t\t| Record<string, unknown>\n\t\t| undefined = Record<string, any>\n> = (input: {\n\taction: URL;\n\tformData: FormData;\n\tformElement: HTMLFormElement;\n\tcontroller: AbortController;\n\tsubmitter: HTMLElement | null;\n\tcancel: () => void;\n}) => MaybePromise<\n\t| void\n\t| ((opts: {\n\t\t\tformData: FormData;\n\t\t\tformElement: HTMLFormElement;\n\t\t\taction: URL;\n\t\t\tresult: ActionResult<Success, Failure>;\n\t\t\t/**\n\t\t\t * Call this to get the default behavior of a form submission response.\n\t\t\t * @param options Set `reset: false` if you don't want the `<form>` values to be reset after a successful submission.\n\t\t\t * @param invalidateAll Set `invalidateAll: false` if you don't want the action to call `invalidateAll` after submission.\n\t\t\t */\n\t\t\tupdate: (options?: {\n\t\t\t\treset?: boolean;\n\t\t\t\tinvalidateAll?: boolean;\n\t\t\t}) => Promise<void>;\n\t  }) => MaybePromise<void>)\n>;\n```\n\n</div>\n\n## Transport\n\n<blockquote class=\"since note\">\n\nAvailable since 2.11.0\n\n</blockquote>\n\nThe [`transport`](/docs/kit/hooks#Universal-hooks-transport) hook allows you to transport custom types across the server/client boundary.\n\nEach transporter has a pair of `encode` and `decode` functions. On the server, `encode` determines whether a value is an instance of the custom type and, if so, returns a non-falsy encoding of the value which can be an object or an array (or `false` otherwise).\n\nIn the browser, `decode` turns the encoding back into an instance of the custom type.\n\n```ts\nimport type { Transport } from '@sveltejs/kit';\n\ndeclare class MyCustomType {\n\tdata: any\n}\n\n// hooks.js\nexport const transport: Transport = {\n\tMyCustomType: {\n\t\tencode: (value) => value instanceof MyCustomType && [value.data],\n\t\tdecode: ([data]) => new MyCustomType(data)\n\t}\n};\n```\n\n<div class=\"ts-block\">\n\n```dts\ntype Transport = Record<string, Transporter>;\n```\n\n</div>\n\n## Transporter\n\nA member of the [`transport`](/docs/kit/hooks#Universal-hooks-transport) hook.\n\n<div class=\"ts-block\">\n\n```dts\ninterface Transporter<\n\tT = any,\n\tU = Exclude<\n\t\tany,\n\t\tfalse | 0 | '' | null | undefined | typeof NaN\n\t>\n> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nencode: (value: T) => false | U;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ndecode: (data: U) => T;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n\n\n## Private types\n\nThe following are referenced by the public types documented above, but cannot be imported directly:\n\n## AdapterEntry\n\n<div class=\"ts-block\">\n\n```dts\ninterface AdapterEntry {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nid: string;\n```\n\n<div class=\"ts-block-property-details\">\n\nA string that uniquely identifies an HTTP service (e.g. serverless function) and is used for deduplication.\nFor example, `/foo/a-[b]` and `/foo/[c]` are different routes, but would both\nbe represented in a Netlify _redirects file as `/foo/:param`, so they share an ID\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nfilter(route: RouteDefinition): boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\nA function that compares the candidate route with the current route to determine\nif it should be grouped with the current route.\n\nUse cases:\n- Fallback pages: `/foo/[c]` is a fallback for `/foo/a-[b]`, and `/[...catchall]` is a fallback for all routes\n- Grouping routes that share a common `config`: `/foo` should be deployed to the edge, `/bar` and `/baz` should be deployed to a serverless function\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ncomplete(entry: { generateManifest(opts: { relativePath: string }): string }): MaybePromise<void>;\n```\n\n<div class=\"ts-block-property-details\">\n\nA function that is invoked once the entry has been created. This is where you\nshould write the function to the filesystem and generate redirect manifests.\n\n</div>\n</div></div>\n\n## Csp\n\n<div class=\"ts-block\">\n\n```dts\nnamespace Csp {\n\ttype ActionSource = 'strict-dynamic' | 'report-sample';\n\ttype BaseSource =\n\t\t| 'self'\n\t\t| 'unsafe-eval'\n\t\t| 'unsafe-hashes'\n\t\t| 'unsafe-inline'\n\t\t| 'wasm-unsafe-eval'\n\t\t| 'none';\n\ttype CryptoSource =\n\t\t`${'nonce' | 'sha256' | 'sha384' | 'sha512'}-${string}`;\n\ttype FrameSource =\n\t\t| HostSource\n\t\t| SchemeSource\n\t\t| 'self'\n\t\t| 'none';\n\ttype HostNameScheme = `${string}.${string}` | 'localhost';\n\ttype HostSource =\n\t\t`${HostProtocolSchemes}${HostNameScheme}${PortScheme}`;\n\ttype HostProtocolSchemes = `${string}://` | '';\n\ttype HttpDelineator = '/' | '?' | '#' | '\\\\';\n\ttype PortScheme = `:${number}` | '' | ':*';\n\ttype SchemeSource =\n\t\t| 'http:'\n\t\t| 'https:'\n\t\t| 'data:'\n\t\t| 'mediastream:'\n\t\t| 'blob:'\n\t\t| 'filesystem:';\n\ttype Source =\n\t\t| HostSource\n\t\t| SchemeSource\n\t\t| CryptoSource\n\t\t| BaseSource;\n\ttype Sources = Source[];\n}\n```\n\n</div>\n\n## CspDirectives\n\n<div class=\"ts-block\">\n\n```dts\ninterface CspDirectives {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\n'child-src'?: Csp.Sources;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'default-src'?: Array<Csp.Source | Csp.ActionSource>;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'frame-src'?: Csp.Sources;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'worker-src'?: Csp.Sources;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'connect-src'?: Csp.Sources;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'font-src'?: Csp.Sources;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'img-src'?: Csp.Sources;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'manifest-src'?: Csp.Sources;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'media-src'?: Csp.Sources;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'object-src'?: Csp.Sources;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'prefetch-src'?: Csp.Sources;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'script-src'?: Array<Csp.Source | Csp.ActionSource>;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'script-src-elem'?: Csp.Sources;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'script-src-attr'?: Csp.Sources;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'style-src'?: Array<Csp.Source | Csp.ActionSource>;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'style-src-elem'?: Csp.Sources;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'style-src-attr'?: Csp.Sources;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'base-uri'?: Array<Csp.Source | Csp.ActionSource>;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nsandbox?: Array<\n| 'allow-downloads-without-user-activation'\n| 'allow-forms'\n| 'allow-modals'\n| 'allow-orientation-lock'\n| 'allow-pointer-lock'\n| 'allow-popups'\n| 'allow-popups-to-escape-sandbox'\n| 'allow-presentation'\n| 'allow-same-origin'\n| 'allow-scripts'\n| 'allow-storage-access-by-user-activation'\n| 'allow-top-navigation'\n| 'allow-top-navigation-by-user-activation'\n>;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'form-action'?: Array<Csp.Source | Csp.ActionSource>;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'frame-ancestors'?: Array<Csp.HostSource | Csp.SchemeSource | Csp.FrameSource>;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'navigate-to'?: Array<Csp.Source | Csp.ActionSource>;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'report-uri'?: string[];\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'report-to'?: string[];\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'require-trusted-types-for'?: Array<'script'>;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'trusted-types'?: Array<'none' | 'allow-duplicates' | '*' | string>;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'upgrade-insecure-requests'?: boolean;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'require-sri-for'?: Array<'script' | 'style' | 'script style'>;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag deprecated\">deprecated</span> \n\n</div>\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'block-all-mixed-content'?: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag deprecated\">deprecated</span> \n\n</div>\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n'plugin-types'?: Array<`${string}/${string}` | 'none'>;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag deprecated\">deprecated</span> \n\n</div>\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nreferrer?: Array<\n| 'no-referrer'\n| 'no-referrer-when-downgrade'\n| 'origin'\n| 'origin-when-cross-origin'\n| 'same-origin'\n| 'strict-origin'\n| 'strict-origin-when-cross-origin'\n| 'unsafe-url'\n| 'none'\n>;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag deprecated\">deprecated</span> \n\n</div>\n\n</div>\n</div></div>\n\n## HttpMethod\n\n<div class=\"ts-block\">\n\n```dts\ntype HttpMethod =\n\t| 'GET'\n\t| 'HEAD'\n\t| 'POST'\n\t| 'PUT'\n\t| 'DELETE'\n\t| 'PATCH'\n\t| 'OPTIONS';\n```\n\n</div>\n\n## Logger\n\n<div class=\"ts-block\">\n\n```dts\ninterface Logger {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\n(msg: string): void;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nsuccess(msg: string): void;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nerror(msg: string): void;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nwarn(msg: string): void;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nminor(msg: string): void;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ninfo(msg: string): void;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n## MaybePromise\n\n<div class=\"ts-block\">\n\n```dts\ntype MaybePromise<T> = T | Promise<T>;\n```\n\n</div>\n\n## PrerenderEntryGeneratorMismatchHandler\n\n<div class=\"ts-block\">\n\n```dts\ninterface PrerenderEntryGeneratorMismatchHandler {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\n(details: { generatedFromId: string; entry: string; matchedId: string; message: string }): void;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n## PrerenderEntryGeneratorMismatchHandlerValue\n\n<div class=\"ts-block\">\n\n```dts\ntype PrerenderEntryGeneratorMismatchHandlerValue =\n\t| 'fail'\n\t| 'warn'\n\t| 'ignore'\n\t| PrerenderEntryGeneratorMismatchHandler;\n```\n\n</div>\n\n## PrerenderHttpErrorHandler\n\n<div class=\"ts-block\">\n\n```dts\ninterface PrerenderHttpErrorHandler {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\n(details: {\nstatus: number;\npath: string;\nreferrer: string | null;\nreferenceType: 'linked' | 'fetched';\nmessage: string;\n}): void;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n## PrerenderHttpErrorHandlerValue\n\n<div class=\"ts-block\">\n\n```dts\ntype PrerenderHttpErrorHandlerValue =\n\t| 'fail'\n\t| 'warn'\n\t| 'ignore'\n\t| PrerenderHttpErrorHandler;\n```\n\n</div>\n\n## PrerenderMap\n\n<div class=\"ts-block\">\n\n```dts\ntype PrerenderMap = Map<string, PrerenderOption>;\n```\n\n</div>\n\n## PrerenderMissingIdHandler\n\n<div class=\"ts-block\">\n\n```dts\ninterface PrerenderMissingIdHandler {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\n(details: { path: string; id: string; referrers: string[]; message: string }): void;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n## PrerenderMissingIdHandlerValue\n\n<div class=\"ts-block\">\n\n```dts\ntype PrerenderMissingIdHandlerValue =\n\t| 'fail'\n\t| 'warn'\n\t| 'ignore'\n\t| PrerenderMissingIdHandler;\n```\n\n</div>\n\n## PrerenderOption\n\n<div class=\"ts-block\">\n\n```dts\ntype PrerenderOption = boolean | 'auto';\n```\n\n</div>\n\n## PrerenderUnseenRoutesHandler\n\n<div class=\"ts-block\">\n\n```dts\ninterface PrerenderUnseenRoutesHandler {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\n(details: { routes: string[]; message: string }): void;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n## PrerenderUnseenRoutesHandlerValue\n\n<div class=\"ts-block\">\n\n```dts\ntype PrerenderUnseenRoutesHandlerValue =\n\t| 'fail'\n\t| 'warn'\n\t| 'ignore'\n\t| PrerenderUnseenRoutesHandler;\n```\n\n</div>\n\n## Prerendered\n\n<div class=\"ts-block\">\n\n```dts\ninterface Prerendered {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\npages: Map<\nstring,\n{\n\t/** The location of the .html file relative to the output directory */\n\tfile: string;\n}\n>;\n```\n\n<div class=\"ts-block-property-details\">\n\nA map of `path` to `{ file }` objects, where a path like `/foo` corresponds to `foo.html` and a path like `/bar/` corresponds to `bar/index.html`.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nassets: Map<\nstring,\n{\n\t/** The MIME type of the asset */\n\ttype: string;\n}\n>;\n```\n\n<div class=\"ts-block-property-details\">\n\nA map of `path` to `{ type }` objects.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nredirects: Map<\nstring,\n{\n\tstatus: number;\n\tlocation: string;\n}\n>;\n```\n\n<div class=\"ts-block-property-details\">\n\nA map of redirects encountered during prerendering.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\npaths: string[];\n```\n\n<div class=\"ts-block-property-details\">\n\nAn array of prerendered paths (without trailing slashes, regardless of the trailingSlash config)\n\n</div>\n</div></div>\n\n## RequestOptions\n\n<div class=\"ts-block\">\n\n```dts\ninterface RequestOptions {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\ngetClientAddress(): string;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nplatform?: App.Platform;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n## RouteSegment\n\n<div class=\"ts-block\">\n\n```dts\ninterface RouteSegment {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\ncontent: string;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ndynamic: boolean;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nrest: boolean;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n## TrailingSlash\n\n<div class=\"ts-block\">\n\n```dts\ntype TrailingSlash = 'never' | 'always' | 'ignore';\n```\n\n</div>",
    "kit/@sveltejs-kit-hooks": "```js\n// @noErrors\nimport { sequence } from '@sveltejs/kit/hooks';\n```\n\n## sequence\n\nA helper function for sequencing multiple `handle` calls in a middleware-like manner.\nThe behavior for the `handle` options is as follows:\n- `transformPageChunk` is applied in reverse order and merged\n- `preload` is applied in forward order, the first option \"wins\" and no `preload` options after it are called\n- `filterSerializedResponseHeaders` behaves the same as `preload`\n\n```js\n// @errors: 7031\n/// file: src/hooks.server.js\nimport { sequence } from '@sveltejs/kit/hooks';\n\n/** @type {import('@sveltejs/kit').Handle} */\nasync function first({ event, resolve }) {\n\tconsole.log('first pre-processing');\n\tconst result = await resolve(event, {\n\t\ttransformPageChunk: ({ html }) => {\n\t\t\t// transforms are applied in reverse order\n\t\t\tconsole.log('first transform');\n\t\t\treturn html;\n\t\t},\n\t\tpreload: () => {\n\t\t\t// this one wins as it's the first defined in the chain\n\t\t\tconsole.log('first preload');\n\t\t\treturn true;\n\t\t}\n\t});\n\tconsole.log('first post-processing');\n\treturn result;\n}\n\n/** @type {import('@sveltejs/kit').Handle} */\nasync function second({ event, resolve }) {\n\tconsole.log('second pre-processing');\n\tconst result = await resolve(event, {\n\t\ttransformPageChunk: ({ html }) => {\n\t\t\tconsole.log('second transform');\n\t\t\treturn html;\n\t\t},\n\t\tpreload: () => {\n\t\t\tconsole.log('second preload');\n\t\t\treturn true;\n\t\t},\n\t\tfilterSerializedResponseHeaders: () => {\n\t\t\t// this one wins as it's the first defined in the chain\n\t\t\tconsole.log('second filterSerializedResponseHeaders');\n\t\t\treturn true;\n\t\t}\n\t});\n\tconsole.log('second post-processing');\n\treturn result;\n}\n\nexport const handle = sequence(first, second);\n```\n\nThe example above would print:\n\n```\nfirst pre-processing\nfirst preload\nsecond pre-processing\nsecond filterSerializedResponseHeaders\nsecond transform\nfirst transform\nsecond post-processing\nfirst post-processing\n```\n\n<div class=\"ts-block\">\n\n```dts\nfunction sequence(...handlers: Handle[]): Handle;\n```\n\n</div>",
    "kit/@sveltejs-kit-node-polyfills": "```js\n// @noErrors\nimport { installPolyfills } from '@sveltejs/kit/node/polyfills';\n```\n\n## installPolyfills\n\nMake various web APIs available as globals:\n- `crypto`\n- `File`\n\n<div class=\"ts-block\">\n\n```dts\nfunction installPolyfills(): void;\n```\n\n</div>",
    "kit/@sveltejs-kit-node": "```js\n// @noErrors\nimport {\n\tcreateReadableStream,\n\tgetRequest,\n\tsetResponse\n} from '@sveltejs/kit/node';\n```\n\n## createReadableStream\n\n<blockquote class=\"since note\">\n\nAvailable since 2.4.0\n\n</blockquote>\n\nConverts a file on disk to a readable stream\n\n<div class=\"ts-block\">\n\n```dts\nfunction createReadableStream(file: string): ReadableStream;\n```\n\n</div>\n\n\n\n## getRequest\n\n<div class=\"ts-block\">\n\n```dts\nfunction getRequest({\n\trequest,\n\tbase,\n\tbodySizeLimit\n}: {\n\trequest: import('http').IncomingMessage;\n\tbase: string;\n\tbodySizeLimit?: number;\n}): Promise<Request>;\n```\n\n</div>\n\n\n\n## setResponse\n\n<div class=\"ts-block\">\n\n```dts\nfunction setResponse(\n\tres: import('http').ServerResponse,\n\tresponse: Response\n): Promise<void>;\n```\n\n</div>",
    "kit/@sveltejs-kit-vite": "```js\n// @noErrors\nimport { sveltekit } from '@sveltejs/kit/vite';\n```\n\n## sveltekit\n\nReturns the SvelteKit Vite plugins.\n\n<div class=\"ts-block\">\n\n```dts\nfunction sveltekit(): Promise<import('vite').Plugin[]>;\n```\n\n</div>",
    "kit/$app-environment": "```js\n// @noErrors\nimport { browser, building, dev, version } from '$app/environment';\n```\n\n## browser\n\n`true` if the app is running in the browser.\n\n<div class=\"ts-block\">\n\n```dts\nconst browser: boolean;\n```\n\n</div>\n\n\n\n## building\n\nSvelteKit analyses your app during the `build` step by running it. During this process, `building` is `true`. This also applies during prerendering.\n\n<div class=\"ts-block\">\n\n```dts\nconst building: boolean;\n```\n\n</div>\n\n\n\n## dev\n\nWhether the dev server is running. This is not guaranteed to correspond to `NODE_ENV` or `MODE`.\n\n<div class=\"ts-block\">\n\n```dts\nconst dev: boolean;\n```\n\n</div>\n\n\n\n## version\n\nThe value of `config.kit.version.name`.\n\n<div class=\"ts-block\">\n\n```dts\nconst version: string;\n```\n\n</div>",
    "kit/$app-forms": "```js\n// @noErrors\nimport { applyAction, deserialize, enhance } from '$app/forms';\n```\n\n## applyAction\n\nThis action updates the `form` property of the current page with the given data and updates `page.status`.\nIn case of an error, it redirects to the nearest error page.\n\n<div class=\"ts-block\">\n\n```dts\nfunction applyAction<\n\tSuccess extends Record<string, unknown> | undefined,\n\tFailure extends Record<string, unknown> | undefined\n>(\n\tresult: import('@sveltejs/kit').ActionResult<\n\t\tSuccess,\n\t\tFailure\n\t>\n): Promise<void>;\n```\n\n</div>\n\n\n\n## deserialize\n\nUse this function to deserialize the response from a form submission.\nUsage:\n\n```js\n// @errors: 7031\nimport { deserialize } from '$app/forms';\n\nasync function handleSubmit(event) {\n\tconst response = await fetch('/form?/action', {\n\t\tmethod: 'POST',\n\t\tbody: new FormData(event.target)\n\t});\n\n\tconst result = deserialize(await response.text());\n\t// ...\n}\n```\n\n<div class=\"ts-block\">\n\n```dts\nfunction deserialize<\n\tSuccess extends Record<string, unknown> | undefined,\n\tFailure extends Record<string, unknown> | undefined\n>(\n\tresult: string\n): import('@sveltejs/kit').ActionResult<Success, Failure>;\n```\n\n</div>\n\n\n\n## enhance\n\nThis action enhances a `<form>` element that otherwise would work without JavaScript.\n\nThe `submit` function is called upon submission with the given FormData and the `action` that should be triggered.\nIf `cancel` is called, the form will not be submitted.\nYou can use the abort `controller` to cancel the submission in case another one starts.\nIf a function is returned, that function is called with the response from the server.\nIf nothing is returned, the fallback will be used.\n\nIf this function or its return value isn't set, it\n- falls back to updating the `form` prop with the returned data if the action is on the same page as the form\n- updates `page.status`\n- resets the `<form>` element and invalidates all data in case of successful submission with no redirect response\n- redirects in case of a redirect response\n- redirects to the nearest error page in case of an unexpected error\n\nIf you provide a custom function with a callback and want to use the default behavior, invoke `update` in your callback.\nIt accepts an options object\n- `reset: false` if you don't want the `<form>` values to be reset after a successful submission\n- `invalidateAll: false` if you don't want the action to call `invalidateAll` after submission\n\n<div class=\"ts-block\">\n\n```dts\nfunction enhance<\n\tSuccess extends Record<string, unknown> | undefined,\n\tFailure extends Record<string, unknown> | undefined\n>(\n\tform_element: HTMLFormElement,\n\tsubmit?: import('@sveltejs/kit').SubmitFunction<\n\t\tSuccess,\n\t\tFailure\n\t>\n): {\n\tdestroy(): void;\n};\n```\n\n</div>",
    "kit/$app-navigation": "```js\n// @noErrors\nimport {\n\tafterNavigate,\n\tbeforeNavigate,\n\tdisableScrollHandling,\n\tgoto,\n\tinvalidate,\n\tinvalidateAll,\n\tonNavigate,\n\tpreloadCode,\n\tpreloadData,\n\tpushState,\n\trefreshAll,\n\treplaceState\n} from '$app/navigation';\n```\n\n## afterNavigate\n\nA lifecycle function that runs the supplied `callback` when the current component mounts, and also whenever we navigate to a URL.\n\n`afterNavigate` must be called during a component initialization. It remains active as long as the component is mounted.\n\n<div class=\"ts-block\">\n\n```dts\nfunction afterNavigate(\n\tcallback: (\n\t\tnavigation: import('@sveltejs/kit').AfterNavigate\n\t) => void\n): void;\n```\n\n</div>\n\n\n\n## beforeNavigate\n\nA navigation interceptor that triggers before we navigate to a URL, whether by clicking a link, calling `goto(...)`, or using the browser back/forward controls.\n\nCalling `cancel()` will prevent the navigation from completing. If `navigation.type === 'leave'` — meaning the user is navigating away from the app (or closing the tab) — calling `cancel` will trigger the native browser unload confirmation dialog. In this case, the navigation may or may not be cancelled depending on the user's response.\n\nWhen a navigation isn't to a SvelteKit-owned route (and therefore controlled by SvelteKit's client-side router), `navigation.to.route.id` will be `null`.\n\nIf the navigation will (if not cancelled) cause the document to unload — in other words `'leave'` navigations and `'link'` navigations where `navigation.to.route === null` — `navigation.willUnload` is `true`.\n\n`beforeNavigate` must be called during a component initialization. It remains active as long as the component is mounted.\n\n<div class=\"ts-block\">\n\n```dts\nfunction beforeNavigate(\n\tcallback: (\n\t\tnavigation: import('@sveltejs/kit').BeforeNavigate\n\t) => void\n): void;\n```\n\n</div>\n\n\n\n## disableScrollHandling\n\nIf called when the page is being updated following a navigation (in `onMount` or `afterNavigate` or an action, for example), this disables SvelteKit's built-in scroll handling.\nThis is generally discouraged, since it breaks user expectations.\n\n<div class=\"ts-block\">\n\n```dts\nfunction disableScrollHandling(): void;\n```\n\n</div>\n\n\n\n## goto\n\nAllows you to navigate programmatically to a given route, with options such as keeping the current element focused.\nReturns a Promise that resolves when SvelteKit navigates (or fails to navigate, in which case the promise rejects) to the specified `url`.\n\nFor external URLs, use `window.location = url` instead of calling `goto(url)`.\n\n<div class=\"ts-block\">\n\n```dts\nfunction goto(\n\turl: string | URL,\n\topts?: {\n\t\treplaceState?: boolean | undefined;\n\t\tnoScroll?: boolean | undefined;\n\t\tkeepFocus?: boolean | undefined;\n\t\tinvalidateAll?: boolean | undefined;\n\t\tinvalidate?:\n\t\t\t| (string | URL | ((url: URL) => boolean))[]\n\t\t\t| undefined;\n\t\tstate?: App.PageState | undefined;\n\t}\n): Promise<void>;\n```\n\n</div>\n\n\n\n## invalidate\n\nCauses any `load` functions belonging to the currently active page to re-run if they depend on the `url` in question, via `fetch` or `depends`. Returns a `Promise` that resolves when the page is subsequently updated.\n\nIf the argument is given as a `string` or `URL`, it must resolve to the same URL that was passed to `fetch` or `depends` (including query parameters).\nTo create a custom identifier, use a string beginning with `[a-z]+:` (e.g. `custom:state`) — this is a valid URL.\n\nThe `function` argument can be used define a custom predicate. It receives the full `URL` and causes `load` to rerun if `true` is returned.\nThis can be useful if you want to invalidate based on a pattern instead of a exact match.\n\n```ts\n// Example: Match '/path' regardless of the query parameters\nimport { invalidate } from '$app/navigation';\n\ninvalidate((url) => url.pathname === '/path');\n```\n\n<div class=\"ts-block\">\n\n```dts\nfunction invalidate(\n\tresource: string | URL | ((url: URL) => boolean)\n): Promise<void>;\n```\n\n</div>\n\n\n\n## invalidateAll\n\nCauses all `load` functions belonging to the currently active page to re-run. Returns a `Promise` that resolves when the page is subsequently updated.\n\n<div class=\"ts-block\">\n\n```dts\nfunction invalidateAll(): Promise<void>;\n```\n\n</div>\n\n\n\n## onNavigate\n\nA lifecycle function that runs the supplied `callback` immediately before we navigate to a new URL except during full-page navigations.\n\nIf you return a `Promise`, SvelteKit will wait for it to resolve before completing the navigation. This allows you to — for example — use `document.startViewTransition`. Avoid promises that are slow to resolve, since navigation will appear stalled to the user.\n\nIf a function (or a `Promise` that resolves to a function) is returned from the callback, it will be called once the DOM has updated.\n\n`onNavigate` must be called during a component initialization. It remains active as long as the component is mounted.\n\n<div class=\"ts-block\">\n\n```dts\nfunction onNavigate(\n\tcallback: (\n\t\tnavigation: import('@sveltejs/kit').OnNavigate\n\t) => MaybePromise<(() => void) | void>\n): void;\n```\n\n</div>\n\n\n\n## preloadCode\n\nProgrammatically imports the code for routes that haven't yet been fetched.\nTypically, you might call this to speed up subsequent navigation.\n\nYou can specify routes by any matching pathname such as `/about` (to match `src/routes/about/+page.svelte`) or `/blog/*` (to match `src/routes/blog/[slug]/+page.svelte`).\n\nUnlike `preloadData`, this won't call `load` functions.\nReturns a Promise that resolves when the modules have been imported.\n\n<div class=\"ts-block\">\n\n```dts\nfunction preloadCode(pathname: string): Promise<void>;\n```\n\n</div>\n\n\n\n## preloadData\n\nProgrammatically preloads the given page, which means\n 1. ensuring that the code for the page is loaded, and\n 2. calling the page's load function with the appropriate options.\n\nThis is the same behaviour that SvelteKit triggers when the user taps or mouses over an `<a>` element with `data-sveltekit-preload-data`.\nIf the next navigation is to `href`, the values returned from load will be used, making navigation instantaneous.\nReturns a Promise that resolves with the result of running the new route's `load` functions once the preload is complete.\n\n<div class=\"ts-block\">\n\n```dts\nfunction preloadData(href: string): Promise<\n\t| {\n\t\t\ttype: 'loaded';\n\t\t\tstatus: number;\n\t\t\tdata: Record<string, any>;\n\t  }\n\t| {\n\t\t\ttype: 'redirect';\n\t\t\tlocation: string;\n\t  }\n>;\n```\n\n</div>\n\n\n\n## pushState\n\nProgrammatically create a new history entry with the given `page.state`. To use the current URL, you can pass `''` as the first argument. Used for [shallow routing](/docs/kit/shallow-routing).\n\n<div class=\"ts-block\">\n\n```dts\nfunction pushState(\n\turl: string | URL,\n\tstate: App.PageState\n): void;\n```\n\n</div>\n\n\n\n## refreshAll\n\nCauses all currently active remote functions to refresh, and all `load` functions belonging to the currently active page to re-run (unless disabled via the option argument).\nReturns a `Promise` that resolves when the page is subsequently updated.\n\n<div class=\"ts-block\">\n\n```dts\nfunction refreshAll({\n\tincludeLoadFunctions\n}?: {\n\tincludeLoadFunctions?: boolean;\n}): Promise<void>;\n```\n\n</div>\n\n\n\n## replaceState\n\nProgrammatically replace the current history entry with the given `page.state`. To use the current URL, you can pass `''` as the first argument. Used for [shallow routing](/docs/kit/shallow-routing).\n\n<div class=\"ts-block\">\n\n```dts\nfunction replaceState(\n\turl: string | URL,\n\tstate: App.PageState\n): void;\n```\n\n</div>",
    "kit/$app-paths": "```js\n// @noErrors\nimport { asset, assets, base, resolve, resolveRoute } from '$app/paths';\n```\n\n## asset\n\n<blockquote class=\"since note\">\n\nAvailable since 2.26\n\n</blockquote>\n\nResolve the URL of an asset in your `static` directory, by prefixing it with [`config.kit.paths.assets`](/docs/kit/configuration#paths) if configured, or otherwise by prefixing it with the base path.\n\nDuring server rendering, the base path is relative and depends on the page currently being rendered.\n\n```svelte\n<script>\n\timport { asset } from '$app/paths';\n</script>\n\n<img alt=\"a potato\" src={asset('/potato.jpg')} />\n```\n\n<div class=\"ts-block\">\n\n```dts\nfunction asset(file: Asset): string;\n```\n\n</div>\n\n\n\n## assets\n\n<blockquote class=\"tag deprecated note\">\n\nUse [`asset(...)`](/docs/kit/$app-paths#asset) instead\n\n</blockquote>\n\nAn absolute path that matches [`config.kit.paths.assets`](/docs/kit/configuration#paths).\n\n> [!NOTE] If a value for `config.kit.paths.assets` is specified, it will be replaced with `'/_svelte_kit_assets'` during `vite dev` or `vite preview`, since the assets don't yet live at their eventual URL.\n\n<div class=\"ts-block\">\n\n```dts\nlet assets:\n\t| ''\n\t| `https://${string}`\n\t| `http://${string}`\n\t| '/_svelte_kit_assets';\n```\n\n</div>\n\n\n\n## base\n\n<blockquote class=\"tag deprecated note\">\n\nUse [`resolve(...)`](/docs/kit/$app-paths#resolve) instead\n\n</blockquote>\n\nA string that matches [`config.kit.paths.base`](/docs/kit/configuration#paths).\n\nExample usage: `<a href=\"{base}/your-page\">Link</a>`\n\n<div class=\"ts-block\">\n\n```dts\nlet base: '' | `/${string}`;\n```\n\n</div>\n\n\n\n## resolve\n\n<blockquote class=\"since note\">\n\nAvailable since 2.26\n\n</blockquote>\n\nResolve a pathname by prefixing it with the base path, if any, or resolve a route ID by populating dynamic segments with parameters.\n\nDuring server rendering, the base path is relative and depends on the page currently being rendered.\n\n```js\n// @errors: 7031\nimport { resolve } from '$app/paths';\n\n// using a pathname\nconst resolved = resolve(`/blog/hello-world`);\n\n// using a route ID plus parameters\nconst resolved = resolve('/blog/[slug]', {\n\tslug: 'hello-world'\n});\n```\n\n<div class=\"ts-block\">\n\n```dts\nfunction resolve<T extends RouteId | Pathname>(\n\t...args: ResolveArgs<T>\n): ResolvedPathname;\n```\n\n</div>\n\n\n\n## resolveRoute\n\n<blockquote class=\"tag deprecated note\">\n\nUse [`resolve(...)`](/docs/kit/$app-paths#resolve) instead\n\n</blockquote>\n\n<div class=\"ts-block\">\n\n```dts\nfunction resolveRoute<T extends RouteId | Pathname>(\n\t...args: ResolveArgs<T>\n): ResolvedPathname;\n```\n\n</div>",
    "kit/$app-server": "```js\n// @noErrors\nimport {\n\tcommand,\n\tform,\n\tgetRequestEvent,\n\tprerender,\n\tquery,\n\tread\n} from '$app/server';\n```\n\n## command\n\n<blockquote class=\"since note\">\n\nAvailable since 2.27\n\n</blockquote>\n\nCreates a remote command. When called from the browser, the function will be invoked on the server via a `fetch` call.\n\nSee [Remote functions](/docs/kit/remote-functions#command) for full documentation.\n\n<div class=\"ts-block\">\n\n```dts\nfunction command<Output>(\n\tfn: () => Output\n): RemoteCommand<void, Output>;\n```\n\n</div>\n\n<div class=\"ts-block\">\n\n```dts\nfunction command<Input, Output>(\n\tvalidate: 'unchecked',\n\tfn: (arg: Input) => Output\n): RemoteCommand<Input, Output>;\n```\n\n</div>\n\n<div class=\"ts-block\">\n\n```dts\nfunction command<Schema extends StandardSchemaV1, Output>(\n\tvalidate: Schema,\n\tfn: (arg: StandardSchemaV1.InferOutput<Schema>) => Output\n): RemoteCommand<\n\tStandardSchemaV1.InferInput<Schema>,\n\tOutput\n>;\n```\n\n</div>\n\n\n\n## form\n\n<blockquote class=\"since note\">\n\nAvailable since 2.27\n\n</blockquote>\n\nCreates a form object that can be spread onto a `<form>` element.\n\nSee [Remote functions](/docs/kit/remote-functions#form) for full documentation.\n\n<div class=\"ts-block\">\n\n```dts\nfunction form<Output>(\n\tfn: (\n\t\tinvalid: import('@sveltejs/kit').Invalid<void>\n\t) => MaybePromise<Output>\n): RemoteForm<void, Output>;\n```\n\n</div>\n\n<div class=\"ts-block\">\n\n```dts\nfunction form<Input extends RemoteFormInput, Output>(\n\tvalidate: 'unchecked',\n\tfn: (\n\t\tdata: Input,\n\t\tinvalid: import('@sveltejs/kit').Invalid<Input>\n\t) => MaybePromise<Output>\n): RemoteForm<Input, Output>;\n```\n\n</div>\n\n<div class=\"ts-block\">\n\n```dts\nfunction form<\n\tSchema extends StandardSchemaV1<\n\t\tRemoteFormInput,\n\t\tRecord<string, any>\n\t>,\n\tOutput\n>(\n\tvalidate: Schema,\n\tfn: (\n\t\tdata: StandardSchemaV1.InferOutput<Schema>,\n\t\tinvalid: import('@sveltejs/kit').Invalid<\n\t\t\tStandardSchemaV1.InferOutput<Schema>\n\t\t>\n\t) => MaybePromise<Output>\n): RemoteForm<StandardSchemaV1.InferInput<Schema>, Output>;\n```\n\n</div>\n\n\n\n## getRequestEvent\n\n<blockquote class=\"since note\">\n\nAvailable since 2.20.0\n\n</blockquote>\n\nReturns the current `RequestEvent`. Can be used inside server hooks, server `load` functions, actions, and endpoints (and functions called by them).\n\nIn environments without [`AsyncLocalStorage`](https://nodejs.org/api/async_context.html#class-asynclocalstorage), this must be called synchronously (i.e. not after an `await`).\n\n<div class=\"ts-block\">\n\n```dts\nfunction getRequestEvent(): RequestEvent;\n```\n\n</div>\n\n\n\n## prerender\n\n<blockquote class=\"since note\">\n\nAvailable since 2.27\n\n</blockquote>\n\nCreates a remote prerender function. When called from the browser, the function will be invoked on the server via a `fetch` call.\n\nSee [Remote functions](/docs/kit/remote-functions#prerender) for full documentation.\n\n<div class=\"ts-block\">\n\n```dts\nfunction prerender<Output>(\n\tfn: () => MaybePromise<Output>,\n\toptions?:\n\t\t| {\n\t\t\t\tinputs?: RemotePrerenderInputsGenerator<void>;\n\t\t\t\tdynamic?: boolean;\n\t\t  }\n\t\t| undefined\n): RemotePrerenderFunction<void, Output>;\n```\n\n</div>\n\n<div class=\"ts-block\">\n\n```dts\nfunction prerender<Input, Output>(\n\tvalidate: 'unchecked',\n\tfn: (arg: Input) => MaybePromise<Output>,\n\toptions?:\n\t\t| {\n\t\t\t\tinputs?: RemotePrerenderInputsGenerator<Input>;\n\t\t\t\tdynamic?: boolean;\n\t\t  }\n\t\t| undefined\n): RemotePrerenderFunction<Input, Output>;\n```\n\n</div>\n\n<div class=\"ts-block\">\n\n```dts\nfunction prerender<Schema extends StandardSchemaV1, Output>(\n\tschema: Schema,\n\tfn: (\n\t\targ: StandardSchemaV1.InferOutput<Schema>\n\t) => MaybePromise<Output>,\n\toptions?:\n\t\t| {\n\t\t\t\tinputs?: RemotePrerenderInputsGenerator<\n\t\t\t\t\tStandardSchemaV1.InferInput<Schema>\n\t\t\t\t>;\n\t\t\t\tdynamic?: boolean;\n\t\t  }\n\t\t| undefined\n): RemotePrerenderFunction<\n\tStandardSchemaV1.InferInput<Schema>,\n\tOutput\n>;\n```\n\n</div>\n\n\n\n## query\n\n<blockquote class=\"since note\">\n\nAvailable since 2.27\n\n</blockquote>\n\nCreates a remote query. When called from the browser, the function will be invoked on the server via a `fetch` call.\n\nSee [Remote functions](/docs/kit/remote-functions#query) for full documentation.\n\n<div class=\"ts-block\">\n\n```dts\nfunction query<Output>(\n\tfn: () => MaybePromise<Output>\n): RemoteQueryFunction<void, Output>;\n```\n\n</div>\n\n<div class=\"ts-block\">\n\n```dts\nfunction query<Input, Output>(\n\tvalidate: 'unchecked',\n\tfn: (arg: Input) => MaybePromise<Output>\n): RemoteQueryFunction<Input, Output>;\n```\n\n</div>\n\n<div class=\"ts-block\">\n\n```dts\nfunction query<Schema extends StandardSchemaV1, Output>(\n\tschema: Schema,\n\tfn: (\n\t\targ: StandardSchemaV1.InferOutput<Schema>\n\t) => MaybePromise<Output>\n): RemoteQueryFunction<\n\tStandardSchemaV1.InferInput<Schema>,\n\tOutput\n>;\n```\n\n</div>\n\n\n\n## read\n\n<blockquote class=\"since note\">\n\nAvailable since 2.4.0\n\n</blockquote>\n\nRead the contents of an imported asset from the filesystem\n\n```js\n// @errors: 7031\nimport { read } from '$app/server';\nimport somefile from './somefile.txt';\n\nconst asset = read(somefile);\nconst text = await asset.text();\n```\n\n<div class=\"ts-block\">\n\n```dts\nfunction read(asset: string): Response;\n```\n\n</div>\n\n\n\n## query\n\n<div class=\"ts-block\">\n\n```dts\nnamespace query {\n\t/**\n\t * Creates a batch query function that collects multiple calls and executes them in a single request\n\t *\n\t * See [Remote functions](https://svelte.dev/docs/kit/remote-functions#query.batch) for full documentation.\n\t *\n\t * @since 2.35\n\t */\n\tfunction batch<Input, Output>(\n\t\tvalidate: 'unchecked',\n\t\tfn: (\n\t\t\targs: Input[]\n\t\t) => MaybePromise<(arg: Input, idx: number) => Output>\n\t): RemoteQueryFunction<Input, Output>;\n\t/**\n\t * Creates a batch query function that collects multiple calls and executes them in a single request\n\t *\n\t * See [Remote functions](https://svelte.dev/docs/kit/remote-functions#query.batch) for full documentation.\n\t *\n\t * @since 2.35\n\t */\n\tfunction batch<Schema extends StandardSchemaV1, Output>(\n\t\tschema: Schema,\n\t\tfn: (\n\t\t\targs: StandardSchemaV1.InferOutput<Schema>[]\n\t\t) => MaybePromise<\n\t\t\t(\n\t\t\t\targ: StandardSchemaV1.InferOutput<Schema>,\n\t\t\t\tidx: number\n\t\t\t) => Output\n\t\t>\n\t): RemoteQueryFunction<\n\t\tStandardSchemaV1.InferInput<Schema>,\n\t\tOutput\n\t>;\n}\n```\n\n</div>",
    "kit/$app-state": "SvelteKit makes three read-only state objects available via the `$app/state` module — `page`, `navigating` and `updated`.\n\n> [!NOTE]\n> This module was added in 2.12. If you're using an earlier version of SvelteKit, use [`$app/stores`]($app-stores) instead.\n\n\n\n```js\n// @noErrors\nimport { navigating, page, updated } from '$app/state';\n```\n\n## navigating\n\nA read-only object representing an in-progress navigation, with `from`, `to`, `type` and (if `type === 'popstate'`) `delta` properties.\nValues are `null` when no navigation is occurring, or during server rendering.\n\n<div class=\"ts-block\">\n\n```dts\nconst navigating:\n\t| import('@sveltejs/kit').Navigation\n\t| {\n\t\t\tfrom: null;\n\t\t\tto: null;\n\t\t\ttype: null;\n\t\t\twillUnload: null;\n\t\t\tdelta: null;\n\t\t\tcomplete: null;\n\t  };\n```\n\n</div>\n\n\n\n## page\n\nA read-only reactive object with information about the current page, serving several use cases:\n- retrieving the combined `data` of all pages/layouts anywhere in your component tree (also see [loading data](/docs/kit/load))\n- retrieving the current value of the `form` prop anywhere in your component tree (also see [form actions](/docs/kit/form-actions))\n- retrieving the page state that was set through `goto`, `pushState` or `replaceState` (also see [goto](/docs/kit/$app-navigation#goto) and [shallow routing](/docs/kit/shallow-routing))\n- retrieving metadata such as the URL you're on, the current route and its parameters, and whether or not there was an error\n\n```svelte\n<!--- file: +layout.svelte --->\n<script>\n\timport { page } from '$app/state';\n</script>\n\n<p>Currently at {page.url.pathname}</p>\n\n{#if page.error}\n\t<span class=\"red\">Problem detected</span>\n{:else}\n\t<span class=\"small\">All systems operational</span>\n{/if}\n```\n\nChanges to `page` are available exclusively with runes. (The legacy reactivity syntax will not reflect any changes)\n\n```svelte\n<!--- file: +page.svelte --->\n<script>\n\timport { page } from '$app/state';\n\tconst id = $derived(page.params.id); // This will correctly update id for usage on this page\n\t$: badId = page.params.id; // Do not use; will never update after initial load\n</script>\n```\n\nOn the server, values can only be read during rendering (in other words _not_ in e.g. `load` functions). In the browser, the values can be read at any time.\n\n<div class=\"ts-block\">\n\n```dts\nconst page: import('@sveltejs/kit').Page;\n```\n\n</div>\n\n\n\n## updated\n\nA read-only reactive value that's initially `false`. If [`version.pollInterval`](/docs/kit/configuration#version) is a non-zero value, SvelteKit will poll for new versions of the app and update `current` to `true` when it detects one. `updated.check()` will force an immediate check, regardless of polling.\n\n<div class=\"ts-block\">\n\n```dts\nconst updated: {\n\tget current(): boolean;\n\tcheck(): Promise<boolean>;\n};\n```\n\n</div>",
    "kit/$app-stores": "This module contains store-based equivalents of the exports from [`$app/state`]($app-state). If you're using SvelteKit 2.12 or later, use that module instead.\n\n\n\n```js\n// @noErrors\nimport { getStores, navigating, page, updated } from '$app/stores';\n```\n\n## getStores\n\n<div class=\"ts-block\">\n\n```dts\nfunction getStores(): {\n\tpage: typeof page;\n\n\tnavigating: typeof navigating;\n\n\tupdated: typeof updated;\n};\n```\n\n</div>\n\n\n\n## navigating\n\n<blockquote class=\"tag deprecated note\">\n\nUse `navigating` from `$app/state` instead (requires Svelte 5, [see docs for more info](/docs/kit/migrating-to-sveltekit-2#SvelteKit-2.12:-$app-stores-deprecated))\n\n</blockquote>\n\nA readable store.\nWhen navigating starts, its value is a `Navigation` object with `from`, `to`, `type` and (if `type === 'popstate'`) `delta` properties.\nWhen navigating finishes, its value reverts to `null`.\n\nOn the server, this store can only be subscribed to during component initialization. In the browser, it can be subscribed to at any time.\n\n<div class=\"ts-block\">\n\n```dts\nconst navigating: import('svelte/store').Readable<\n\timport('@sveltejs/kit').Navigation | null\n>;\n```\n\n</div>\n\n\n\n## page\n\n<blockquote class=\"tag deprecated note\">\n\nUse `page` from `$app/state` instead (requires Svelte 5, [see docs for more info](/docs/kit/migrating-to-sveltekit-2#SvelteKit-2.12:-$app-stores-deprecated))\n\n</blockquote>\n\nA readable store whose value contains page data.\n\nOn the server, this store can only be subscribed to during component initialization. In the browser, it can be subscribed to at any time.\n\n<div class=\"ts-block\">\n\n```dts\nconst page: import('svelte/store').Readable<\n\timport('@sveltejs/kit').Page\n>;\n```\n\n</div>\n\n\n\n## updated\n\n<blockquote class=\"tag deprecated note\">\n\nUse `updated` from `$app/state` instead (requires Svelte 5, [see docs for more info](/docs/kit/migrating-to-sveltekit-2#SvelteKit-2.12:-$app-stores-deprecated))\n\n</blockquote>\n\nA readable store whose initial value is `false`. If [`version.pollInterval`](/docs/kit/configuration#version) is a non-zero value, SvelteKit will poll for new versions of the app and update the store value to `true` when it detects one. `updated.check()` will force an immediate check, regardless of polling.\n\nOn the server, this store can only be subscribed to during component initialization. In the browser, it can be subscribed to at any time.\n\n<div class=\"ts-block\">\n\n```dts\nconst updated: import('svelte/store').Readable<boolean> & {\n\tcheck(): Promise<boolean>;\n};\n```\n\n</div>",
    "kit/$app-types": "This module contains generated types for the routes in your app.\n\n<blockquote class=\"since note\">\n\t<p>Available since 2.26</p>\n</blockquote>\n\n```js\n// @noErrors\nimport type { RouteId, RouteParams, LayoutParams } from '$app/types';\n```\n\n## Asset\n\nA union of all the filenames of assets contained in your `static` directory, plus a `string` wildcard for asset paths generated from `import` declarations.\n\n<div class=\"ts-block\">\n\n```dts\ntype Asset = '/favicon.png' | '/robots.txt' | (string & {});\n```\n\n</div>\n\n## RouteId\n\nA union of all the route IDs in your app. Used for `page.route.id` and `event.route.id`.\n\n<div class=\"ts-block\">\n\n```dts\ntype RouteId = '/' | '/my-route' | '/my-other-route/[param]';\n```\n\n</div>\n\n## Pathname\n\nA union of all valid pathnames in your app.\n\n<div class=\"ts-block\">\n\n```dts\ntype Pathname = '/' | '/my-route' | `/my-other-route/${string}` & {};\n```\n\n</div>\n\n## ResolvedPathname\n\nSimilar to `Pathname`, but possibly prefixed with a [base path](configuration#paths). Used for `page.url.pathname`.\n\n<div class=\"ts-block\">\n\n```dts\ntype ResolvedPathname = `${'' | `/${string}`}/` | `${'' | `/${string}`}/my-route` | `${'' | `/${string}`}/my-other-route/${string}` | {};\n```\n\n</div>\n\n## RouteParams\n\nA utility for getting the parameters associated with a given route.\n\n```ts\n// @errors: 2552\ntype BlogParams = RouteParams<'/blog/[slug]'>; // { slug: string }\n```\n\n<div class=\"ts-block\">\n\n```dts\ntype RouteParams<T extends RouteId> = { /* generated */ } | Record<string, never>;\n```\n\n</div>\n\n## LayoutParams\n\nA utility for getting the parameters associated with a given layout, which is similar to `RouteParams` but also includes optional parameters for any child route.\n\n<div class=\"ts-block\">\n\n```dts\ntype RouteParams<T extends RouteId> = { /* generated */ } | Record<string, never>;\n```\n\n</div>",
    "kit/$env-dynamic-private": "This module provides access to runtime environment variables, as defined by the platform you're running on. For example if you're using [`adapter-node`](https://github.com/sveltejs/kit/tree/main/packages/adapter-node) (or running [`vite preview`](/docs/kit/cli)), this is equivalent to `process.env`. This module only includes variables that _do not_ begin with [`config.kit.env.publicPrefix`](/docs/kit/configuration#env) _and do_ start with [`config.kit.env.privatePrefix`](/docs/kit/configuration#env) (if configured).\n\nThis module cannot be imported into client-side code.\n\n```ts\nimport { env } from '$env/dynamic/private';\nconsole.log(env.DEPLOYMENT_SPECIFIC_VARIABLE);\n```\n\n> [!NOTE] In `dev`, `$env/dynamic` always includes environment variables from `.env`. In `prod`, this behavior will depend on your adapter.",
    "kit/$env-dynamic-public": "Similar to [`$env/dynamic/private`](/docs/kit/$env-dynamic-private), but only includes variables that begin with [`config.kit.env.publicPrefix`](/docs/kit/configuration#env) (which defaults to `PUBLIC_`), and can therefore safely be exposed to client-side code.\n\nNote that public dynamic environment variables must all be sent from the server to the client, causing larger network requests — when possible, use `$env/static/public` instead.\n\n```ts\nimport { env } from '$env/dynamic/public';\nconsole.log(env.PUBLIC_DEPLOYMENT_SPECIFIC_VARIABLE);\n```",
    "kit/$env-static-private": "Environment variables [loaded by Vite](https://vitejs.dev/guide/env-and-mode.html#env-files) from `.env` files and `process.env`. Like [`$env/dynamic/private`](/docs/kit/$env-dynamic-private), this module cannot be imported into client-side code. This module only includes variables that _do not_ begin with [`config.kit.env.publicPrefix`](/docs/kit/configuration#env) _and do_ start with [`config.kit.env.privatePrefix`](/docs/kit/configuration#env) (if configured).\n\n_Unlike_ [`$env/dynamic/private`](/docs/kit/$env-dynamic-private), the values exported from this module are statically injected into your bundle at build time, enabling optimisations like dead code elimination.\n\n```ts\nimport { API_KEY } from '$env/static/private';\n```\n\nNote that all environment variables referenced in your code should be declared (for example in an `.env` file), even if they don't have a value until the app is deployed:\n\n```\nMY_FEATURE_FLAG=\"\"\n```\n\nYou can override `.env` values from the command line like so:\n\n```sh\nMY_FEATURE_FLAG=\"enabled\" npm run dev\n```",
    "kit/$env-static-public": "Similar to [`$env/static/private`](/docs/kit/$env-static-private), except that it only includes environment variables that begin with [`config.kit.env.publicPrefix`](/docs/kit/configuration#env) (which defaults to `PUBLIC_`), and can therefore safely be exposed to client-side code.\n\nValues are replaced statically at build time.\n\n```ts\nimport { PUBLIC_BASE_URL } from '$env/static/public';\n```",
    "kit/$lib": "SvelteKit automatically makes files under `src/lib` available using the `$lib` import alias. You can change which directory this alias points to in your [config file](configuration#files).\n\n```svelte\n<!--- file: src/lib/Component.svelte --->\nA reusable component\n```\n\n```svelte\n<!--- file: src/routes/+page.svelte --->\n<script>\n    import Component from '$lib/Component.svelte';\n</script>\n\n<Component />\n```",
    "kit/$service-worker": "```js\n// @noErrors\nimport { base, build, files, prerendered, version } from '$service-worker';\n```\n\nThis module is only available to [service workers](/docs/kit/service-workers).\n\n## base\n\nThe `base` path of the deployment. Typically this is equivalent to `config.kit.paths.base`, but it is calculated from `location.pathname` meaning that it will continue to work correctly if the site is deployed to a subdirectory.\nNote that there is a `base` but no `assets`, since service workers cannot be used if `config.kit.paths.assets` is specified.\n\n<div class=\"ts-block\">\n\n```dts\nconst base: string;\n```\n\n</div>\n\n\n\n## build\n\nAn array of URL strings representing the files generated by Vite, suitable for caching with `cache.addAll(build)`.\nDuring development, this is an empty array.\n\n<div class=\"ts-block\">\n\n```dts\nconst build: string[];\n```\n\n</div>\n\n\n\n## files\n\nAn array of URL strings representing the files in your static directory, or whatever directory is specified by `config.kit.files.assets`. You can customize which files are included from `static` directory using [`config.kit.serviceWorker.files`](/docs/kit/configuration#serviceWorker)\n\n<div class=\"ts-block\">\n\n```dts\nconst files: string[];\n```\n\n</div>\n\n\n\n## prerendered\n\nAn array of pathnames corresponding to prerendered pages and endpoints.\nDuring development, this is an empty array.\n\n<div class=\"ts-block\">\n\n```dts\nconst prerendered: string[];\n```\n\n</div>\n\n\n\n## version\n\nSee [`config.kit.version`](/docs/kit/configuration#version). It's useful for generating unique cache names inside your service worker, so that a later deployment of your app can invalidate old caches.\n\n<div class=\"ts-block\">\n\n```dts\nconst version: string;\n```\n\n</div>",
    "kit/configuration": "Your project's configuration lives in a `svelte.config.js` file at the root of your project. As well as SvelteKit, this config object is used by other tooling that integrates with Svelte such as editor extensions.\n\n```js\n/// file: svelte.config.js\n// @filename: ambient.d.ts\ndeclare module '@sveltejs/adapter-auto' {\n\tconst plugin: () => import('@sveltejs/kit').Adapter;\n\texport default plugin;\n}\n\n// @filename: index.js\n// ---cut---\nimport adapter from '@sveltejs/adapter-auto';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter()\n\t}\n};\n\nexport default config;\n```\n\n## Config\n\nAn extension of [`vite-plugin-svelte`'s options](https://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/config.md#svelte-options).\n\n<div class=\"ts-block\">\n\n```dts\ninterface Config extends SvelteConfig {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nkit?: KitConfig;\n```\n\n<div class=\"ts-block-property-details\">\n\nSvelteKit options.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n[key: string]: any;\n```\n\n<div class=\"ts-block-property-details\">\n\nAny additional options required by tooling that integrates with Svelte.\n\n</div>\n</div></div>\n\n\n\n## KitConfig\n\nThe `kit` property configures SvelteKit, and can have the following properties:\n\n## adapter\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `undefined`\n\n</div>\n\nYour [adapter](/docs/kit/adapters) is run when executing `vite build`. It determines how the output is converted for different platforms.\n\n<div class=\"ts-block-property-children\">\n\n\n\n</div>\n\n## alias\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `{}`\n\n</div>\n\nAn object containing zero or more aliases used to replace values in `import` statements. These aliases are automatically passed to Vite and TypeScript.\n\n```js\n// @errors: 7031\n/// file: svelte.config.js\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\talias: {\n\t\t\t// this will match a file\n\t\t\t'my-file': 'path/to/my-file.js',\n\n\t\t\t// this will match a directory and its contents\n\t\t\t// (`my-directory/x` resolves to `path/to/my-directory/x`)\n\t\t\t'my-directory': 'path/to/my-directory',\n\n\t\t\t// an alias ending /* will only match\n\t\t\t// the contents of a directory, not the directory itself\n\t\t\t'my-directory/*': 'path/to/my-directory/*'\n\t\t}\n\t}\n};\n```\n\n> [!NOTE] The built-in `$lib` alias is controlled by `config.kit.files.lib` as it is used for packaging.\n\n> [!NOTE] You will need to run `npm run dev` to have SvelteKit automatically generate the required alias configuration in `jsconfig.json` or `tsconfig.json`.\n\n<div class=\"ts-block-property-children\">\n\n\n\n</div>\n\n## appDir\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\"_app\"`\n\n</div>\n\nThe directory where SvelteKit keeps its stuff, including static assets (such as JS and CSS) and internally-used routes.\n\nIf `paths.assets` is specified, there will be two app directories — `${paths.assets}/${appDir}` and `${paths.base}/${appDir}`.\n\n<div class=\"ts-block-property-children\">\n\n\n\n</div>\n\n## csp\n\n<div class=\"ts-block-property-bullets\">\n\n\n\n</div>\n\n[Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy) configuration. CSP helps to protect your users against cross-site scripting (XSS) attacks, by limiting the places resources can be loaded from. For example, a configuration like this...\n\n```js\n// @errors: 7031\n/// file: svelte.config.js\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tcsp: {\n\t\t\tdirectives: {\n\t\t\t\t'script-src': ['self']\n\t\t\t},\n\t\t\t// must be specified with either the `report-uri` or `report-to` directives, or both\n\t\t\treportOnly: {\n\t\t\t\t'script-src': ['self'],\n\t\t\t\t'report-uri': ['/']\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport default config;\n```\n\n...would prevent scripts loading from external sites. SvelteKit will augment the specified directives with nonces or hashes (depending on `mode`) for any inline styles and scripts it generates.\n\nTo add a nonce for scripts and links manually included in `src/app.html`, you may use the placeholder `%sveltekit.nonce%` (for example `<script nonce=\"%sveltekit.nonce%\">`).\n\nWhen pages are prerendered, the CSP header is added via a `<meta http-equiv>` tag (note that in this case, `frame-ancestors`, `report-uri` and `sandbox` directives will be ignored).\n\n> [!NOTE] When `mode` is `'auto'`, SvelteKit will use nonces for dynamically rendered pages and hashes for prerendered pages. Using nonces with prerendered pages is insecure and therefore forbidden.\n\n> [!NOTE] Note that most [Svelte transitions](/tutorial/svelte/transition) work by creating an inline `<style>` element. If you use these in your app, you must either leave the `style-src` directive unspecified or add `unsafe-inline`.\n\nIf this level of configuration is insufficient and you have more dynamic requirements, you can use the [`handle` hook](/docs/kit/hooks#Server-hooks-handle) to roll your own CSP.\n\n<div class=\"ts-block-property-children\">\n\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\nmode?: 'hash' | 'nonce' | 'auto';\n```\n\n<div class=\"ts-block-property-details\">\n\nWhether to use hashes or nonces to restrict `<script>` and `<style>` elements. `'auto'` will use hashes for prerendered pages, and nonces for dynamically rendered pages.\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\ndirectives?: CspDirectives;\n```\n\n<div class=\"ts-block-property-details\">\n\nDirectives that will be added to `Content-Security-Policy` headers.\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\nreportOnly?: CspDirectives;\n```\n\n<div class=\"ts-block-property-details\">\n\nDirectives that will be added to `Content-Security-Policy-Report-Only` headers.\n\n</div>\n</div>\n\n</div>\n\n## csrf\n\n<div class=\"ts-block-property-bullets\">\n\n\n\n</div>\n\nProtection against [cross-site request forgery (CSRF)](https://owasp.org/www-community/attacks/csrf) attacks.\n\n<div class=\"ts-block-property-children\">\n\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\ncheckOrigin?: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `true`\n- <span class=\"tag deprecated\">deprecated</span> Use `trustedOrigins: ['*']` instead\n\n</div>\n\nWhether to check the incoming `origin` header for `POST`, `PUT`, `PATCH`, or `DELETE` form submissions and verify that it matches the server's origin.\n\nTo allow people to make `POST`, `PUT`, `PATCH`, or `DELETE` requests with a `Content-Type` of `application/x-www-form-urlencoded`, `multipart/form-data`, or `text/plain` to your app from other origins, you will need to disable this option. Be careful!\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\ntrustedOrigins?: string[];\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `[]`\n\n</div>\n\nAn array of origins that are allowed to make cross-origin form submissions to your app.\n\nEach origin should be a complete origin including protocol (e.g., `https://payment-gateway.com`).\nThis is useful for allowing trusted third-party services like payment gateways or authentication providers to submit forms to your app.\n\nIf the array contains `'*'`, all origins will be trusted. This is generally not recommended!\n\n> [!NOTE] Only add origins you completely trust, as this bypasses CSRF protection for those origins.\n\nCSRF checks only apply in production, not in local development.\n\n</div>\n</div>\n\n</div>\n\n## embedded\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `false`\n\n</div>\n\nWhether or not the app is embedded inside a larger app. If `true`, SvelteKit will add its event listeners related to navigation etc on the parent of `%sveltekit.body%` instead of `window`, and will pass `params` from the server rather than inferring them from `location.pathname`.\nNote that it is generally not supported to embed multiple SvelteKit apps on the same page and use client-side SvelteKit features within them (things such as pushing to the history state assume a single instance).\n\n<div class=\"ts-block-property-children\">\n\n\n\n</div>\n\n## env\n\n<div class=\"ts-block-property-bullets\">\n\n\n\n</div>\n\nEnvironment variable configuration\n\n<div class=\"ts-block-property-children\">\n\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\ndir?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\".\"`\n\n</div>\n\nThe directory to search for `.env` files.\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\npublicPrefix?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\"PUBLIC_\"`\n\n</div>\n\nA prefix that signals that an environment variable is safe to expose to client-side code. See [`$env/static/public`](/docs/kit/$env-static-public) and [`$env/dynamic/public`](/docs/kit/$env-dynamic-public). Note that Vite's [`envPrefix`](https://vitejs.dev/config/shared-options.html#envprefix) must be set separately if you are using Vite's environment variable handling - though use of that feature should generally be unnecessary.\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\nprivatePrefix?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\"\"`\n- <span class=\"tag since\">available since</span> v1.21.0\n\n</div>\n\nA prefix that signals that an environment variable is unsafe to expose to client-side code. Environment variables matching neither the public nor the private prefix will be discarded completely. See [`$env/static/private`](/docs/kit/$env-static-private) and [`$env/dynamic/private`](/docs/kit/$env-dynamic-private).\n\n</div>\n</div>\n\n</div>\n\n## experimental\n\n<div class=\"ts-block-property-bullets\">\n\n\n\n</div>\n\nExperimental features. Here be dragons. These are not subject to semantic versioning, so breaking changes or removal can happen in any release.\n\n<div class=\"ts-block-property-children\">\n\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\ntracing?: {/*…*/}\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `{ server: false, serverFile: false }`\n- <span class=\"tag since\">available since</span> v2.31.0\n\n</div>\n\nOptions for enabling server-side [OpenTelemetry](https://opentelemetry.io/) tracing for SvelteKit operations including the [`handle` hook](/docs/kit/hooks#Server-hooks-handle), [`load` functions](/docs/kit/load), [form actions](/docs/kit/form-actions), and [remote functions](/docs/kit/remote-functions).\n\n<div class=\"ts-block-property-children\"><div class=\"ts-block-property\">\n\n```ts\n// @noErrors\nserver?: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `false`\n- <span class=\"tag since\">available since</span> v2.31.0\n\n</div>\n\nEnables server-side [OpenTelemetry](https://opentelemetry.io/) span emission for SvelteKit operations including the [`handle` hook](/docs/kit/hooks#Server-hooks-handle), [`load` functions](/docs/kit/load), [form actions](/docs/kit/form-actions), and [remote functions](/docs/kit/remote-functions).\n\n</div>\n</div></div>\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\ninstrumentation?: {/*…*/}\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag since\">available since</span> v2.31.0\n\n</div>\n\n<div class=\"ts-block-property-children\"><div class=\"ts-block-property\">\n\n```ts\n// @noErrors\nserver?: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `false`\n- <span class=\"tag since\">available since</span> v2.31.0\n\n</div>\n\nEnables `instrumentation.server.js` for tracing and observability instrumentation.\n\n</div>\n</div></div>\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\nremoteFunctions?: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `false`\n\n</div>\n\nWhether to enable the experimental remote functions feature. This feature is not yet stable and may be changed or removed at any time.\n\n</div>\n</div>\n\n</div>\n\n## files\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag deprecated\">deprecated</span> \n\n</div>\n\nWhere to find various files within your project.\n\n<div class=\"ts-block-property-children\">\n\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\nsrc?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag deprecated\">deprecated</span> \n- <span class=\"tag\">default</span> `\"src\"`\n- <span class=\"tag since\">available since</span> v2.28\n\n</div>\n\nthe location of your source code\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\nassets?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag deprecated\">deprecated</span> \n- <span class=\"tag\">default</span> `\"static\"`\n\n</div>\n\na place to put static files that should have stable URLs and undergo no processing, such as `favicon.ico` or `manifest.json`\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\nhooks?: {/*…*/}\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-children\"><div class=\"ts-block-property\">\n\n```ts\n// @noErrors\nclient?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag deprecated\">deprecated</span> \n- <span class=\"tag\">default</span> `\"src/hooks.client\"`\n\n</div>\n\nThe location of your client [hooks](/docs/kit/hooks).\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\nserver?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag deprecated\">deprecated</span> \n- <span class=\"tag\">default</span> `\"src/hooks.server\"`\n\n</div>\n\nThe location of your server [hooks](/docs/kit/hooks).\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\nuniversal?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag deprecated\">deprecated</span> \n- <span class=\"tag\">default</span> `\"src/hooks\"`\n- <span class=\"tag since\">available since</span> v2.3.0\n\n</div>\n\nThe location of your universal [hooks](/docs/kit/hooks).\n\n</div>\n</div></div>\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\nlib?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag deprecated\">deprecated</span> \n- <span class=\"tag\">default</span> `\"src/lib\"`\n\n</div>\n\nyour app's internal library, accessible throughout the codebase as `$lib`\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\nparams?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag deprecated\">deprecated</span> \n- <span class=\"tag\">default</span> `\"src/params\"`\n\n</div>\n\na directory containing [parameter matchers](/docs/kit/advanced-routing#Matching)\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\nroutes?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag deprecated\">deprecated</span> \n- <span class=\"tag\">default</span> `\"src/routes\"`\n\n</div>\n\nthe files that define the structure of your app (see [Routing](/docs/kit/routing))\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\nserviceWorker?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag deprecated\">deprecated</span> \n- <span class=\"tag\">default</span> `\"src/service-worker\"`\n\n</div>\n\nthe location of your service worker's entry point (see [Service workers](/docs/kit/service-workers))\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\nappTemplate?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag deprecated\">deprecated</span> \n- <span class=\"tag\">default</span> `\"src/app.html\"`\n\n</div>\n\nthe location of the template for HTML responses\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\nerrorTemplate?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag deprecated\">deprecated</span> \n- <span class=\"tag\">default</span> `\"src/error.html\"`\n\n</div>\n\nthe location of the template for fallback error responses\n\n</div>\n</div>\n\n</div>\n\n## inlineStyleThreshold\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `0`\n\n</div>\n\nInline CSS inside a `<style>` block at the head of the HTML. This option is a number that specifies the maximum length of a CSS file in UTF-16 code units, as specified by the [String.length](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length) property, to be inlined. All CSS files needed for the page that are smaller than this value are merged and inlined in a `<style>` block.\n\n> [!NOTE] This results in fewer initial requests and can improve your [First Contentful Paint](https://web.dev/first-contentful-paint) score. However, it generates larger HTML output and reduces the effectiveness of browser caches. Use it advisedly.\n\n<div class=\"ts-block-property-children\">\n\n\n\n</div>\n\n## moduleExtensions\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `[\".js\", \".ts\"]`\n\n</div>\n\nAn array of file extensions that SvelteKit will treat as modules. Files with extensions that match neither `config.extensions` nor `config.kit.moduleExtensions` will be ignored by the router.\n\n<div class=\"ts-block-property-children\">\n\n\n\n</div>\n\n## outDir\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\".svelte-kit\"`\n\n</div>\n\nThe directory that SvelteKit writes files to during `dev` and `build`. You should exclude this directory from version control.\n\n<div class=\"ts-block-property-children\">\n\n\n\n</div>\n\n## output\n\n<div class=\"ts-block-property-bullets\">\n\n\n\n</div>\n\nOptions related to the build output format\n\n<div class=\"ts-block-property-children\">\n\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\npreloadStrategy?: 'modulepreload' | 'preload-js' | 'preload-mjs';\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\"modulepreload\"`\n- <span class=\"tag since\">available since</span> v1.8.4\n\n</div>\n\nSvelteKit will preload the JavaScript modules needed for the initial page to avoid import 'waterfalls', resulting in faster application startup. There\nare three strategies with different trade-offs:\n- `modulepreload` - uses `<link rel=\"modulepreload\">`. This delivers the best results in Chromium-based browsers, in Firefox 115+, and Safari 17+. It is ignored in older browsers.\n- `preload-js` - uses `<link rel=\"preload\">`. Prevents waterfalls in Chromium and Safari, but Chromium will parse each module twice (once as a script, once as a module). Causes modules to be requested twice in Firefox. This is a good setting if you want to maximise performance for users on iOS devices at the cost of a very slight degradation for Chromium users.\n- `preload-mjs` - uses `<link rel=\"preload\">` but with the `.mjs` extension which prevents double-parsing in Chromium. Some static webservers will fail to serve .mjs files with a `Content-Type: application/javascript` header, which will cause your application to break. If that doesn't apply to you, this is the option that will deliver the best performance for the largest number of users, until `modulepreload` is more widely supported.\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\nbundleStrategy?: 'split' | 'single' | 'inline';\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `'split'`\n- <span class=\"tag since\">available since</span> v2.13.0\n\n</div>\n\nThe bundle strategy option affects how your app's JavaScript and CSS files are loaded.\n- If `'split'`, splits the app up into multiple .js/.css files so that they are loaded lazily as the user navigates around the app. This is the default, and is recommended for most scenarios.\n- If `'single'`, creates just one .js bundle and one .css file containing code for the entire app.\n- If `'inline'`, inlines all JavaScript and CSS of the entire app into the HTML. The result is usable without a server (i.e. you can just open the file in your browser).\n\nWhen using `'split'`, you can also adjust the bundling behaviour by setting [`output.experimentalMinChunkSize`](https://rollupjs.org/configuration-options/#output-experimentalminchunksize) and [`output.manualChunks`](https://rollupjs.org/configuration-options/#output-manualchunks) inside your Vite config's [`build.rollupOptions`](https://vite.dev/config/build-options.html#build-rollupoptions).\n\nIf you want to inline your assets, you'll need to set Vite's [`build.assetsInlineLimit`](https://vite.dev/config/build-options.html#build-assetsinlinelimit) option to an appropriate size then import your assets through Vite.\n\n```js\n// @errors: 7031\n/// file: vite.config.js\nimport { sveltekit } from '@sveltejs/kit/vite';\nimport { defineConfig } from 'vite';\n\nexport default defineConfig({\n\tplugins: [sveltekit()],\n\tbuild: {\n\t\t// inline all imported assets\n\t\tassetsInlineLimit: Infinity\n\t}\n});\n```\n\n```svelte\n/// file: src/routes/+layout.svelte\n<script>\n\t// import the asset through Vite\n\timport favicon from './favicon.png';\n</script>\n\n<svelte:head>\n\t<!-- this asset will be inlined as a base64 URL -->\n\t<link rel=\"icon\" href={favicon} />\n</svelte:head>\n```\n\n</div>\n</div>\n\n</div>\n\n## paths\n\n<div class=\"ts-block-property-bullets\">\n\n\n\n</div>\n\n\n\n<div class=\"ts-block-property-children\">\n\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\nassets?: '' | `http://${string}` | `https://${string}`;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\"\"`\n\n</div>\n\nAn absolute path that your app's files are served from. This is useful if your files are served from a storage bucket of some kind.\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\nbase?: '' | `/${string}`;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\"\"`\n\n</div>\n\nA root-relative path that must start, but not end with `/` (e.g. `/base-path`), unless it is the empty string. This specifies where your app is served from and allows the app to live on a non-root path. Note that you need to prepend all your root-relative links with the base value or they will point to the root of your domain, not your `base` (this is how the browser works). You can use [`base` from `$app/paths`](/docs/kit/$app-paths#base) for that: `<a href=\"{base}/your-page\">Link</a>`. If you find yourself writing this often, it may make sense to extract this into a reusable component.\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\nrelative?: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `true`\n- <span class=\"tag since\">available since</span> v1.9.0\n\n</div>\n\nWhether to use relative asset paths.\n\nIf `true`, `base` and `assets` imported from `$app/paths` will be replaced with relative asset paths during server-side rendering, resulting in more portable HTML.\nIf `false`, `%sveltekit.assets%` and references to build artifacts will always be root-relative paths, unless `paths.assets` is an external URL\n\n[Single-page app](/docs/kit/single-page-apps) fallback pages will always use absolute paths, regardless of this setting.\n\nIf your app uses a `<base>` element, you should set this to `false`, otherwise asset URLs will incorrectly be resolved against the `<base>` URL rather than the current page.\n\nIn 1.0, `undefined` was a valid value, which was set by default. In that case, if `paths.assets` was not external, SvelteKit would replace `%sveltekit.assets%` with a relative path and use relative paths to reference build artifacts, but `base` and `assets` imported from `$app/paths` would be as specified in your config.\n\n</div>\n</div>\n\n</div>\n\n## prerender\n\n<div class=\"ts-block-property-bullets\">\n\n\n\n</div>\n\nSee [Prerendering](/docs/kit/page-options#prerender).\n\n<div class=\"ts-block-property-children\">\n\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\nconcurrency?: number;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `1`\n\n</div>\n\nHow many pages can be prerendered simultaneously. JS is single-threaded, but in cases where prerendering performance is network-bound (for example loading content from a remote CMS) this can speed things up by processing other tasks while waiting on the network response.\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\ncrawl?: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `true`\n\n</div>\n\nWhether SvelteKit should find pages to prerender by following links from `entries`.\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\nentries?: Array<'*' | `/${string}`>;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `[\"*\"]`\n\n</div>\n\nAn array of pages to prerender, or start crawling from (if `crawl: true`). The `*` string includes all routes containing no required `[parameters]`  with optional parameters included as being empty (since SvelteKit doesn't know what value any parameters should have).\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\nhandleHttpError?: PrerenderHttpErrorHandlerValue;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\"fail\"`\n- <span class=\"tag since\">available since</span> v1.15.7\n\n</div>\n\nHow to respond to HTTP errors encountered while prerendering the app.\n\n- `'fail'` — fail the build\n- `'ignore'` - silently ignore the failure and continue\n- `'warn'` — continue, but print a warning\n- `(details) => void` — a custom error handler that takes a `details` object with `status`, `path`, `referrer`, `referenceType` and `message` properties. If you `throw` from this function, the build will fail\n\n```js\n// @errors: 7031\n/// file: svelte.config.js\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tprerender: {\n\t\t\thandleHttpError: ({ path, referrer, message }) => {\n\t\t\t\t// ignore deliberate link to shiny 404 page\n\t\t\t\tif (path === '/not-found' && referrer === '/blog/how-we-built-our-404-page') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// otherwise fail the build\n\t\t\t\tthrow new Error(message);\n\t\t\t}\n\t\t}\n\t}\n};\n```\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\nhandleMissingId?: PrerenderMissingIdHandlerValue;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\"fail\"`\n- <span class=\"tag since\">available since</span> v1.15.7\n\n</div>\n\nHow to respond when hash links from one prerendered page to another don't correspond to an `id` on the destination page.\n\n- `'fail'` — fail the build\n- `'ignore'` - silently ignore the failure and continue\n- `'warn'` — continue, but print a warning\n- `(details) => void` — a custom error handler that takes a `details` object with `path`, `id`, `referrers` and `message` properties. If you `throw` from this function, the build will fail\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\nhandleEntryGeneratorMismatch?: PrerenderEntryGeneratorMismatchHandlerValue;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\"fail\"`\n- <span class=\"tag since\">available since</span> v1.16.0\n\n</div>\n\nHow to respond when an entry generated by the `entries` export doesn't match the route it was generated from.\n\n- `'fail'` — fail the build\n- `'ignore'` - silently ignore the failure and continue\n- `'warn'` — continue, but print a warning\n- `(details) => void` — a custom error handler that takes a `details` object with `generatedFromId`, `entry`, `matchedId` and `message` properties. If you `throw` from this function, the build will fail\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\nhandleUnseenRoutes?: PrerenderUnseenRoutesHandlerValue;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\"fail\"`\n- <span class=\"tag since\">available since</span> v2.16.0\n\n</div>\n\nHow to respond when a route is marked as prerenderable but has not been prerendered.\n\n- `'fail'` — fail the build\n- `'ignore'` - silently ignore the failure and continue\n- `'warn'` — continue, but print a warning\n- `(details) => void` — a custom error handler that takes a `details` object with a `routes` property which contains all routes that haven't been prerendered. If you `throw` from this function, the build will fail\n\nThe default behavior is to fail the build. This may be undesirable when you know that some of your routes may never be reached under certain\ncircumstances such as a CMS not returning data for a specific area, resulting in certain routes never being reached.\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\norigin?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\"http://sveltekit-prerender\"`\n\n</div>\n\nThe value of `url.origin` during prerendering; useful if it is included in rendered content.\n\n</div>\n</div>\n\n</div>\n\n## router\n\n<div class=\"ts-block-property-bullets\">\n\n\n\n</div>\n\n\n\n<div class=\"ts-block-property-children\">\n\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\ntype?: 'pathname' | 'hash';\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\"pathname\"`\n- <span class=\"tag since\">available since</span> v2.14.0\n\n</div>\n\nWhat type of client-side router to use.\n- `'pathname'` is the default and means the current URL pathname determines the route\n- `'hash'` means the route is determined by `location.hash`. In this case, SSR and prerendering are disabled. This is only recommended if `pathname` is not an option, for example because you don't control the webserver where your app is deployed.\n\tIt comes with some caveats: you can't use server-side rendering (or indeed any server logic), and you have to make sure that the links in your app all start with #/, or they won't work. Beyond that, everything works exactly like a normal SvelteKit app.\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\nresolution?: 'client' | 'server';\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `\"client\"`\n- <span class=\"tag since\">available since</span> v2.17.0\n\n</div>\n\nHow to determine which route to load when navigating to a new page.\n\nBy default, SvelteKit will serve a route manifest to the browser.\nWhen navigating, this manifest is used (along with the `reroute` hook, if it exists) to determine which components to load and which `load` functions to run.\nBecause everything happens on the client, this decision can be made immediately. The drawback is that the manifest needs to be\nloaded and parsed before the first navigation can happen, which may have an impact if your app contains many routes.\n\nAlternatively, SvelteKit can determine the route on the server. This means that for every navigation to a path that has not yet been visited, the server will be asked to determine the route.\nThis has several advantages:\n- The client does not need to load the routing manifest upfront, which can lead to faster initial page loads\n- The list of routes is hidden from public view\n- The server has an opportunity to intercept each navigation (for example through a middleware), enabling (for example) A/B testing opaque to SvelteKit\n\nThe drawback is that for unvisited paths, resolution will take slightly longer (though this is mitigated by [preloading](/docs/kit/link-options#data-sveltekit-preload-data)).\n\n> [!NOTE] When using server-side route resolution and prerendering, the resolution is prerendered along with the route itself.\n\n</div>\n</div>\n\n</div>\n\n## serviceWorker\n\n<div class=\"ts-block-property-bullets\">\n\n\n\n</div>\n\n\n\n<div class=\"ts-block-property-children\">\n\n\n\n</div>\n\n## typescript\n\n<div class=\"ts-block-property-bullets\">\n\n\n\n</div>\n\n\n\n<div class=\"ts-block-property-children\">\n\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\nconfig?: (config: Record<string, any>) => Record<string, any> | void;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `(config) => config`\n- <span class=\"tag since\">available since</span> v1.3.0\n\n</div>\n\nA function that allows you to edit the generated `tsconfig.json`. You can mutate the config (recommended) or return a new one.\nThis is useful for extending a shared `tsconfig.json` in a monorepo root, for example.\n\nNote that any paths configured here should be relative to the generated config file, which is written to `.svelte-kit/tsconfig.json`.\n\n</div>\n</div>\n\n</div>\n\n## version\n\n<div class=\"ts-block-property-bullets\">\n\n\n\n</div>\n\nClient-side navigation can be buggy if you deploy a new version of your app while people are using it. If the code for the new page is already loaded, it may have stale content; if it isn't, the app's route manifest may point to a JavaScript file that no longer exists.\nSvelteKit helps you solve this problem through version management.\nIf SvelteKit encounters an error while loading the page and detects that a new version has been deployed (using the `name` specified here, which defaults to a timestamp of the build) it will fall back to traditional full-page navigation.\nNot all navigations will result in an error though, for example if the JavaScript for the next page is already loaded. If you still want to force a full-page navigation in these cases, use techniques such as setting the `pollInterval` and then using `beforeNavigate`:\n```html\n/// file: +layout.svelte\n<script>\n\timport { beforeNavigate } from '$app/navigation';\n\timport { updated } from '$app/state';\n\n\tbeforeNavigate(({ willUnload, to }) => {\n\t\tif (updated.current && !willUnload && to?.url) {\n\t\t\tlocation.href = to.url.href;\n\t\t}\n\t});\n</script>\n```\n\nIf you set `pollInterval` to a non-zero value, SvelteKit will poll for new versions in the background and set the value of [`updated.current`](/docs/kit/$app-state#updated) `true` when it detects one.\n\n<div class=\"ts-block-property-children\">\n\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\nname?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe current app version string. If specified, this must be deterministic (e.g. a commit ref rather than `Math.random()` or `Date.now().toString()`), otherwise defaults to a timestamp of the build.\n\nFor example, to use the current commit hash, you could do use `git rev-parse HEAD`:\n\n```js\n// @errors: 7031\n/// file: svelte.config.js\nimport * as child_process from 'node:child_process';\n\nexport default {\n\tkit: {\n\t\tversion: {\n\t\t\tname: child_process.execSync('git rev-parse HEAD').toString().trim()\n\t\t}\n\t}\n};\n```\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```ts\n// @noErrors\npollInterval?: number;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `0`\n\n</div>\n\nThe interval in milliseconds to poll for version changes. If this is `0`, no polling occurs.\n\n</div>\n</div>\n\n</div>",
    "kit/cli": "SvelteKit projects use [Vite](https://vitejs.dev), meaning you'll mostly use its CLI (albeit via `npm run dev/build/preview` scripts):\n\n- `vite dev` — start a development server\n- `vite build` — build a production version of your app\n- `vite preview` — run the production version locally\n\nHowever SvelteKit includes its own CLI for initialising your project:\n\n## svelte-kit sync\n\n`svelte-kit sync` creates the `tsconfig.json` and all generated types (which you can import as `./$types` inside routing files) for your project. When you create a new project, it is listed as the `prepare` script and will be run automatically as part of the npm lifecycle, so you should not ordinarily have to run this command.",
    "kit/types": "## Generated types\n\nThe `RequestHandler` and `Load` types both accept a `Params` argument allowing you to type the `params` object. For example this endpoint expects `foo`, `bar` and `baz` params:\n\n```js\n/// file: src/routes/[foo]/[bar]/[baz]/+server.js\n// @errors: 2355 2322 1360\n/** @type {import('@sveltejs/kit').RequestHandler<{\n    foo: string;\n    bar: string;\n    baz: string\n  }>} */\nexport async function GET({ params }) {\n\t// ...\n}\n```\n\nNeedless to say, this is cumbersome to write out, and less portable (if you were to rename the `[foo]` directory to `[qux]`, the type would no longer reflect reality).\n\nTo solve this problem, SvelteKit generates `.d.ts` files for each of your endpoints and pages:\n\n```ts\n/// file: .svelte-kit/types/src/routes/[foo]/[bar]/[baz]/$types.d.ts\n/// link: true\nimport type * as Kit from '@sveltejs/kit';\n\ntype RouteParams = {\n\tfoo: string;\n\tbar: string;\n\tbaz: string;\n};\n\nexport type RequestHandler = Kit.RequestHandler<RouteParams>;\nexport type PageLoad = Kit.Load<RouteParams>;\n```\n\nThese files can be imported into your endpoints and pages as siblings, thanks to the [`rootDirs`](https://www.typescriptlang.org/tsconfig#rootDirs) option in your TypeScript configuration:\n\n```js\n/// file: src/routes/[foo]/[bar]/[baz]/+server.js\n// @filename: $types.d.ts\nimport type * as Kit from '@sveltejs/kit';\n\ntype RouteParams = {\n\tfoo: string;\n\tbar: string;\n\tbaz: string;\n}\n\nexport type RequestHandler = Kit.RequestHandler<RouteParams>;\n\n// @filename: index.js\n// @errors: 2355 2322\n// ---cut---\n/** @type {import('./$types').RequestHandler} */\nexport async function GET({ params }) {\n\t// ...\n}\n```\n\n```js\n/// file: src/routes/[foo]/[bar]/[baz]/+page.js\n// @filename: $types.d.ts\nimport type * as Kit from '@sveltejs/kit';\n\ntype RouteParams = {\n\tfoo: string;\n\tbar: string;\n\tbaz: string;\n}\n\nexport type PageLoad = Kit.Load<RouteParams>;\n\n// @filename: index.js\n// @errors: 2355\n// ---cut---\n/** @type {import('./$types').PageLoad} */\nexport async function load({ params, fetch }) {\n\t// ...\n}\n```\n\nThe return types of the load functions are then available through the `$types` module as `PageData` and `LayoutData` respectively, while the union of the return values of all `Actions` is available as `ActionData`.\n\nStarting with version 2.16.0, two additional helper types are provided: `PageProps` defines `data: PageData`, as well as `form: ActionData`, when there are actions defined, while `LayoutProps` defines `data: LayoutData`, as well as `children: Snippet`.\n\n```svelte\n<!--- file: src/routes/+page.svelte --->\n<script>\n\t/** @type {import('./$types').PageProps} */\n\tlet { data, form } = $props();\n</script>\n```\n\n> [!LEGACY]\n> Before 2.16.0:\n> ```svelte\n> <!--- file: src/routes/+page.svelte --->\n> <script>\n> \t/** @type {{ data: import('./$types').PageData, form: import('./$types').ActionData }} */\n> \tlet { data, form } = $props();\n> </script>\n> ```\n>\n> Using Svelte 4:\n> ```svelte\n> <!--- file: src/routes/+page.svelte --->\n> <script>\n>   /** @type {import('./$types').PageData} */\n>   export let data;\n>   /** @type {import('./$types').ActionData} */\n>   export let form;\n> </script>\n> ```\n\n> [!NOTE] For this to work, your own `tsconfig.json` or `jsconfig.json` should extend from the generated `.svelte-kit/tsconfig.json` (where `.svelte-kit` is your [`outDir`](configuration#outDir)):\n>\n> `{ \"extends\": \"./.svelte-kit/tsconfig.json\" }`\n\n### Default tsconfig.json\n\nThe generated `.svelte-kit/tsconfig.json` file contains a mixture of options. Some are generated programmatically based on your project configuration, and should generally not be overridden without good reason:\n\n```json\n/// file: .svelte-kit/tsconfig.json\n{\n\t\"compilerOptions\": {\n\t\t\"paths\": {\n\t\t\t\"$lib\": [\"../src/lib\"],\n\t\t\t\"$lib/*\": [\"../src/lib/*\"]\n\t\t},\n\t\t\"rootDirs\": [\"..\", \"./types\"]\n\t},\n\t\"include\": [\n\t\t\"ambient.d.ts\",\n\t\t\"non-ambient.d.ts\",\n\t\t\"./types/**/$types.d.ts\",\n\t\t\"../vite.config.js\",\n\t\t\"../vite.config.ts\",\n\t\t\"../src/**/*.js\",\n\t\t\"../src/**/*.ts\",\n\t\t\"../src/**/*.svelte\",\n\t\t\"../tests/**/*.js\",\n\t\t\"../tests/**/*.ts\",\n\t\t\"../tests/**/*.svelte\"\n\t],\n\t\"exclude\": [\n\t\t\"../node_modules/**\",\n\t\t\"../src/service-worker.js\",\n\t\t\"../src/service-worker/**/*.js\",\n\t\t\"../src/service-worker.ts\",\n\t\t\"../src/service-worker/**/*.ts\",\n\t\t\"../src/service-worker.d.ts\",\n\t\t\"../src/service-worker/**/*.d.ts\"\n\t]\n}\n```\n\nOthers are required for SvelteKit to work properly, and should also be left untouched unless you know what you're doing:\n\n```json\n/// file: .svelte-kit/tsconfig.json\n{\n\t\"compilerOptions\": {\n\t\t// this ensures that types are explicitly\n\t\t// imported with `import type`, which is\n\t\t// necessary as Svelte/Vite cannot\n\t\t// otherwise compile components correctly\n\t\t\"verbatimModuleSyntax\": true,\n\n\t\t// Vite compiles one TypeScript module\n\t\t// at a time, rather than compiling\n\t\t// the entire module graph\n\t\t\"isolatedModules\": true,\n\n\t\t// Tell TS it's used only for type-checking\n\t\t\"noEmit\": true,\n\n\t\t// This ensures both `vite build`\n\t\t// and `svelte-package` work correctly\n\t\t\"lib\": [\"esnext\", \"DOM\", \"DOM.Iterable\"],\n\t\t\"moduleResolution\": \"bundler\",\n\t\t\"module\": \"esnext\",\n\t\t\"target\": \"esnext\"\n\t}\n}\n```\n\nUse the [`typescript.config` setting](configuration#typescript) in `svelte.config.js` to extend or modify the generated `tsconfig.json`.\n\n## $lib\n\nThis is a simple alias to `src/lib`, or whatever directory is specified as [`config.kit.files.lib`](configuration#files). It allows you to access common components and utility modules without `../../../../` nonsense.\n\n### $lib/server\n\nA subdirectory of `$lib`. SvelteKit will prevent you from importing any modules in `$lib/server` into client-side code. See [server-only modules](server-only-modules).\n\n## app.d.ts\n\nThe `app.d.ts` file is home to the ambient types of your apps, i.e. types that are available without explicitly importing them.\n\nAlways part of this file is the `App` namespace. This namespace contains several types that influence the shape of certain SvelteKit features you interact with.\n\n## Error\n\nDefines the common shape of expected and unexpected errors. Expected errors are thrown using the `error` function. Unexpected errors are handled by the `handleError` hooks which should return this shape.\n\n<div class=\"ts-block\">\n\n```dts\ninterface Error {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nmessage: string;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n## Locals\n\nThe interface that defines `event.locals`, which can be accessed in server [hooks](/docs/kit/hooks) (`handle`, and `handleError`), server-only `load` functions, and `+server.js` files.\n\n<div class=\"ts-block\">\n\n```dts\ninterface Locals {}\n```\n\n</div>\n\n## PageData\n\nDefines the common shape of the [page.data state](/docs/kit/$app-state#page) and [$page.data store](/docs/kit/$app-stores#page) - that is, the data that is shared between all pages.\nThe `Load` and `ServerLoad` functions in `./$types` will be narrowed accordingly.\nUse optional properties for data that is only present on specific pages. Do not add an index signature (`[key: string]: any`).\n\n<div class=\"ts-block\">\n\n```dts\ninterface PageData {}\n```\n\n</div>\n\n## PageState\n\nThe shape of the `page.state` object, which can be manipulated using the [`pushState`](/docs/kit/$app-navigation#pushState) and [`replaceState`](/docs/kit/$app-navigation#replaceState) functions from `$app/navigation`.\n\n<div class=\"ts-block\">\n\n```dts\ninterface PageState {}\n```\n\n</div>\n\n## Platform\n\nIf your adapter provides [platform-specific context](/docs/kit/adapters#Platform-specific-context) via `event.platform`, you can specify it here.\n\n<div class=\"ts-block\">\n\n```dts\ninterface Platform {}\n```\n\n</div>",
    "mcp/overview": "The Svelte MCP ([Model Context Protocol](https://modelcontextprotocol.io/docs/getting-started/intro)) server can help your LLM or agent of choice write better Svelte code. It works by providing documentation relevant to the task at hand, and statically analysing generated code so that it can suggest fixes and best practices.\n\n## Setup\n\nThe setup varies based on the version of the MCP you prefer — remote or local — and your chosen MCP client (e.g. Claude Code, Codex CLI or GitHub Copilot):\n\n- [local setup](local-setup) using `@sveltejs/mcp`\n- [remote setup](remote-setup) using `https://mcp.svelte.dev/mcp`\n\n## Usage\n\nTo get the most out of the MCP server we recommend including the following prompt in your [`AGENTS.md`](https://agents.md) (or [`CLAUDE.md`](https://docs.claude.com/en/docs/claude-code/memory#claude-md-imports), if using Claude Code). This will tell the LLM which tools are available and when it's appropriate to use them.\n\n```md\nYou are able to use the Svelte MCP server, where you have access to comprehensive Svelte 5 and SvelteKit documentation. Here's how to use the available tools effectively:\n\n## Available MCP Tools:\n\n### 1. list-sections\n\nUse this FIRST to discover all available documentation sections. Returns a structured list with titles, use_cases, and paths.\nWhen asked about Svelte or SvelteKit topics, ALWAYS use this tool at the start of the chat to find relevant sections.\n\n### 2. get-documentation\n\nRetrieves full documentation content for specific sections. Accepts single or multiple sections.\nAfter calling the list-sections tool, you MUST analyze the returned documentation sections (especially the use_cases field) and then use the get-documentation tool to fetch ALL documentation sections that are relevant for the user's task.\n\n### 3. svelte-autofixer\n\nAnalyzes Svelte code and returns issues and suggestions.\nYou MUST use this tool whenever writing Svelte code before sending it to the user. Keep calling it until no issues or suggestions are returned.\n\n### 4. playground-link\n\nGenerates a Svelte Playground link with the provided code.\nAfter completing the code, ask the user if they want a playground link. Only call this tool after user confirmation and NEVER if code was written to files in their project.\n```\n\nIf your MCP client supports it, we also recommend using the [svelte-task](prompts#svelte-task) prompt to instruct the LLM on the best way to use the MCP server.",
    "mcp/local-setup": "The local (or stdio) version of the MCP server is available via the [`@sveltejs/mcp`](https://www.npmjs.com/package/@sveltejs/mcp) npm package. You can either install it globally and then reference it in your configuration or run it with `npx`:\n\n```bash\nnpx -y @sveltejs/mcp\n```\n\nHere's how to set it up in some common MCP clients:\n\n## Claude Code\n\nTo include the local MCP version in Claude Code, simply run the following command:\n\n```bash\nclaude mcp add -t stdio -s [scope] svelte -- npx -y @sveltejs/mcp\n```\n\nThe `[scope]` must be `user`, `project` or `local`.\n\n## Claude Desktop\n\nIn the Settings > Developer section, click on Edit Config. It will open the folder with a `claude_desktop_config.json` file in it. Edit the file to include the following configuration:\n\n```json\n{\n\t\"mcpServers\": {\n\t\t\"svelte\": {\n\t\t\t\"command\": \"npx\",\n\t\t\t\"args\": [\"-y\", \"@sveltejs/mcp\"]\n\t\t}\n\t}\n}\n```\n\n## Codex CLI\n\nAdd the following to your `config.toml` (which defaults to `~/.codex/config.toml`, but refer to [the configuration documentation](https://github.com/openai/codex/blob/main/docs/config.md) for more advanced setups):\n\n```toml\n[mcp_servers.svelte]\ncommand = \"npx\"\nargs = [\"-y\", \"@sveltejs/mcp\"]\n```\n\n## Gemini CLI\n\nTo include the local MCP version in Gemini CLI, simply run the following command:\n\n```bash\ngemini mcp add -t stdio -s [scope] svelte npx -y @sveltejs/mcp\n```\n\nThe `[scope]` must be `user`, `project` or `local`.\n\n## OpenCode\n\nRun the command:\n\n```bash\nopencode mcp add\n```\n\nand follow the instructions, selecting 'Local' under the 'Select MCP server type' prompt:\n\n```bash\nopencode mcp add\n\n┌  Add MCP server\n│\n◇  Enter MCP server name\n│  svelte\n│\n◇  Select MCP server type\n│  Local\n│\n◆  Enter command to run\n│  npx -y @sveltejs/mcp\n```\n\n## VS Code\n\n- Open the command palette\n- Select \"MCP: Add Server...\"\n- Select \"Command (stdio)\"\n- Insert `npx -y @sveltejs/mcp` in the input and press `Enter`\n- When prompted for a name, insert `svelte`\n- Select if you want to add it as a `Global` or `Workspace` MCP server\n\n## Cursor\n\n- Open the command palette\n- Select \"View: Open MCP Settings\"\n- Click on \"Add custom MCP\"\n\nIt will open a file with your MCP servers where you can add the following configuration:\n\n```json\n{\n\t\"mcpServers\": {\n\t\t\"svelte\": {\n\t\t\t\"command\": \"npx\",\n\t\t\t\"args\": [\"-y\", \"@sveltejs/mcp\"]\n\t\t}\n\t}\n}\n```\n\n## Zed\n\n- Open the command palette\n- Search and select \"agent:open settings\"\n- In settings panel look for `Model Context Protocol (MCP) Servers`\n- Click on \"Add Server\"\n- Select: \"Add Custom Server\"\n\nIt will open a popup with MCP server config where you can add the following configuration:\n\n```json\n{\n\t\"svelte\": {\n\t\t\"command\": \"npx\",\n\t\t\"args\": [\"-y\", \"@sveltejs/mcp\"]\n\t}\n}\n```\n\n## Other clients\n\nIf we didn't include the MCP client you are using, refer to their documentation for `stdio` servers and use `npx` as the command and `-y @sveltejs/mcp` as the arguments.",
    "mcp/remote-setup": "The remote version of the MCP server is available at `https://mcp.svelte.dev/mcp`.\n\nHere's how to set it up in some common MCP clients:\n\n## Claude Code\n\nTo include the remote MCP version in Claude Code, simply run the following command:\n\n```bash\nclaude mcp add -t http -s [scope] svelte https://mcp.svelte.dev/mcp\n```\n\nYou can choose your preferred `scope` (it must be `user`, `project` or `local`) and `name`.\n\n## Claude Desktop\n\n- Open Settings > Connectors\n- Click on Add Custom Connector\n- When prompted for a name, enter `svelte`\n- Under the Remote MCP server URL input, use `https://mcp.svelte.dev/mcp`\n- Click Add\n\n## Codex CLI\n\nAdd the following to your `config.toml` (which defaults to `~/.codex/config.toml`, but refer to [the configuration documentation](https://github.com/openai/codex/blob/main/docs/config.md) for more advanced setups):\n\n```toml\nexperimental_use_rmcp_client = true\n[mcp_servers.svelte]\nurl = \"https://mcp.svelte.dev/mcp\"\n```\n\n## Gemini CLI\n\nTo use the remote MCP server with Gemini CLI, simply run the following command:\n\n```bash\ngemini mcp add -t http -s [scope] svelte https://mcp.svelte.dev/mcp\n```\n\nThe `[scope]` must be `user`, `project` or `local`.\n\n## OpenCode\n\nRun the command:\n\n```bash\nopencode mcp add\n```\n\nand follow the instructions, selecting 'Remote' under the 'Select MCP server type' prompt:\n\n```bash\nopencode mcp add\n\n┌  Add MCP server\n│\n◇  Enter MCP server name\n│  svelte\n│\n◇  Select MCP server type\n│  Remote\n│\n◇  Enter MCP server URL\n│  https://mcp.svelte.dev/mcp\n```\n\n## VS Code\n\n- Open the command palette\n- Select \"MCP: Add Server...\"\n- Select \"HTTP (HTTP or Server-Sent-Events)\"\n- Insert `https://mcp.svelte.dev/mcp` in the input and press `Enter`\n- Insert your preferred name\n- Select if you want to add it as a `Global` or `Workspace` MCP server\n\n## Cursor\n\n- Open the command palette\n- Select \"View: Open MCP Settings\"\n- Click on \"Add custom MCP\"\n\nIt will open a file with your MCP servers where you can add the following configuration:\n\n```json\n{\n\t\"mcpServers\": {\n\t\t\"svelte\": {\n\t\t\t\"url\": \"https://mcp.svelte.dev/mcp\"\n\t\t}\n\t}\n}\n```\n\n## Other clients\n\nIf we didn't include the MCP client you are using, refer to their documentation for `remote` servers and use `https://mcp.svelte.dev/mcp` as the URL.",
    "mcp/tools": "The following tools are provided by the MCP server to the model you are using, which can decide to call one or more of them during a session:\n\n## list-sections\n\nProvides a list of all the available documentation sections.\n\n## get-documentation\n\nAllows the model to get the full (and up-to-date) documentation for the requested sections directly from [svelte.dev/docs](/docs).\n\n## svelte-autofixer\n\nUses static analysis to provide suggestions for code that your LLM generates. It can be invoked in an agentic loop by your model until all issues and suggestions are resolved.\n\n## playground-link\n\nGenerates an ephemeral playground link with the generated code. It's useful when the generated code is not written to a file in your project and you want to quickly test the generated solution. The code is not stored anywhere except the URL itself (which will often, as a consequence, be quite large).",
    "mcp/resources": "This is the list of available resources provided by the MCP server. Resources are included by the user (not by the LLM) and are useful if you want to include specific knowledge in your session. For example, if you know that the component will need to use transitions you can include the transition documentation directly without asking the LLM to do it for you.\n\n## doc-section\n\nThis dynamic resource allows you to add every section of the Svelte documentation as a resource. The URI looks like this `svelte://slug-of-the-docs.md` and the returned resource will contain the `llms.txt` version of the specific page you selected.",
    "mcp/prompts": "This is the list of available prompts provided by the MCP server. Prompts are selected by the user and are sent as a user message. They can be useful to write repetitive instructions for the LLM on how to properly use the MCP server.\n\n## svelte-task\n\nThis prompt should be used whenever you are asking the model to work on a Svelte-related task. It will instruct the LLM which documentation sections are available, which tools to invoke, when to invoke them, and how to interpret the results.\n\n<details>\n\t<summary>Copy the prompt</summary>\n\n```md\nYou are a Svelte expert tasked to build components and utilities for Svelte developers. If you need documentation for anything related to Svelte you can invoke the tool `get_documentation` with one of the following paths:\n<available-docs>\n\n- title: Overview, use_cases: project setup, creating new svelte apps, scaffolding, cli tools, initializing projects, path: cli/overview\n- title: Frequently asked questions, use_cases: project setup, initializing new svelte projects, troubleshooting cli installation, package manager configuration, path: cli/faq\n- title: sv create, use_cases: project setup, starting new sveltekit app, initializing project, creating from playground, choosing project template, path: cli/sv-create\n- title: sv add, use_cases: project setup, adding features to existing projects, integrating tools, testing setup, styling setup, authentication, database setup, deployment adapters, path: cli/sv-add\n- title: sv check, use_cases: code quality, ci/cd pipelines, error checking, typescript projects, pre-commit hooks, finding unused css, accessibility auditing, production builds, path: cli/sv-check\n- title: sv migrate, use_cases: migration, upgrading svelte versions, upgrading sveltekit versions, modernizing codebase, svelte 3 to 4, svelte 4 to 5, sveltekit 1 to 2, adopting runes, refactoring deprecated apis, path: cli/sv-migrate\n- title: devtools-json, use_cases: development setup, chrome devtools integration, browser-based editing, local development workflow, debugging setup, path: cli/devtools-json\n- title: drizzle, use_cases: database setup, sql queries, orm integration, data modeling, postgresql, mysql, sqlite, server-side data access, database migrations, type-safe queries, path: cli/drizzle\n- title: eslint, use_cases: code quality, linting, error detection, project setup, code standards, team collaboration, typescript projects, path: cli/eslint\n- title: lucia, use_cases: authentication, login systems, user management, registration pages, session handling, auth setup, path: cli/lucia\n- title: mdsvex, use_cases: blog, content sites, markdown rendering, documentation sites, technical writing, cms integration, article pages, path: cli/mdsvex\n- title: paraglide, use_cases: internationalization, multi-language sites, i18n, translation, localization, language switching, global apps, multilingual content, path: cli/paraglide\n- title: playwright, use_cases: browser testing, e2e testing, integration testing, test automation, quality assurance, ci/cd pipelines, testing user flows, path: cli/playwright\n- title: prettier, use_cases: code formatting, project setup, code style consistency, team collaboration, linting configuration, path: cli/prettier\n- title: storybook, use_cases: component development, design systems, ui library, isolated component testing, documentation, visual testing, component showcase, path: cli/storybook\n- title: sveltekit-adapter, use_cases: deployment, production builds, hosting setup, choosing deployment platform, configuring adapters, static site generation, node server, vercel, cloudflare, netlify, path: cli/sveltekit-adapter\n- title: tailwindcss, use_cases: project setup, styling, css framework, rapid prototyping, utility-first css, design systems, responsive design, adding tailwind to svelte, path: cli/tailwind\n- title: vitest, use_cases: testing, unit tests, component testing, test setup, quality assurance, ci/cd pipelines, test-driven development, path: cli/vitest\n- title: Introduction, use_cases: learning sveltekit, project setup, understanding framework basics, choosing between svelte and sveltekit, getting started with full-stack apps, path: kit/introduction\n- title: Creating a project, use_cases: project setup, starting new sveltekit app, initial development environment, first-time sveltekit users, scaffolding projects, path: kit/creating-a-project\n- title: Project types, use_cases: deployment, project setup, choosing adapters, ssg, spa, ssr, serverless, mobile apps, desktop apps, pwa, offline apps, browser extensions, separate backend, docker containers, path: kit/project-types\n- title: Project structure, use_cases: project setup, understanding file structure, organizing code, starting new project, learning sveltekit basics, path: kit/project-structure\n- title: Web standards, use_cases: always, any sveltekit project, data fetching, forms, api routes, server-side rendering, deployment to various platforms, path: kit/web-standards\n- title: Routing, use_cases: routing, navigation, multi-page apps, project setup, file structure, api endpoints, data loading, layouts, error pages, always, path: kit/routing\n- title: Loading data, use_cases: data fetching, api calls, database queries, dynamic routes, page initialization, loading states, authentication checks, ssr data, form data, content rendering, path: kit/load\n- title: Form actions, use_cases: forms, user input, data submission, authentication, login systems, user registration, progressive enhancement, validation errors, path: kit/form-actions\n- title: Page options, use_cases: prerendering static sites, ssr configuration, spa setup, client-side rendering control, url trailing slash handling, adapter deployment config, build optimization, path: kit/page-options\n- title: State management, use_cases: sveltekit, server-side rendering, ssr, state management, authentication, data persistence, load functions, context api, navigation, component lifecycle, path: kit/state-management\n- title: Remote functions, use_cases: data fetching, server-side logic, database queries, type-safe client-server communication, forms, user input, mutations, authentication, crud operations, optimistic updates, path: kit/remote-functions\n- title: Building your app, use_cases: production builds, deployment preparation, build process optimization, adapter configuration, preview before deployment, path: kit/building-your-app\n- title: Adapters, use_cases: deployment, production builds, hosting setup, choosing deployment platform, configuring adapters, path: kit/adapters\n- title: Zero-config deployments, use_cases: deployment, production builds, hosting setup, choosing deployment platform, ci/cd configuration, path: kit/adapter-auto\n- title: Node servers, use_cases: deployment, production builds, node.js hosting, custom server setup, environment configuration, reverse proxy setup, docker deployment, systemd services, path: kit/adapter-node\n- title: Static site generation, use_cases: static site generation, ssg, prerendering, deployment, github pages, spa mode, blogs, documentation sites, marketing sites, path: kit/adapter-static\n- title: Single-page apps, use_cases: spa mode, single-page apps, client-only rendering, static hosting, mobile app wrappers, no server-side logic, adapter-static setup, fallback pages, path: kit/single-page-apps\n- title: Cloudflare, use_cases: deployment, cloudflare workers, cloudflare pages, hosting setup, production builds, serverless deployment, edge computing, path: kit/adapter-cloudflare\n- title: Cloudflare Workers, use_cases: deploying to cloudflare workers, cloudflare workers sites deployment, legacy cloudflare adapter, wrangler configuration, cloudflare platform bindings, path: kit/adapter-cloudflare-workers\n- title: Netlify, use_cases: deployment, netlify hosting, production builds, serverless functions, edge functions, static site hosting, path: kit/adapter-netlify\n- title: Vercel, use_cases: deployment, vercel hosting, production builds, serverless functions, edge functions, isr, image optimization, environment variables, path: kit/adapter-vercel\n- title: Writing adapters, use_cases: custom deployment, building adapters, unsupported platforms, adapter development, custom hosting environments, path: kit/writing-adapters\n- title: Advanced routing, use_cases: advanced routing, dynamic routes, file viewers, nested paths, custom 404 pages, url validation, route parameters, multi-level navigation, path: kit/advanced-routing\n- title: Hooks, use_cases: authentication, logging, error tracking, request interception, api proxying, custom routing, internationalization, database initialization, middleware logic, session management, path: kit/hooks\n- title: Errors, use_cases: error handling, custom error pages, 404 pages, api error responses, production error logging, error tracking, type-safe errors, path: kit/errors\n- title: Link options, use_cases: routing, navigation, multi-page apps, performance optimization, link preloading, forms with get method, search functionality, focus management, scroll behavior, path: kit/link-options\n- title: Service workers, use_cases: offline support, pwa, caching strategies, performance optimization, precaching assets, network resilience, progressive web apps, path: kit/service-workers\n- title: Server-only modules, use_cases: api keys, environment variables, sensitive data protection, backend security, preventing data leaks, server-side code isolation, path: kit/server-only-modules\n- title: Snapshots, use_cases: forms, user input, preserving form data, multi-step forms, navigation state, preventing data loss, textarea content, input fields, comment systems, surveys, path: kit/snapshots\n- title: Shallow routing, use_cases: modals, dialogs, image galleries, overlays, history-driven ui, mobile-friendly navigation, photo viewers, lightboxes, drawer menus, path: kit/shallow-routing\n- title: Observability, use_cases: performance monitoring, debugging, observability, tracing requests, production diagnostics, analyzing slow requests, finding bottlenecks, monitoring server-side operations, path: kit/observability\n- title: Packaging, use_cases: building component libraries, publishing npm packages, creating reusable svelte components, library development, package distribution, path: kit/packaging\n- title: Auth, use_cases: authentication, login systems, user management, session handling, jwt tokens, protected routes, user credentials, authorization checks, path: kit/auth\n- title: Performance, use_cases: performance optimization, slow loading pages, production deployment, debugging performance issues, reducing bundle size, improving load times, path: kit/performance\n- title: Icons, use_cases: icons, ui components, styling, css frameworks, tailwind, unocss, performance optimization, dependency management, path: kit/icons\n- title: Images, use_cases: image optimization, responsive images, performance, hero images, product photos, galleries, cms integration, cdn setup, asset management, path: kit/images\n- title: Accessibility, use_cases: always, any sveltekit project, screen reader support, keyboard navigation, multi-page apps, client-side routing, internationalization, multilingual sites, path: kit/accessibility\n- title: SEO, use_cases: seo optimization, search engine ranking, content sites, blogs, marketing sites, public-facing apps, sitemaps, amp pages, meta tags, performance optimization, path: kit/seo\n- title: Frequently asked questions, use_cases: troubleshooting package imports, library compatibility issues, client-side code execution, external api integration, middleware setup, database configuration, view transitions, yarn configuration, path: kit/faq\n- title: Integrations, use_cases: project setup, css preprocessors, postcss, scss, sass, less, stylus, typescript setup, adding integrations, tailwind, testing, auth, linting, formatting, path: kit/integrations\n- title: Breakpoint Debugging, use_cases: debugging, breakpoints, development workflow, troubleshooting issues, vscode setup, ide configuration, inspecting code execution, path: kit/debugging\n- title: Migrating to SvelteKit v2, use_cases: migration, upgrading from sveltekit 1 to 2, breaking changes, version updates, path: kit/migrating-to-sveltekit-2\n- title: Migrating from Sapper, use_cases: migrating from sapper, upgrading legacy projects, sapper to sveltekit conversion, project modernization, path: kit/migrating\n- title: Additional resources, use_cases: troubleshooting, getting help, finding examples, learning sveltekit, project templates, common issues, community support, path: kit/additional-resources\n- title: Glossary, use_cases: rendering strategies, performance optimization, deployment configuration, seo requirements, static sites, spas, server-side rendering, prerendering, edge deployment, pwa development, path: kit/glossary\n- title: @sveltejs/kit, use_cases: forms, form actions, server-side validation, form submission, error handling, redirects, json responses, http errors, server utilities, path: kit/@sveltejs-kit\n- title: @sveltejs/kit/hooks, use_cases: middleware, request processing, authentication chains, logging, multiple hooks, request/response transformation, path: kit/@sveltejs-kit-hooks\n- title: @sveltejs/kit/node/polyfills, use_cases: node.js environments, custom servers, non-standard runtimes, ssr setup, web api compatibility, polyfill requirements, path: kit/@sveltejs-kit-node-polyfills\n- title: @sveltejs/kit/node, use_cases: node.js adapter, custom server setup, http integration, streaming files, node deployment, server-side rendering with node, path: kit/@sveltejs-kit-node\n- title: @sveltejs/kit/vite, use_cases: project setup, vite configuration, initial sveltekit setup, build tooling, path: kit/@sveltejs-kit-vite\n- title: $app/environment, use_cases: always, conditional logic, client-side code, server-side code, build-time logic, prerendering, development vs production, environment detection, path: kit/$app-environment\n- title: $app/forms, use_cases: forms, user input, data submission, progressive enhancement, custom form handling, form validation, path: kit/$app-forms\n- title: $app/navigation, use_cases: routing, navigation, multi-page apps, programmatic navigation, data reloading, preloading, shallow routing, navigation lifecycle, scroll handling, view transitions, path: kit/$app-navigation\n- title: $app/paths, use_cases: static assets, images, fonts, public files, base path configuration, subdirectory deployment, cdn setup, asset urls, links, navigation, path: kit/$app-paths\n- title: $app/server, use_cases: remote functions, server-side logic, data fetching, form handling, api endpoints, client-server communication, prerendering, file reading, batch queries, path: kit/$app-server\n- title: $app/state, use_cases: routing, navigation, multi-page apps, loading states, url parameters, form handling, error states, version updates, page metadata, shallow routing, path: kit/$app-state\n- title: $app/stores, use_cases: legacy projects, sveltekit pre-2.12, migration from stores to runes, maintaining older codebases, accessing page data, navigation state, app version updates, path: kit/$app-stores\n- title: $app/types, use_cases: routing, navigation, type safety, route parameters, dynamic routes, link generation, pathname validation, multi-page apps, path: kit/$app-types\n- title: $env/dynamic/private, use_cases: api keys, secrets management, server-side config, environment variables, backend logic, deployment-specific settings, private data handling, path: kit/$env-dynamic-private\n- title: $env/dynamic/public, use_cases: environment variables, client-side config, runtime configuration, public api keys, deployment-specific settings, multi-environment apps, path: kit/$env-dynamic-public\n- title: $env/static/private, use_cases: server-side api keys, backend secrets, database credentials, private configuration, build-time optimization, server endpoints, authentication tokens, path: kit/$env-static-private\n- title: $env/static/public, use_cases: environment variables, public config, client-side data, api endpoints, build-time configuration, public constants, path: kit/$env-static-public\n- title: $lib, use_cases: project setup, component organization, importing shared components, reusable ui elements, code structure, path: kit/$lib\n- title: $service-worker, use_cases: offline support, pwa, service workers, caching strategies, progressive web apps, offline-first apps, path: kit/$service-worker\n- title: Configuration, use_cases: project setup, configuration, adapters, deployment, build settings, environment variables, routing customization, prerendering, csp security, csrf protection, path configuration, typescript setup, path: kit/configuration\n- title: Command Line Interface, use_cases: project setup, typescript configuration, generated types, ./$types imports, initial project configuration, path: kit/cli\n- title: Types, use_cases: typescript, type safety, route parameters, api endpoints, load functions, form actions, generated types, jsconfig setup, path: kit/types\n- title: Overview, use_cases: use title and path to estimate use case, path: mcp/overview\n- title: Local setup, use_cases: use title and path to estimate use case, path: mcp/local-setup\n- title: Remote setup, use_cases: use title and path to estimate use case, path: mcp/remote-setup\n- title: Tools, use_cases: use title and path to estimate use case, path: mcp/tools\n- title: Resources, use_cases: use title and path to estimate use case, path: mcp/resources\n- title: Prompts, use_cases: use title and path to estimate use case, path: mcp/prompts\n- title: Overview, use_cases: always, any svelte project, getting started, learning svelte, introduction, project setup, understanding framework basics, path: svelte/overview\n- title: Getting started, use_cases: project setup, starting new svelte project, initial installation, choosing between sveltekit and vite, editor configuration, path: svelte/getting-started\n- title: .svelte files, use_cases: always, any svelte project, component creation, project setup, learning svelte basics, path: svelte/svelte-files\n- title: .svelte.js and .svelte.ts files, use_cases: shared reactive state, reusable reactive logic, state management across components, global stores, custom reactive utilities, path: svelte/svelte-js-files\n- title: What are runes?, use_cases: always, any svelte 5 project, understanding core syntax, learning svelte 5, migration from svelte 4, path: svelte/what-are-runes\n- title: $state, use_cases: always, any svelte project, core reactivity, state management, counters, forms, todo apps, interactive ui, data updates, class-based components, path: svelte/$state\n- title: $derived, use_cases: always, any svelte project, computed values, reactive calculations, derived data, transforming state, dependent values, path: svelte/$derived\n- title: $effect, use_cases: canvas drawing, third-party library integration, dom manipulation, side effects, intervals, timers, network requests, analytics tracking, path: svelte/$effect\n- title: $props, use_cases: always, any svelte project, passing data to components, component communication, reusable components, component props, path: svelte/$props\n- title: $bindable, use_cases: forms, user input, two-way data binding, custom input components, parent-child communication, reusable form fields, path: svelte/$bindable\n- title: $inspect, use_cases: debugging, development, tracking state changes, reactive state monitoring, troubleshooting reactivity issues, path: svelte/$inspect\n- title: $host, use_cases: custom elements, web components, dispatching custom events, component library, framework-agnostic components, path: svelte/$host\n- title: Basic markup, use_cases: always, any svelte project, basic markup, html templating, component structure, attributes, events, props, text rendering, path: svelte/basic-markup\n- title: {#if ...}, use_cases: always, conditional rendering, showing/hiding content, dynamic ui, user permissions, loading states, error handling, form validation, path: svelte/if\n- title: {#each ...}, use_cases: always, lists, arrays, iteration, product listings, todos, tables, grids, dynamic content, shopping carts, user lists, comments, feeds, path: svelte/each\n- title: {#key ...}, use_cases: animations, transitions, component reinitialization, forcing component remount, value-based ui updates, resetting component state, path: svelte/key\n- title: {#await ...}, use_cases: async data fetching, api calls, loading states, promises, error handling, lazy loading components, dynamic imports, path: svelte/await\n- title: {#snippet ...}, use_cases: reusable markup, component composition, passing content to components, table rows, list items, conditional rendering, reducing duplication, path: svelte/snippet\n- title: {@render ...}, use_cases: reusable ui patterns, component composition, conditional rendering, fallback content, layout components, slot alternatives, template reuse, path: svelte/@render\n- title: {@html ...}, use_cases: rendering html strings, cms content, rich text editors, markdown to html, blog posts, wysiwyg output, sanitized html injection, dynamic html content, path: svelte/@html\n- title: {@attach ...}, use_cases: tooltips, popovers, dom manipulation, third-party libraries, canvas drawing, element lifecycle, interactive ui, custom directives, wrapper components, path: svelte/@attach\n- title: {@const ...}, use_cases: computed values in loops, derived calculations in blocks, local variables in each iterations, complex list rendering, path: svelte/@const\n- title: {@debug ...}, use_cases: debugging, development, troubleshooting, tracking state changes, monitoring variables, reactive data inspection, path: svelte/@debug\n- title: bind:, use_cases: forms, user input, two-way data binding, interactive ui, media players, file uploads, checkboxes, radio buttons, select dropdowns, contenteditable, dimension tracking, path: svelte/bind\n- title: use:, use_cases: custom directives, dom manipulation, third-party library integration, tooltips, click outside, gestures, focus management, element lifecycle hooks, path: svelte/use\n- title: transition:, use_cases: animations, interactive ui, modals, dropdowns, notifications, conditional content, show/hide elements, smooth state changes, path: svelte/transition\n- title: in: and out:, use_cases: animation, transitions, interactive ui, conditional rendering, independent enter/exit effects, modals, tooltips, notifications, path: svelte/in-and-out\n- title: animate:, use_cases: sortable lists, drag and drop, reorderable items, todo lists, kanban boards, playlist editors, priority queues, animated list reordering, path: svelte/animate\n- title: style:, use_cases: dynamic styling, conditional styles, theming, dark mode, responsive design, interactive ui, component styling, path: svelte/style\n- title: class, use_cases: always, conditional styling, dynamic classes, tailwind css, component styling, reusable components, responsive design, path: svelte/class\n- title: await, use_cases: async data fetching, loading states, server-side rendering, awaiting promises in components, async validation, concurrent data loading, path: svelte/await-expressions\n- title: Scoped styles, use_cases: always, styling components, scoped css, component-specific styles, preventing style conflicts, animations, keyframes, path: svelte/scoped-styles\n- title: Global styles, use_cases: global styles, third-party libraries, css resets, animations, styling body/html, overriding component styles, shared keyframes, base styles, path: svelte/global-styles\n- title: Custom properties, use_cases: theming, custom styling, reusable components, design systems, dynamic colors, component libraries, ui customization, path: svelte/custom-properties\n- title: Nested <style> elements, use_cases: component styling, scoped styles, dynamic styles, conditional styling, nested style tags, custom styling logic, path: svelte/nested-style-elements\n- title: <svelte:boundary>, use_cases: error handling, async data loading, loading states, error recovery, flaky components, error reporting, resilient ui, path: svelte/svelte-boundary\n- title: <svelte:window>, use_cases: keyboard shortcuts, scroll tracking, window resize handling, responsive layouts, online/offline detection, viewport dimensions, global event listeners, path: svelte/svelte-window\n- title: <svelte:document>, use_cases: document events, visibility tracking, fullscreen detection, pointer lock, focus management, document-level interactions, path: svelte/svelte-document\n- title: <svelte:body>, use_cases: mouse tracking, hover effects, cursor interactions, global body events, drag and drop, custom cursors, interactive backgrounds, body-level actions, path: svelte/svelte-body\n- title: <svelte:head>, use_cases: seo optimization, page titles, meta tags, social media sharing, dynamic head content, multi-page apps, blog posts, product pages, path: svelte/svelte-head\n- title: <svelte:element>, use_cases: dynamic content, cms integration, user-generated content, configurable ui, runtime element selection, flexible components, path: svelte/svelte-element\n- title: <svelte:options>, use_cases: migration, custom elements, web components, legacy mode compatibility, runes mode setup, svg components, mathml components, css injection control, path: svelte/svelte-options\n- title: Stores, use_cases: shared state, cross-component data, reactive values, async data streams, manual control over updates, rxjs integration, extracting logic, path: svelte/stores\n- title: Context, use_cases: shared state, avoiding prop drilling, component communication, theme providers, user context, authentication state, configuration sharing, deeply nested components, path: svelte/context\n- title: Lifecycle hooks, use_cases: component initialization, cleanup tasks, timers, subscriptions, dom measurements, chat windows, autoscroll features, migration from svelte 4, path: svelte/lifecycle-hooks\n- title: Imperative component API, use_cases: project setup, client-side rendering, server-side rendering, ssr, hydration, testing, programmatic component creation, tooltips, dynamic mounting, path: svelte/imperative-component-api\n- title: Testing, use_cases: testing, quality assurance, unit tests, integration tests, component tests, e2e tests, vitest setup, playwright setup, test automation, path: svelte/testing\n- title: TypeScript, use_cases: typescript setup, type safety, component props typing, generic components, wrapper components, dom type augmentation, project configuration, path: svelte/typescript\n- title: Custom elements, use_cases: web components, custom elements, component library, design system, framework-agnostic components, embedding svelte in non-svelte apps, shadow dom, path: svelte/custom-elements\n- title: Svelte 4 migration guide, use_cases: upgrading svelte 3 to 4, version migration, updating dependencies, breaking changes, legacy project maintenance, path: svelte/v4-migration-guide\n- title: Svelte 5 migration guide, use_cases: migrating from svelte 4 to 5, upgrading projects, learning svelte 5 syntax changes, runes migration, event handler updates, path: svelte/v5-migration-guide\n- title: Frequently asked questions, use_cases: getting started, learning svelte, beginner setup, project initialization, vs code setup, formatting, testing, routing, mobile apps, troubleshooting, community support, path: svelte/faq\n- title: svelte, use_cases: migration from svelte 4 to 5, upgrading legacy code, component lifecycle hooks, context api, mounting components, event dispatchers, typescript component types, path: svelte/svelte\n- title: svelte/action, use_cases: typescript types, actions, use directive, dom manipulation, element lifecycle, custom behaviors, third-party library integration, path: svelte/svelte-action\n- title: svelte/animate, use_cases: animated lists, sortable items, drag and drop, reordering elements, todo lists, kanban boards, playlist management, smooth position transitions, path: svelte/svelte-animate\n- title: svelte/attachments, use_cases: library development, component libraries, programmatic element manipulation, migrating from actions to attachments, spreading props onto elements, path: svelte/svelte-attachments\n- title: svelte/compiler, use_cases: build tools, custom compilers, ast manipulation, preprocessors, code transformation, migration scripts, syntax analysis, bundler plugins, dev tools, path: svelte/svelte-compiler\n- title: svelte/easing, use_cases: animations, transitions, custom easing, smooth motion, interactive ui, modals, dropdowns, carousels, page transitions, scroll effects, path: svelte/svelte-easing\n- title: svelte/events, use_cases: window events, document events, global event listeners, event delegation, programmatic event handling, cleanup functions, media queries, path: svelte/svelte-events\n- title: svelte/legacy, use_cases: migration from svelte 4 to svelte 5, upgrading legacy code, event modifiers, class components, imperative component instantiation, path: svelte/svelte-legacy\n- title: svelte/motion, use_cases: animation, smooth transitions, interactive ui, sliders, counters, physics-based motion, drag gestures, accessibility, reduced motion, path: svelte/svelte-motion\n- title: svelte/reactivity/window, use_cases: responsive design, viewport tracking, scroll effects, window resize handling, online/offline detection, zoom level tracking, path: svelte/svelte-reactivity-window\n- title: svelte/reactivity, use_cases: reactive data structures, state management with maps/sets, game boards, selection tracking, url manipulation, query params, real-time clocks, media queries, responsive design, path: svelte/svelte-reactivity\n- title: svelte/server, use_cases: server-side rendering, ssr, static site generation, seo optimization, initial page load, pre-rendering, node.js server, custom server setup, path: svelte/svelte-server\n- title: svelte/store, use_cases: state management, shared data, reactive stores, cross-component communication, global state, computed values, data synchronization, legacy svelte projects, path: svelte/svelte-store\n- title: svelte/transition, use_cases: animations, transitions, interactive ui, modals, dropdowns, tooltips, notifications, svg animations, list animations, page transitions, path: svelte/svelte-transition\n- title: Compiler errors, use_cases: animation, transitions, keyed each blocks, list animations, path: svelte/compiler-errors\n- title: Compiler warnings, use_cases: accessibility, a11y compliance, wcag standards, screen readers, keyboard navigation, aria attributes, semantic html, interactive elements, path: svelte/compiler-warnings\n- title: Runtime errors, use_cases: debugging errors, error handling, troubleshooting runtime issues, migration to svelte 5, component binding, effects and reactivity, path: svelte/runtime-errors\n- title: Runtime warnings, use_cases: debugging state proxies, console logging reactive values, inspecting state changes, development troubleshooting, path: svelte/runtime-warnings\n- title: Overview, use_cases: migrating from svelte 3/4 to svelte 5, maintaining legacy components, understanding deprecated features, gradual upgrade process, path: svelte/legacy-overview\n- title: Reactive let/var declarations, use_cases: migration, legacy svelte projects, upgrading from svelte 4, understanding old reactivity, maintaining existing code, learning runes differences, path: svelte/legacy-let\n- title: Reactive $: statements, use_cases: legacy mode, migration from svelte 4, reactive statements, computed values, derived state, side effects, path: svelte/legacy-reactive-assignments\n- title: export let, use_cases: legacy mode, migration from svelte 4, maintaining older projects, component props without runes, exporting component methods, renaming reserved word props, path: svelte/legacy-export-let\n- title: $$props and $$restProps, use_cases: legacy mode migration, component wrappers, prop forwarding, button components, reusable ui components, spreading props to child elements, path: svelte/legacy-$$props-and-$$restProps\n- title: on:, use_cases: legacy mode, event handling, button clicks, forms, user interactions, component communication, event forwarding, event modifiers, path: svelte/legacy-on\n- title: <slot>, use_cases: legacy mode, migrating from svelte 4, component composition, reusable components, passing content to components, modals, layouts, wrappers, path: svelte/legacy-slots\n- title: $$slots, use_cases: legacy mode, conditional slot rendering, optional content sections, checking if slots provided, migrating from legacy to runes, path: svelte/legacy-$$slots\n- title: <svelte:fragment>, use_cases: named slots, component composition, layout systems, avoiding wrapper divs, legacy svelte projects, slot content organization, path: svelte/legacy-svelte-fragment\n- title: <svelte:component>, use_cases: dynamic components, component switching, conditional rendering, legacy mode migration, tabbed interfaces, multi-step forms, path: svelte/legacy-svelte-component\n- title: <svelte:self>, use_cases: recursive components, tree structures, nested menus, file explorers, comment threads, hierarchical data, path: svelte/legacy-svelte-self\n- title: Imperative component API, use_cases: migration from svelte 3/4 to 5, legacy component api, maintaining old projects, understanding deprecated patterns, path: svelte/legacy-component-api\n\n</available-docs>\n\nEvery time you write a Svelte component or a Svelte module you MUST invoke the `svelte-autofixer` tool providing the code. The tool will return a list of issues or suggestions. If there are any issues or suggestions you MUST fix them and call the tool again with the updated code. You MUST keep doing this until the tool returns no issues or suggestions. Only then you can return the code to the user.\n\nThis is the task you will work on:\n\n<task>\n[YOUR TASK HERE]\n</task>\n\nIf you are not writing the code into a file, once you have the final version of the code ask the user if it wants to generate a playground link to quickly check the code in it and if it answer yes call the `playground-link` tool and return the url to the user nicely formatted. The playground link MUST be generated only once you have the final version of the code and you are ready to share it, it MUST include an entry point file called `App.svelte` where the main component should live. If you have multiple files to include in the playground link you can include them all at the root.\n```\n\n</details>",
    "svelte/overview": "Svelte is a framework for building user interfaces on the web. It uses a compiler to turn declarative components written in HTML, CSS and JavaScript...\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\tfunction greet() {\n\t\talert('Welcome to Svelte!');\n\t}\n</script>\n\n<button onclick={greet}>click me</button>\n\n<style>\n\tbutton {\n\t\tfont-size: 2em;\n\t}\n</style>\n```\n\n...into lean, tightly optimized JavaScript.\n\nYou can use it to build anything on the web, from standalone components to ambitious full stack apps (using Svelte's companion application framework, [SvelteKit](../kit)) and everything in between.\n\nThese pages serve as reference documentation. If you're new to Svelte, we recommend starting with the [interactive tutorial](/tutorial) and coming back here when you have questions.\n\nYou can also try Svelte online in the [playground](/playground) or, if you need a more fully-featured environment, on [StackBlitz](https://sveltekit.new).",
    "svelte/getting-started": "We recommend using [SvelteKit](../kit), which lets you [build almost anything](../kit/project-types). It's the official application framework from the Svelte team and powered by [Vite](https://vite.dev/). Create a new project with:\n\n```sh\nnpx sv create myapp\ncd myapp\nnpm install\nnpm run dev\n```\n\nDon't worry if you don't know Svelte yet! You can ignore all the nice features SvelteKit brings on top for now and dive into it later.\n\n## Alternatives to SvelteKit\n\nYou can also use Svelte directly with Vite by running `npm create vite@latest` and selecting the `svelte` option. With this, `npm run build` will generate HTML, JS, and CSS files inside the `dist` directory using [vite-plugin-svelte](https://github.com/sveltejs/vite-plugin-svelte). In most cases, you will probably need to [choose a routing library](/packages#routing) as well.\n\n>[!NOTE] Vite is often used in standalone mode to build [single page apps (SPAs)](../kit/glossary#SPA), which you can also [build with SvelteKit](../kit/single-page-apps).\n\nThere are also [plugins for other bundlers](/packages#bundler-plugins), but we recommend Vite.\n\n## Editor tooling\n\nThe Svelte team maintains a [VS Code extension](https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode), and there are integrations with various other [editors](https://sveltesociety.dev/resources#editor-support) and tools as well.\n\nYou can also check your code from the command line using [sv check](https://github.com/sveltejs/cli).\n\n## Getting help\n\nDon't be shy about asking for help in the [Discord chatroom](/chat)! You can also find answers on [Stack Overflow](https://stackoverflow.com/questions/tagged/svelte).",
    "svelte/svelte-files": "Components are the building blocks of Svelte applications. They are written into `.svelte` files, using a superset of HTML.\n\nAll three sections — script, styles and markup — are optional.\n\n<!-- prettier-ignore -->\n```svelte\n/// file: MyComponent.svelte\n<script module>\n\t// module-level logic goes here\n\t// (you will rarely use this)\n</script>\n\n<script>\n\t// instance-level logic goes here\n</script>\n\n<!-- markup (zero or more items) goes here -->\n\n<style>\n\t/* styles go here */\n</style>\n```\n\n## `<script>`\n\nA `<script>` block contains JavaScript (or TypeScript, when adding the `lang=\"ts\"` attribute) that runs when a component instance is created. Variables declared (or imported) at the top level can be referenced in the component's markup.\n\nIn addition to normal JavaScript, you can use _runes_ to declare [component props]($props) and add reactivity to your component. Runes are covered in the next section.\n\n<!-- TODO describe behaviour of `export` -->\n\n## `<script module>`\n\nA `<script>` tag with a `module` attribute runs once when the module first evaluates, rather than for each component instance. Variables declared in this block can be referenced elsewhere in the component, but not vice versa.\n\n```svelte\n<script module>\n\tlet total = 0;\n</script>\n\n<script>\n\ttotal += 1;\n\tconsole.log(`instantiated ${total} times`);\n</script>\n```\n\nYou can `export` bindings from this block, and they will become exports of the compiled module. You cannot `export default`, since the default export is the component itself.\n\n> [!NOTE] If you are using TypeScript and import such exports from a `module` block into a `.ts` file, make sure to have your editor setup so that TypeScript knows about them. This is the case for our VS Code extension and the IntelliJ plugin, but in other cases you might need to setup our [TypeScript editor plugin](https://www.npmjs.com/package/typescript-svelte-plugin).\n\n> [!LEGACY]\n> In Svelte 4, this script tag was created using `<script context=\"module\">`\n\n## `<style>`\n\nCSS inside a `<style>` block will be scoped to that component.\n\n```svelte\n<style>\n\tp {\n\t\t/* this will only affect <p> elements in this component */\n\t\tcolor: burlywood;\n\t}\n</style>\n```\n\nFor more information, head to the section on [styling](scoped-styles).",
    "svelte/svelte-js-files": "Besides `.svelte` files, Svelte also operates on `.svelte.js` and `.svelte.ts` files.\n\nThese behave like any other `.js` or `.ts` module, except that you can use runes. This is useful for creating reusable reactive logic, or sharing reactive state across your app (though note that you [cannot export reassigned state]($state#Passing-state-across-modules)).\n\n> [!LEGACY]\n> This is a concept that didn't exist prior to Svelte 5",
    "svelte/what-are-runes": "> [!NOTE] **rune** /ruːn/ _noun_\n>\n> A letter or mark used as a mystical or magic symbol.\n\nRunes are symbols that you use in `.svelte` and `.svelte.js`/`.svelte.ts` files to control the Svelte compiler. If you think of Svelte as a language, runes are part of the syntax — they are _keywords_.\n\nRunes have a `$` prefix and look like functions:\n\n```js\nlet message = $state('hello');\n```\n\nThey differ from normal JavaScript functions in important ways, however:\n\n- You don't need to import them — they are part of the language\n- They're not values — you can't assign them to a variable or pass them as arguments to a function\n- Just like JavaScript keywords, they are only valid in certain positions (the compiler will help you if you put them in the wrong place)\n\n> [!LEGACY]\n> Runes didn't exist prior to Svelte 5.",
    "svelte/$state": "The `$state` rune allows you to create _reactive state_, which means that your UI _reacts_ when it changes.\n\n```svelte\n<script>\n\tlet count = $state(0);\n</script>\n\n<button onclick={() => count++}>\n\tclicks: {count}\n</button>\n```\n\nUnlike other frameworks you may have encountered, there is no API for interacting with state — `count` is just a number, rather than an object or a function, and you can update it like you would update any other variable.\n\n### Deep state\n\nIf `$state` is used with an array or a simple object, the result is a deeply reactive _state proxy_. [Proxies](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) allow Svelte to run code when you read or write properties, including via methods like `array.push(...)`, triggering granular updates.\n\nState is proxified recursively until Svelte finds something other than an array or simple object (like a class or an object created with `Object.create`). In a case like this...\n\n```js\nlet todos = $state([\n\t{\n\t\tdone: false,\n\t\ttext: 'add more todos'\n\t}\n]);\n```\n\n...modifying an individual todo's property will trigger updates to anything in your UI that depends on that specific property:\n\n```js\nlet todos = [{ done: false, text: 'add more todos' }];\n// ---cut---\ntodos[0].done = !todos[0].done;\n```\n\nIf you push a new object to the array, it will also be proxified:\n\n```js\nlet todos = [{ done: false, text: 'add more todos' }];\n// ---cut---\ntodos.push({\n\tdone: false,\n\ttext: 'eat lunch'\n});\n```\n\n> [!NOTE] When you update properties of proxies, the original object is _not_ mutated. If you need to use your own proxy handlers in a state proxy, [you should wrap the object _after_ wrapping it in `$state`](https://svelte.dev/playground/hello-world?version=latest#H4sIAAAAAAAACpWR3WoDIRCFX2UqhWyIJL3erAulL9C7XnQLMe5ksbUqOpsfln33YuyGFNJC8UKdc2bOhw7Myk9kJXsJ0nttO9jcR5KEG9AWJDwHdzwxznbaYGTl68Do5JM_FRifuh-9X8Y9Gkq1rYx4q66cJbQUWcmqqIL2VDe2IYMEbvuOikBADi-GJDSkXG-phId0G-frye2DO2psQYDFQ0Ys8gQO350dUkEydEg82T0GOs0nsSG9g2IqgxACZueo2ZUlpdvoDC6N64qsg1QKY8T2bpZp8gpIfbCQ85Zn50Ud82HkeY83uDjspenxv3jXcSDyjPWf9L1vJf0GH666J-jLu1ery4dV257IWXBWGa0-xFDMQdTTn2ScxWKsn86ROsLwQxqrVR5QM84Ij8TKFD2-cUZSm4O2LSt30kQcvwCgCmfZnAIAAA==).\n\nNote that if you destructure a reactive value, the references are not reactive — as in normal JavaScript, they are evaluated at the point of destructuring:\n\n```js\nlet todos = [{ done: false, text: 'add more todos' }];\n// ---cut---\nlet { done, text } = todos[0];\n\n// this will not affect the value of `done`\ntodos[0].done = !todos[0].done;\n```\n\n### Classes\n\nClass instances are not proxied. Instead, you can use `$state` in class fields (whether public or private), or as the first assignment to a property immediately inside the `constructor`:\n\n```js\n// @errors: 7006 2554\nclass Todo {\n\tdone = $state(false);\n\n\tconstructor(text) {\n\t\tthis.text = $state(text);\n\t}\n\n\treset() {\n\t\tthis.text = '';\n\t\tthis.done = false;\n\t}\n}\n```\n\n> [!NOTE] The compiler transforms `done` and `text` into `get`/`set` methods on the class prototype referencing private fields. This means the properties are not enumerable.\n\nWhen calling methods in JavaScript, the value of [`this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) matters. This won't work, because `this` inside the `reset` method will be the `<button>` rather than the `Todo`:\n\n```svelte\n<button onclick={todo.reset}>\n\treset\n</button>\n```\n\nYou can either use an inline function...\n\n```svelte\n<button onclick=+++{() => todo.reset()}>+++\n\treset\n</button>\n```\n\n...or use an arrow function in the class definition:\n\n```js\n// @errors: 7006 2554\nclass Todo {\n\tdone = $state(false);\n\n\tconstructor(text) {\n\t\tthis.text = $state(text);\n\t}\n\n\t+++reset = () => {+++\n\t\tthis.text = '';\n\t\tthis.done = false;\n\t}\n}\n```\n\n### Built-in classes\n\nSvelte provides reactive implementations of built-in classes like `Set`, `Map`, `Date` and `URL` that can be imported from [`svelte/reactivity`](svelte-reactivity).\n\n## `$state.raw`\n\nIn cases where you don't want objects and arrays to be deeply reactive you can use `$state.raw`.\n\nState declared with `$state.raw` cannot be mutated; it can only be _reassigned_. In other words, rather than assigning to a property of an object, or using an array method like `push`, replace the object or array altogether if you'd like to update it:\n\n```js\nlet person = $state.raw({\n\tname: 'Heraclitus',\n\tage: 49\n});\n\n// this will have no effect\nperson.age += 1;\n\n// this will work, because we're creating a new person\nperson = {\n\tname: 'Heraclitus',\n\tage: 50\n};\n```\n\nThis can improve performance with large arrays and objects that you weren't planning to mutate anyway, since it avoids the cost of making them reactive. Note that raw state can _contain_ reactive state (for example, a raw array of reactive objects).\n\nAs with `$state`, you can declare class fields using `$state.raw`.\n\n## `$state.snapshot`\n\nTo take a static snapshot of a deeply reactive `$state` proxy, use `$state.snapshot`:\n\n```svelte\n<script>\n\tlet counter = $state({ count: 0 });\n\n\tfunction onclick() {\n\t\t// Will log `{ count: ... }` rather than `Proxy { ... }`\n\t\tconsole.log($state.snapshot(counter));\n\t}\n</script>\n```\n\nThis is handy when you want to pass some state to an external library or API that doesn't expect a proxy, such as `structuredClone`.\n\n## Passing state into functions\n\nJavaScript is a _pass-by-value_ language — when you call a function, the arguments are the _values_ rather than the _variables_. In other words:\n\n```js\n/// file: index.js\n// @filename: index.js\n// ---cut---\n/**\n * @param {number} a\n * @param {number} b\n */\nfunction add(a, b) {\n\treturn a + b;\n}\n\nlet a = 1;\nlet b = 2;\nlet total = add(a, b);\nconsole.log(total); // 3\n\na = 3;\nb = 4;\nconsole.log(total); // still 3!\n```\n\nIf `add` wanted to have access to the _current_ values of `a` and `b`, and to return the current `total` value, you would need to use functions instead:\n\n```js\n/// file: index.js\n// @filename: index.js\n// ---cut---\n/**\n * @param {() => number} getA\n * @param {() => number} getB\n */\nfunction add(+++getA, getB+++) {\n\treturn +++() => getA() + getB()+++;\n}\n\nlet a = 1;\nlet b = 2;\nlet total = add+++(() => a, () => b)+++;\nconsole.log(+++total()+++); // 3\n\na = 3;\nb = 4;\nconsole.log(+++total()+++); // 7\n```\n\nState in Svelte is no different — when you reference something declared with the `$state` rune...\n\n```js\nlet a = +++$state(1)+++;\nlet b = +++$state(2)+++;\n```\n\n...you're accessing its _current value_.\n\nNote that 'functions' is broad — it encompasses properties of proxies and [`get`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get)/[`set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set) properties...\n\n```js\n/// file: index.js\n// @filename: index.js\n// ---cut---\n/**\n * @param {{ a: number, b: number }} input\n */\nfunction add(input) {\n\treturn {\n\t\tget value() {\n\t\t\treturn input.a + input.b;\n\t\t}\n\t};\n}\n\nlet input = $state({ a: 1, b: 2 });\nlet total = add(input);\nconsole.log(total.value); // 3\n\ninput.a = 3;\ninput.b = 4;\nconsole.log(total.value); // 7\n```\n\n...though if you find yourself writing code like that, consider using [classes](#Classes) instead.\n\n## Passing state across modules\n\nYou can declare state in `.svelte.js` and `.svelte.ts` files, but you can only _export_ that state if it's not directly reassigned. In other words you can't do this:\n\n```js\n/// file: state.svelte.js\nexport let count = $state(0);\n\nexport function increment() {\n\tcount += 1;\n}\n```\n\nThat's because every reference to `count` is transformed by the Svelte compiler — the code above is roughly equivalent to this:\n\n```js\n/// file: state.svelte.js (compiler output)\n// @filename: index.ts\ninterface Signal<T> {\n\tvalue: T;\n}\n\ninterface Svelte {\n\tstate<T>(value?: T): Signal<T>;\n\tget<T>(source: Signal<T>): T;\n\tset<T>(source: Signal<T>, value: T): void;\n}\ndeclare const $: Svelte;\n// ---cut---\nexport let count = $.state(0);\n\nexport function increment() {\n\t$.set(count, $.get(count) + 1);\n}\n```\n\n> [!NOTE] You can see the code Svelte generates by clicking the 'JS Output' tab in the [playground](/playground).\n\nSince the compiler only operates on one file at a time, if another file imports `count` Svelte doesn't know that it needs to wrap each reference in `$.get` and `$.set`:\n\n```js\n// @filename: state.svelte.js\nexport let count = 0;\n\n// @filename: index.js\n// ---cut---\nimport { count } from './state.svelte.js';\n\nconsole.log(typeof count); // 'object', not 'number'\n```\n\nThis leaves you with two options for sharing state between modules — either don't reassign it...\n\n```js\n// This is allowed — since we're updating\n// `counter.count` rather than `counter`,\n// Svelte doesn't wrap it in `$.state`\nexport const counter = $state({\n\tcount: 0\n});\n\nexport function increment() {\n\tcounter.count += 1;\n}\n```\n\n...or don't directly export it:\n\n```js\nlet count = $state(0);\n\nexport function getCount() {\n\treturn count;\n}\n\nexport function increment() {\n\tcount += 1;\n}\n```",
    "svelte/$derived": "Derived state is declared with the `$derived` rune:\n\n```svelte\n<script>\n\tlet count = $state(0);\n\tlet doubled = $derived(count * 2);\n</script>\n\n<button onclick={() => count++}>\n\t{doubled}\n</button>\n\n<p>{count} doubled is {doubled}</p>\n```\n\nThe expression inside `$derived(...)` should be free of side-effects. Svelte will disallow state changes (e.g. `count++`) inside derived expressions.\n\nAs with `$state`, you can mark class fields as `$derived`.\n\n> [!NOTE] Code in Svelte components is only executed once at creation. Without the `$derived` rune, `doubled` would maintain its original value even when `count` changes.\n\n## `$derived.by`\n\nSometimes you need to create complex derivations that don't fit inside a short expression. In these cases, you can use `$derived.by` which accepts a function as its argument.\n\n```svelte\n<script>\n\tlet numbers = $state([1, 2, 3]);\n\tlet total = $derived.by(() => {\n\t\tlet total = 0;\n\t\tfor (const n of numbers) {\n\t\t\ttotal += n;\n\t\t}\n\t\treturn total;\n\t});\n</script>\n\n<button onclick={() => numbers.push(numbers.length + 1)}>\n\t{numbers.join(' + ')} = {total}\n</button>\n```\n\nIn essence, `$derived(expression)` is equivalent to `$derived.by(() => expression)`.\n\n## Understanding dependencies\n\nAnything read synchronously inside the `$derived` expression (or `$derived.by` function body) is considered a _dependency_ of the derived state. When the state changes, the derived will be marked as _dirty_ and recalculated when it is next read.\n\nTo exempt a piece of state from being treated as a dependency, use [`untrack`](svelte#untrack).\n\n## Overriding derived values\n\nDerived expressions are recalculated when their dependencies change, but you can temporarily override their values by reassigning them (unless they are declared with `const`). This can be useful for things like _optimistic UI_, where a value is derived from the 'source of truth' (such as data from your server) but you'd like to show immediate feedback to the user:\n\n```svelte\n<script>\n\tlet { post, like } = $props();\n\n\tlet likes = $derived(post.likes);\n\n\tasync function onclick() {\n\t\t// increment the `likes` count immediately...\n\t\tlikes += 1;\n\n\t\t// and tell the server, which will eventually update `post`\n\t\ttry {\n\t\t\tawait like();\n\t\t} catch {\n\t\t\t// failed! roll back the change\n\t\t\tlikes -= 1;\n\t\t}\n\t}\n</script>\n\n<button {onclick}>🧡 {likes}</button>\n```\n\n> [!NOTE] Prior to Svelte 5.25, deriveds were read-only.\n\n## Deriveds and reactivity\n\nUnlike `$state`, which converts objects and arrays to [deeply reactive proxies]($state#Deep-state), `$derived` values are left as-is. For example, [in a case like this](/playground/untitled#H4sIAAAAAAAAE4VU22rjMBD9lUHd3aaQi9PdstS1A3t5XvpQ2Ic4D7I1iUUV2UjjNMX431eS7TRdSosxgjMzZ45mjt0yzffIYibvy0ojFJWqDKCQVBk2ZVup0LJ43TJ6rn2aBxw-FP2o67k9oCKP5dziW3hRaUJNjoYltjCyplWmM1JIIAn3FlL4ZIkTTtYez6jtj4w8WwyXv9GiIXiQxLVs9pfTMR7EuoSLIuLFbX7Z4930bZo_nBrD1bs834tlfvsBz9_SyX6PZXu9XaL4gOWn4sXjeyzftv4ZWfyxubpzxzg6LfD4MrooxELEosKCUPigQCMPKCZh0OtQE1iSxcsmdHuBvCiHZXALLXiN08EL3RRkaJ_kDVGle0HcSD5TPEeVtj67O4Nrg9aiSNtBY5oODJkrL5QsHtN2cgXp6nSJMWzpWWGasdlsGEMbzi5jPr5KFr0Ep7pdeM2-TCelCddIhDxAobi1jqF3cMaC1RKp64bAW9iFAmXGIHfd4wNXDabtOLN53w8W53VvJoZLh7xk4Rr3CoL-UNoLhWHrT1JQGcM17u96oES5K-kc2XOzkzqGCKL5De79OUTyyrg1zgwXsrEx3ESfx4Bz0M5UjVMHB24mw9SuXtXFoN13fYKOM1tyUT3FbvbWmSWCZX2Er-41u5xPoml45svRahl9Wb9aasbINJixDZwcPTbyTLZSUsAvrg_cPuCR7s782_WU8343Y72Qtlb8OYatwuOQvuN13M_hJKNfxann1v1U_B1KZ_D_mzhzhz24fw85CSz2irtN9w9HshBK7AQAAA==)...\n\n```svelte\nlet items = $state([...]);\n\nlet index = $state(0);\nlet selected = $derived(items[index]);\n```\n\n...you can change (or `bind:` to) properties of `selected` and it will affect the underlying `items` array. If `items` was _not_ deeply reactive, mutating `selected` would have no effect.\n\n## Destructuring\n\nIf you use destructuring with a `$derived` declaration, the resulting variables will all be reactive — this...\n\n```js\nfunction stuff() { return { a: 1, b: 2, c: 3 } }\n// ---cut---\nlet { a, b, c } = $derived(stuff());\n```\n\n...is roughly equivalent to this:\n\n```js\nfunction stuff() { return { a: 1, b: 2, c: 3 } }\n// ---cut---\nlet _stuff = $derived(stuff());\nlet a = $derived(_stuff.a);\nlet b = $derived(_stuff.b);\nlet c = $derived(_stuff.c);\n```\n\n## Update propagation\n\nSvelte uses something called _push-pull reactivity_ — when state is updated, everything that depends on the state (whether directly or indirectly) is immediately notified of the change (the 'push'), but derived values are not re-evaluated until they are actually read (the 'pull').\n\nIf the new value of a derived is referentially identical to its previous value, downstream updates will be skipped. In other words, Svelte will only update the text inside the button when `large` changes, not when `count` changes, even though `large` depends on `count`:\n\n```svelte\n<script>\n\tlet count = $state(0);\n\tlet large = $derived(count > 10);\n</script>\n\n<button onclick={() => count++}>\n\t{large}\n</button>\n```",
    "svelte/$effect": "Effects are functions that run when state updates, and can be used for things like calling third-party libraries, drawing on `<canvas>` elements, or making network requests. They only run in the browser, not during server-side rendering.\n\nGenerally speaking, you should _not_ update state inside effects, as it will make code more convoluted and will often lead to never-ending update cycles. If you find yourself doing so, see [when not to use `$effect`](#When-not-to-use-$effect) to learn about alternative approaches.\n\nYou can create an effect with the `$effect` rune ([demo](/playground/untitled#H4sIAAAAAAAAE31S246bMBD9lZF3pSRSAqTVvrCAVPUP2sdSKY4ZwJJjkD0hSVH-vbINuWxXfQH5zMyZc2ZmZLVUaFn6a2R06ZGlHmBrpvnBvb71fWQHVOSwPbf4GS46TajJspRlVhjZU1HqkhQSWPkHIYdXS5xw-Zas3ueI6FRn7qHFS11_xSRZhIxbFtcDtw7SJb1iXaOg5XIFeQGjzyPRaevYNOGZIJ8qogbpe8CWiy_VzEpTXiQUcvPDkSVrSNZz1UlW1N5eLcqmpdXUvaQ4BmqlhZNUCgxuzFHDqUWNAxrYeUM76AzsnOsdiJbrBp_71lKpn3RRbii-4P3f-IMsRxS-wcDV_bL4PmSdBa2wl7pKnbp8DMgVvJm8ZNskKRkEM_OzyOKQFkgqOYBQ3Nq89Ns0nbIl81vMFN-jKoLMTOr-SOBOJS-Z8f5Y6D1wdcR8dFqvEBdetK-PHwj-z-cH8oHPY54wRJ8Ys7iSQ3Bg3VA9azQbmC9k35kKzYa6PoVtfwbbKVnBixBiGn7Pq0rqJoUtHiCZwAM3jdTPWCVtr_glhVrhecIa3vuksJ_b7TqFs4DPyriSjd5IwoNNQaAmNI-ESfR2p8zimzvN1swdCkvJHPH6-_oX8o1SgcIDAAA=)):\n\n```svelte\n<script>\n\tlet size = $state(50);\n\tlet color = $state('#ff3e00');\n\n\tlet canvas;\n\n\t$effect(() => {\n\t\tconst context = canvas.getContext('2d');\n\t\tcontext.clearRect(0, 0, canvas.width, canvas.height);\n\n\t\t// this will re-run whenever `color` or `size` change\n\t\tcontext.fillStyle = color;\n\t\tcontext.fillRect(0, 0, size, size);\n\t});\n</script>\n\n<canvas bind:this={canvas} width=\"100\" height=\"100\"></canvas>\n```\n\nWhen Svelte runs an effect function, it tracks which pieces of state (and derived state) are accessed (unless accessed inside [`untrack`](svelte#untrack)), and re-runs the function when that state later changes.\n\n> [!NOTE] If you're having difficulty understanding why your `$effect` is rerunning or is not running see [understanding dependencies](#Understanding-dependencies). Effects are triggered differently than the `$:` blocks you may be used to if coming from Svelte 4.\n\n### Understanding lifecycle\n\nYour effects run after the component has been mounted to the DOM, and in a [microtask](https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide) after state changes. Re-runs are batched (i.e. changing `color` and `size` in the same moment won't cause two separate runs), and happen after any DOM updates have been applied.\n\nYou can use `$effect` anywhere, not just at the top level of a component, as long as it is called while a parent effect is running.\n\n> [!NOTE] Svelte uses effects internally to represent logic and expressions in your template — this is how `<h1>hello {name}!</h1>` updates when `name` changes.\n\nAn effect can return a _teardown function_ which will run immediately before the effect re-runs ([demo](/playground/untitled#H4sIAAAAAAAAE42SQVODMBCF_8pOxkPRKq3HCsx49K4n64xpskjGkDDJ0tph-O8uINo6HjxB3u7HvrehE07WKDbiyZEhi1osRWksRrF57gQdm6E2CKx_dd43zU3co6VB28mIf-nKO0JH_BmRRRVMQ8XWbXkAgfKtI8jhIpIkXKySu7lSG2tNRGZ1_GlYr1ZTD3ddYFmiosUigbyAbpC2lKbwWJkIB8ZhhxBQBWRSw6FCh3sM8GrYTthL-wqqku4N44TyqEgwF3lmRHr4Op0PGXoH31c5rO8mqV-eOZ49bikgtcHBL55tmhIkEMqg_cFB2TpFxjtg703we6NRL8HQFCS07oSUCZi6Rm04lz1yytIHBKoQpo1w6Gsm4gmyS8b8Y5PydeMdX8gwS2Ok4I-ov5NZtvQde95GMsccn_1wzNKfu3RZtS66cSl9lvL7qO1aIk7knbJGvefdtIOzi73M4bYvovUHDFk6AcX_0HRESxnpBOW_jfCDxIZCi_1L_wm4xGQ60wIAAA==)).\n\n```svelte\n<script>\n\tlet count = $state(0);\n\tlet milliseconds = $state(1000);\n\n\t$effect(() => {\n\t\t// This will be recreated whenever `milliseconds` changes\n\t\tconst interval = setInterval(() => {\n\t\t\tcount += 1;\n\t\t}, milliseconds);\n\n\t\treturn () => {\n\t\t\t// if a teardown function is provided, it will run\n\t\t\t// a) immediately before the effect re-runs\n\t\t\t// b) when the component is destroyed\n\t\t\tclearInterval(interval);\n\t\t};\n\t});\n</script>\n\n<h1>{count}</h1>\n\n<button onclick={() => (milliseconds *= 2)}>slower</button>\n<button onclick={() => (milliseconds /= 2)}>faster</button>\n```\n\nTeardown functions also run when the effect is destroyed, which happens when its parent is destroyed (for example, a component is unmounted) or the parent effect re-runs.\n\n### Understanding dependencies\n\n`$effect` automatically picks up any reactive values (`$state`, `$derived`, `$props`) that are _synchronously_ read inside its function body (including indirectly, via function calls) and registers them as dependencies. When those dependencies change, the `$effect` schedules a re-run.\n\nIf `$state` and `$derived` are used directly inside the `$effect` (for example, during creation of a [reactive class](https://svelte.dev/docs/svelte/$state#Classes)), those values will _not_ be treated as dependencies.\n\nValues that are read _asynchronously_ — after an `await` or inside a `setTimeout`, for example — will not be tracked. Here, the canvas will be repainted when `color` changes, but not when `size` changes ([demo](/playground/untitled#H4sIAAAAAAAAE31T246bMBD9lZF3pWSlBEirfaEQqdo_2PatVIpjBrDkGGQPJGnEv1e2IZfVal-wfHzmzJyZ4cIqqdCy9M-F0blDlnqArZjmB3f72XWRHVCRw_bc4me4aDWhJstSlllhZEfbQhekkMDKfwg5PFvihMvX5OXH_CJa1Zrb0-Kpqr5jkiwC48rieuDWQbqgZ6wqFLRcvkC-hYvnkWi1dWqa8ESQTxFRjfQWsOXiWzmr0sSLhEJu3p1YsoJkNUcdZUnN9dagrBu6FVRQHAM10sJRKgUG16bXcGxQ44AGdt7SDkTDdY02iqLHnJVU6hedlWuIp94JW6Tf8oBt_8GdTxlF0b4n0C35ZLBzXb3mmYn3ae6cOW74zj0YVzDNYXRHFt9mprNgHfZSl6mzml8CMoLvTV6wTZIUDEJv5us2iwMtiJRyAKG4tXnhl8O0yhbML0Wm-B7VNlSSSd31BG7z8oIZZ6dgIffAVY_5xdU9Qrz1Bnx8fCfwtZ7v8Qc9j3nB8PqgmMWlHIID6-bkVaPZwDySfWtKNGtquxQ23Qlsq2QJT0KIqb8dL0up6xQ2eIBkAg_c1FI_YqW0neLnFCqFpwmreedJYT7XX8FVOBfwWRhXstZrSXiwKQjUhOZeMIleb5JZfHWn2Yq5pWEpmR7Hv-N_wEqT8hEEAAA=)):\n\n```ts\n// @filename: index.ts\ndeclare let canvas: {\n\twidth: number;\n\theight: number;\n\tgetContext(type: '2d', options?: CanvasRenderingContext2DSettings): CanvasRenderingContext2D;\n};\ndeclare let color: string;\ndeclare let size: number;\n\n// ---cut---\n$effect(() => {\n\tconst context = canvas.getContext('2d');\n\tcontext.clearRect(0, 0, canvas.width, canvas.height);\n\n\t// this will re-run whenever `color` changes...\n\tcontext.fillStyle = color;\n\n\tsetTimeout(() => {\n\t\t// ...but not when `size` changes\n\t\tcontext.fillRect(0, 0, size, size);\n\t}, 0);\n});\n```\n\nAn effect only reruns when the object it reads changes, not when a property inside it changes. (If you want to observe changes _inside_ an object at dev time, you can use [`$inspect`]($inspect).)\n\n```svelte\n<script>\n\tlet state = $state({ value: 0 });\n\tlet derived = $derived({ value: state.value * 2 });\n\n\t// this will run once, because `state` is never reassigned (only mutated)\n\t$effect(() => {\n\t\tstate;\n\t});\n\n\t// this will run whenever `state.value` changes...\n\t$effect(() => {\n\t\tstate.value;\n\t});\n\n\t// ...and so will this, because `derived` is a new object each time\n\t$effect(() => {\n\t\tderived;\n\t});\n</script>\n\n<button onclick={() => (state.value += 1)}>\n\t{state.value}\n</button>\n\n<p>{state.value} doubled is {derived.value}</p>\n```\n\nAn effect only depends on the values that it read the last time it ran. This has interesting implications for effects that have conditional code.\n\nFor instance, if `condition` is `true` in the code snippet below, the code inside the `if` block will run and `color` will be evaluated. This means that changes to either `condition` or `color` [will cause the effect to re-run](/playground/untitled#H4sIAAAAAAAAE21RQW6DMBD8ytaNBJHaJFLViwNIVZ8RcnBgXVk1xsILTYT4e20TQg89IOPZ2fHM7siMaJBx9tmaWpFqjQNlAKXEihx7YVJpdIyfRkY3G4gB8Pi97cPanRtQU8AuwuF_eNUaQuPlOMtc1SlLRWlKUo1tOwJflUikQHZtA0klzCDc64Imx0ANn8bInV1CDhtHgjClrsftcSXotluLybOUb3g4JJHhOZs5WZpuIS9gjNqkJKQP5e2ClrR4SMdZ13E4xZ8zTPOTJU2A2uE_PQ9COCI926_hTVarIU4hu_REPlBrKq2q73ycrf1N-vS4TMUsulaVg3EtR8H9rFgsg8uUsT1B2F9eshigZHBRpuaD0D3mY8Qm2BfB5N2YyRzdNEYVDy0Ja-WsFjcOUuP1HvFLWA6H3XuHTUSmmDV2--0TXonxsKbp7G9C6R__NONS-MFNvxj_d6mBAgAA).\n\nConversely, if `condition` is `false`, `color` will not be evaluated, and the effect will _only_ re-run again when `condition` changes.\n\n```ts\n// @filename: ambient.d.ts\ndeclare module 'canvas-confetti' {\n\tinterface ConfettiOptions {\n\t\tcolors: string[];\n\t}\n\n\tfunction confetti(opts?: ConfettiOptions): void;\n\texport default confetti;\n}\n\n// @filename: index.js\n// ---cut---\nimport confetti from 'canvas-confetti';\n\nlet condition = $state(true);\nlet color = $state('#ff3e00');\n\n$effect(() => {\n\tif (condition) {\n\t\tconfetti({ colors: [color] });\n\t} else {\n\t\tconfetti();\n\t}\n});\n```\n\n## `$effect.pre`\n\nIn rare cases, you may need to run code _before_ the DOM updates. For this we can use the `$effect.pre` rune:\n\n```svelte\n<script>\n\timport { tick } from 'svelte';\n\n\tlet div = $state();\n\tlet messages = $state([]);\n\n\t// ...\n\n\t$effect.pre(() => {\n\t\tif (!div) return; // not yet mounted\n\n\t\t// reference `messages` array length so that this code re-runs whenever it changes\n\t\tmessages.length;\n\n\t\t// autoscroll when new messages are added\n\t\tif (div.offsetHeight + div.scrollTop > div.scrollHeight - 20) {\n\t\t\ttick().then(() => {\n\t\t\t\tdiv.scrollTo(0, div.scrollHeight);\n\t\t\t});\n\t\t}\n\t});\n</script>\n\n<div bind:this={div}>\n\t{#each messages as message}\n\t\t<p>{message}</p>\n\t{/each}\n</div>\n```\n\nApart from the timing, `$effect.pre` works exactly like `$effect`.\n\n## `$effect.tracking`\n\nThe `$effect.tracking` rune is an advanced feature that tells you whether or not the code is running inside a tracking context, such as an effect or inside your template ([demo](/playground/untitled#H4sIAAAAAAAACn3PwYrCMBDG8VeZDYIt2PYeY8Dn2HrIhqkU08nQjItS-u6buAt7UDzmz8ePyaKGMWBS-nNRcmdU-hHUTpGbyuvI3KZvDFLal0v4qvtIgiSZUSb5eWSxPfWSc4oB2xDP1XYk8HHiSHkICeXKeruDDQ4Demlldv4y0rmq6z10HQwuJMxGVv4mVVXDwcJS0jP9u3knynwtoKz1vifT_Z9Jhm0WBCcOTlDD8kyspmML5qNpHg40jc3fFryJ0iWsp_UHgz3180oBAAA=)):\n\n```svelte\n<script>\n\tconsole.log('in component setup:', $effect.tracking()); // false\n\n\t$effect(() => {\n\t\tconsole.log('in effect:', $effect.tracking()); // true\n\t});\n</script>\n\n<p>in template: {$effect.tracking()}</p> <!-- true -->\n```\n\nIt is used to implement abstractions like [`createSubscriber`](/docs/svelte/svelte-reactivity#createSubscriber), which will create listeners to update reactive values but _only_ if those values are being tracked (rather than, for example, read inside an event handler).\n\n## `$effect.pending`\n\nWhen using [`await`](await-expressions) in components, the `$effect.pending()` rune tells you how many promises are pending in the current [boundary](svelte-boundary), not including child boundaries ([demo](/playground/untitled#H4sIAAAAAAAAE3WRMU_DMBCF_8rJdHDUqilILGkaiY2RgY0yOPYZWbiOFV8IleX_jpMUEAIWS_7u-d27c2ROnJBV7B6t7WDsequAozKEqmAbpo3FwKqnyOjsJ90EMr-8uvN-G97Q0sRaEfAvLjtH6CjbsDrI3nhqju5IFgkEHGAVSBDy62L_SdtvejPTzEU4Owl6cJJM50AoxcUG2gLiVM31URgChyM89N3JBORcF3BoICA9mhN2A3G9gdvdrij2UJYgejLaSCMsKLTivNj0SEOf7WEN7ZwnHV1dfqd2dTsQ5QCdk9bI10PkcxexXqcmH3W51Jt_le2kbH8os9Y3UaTcNLYpDx-Xab6GTHXpZ128MhpWqDVK2np0yrgXXqQpaLa4APDLBkIF8bd2sYql0Sn_DeE7sYr6AdNzvgljR-MUq7SwAdMHeUtgHR4CAAA=)):\n\n```svelte\n<button onclick={() => a++}>a++</button>\n<button onclick={() => b++}>b++</button>\n\n<p>{a} + {b} = {await add(a, b)}</p>\n\n{#if $effect.pending()}\n\t<p>pending promises: {$effect.pending()}</p>\n{/if}\n```\n\n## `$effect.root`\n\nThe `$effect.root` rune is an advanced feature that creates a non-tracked scope that doesn't auto-cleanup. This is useful for nested effects that you want to manually control. This rune also allows for the creation of effects outside of the component initialisation phase.\n\n```js\nconst destroy = $effect.root(() => {\n\t$effect(() => {\n\t\t// setup\n\t});\n\n\treturn () => {\n\t\t// cleanup\n\t};\n});\n\n// later...\ndestroy();\n```\n\n## When not to use `$effect`\n\nIn general, `$effect` is best considered something of an escape hatch — useful for things like analytics and direct DOM manipulation — rather than a tool you should use frequently. In particular, avoid using it to synchronise state. Instead of this...\n\n```svelte\n<script>\n\tlet count = $state(0);\n\tlet doubled = $state();\n\n\t// don't do this!\n\t$effect(() => {\n\t\tdoubled = count * 2;\n\t});\n</script>\n```\n\n...do this:\n\n```svelte\n<script>\n\tlet count = $state(0);\n\tlet doubled = $derived(count * 2);\n</script>\n```\n\n> [!NOTE] For things that are more complicated than a simple expression like `count * 2`, you can also use `$derived.by`.\n\nIf you're using an effect because you want to be able to reassign the derived value (to build an optimistic UI, for example) note that [deriveds can be directly overridden]($derived#Overriding-derived-values) as of Svelte 5.25.\n\nYou might be tempted to do something convoluted with effects to link one value to another. The following example shows two inputs for \"money spent\" and \"money left\" that are connected to each other. If you update one, the other should update accordingly. Don't use effects for this ([demo](/playground/untitled#H4sIAAAAAAAAE5WRTWrDMBCFryKGLBJoY3fRjWIHeoiu6i6UZBwEY0VE49TB-O6VxrFTSih0qe_Ne_OjHpxpEDS8O7ZMeIAnqC1hAP3RA1990hKI_Fb55v06XJA4sZ0J-IjvT47RcYyBIuzP1vO2chVHHFjxiQ2pUr3k-SZRQlbBx_LIFoEN4zJfzQph_UMQr4hRXmBd456Xy5Uqt6pPKHmkfmzyPAZL2PCnbRpg8qWYu63I7lu4gswOSRYqrPNt3CgeqqzgbNwRK1A76w76YqjFspfcQTWmK3vJHlQm1puSTVSeqdOc_r9GaeCHfUSY26TXry6Br4RSK3C6yMEGT-aqVU3YbUZ2NF6rfP2KzXgbuYzY46czdgyazy0On_FlLH3F-UDXhgIO35UGlA1rAgAA)):\n\n```svelte\n<script>\n\tconst total = 100;\n\tlet spent = $state(0);\n\tlet left = $state(total);\n\n\t$effect(() => {\n\t\tleft = total - spent;\n\t});\n\n\t$effect(() => {\n\t\tspent = total - left;\n\t});\n</script>\n\n<label>\n\t<input type=\"range\" bind:value={spent} max={total} />\n\t{spent}/{total} spent\n</label>\n\n<label>\n\t<input type=\"range\" bind:value={left} max={total} />\n\t{left}/{total} left\n</label>\n```\n\nInstead, use `oninput` callbacks or — better still — [function bindings](bind#Function-bindings) where possible ([demo](/playground/untitled#H4sIAAAAAAAAE5VRvW7CMBB-FcvqECQK6dDFJEgsnfoGTQdDLsjSxVjxhYKivHvPBwFUsXS8774_nwftbQva6I_e78gdvNo6Xzu_j3quG4cQtfkaNJ1DIiWA8atkE8IiHgEpYVsb4Rm-O3gCT2yji7jrXKB15StiOJKiA1lUpXrL81VCEUjFwHTGXiJZgiyf3TYIjSxq6NwR6uyifr0ohMbEZnpHH2rWf7ImS8KZGtK6osl_UqelRIyVL5b3ir5AuwWUtoXzoee6fIWy0p31e6i0XMocLfZQDuI6qtaeykGcR7UU6XWznFAZU9LN_X9B2UyVayk9f3ji0-REugen6U9upDOCcAWcLlS7GNCejWoQTqsLtrfBqHzxDu3DrUTOf0xwIm2o62H85sk6_OHG2jQWI4y_3byXXGMCAAA=)):\n\n```svelte\n<script>\n\tconst total = 100;\n\tlet spent = $state(0);\n\tlet left = $derived(total - spent);\n\n+++\tfunction updateLeft(left) {\n\t\tspent = total - left;\n\t}+++\n</script>\n\n<label>\n\t<input type=\"range\" bind:value={spent} max={total} />\n\t{spent}/{total} spent\n</label>\n\n<label>\n\t<input type=\"range\" +++bind:value={() => left, updateLeft}+++ max={total} />\n\t{left}/{total} left\n</label>\n```\n\nIf you absolutely have to update `$state` within an effect and run into an infinite loop because you read and write to the same `$state`, use [untrack](svelte#untrack).",
    "svelte/$props": "The inputs to a component are referred to as _props_, which is short for _properties_. You pass props to components just like you pass attributes to elements:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport MyComponent from './MyComponent.svelte';\n</script>\n\n<MyComponent adjective=\"cool\" />\n```\n\nOn the other side, inside `MyComponent.svelte`, we can receive props with the `$props` rune...\n\n```svelte\n<!--- file: MyComponent.svelte --->\n<script>\n\tlet props = $props();\n</script>\n\n<p>this component is {props.adjective}</p>\n```\n\n...though more commonly, you'll [_destructure_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) your props:\n\n```svelte\n<!--- file: MyComponent.svelte --->\n<script>\n\tlet +++{ adjective }+++ = $props();\n</script>\n\n<p>this component is {+++adjective+++}</p>\n```\n\n## Fallback values\n\nDestructuring allows us to declare fallback values, which are used if the parent component does not set a given prop (or the value is `undefined`):\n\n```js\nlet { adjective = 'happy' } = $props();\n```\n\n> [!NOTE] Fallback values are not turned into reactive state proxies (see [Updating props](#Updating-props) for more info)\n\n## Renaming props\n\nWe can also use the destructuring assignment to rename props, which is necessary if they're invalid identifiers, or a JavaScript keyword like `super`:\n\n```js\nlet { super: trouper = 'lights are gonna find me' } = $props();\n```\n\n## Rest props\n\nFinally, we can use a _rest property_ to get, well, the rest of the props:\n\n```js\nlet { a, b, c, ...others } = $props();\n```\n\n## Updating props\n\nReferences to a prop inside a component update when the prop itself updates — when `count` changes in `App.svelte`, it will also change inside `Child.svelte`. But the child component is able to temporarily override the prop value, which can be useful for unsaved ephemeral state ([demo](/playground/untitled#H4sIAAAAAAAAE6WQ0WrDMAxFf0WIQR0Wmu3VTQJln7HsIfVcZubIxlbGRvC_DzuBraN92qPula50tODZWB1RPi_IX16jLALWSOOUq6P3-_ihLWftNEZ9TVeOWBNHlNhGFYznfqCBzeRdYHh6M_YVzsFNsNs3pdpGd4eBcqPVDMrNxNDBXeSRtXioDgO1zU8ataeZ2RE4Utao924RFXQ9iHXwvoPHKpW1xY4g_Bg0cSVhKS0p560Za95612ZC02ONrD8ZJYdZp_rGQ37ff_mSP86Np2TWZaNNmdcH56P4P67K66_SXoK9pG-5dF5Z9QEAAA==)):\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport Child from './Child.svelte';\n\n\tlet count = $state(0);\n</script>\n\n<button onclick={() => (count += 1)}>\n\tclicks (parent): {count}\n</button>\n\n<Child {count} />\n```\n\n```svelte\n<!--- file: Child.svelte --->\n<script>\n\tlet { count } = $props();\n</script>\n\n<button onclick={() => (count += 1)}>\n\tclicks (child): {count}\n</button>\n```\n\nWhile you can temporarily _reassign_ props, you should not _mutate_ props unless they are [bindable]($bindable).\n\nIf the prop is a regular object, the mutation will have no effect ([demo](/playground/untitled#H4sIAAAAAAAAE3WQwU7DMBBEf2W1QmorQgJXk0RC3PkBwiExG9WQrC17U4Es_ztKUkQp9OjxzM7bjcjtSKjwyfKNp1aLORA4b13ADHszUED1HFE-3eyaBcy-Mw_O5eFAg8xa1wb6T9eWhVgCKiyD9sZJ3XAjZnTWCzzuzfAKvbcjbPJieR2jm_uGy-InweXqtd0baaliBG0nFgW3kBIUNWYo9CGoxE-UsgvIpw2_oc9-LmAPJBCPDJCggqvlVtvdH9puErEMlvVg9HsVtzuoaojzkKKAfRuALVDfk5ZZW0fmy05wXcFdwyktlUs-KIinljTXrRVnm7-kL9dYLVbUAQAA)):\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport Child from './Child.svelte';\n</script>\n\n<Child object={{ count: 0 }} />\n```\n\n```svelte\n<!--- file: Child.svelte --->\n<script>\n\tlet { object } = $props();\n</script>\n\n<button onclick={() => {\n\t// has no effect\n\tobject.count += 1\n}}>\n\tclicks: {object.count}\n</button>\n```\n\nIf the prop is a reactive state proxy, however, then mutations _will_ have an effect but you will see an [`ownership_invalid_mutation`](runtime-warnings#Client-warnings-ownership_invalid_mutation) warning, because the component is mutating state that does not 'belong' to it ([demo](/playground/untitled#H4sIAAAAAAAAE3WR0U7DMAxFf8VESBuiauG1WycheOEbKA9p67FA6kSNszJV-XeUZhMw2GN8r-1znUmQ7FGU4pn2UqsOes-SlSGRia3S6ET5Mgk-2OiJBZGdOh6szd0eNcdaIx3-V28NMRI7UYq1awdleVNTzaq3ZmB43CndwXYwPSzyYn4dWxermqJRI4Np3rFlqODasWRcTtAaT1zCHYSbVU3r4nsyrdPMKTUFKDYiE4yfLEoePIbsQpqfy3_nOVMuJIqg0wk1RFg7GOuWfwEbz2wIDLVatR_VtLyBagNTHFIUMCqtoZXeIfAOU1JoUJsR2IC3nWTMjt7GM4yKdyBhlAMpesvhydCC0y_i0ZagHByMh26WzUhXUUxKnpbcVnBfUwhznJnNlac7JkuIURL-2VVfwxflyrWcSQIAAA==)):\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport Child from './Child.svelte';\n\n\tlet object = $state({count: 0});\n</script>\n\n<Child {object} />\n```\n\n```svelte\n<!--- file: Child.svelte --->\n<script>\n\tlet { object } = $props();\n</script>\n\n<button onclick={() => {\n\t// will cause the count below to update,\n\t// but with a warning. Don't mutate\n\t// objects you don't own!\n\tobject.count += 1\n}}>\n\tclicks: {object.count}\n</button>\n```\n\nThe fallback value of a prop not declared with `$bindable` is left untouched — it is not turned into a reactive state proxy — meaning mutations will not cause updates ([demo](/playground/untitled#H4sIAAAAAAAAE3WQwU7DMBBEf2VkIbUVoYFraCIh7vwA4eC4G9Wta1vxpgJZ_nfkBEQp9OjxzOzTRGHlkUQlXpy9G0gq1idCL43ppDrAD84HUYheGwqieo2CP3y2Z0EU3-En79fhRIaz1slA_-nKWSbLQVRiE9SgPTetbVkfvRsYzztttugHd8RiXU6vr-jisbWb8idhN7O3bEQhmN5ZVDyMlIorcOddv_Eufq4AGmJEuG5PilEjQrnRcoV7JCTUuJlGWq7-YHYjs7NwVhmtDnVcrlA3iLmzLLGTAdaB-j736h68Oxv-JM1I0AFjoG1OzPfX023c1nhobUoT39QeKsRzS8owM8DFTG_pE6dcVl70AQAA))\n\n```svelte\n<!--- file: Child.svelte --->\n<script>\n\tlet { object = { count: 0 } } = $props();\n</script>\n\n<button onclick={() => {\n\t// has no effect if the fallback value is used\n\tobject.count += 1\n}}>\n\tclicks: {object.count}\n</button>\n```\n\nIn summary: don't mutate props. Either use callback props to communicate changes, or — if parent and child should share the same object — use the [`$bindable`]($bindable) rune.\n\n## Type safety\n\nYou can add type safety to your components by annotating your props, as you would with any other variable declaration. In TypeScript that might look like this...\n\n```svelte\n<script lang=\"ts\">\n\tlet { adjective }: { adjective: string } = $props();\n</script>\n```\n\n...while in JSDoc you can do this:\n\n```svelte\n<script>\n\t/** @type {{ adjective: string }} */\n\tlet { adjective } = $props();\n</script>\n```\n\nYou can, of course, separate the type declaration from the annotation:\n\n```svelte\n<script lang=\"ts\">\n\tinterface Props {\n\t\tadjective: string;\n\t}\n\n\tlet { adjective }: Props = $props();\n</script>\n```\n\n> [!NOTE] Interfaces for native DOM elements are provided in the `svelte/elements` module (see [Typing wrapper components](typescript#Typing-wrapper-components))\n\nAdding types is recommended, as it ensures that people using your component can easily discover which props they should provide.\n\n\n## `$props.id()`\n\nThis rune, added in version 5.20.0, generates an ID that is unique to the current component instance. When hydrating a server-rendered component, the value will be consistent between server and client.\n\nThis is useful for linking elements via attributes like `for` and `aria-labelledby`.\n\n```svelte\n<script>\n\tconst uid = $props.id();\n</script>\n\n<form>\n\t<label for=\"{uid}-firstname\">First Name: </label>\n\t<input id=\"{uid}-firstname\" type=\"text\" />\n\n\t<label for=\"{uid}-lastname\">Last Name: </label>\n\t<input id=\"{uid}-lastname\" type=\"text\" />\n</form>\n```",
    "svelte/$bindable": "Ordinarily, props go one way, from parent to child. This makes it easy to understand how data flows around your app.\n\nIn Svelte, component props can be _bound_, which means that data can also flow _up_ from child to parent. This isn't something you should do often, but it can simplify your code if used sparingly and carefully.\n\nIt also means that a state proxy can be _mutated_ in the child.\n\n> [!NOTE] Mutation is also possible with normal props, but is strongly discouraged — Svelte will warn you if it detects that a component is mutating state it does not 'own'.\n\nTo mark a prop as bindable, we use the `$bindable` rune:\n\n<!-- prettier-ignore -->\n```svelte\n/// file: FancyInput.svelte\n<script>\n\tlet { value = $bindable(), ...props } = $props();\n</script>\n\n<input bind:value={value} {...props} />\n\n<style>\n\tinput {\n\t\tfont-family: 'Comic Sans MS';\n\t\tcolor: deeppink;\n\t}\n</style>\n```\n\nNow, a component that uses `<FancyInput>` can add the [`bind:`](bind) directive ([demo](/playground/untitled#H4sIAAAAAAAAE3WQwWrDMBBEf2URBSfg2nfFMZRCoYeecqx6UJx1IyqvhLUONcb_XqSkTUOSk1az7DBvJtEai0HI90nw6FHIJIhckO7i78n7IhzQctS2OuAtvXHESByEFFVoeuO5VqTYdN71DC-amvGV_MDQ9q6DrCjP0skkWymKJxYZOgxBfyKs4SGwZlxke7TWZcuVoqo8-1P1z3lraCcP2g64nk4GM5S1osrXf0JV-lrkgvGbheR-wDm_g30V8JL-1vpOCZFogpQsEsWcemtxscyhKArfOx9gjps0Lq4hzRVfemaYfu-PoIqqwKPFY_XpaIqj4tYRP7a6M3aUkD27zjSw0RTgbZN6Z8WNs66XsEP03tBXUueUJFlelvYx_wCuI3leNwIAAA==)):\n\n<!-- prettier-ignore -->\n```svelte\n/// file: App.svelte\n<script>\n\timport FancyInput from './FancyInput.svelte';\n\n\tlet message = $state('hello');\n</script>\n\n<FancyInput bind:value={message} />\n<p>{message}</p>\n```\n\nThe parent component doesn't _have_ to use `bind:` — it can just pass a normal prop. Some parents don't want to listen to what their children have to say.\n\nIn this case, you can specify a fallback value for when no prop is passed at all:\n\n```js\n/// file: FancyInput.svelte\nlet { value = $bindable('fallback'), ...props } = $props();\n```",
    "svelte/$inspect": "> [!NOTE] `$inspect` only works during development. In a production build it becomes a noop.\n\nThe `$inspect` rune is roughly equivalent to `console.log`, with the exception that it will re-run whenever its argument changes. `$inspect` tracks reactive state deeply, meaning that updating something inside an object or array using fine-grained reactivity will cause it to re-fire ([demo](/playground/untitled#H4sIAAAAAAAACkWQ0YqDQAxFfyUMhSotdZ-tCvu431AXtGOqQ2NmmMm0LOK_r7Utfby5JzeXTOpiCIPKT5PidkSVq2_n1F7Jn3uIcEMSXHSw0evHpAjaGydVzbUQCmgbWaCETZBWMPlKj29nxBDaHj_edkAiu12JhdkYDg61JGvE_s2nR8gyuBuiJZuDJTyQ7eE-IEOzog1YD80Lb0APLfdYc5F9qnFxjiKWwbImo6_llKRQVs-2u91c_bD2OCJLkT3JZasw7KLA2XCX31qKWE6vIzNk1fKE0XbmYrBTufiI8-_8D2cUWBA_AQAA)):\n\n```svelte\n<script>\n\tlet count = $state(0);\n\tlet message = $state('hello');\n\n\t$inspect(count, message); // will console.log when `count` or `message` change\n</script>\n\n<button onclick={() => count++}>Increment</button>\n<input bind:value={message} />\n```\n\n## $inspect(...).with\n\n`$inspect` returns a property `with`, which you can invoke with a callback, which will then be invoked instead of `console.log`. The first argument to the callback is either `\"init\"` or `\"update\"`; subsequent arguments are the values passed to `$inspect` ([demo](/playground/untitled#H4sIAAAAAAAACkVQ24qDMBD9lSEUqlTqPlsj7ON-w7pQG8c2VCchmVSK-O-bKMs-DefKYRYx6BG9qL4XQd2EohKf1opC8Nsm4F84MkbsTXAqMbVXTltuWmp5RAZlAjFIOHjuGLOP_BKVqB00eYuKs82Qn2fNjyxLtcWeyUE2sCRry3qATQIpJRyD7WPVMf9TW-7xFu53dBcoSzAOrsqQNyOe2XUKr0Xi5kcMvdDB2wSYO-I9vKazplV1-T-d6ltgNgSG1KjVUy7ZtmdbdjqtzRcphxMS1-XubOITJtPrQWMvKnYB15_1F7KKadA_AQAA)):\n\n```svelte\n<script>\n\tlet count = $state(0);\n\n\t$inspect(count).with((type, count) => {\n\t\tif (type === 'update') {\n\t\t\tdebugger; // or `console.trace`, or whatever you want\n\t\t}\n\t});\n</script>\n\n<button onclick={() => count++}>Increment</button>\n```\n\nA convenient way to find the origin of some change is to pass `console.trace` to `with`:\n\n```js\n// @errors: 2304\n$inspect(stuff).with(console.trace);\n```\n\n## $inspect.trace(...)\n\nThis rune, added in 5.14, causes the surrounding function to be _traced_ in development. Any time the function re-runs as part of an [effect]($effect) or a [derived]($derived), information will be printed to the console about which pieces of reactive state caused the effect to fire.\n\n```svelte\n<script>\n\timport { doSomeWork } from './elsewhere';\n\n\t$effect(() => {\n\t\t+++// $inspect.trace must be the first statement of a function body+++\n\t\t+++$inspect.trace();+++\n\t\tdoSomeWork();\n\t});\n</script>\n```\n\n`$inspect.trace` takes an optional first argument which will be used as the label.",
    "svelte/$host": "When compiling a component as a [custom element](custom-elements), the `$host` rune provides access to the host element, allowing you to (for example) dispatch custom events ([demo](/playground/untitled#H4sIAAAAAAAAE41Ry2rDMBD8FSECtqkTt1fHFpSSL-ix7sFRNkTEXglrnTYY_3uRlDgxTaEHIfYxs7szA9-rBizPPwZOZwM89wmecqxbF70as7InaMjltrWFR3mpkQDJ8pwXVnbKkKiwItUa3RGLVtk7gTHQXRDR2lXda4CY1D0SK9nCUk0QPyfrCovsRoNFe17aQOAwGncgO2gBqRzihJXiQrEs2csYOhQ-7HgKHaLIbpRhhBG-I2eD_8ciM4KnnOCbeE5dD2P6h0Dz0-Yi_arNhPLJXBtSGi2TvSXdbpqwdsXvjuYsC1veabvvUTog2ylrapKH2G2XsMFLS4uDthQnq2t1cwKkGOGLvYU5PvaQxLsxOkPmsm97Io1Mo2yUPF6VnOZFkw1RMoopKLKAE_9gmGxyDFMwMcwN-Bx_ABXQWmOtAgAA)):\n\n<!-- prettier-ignore -->\n```svelte\n/// file: Stepper.svelte\n<svelte:options customElement=\"my-stepper\" />\n\n<script>\n\tfunction dispatch(type) {\n\t\t+++$host()+++.dispatchEvent(new CustomEvent(type));\n\t}\n</script>\n\n<button onclick={() => dispatch('decrement')}>decrement</button>\n<button onclick={() => dispatch('increment')}>increment</button>\n```\n\n<!-- prettier-ignore -->\n```svelte\n/// file: App.svelte\n<script>\n\timport './Stepper.svelte';\n\n\tlet count = $state(0);\n</script>\n\n<my-stepper\n\tondecrement={() => count -= 1}\n\tonincrement={() => count += 1}\n></my-stepper>\n\n<p>count: {count}</p>\n```",
    "svelte/basic-markup": "Markup inside a Svelte component can be thought of as HTML++.\n\n## Tags\n\nA lowercase tag, like `<div>`, denotes a regular HTML element. A capitalised tag or a tag that uses dot notation, such as `<Widget>` or `<my.stuff>`, indicates a _component_.\n\n```svelte\n<script>\n\timport Widget from './Widget.svelte';\n</script>\n\n<div>\n\t<Widget />\n</div>\n```\n\n## Element attributes\n\nBy default, attributes work exactly like their HTML counterparts.\n\n```svelte\n<div class=\"foo\">\n\t<button disabled>can't touch this</button>\n</div>\n```\n\nAs in HTML, values may be unquoted.\n\n<!-- prettier-ignore -->\n```svelte\n<input type=checkbox />\n```\n\nAttribute values can contain JavaScript expressions.\n\n```svelte\n<a href=\"page/{p}\">page {p}</a>\n```\n\nOr they can _be_ JavaScript expressions.\n\n```svelte\n<button disabled={!clickable}>...</button>\n```\n\nBoolean attributes are included on the element if their value is [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) and excluded if it's [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy).\n\nAll other attributes are included unless their value is [nullish](https://developer.mozilla.org/en-US/docs/Glossary/Nullish) (`null` or `undefined`).\n\n```svelte\n<input required={false} placeholder=\"This input field is not required\" />\n<div title={null}>This div has no title attribute</div>\n```\n\n> [!NOTE] Quoting a singular expression does not affect how the value is parsed, but in Svelte 6 it will cause the value to be coerced to a string:\n>\n> <!-- prettier-ignore -->\n> ```svelte\n> <button disabled=\"{number !== 42}\">...</button>\n> ```\n\nWhen the attribute name and value match (`name={name}`), they can be replaced with `{name}`.\n\n```svelte\n<button {disabled}>...</button>\n<!-- equivalent to\n<button disabled={disabled}>...</button>\n-->\n```\n\n## Component props\n\nBy convention, values passed to components are referred to as _properties_ or _props_ rather than _attributes_, which are a feature of the DOM.\n\nAs with elements, `name={name}` can be replaced with the `{name}` shorthand.\n\n```svelte\n<Widget foo={bar} answer={42} text=\"hello\" />\n```\n\n## Spread attributes\n\n_Spread attributes_ allow many attributes or properties to be passed to an element or component at once.\n\nAn element or component can have multiple spread attributes, interspersed with regular ones. Order matters — if `things.a` exists it will take precedence over `a=\"b\"`, while `c=\"d\"` would take precedence over `things.c`:\n\n```svelte\n<Widget a=\"b\" {...things} c=\"d\" />\n```\n\n## Events\n\nListening to DOM events is possible by adding attributes to the element that start with `on`. For example, to listen to the `click` event, add the `onclick` attribute to a button:\n\n```svelte\n<button onclick={() => console.log('clicked')}>click me</button>\n```\n\nEvent attributes are case sensitive. `onclick` listens to the `click` event, `onClick` listens to the `Click` event, which is different. This ensures you can listen to custom events that have uppercase characters in them.\n\nBecause events are just attributes, the same rules as for attributes apply:\n\n- you can use the shorthand form: `<button {onclick}>click me</button>`\n- you can spread them: `<button {...thisSpreadContainsEventAttributes}>click me</button>`\n\nTiming-wise, event attributes always fire after events from bindings (e.g. `oninput` always fires after an update to `bind:value`). Under the hood, some event handlers are attached directly with `addEventListener`, while others are _delegated_.\n\nWhen using `ontouchstart` and `ontouchmove` event attributes, the handlers are [passive](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#using_passive_listeners) for better performance. This greatly improves responsiveness by allowing the browser to scroll the document immediately, rather than waiting to see if the event handler calls `event.preventDefault()`.\n\nIn the very rare cases that you need to prevent these event defaults, you should use [`on`](svelte-events#on) instead (for example inside an action).\n\n### Event delegation\n\nTo reduce memory footprint and increase performance, Svelte uses a technique called event delegation. This means that for certain events — see the list below — a single event listener at the application root takes responsibility for running any handlers on the event's path.\n\nThere are a few gotchas to be aware of:\n\n- when you manually dispatch an event with a delegated listener, make sure to set the `{ bubbles: true }` option or it won't reach the application root\n- when using `addEventListener` directly, avoid calling `stopPropagation` or the event won't reach the application root and handlers won't be invoked. Similarly, handlers added manually inside the application root will run _before_ handlers added declaratively deeper in the DOM (with e.g. `onclick={...}`), in both capturing and bubbling phases. For these reasons it's better to use the `on` function imported from `svelte/events` rather than `addEventListener`, as it will ensure that order is preserved and `stopPropagation` is handled correctly.\n\nThe following event handlers are delegated:\n\n- `beforeinput`\n- `click`\n- `change`\n- `dblclick`\n- `contextmenu`\n- `focusin`\n- `focusout`\n- `input`\n- `keydown`\n- `keyup`\n- `mousedown`\n- `mousemove`\n- `mouseout`\n- `mouseover`\n- `mouseup`\n- `pointerdown`\n- `pointermove`\n- `pointerout`\n- `pointerover`\n- `pointerup`\n- `touchend`\n- `touchmove`\n- `touchstart`\n\n## Text expressions\n\nA JavaScript expression can be included as text by surrounding it with curly braces.\n\n```svelte\n{expression}\n```\n\nExpressions that are `null` or `undefined` will be omitted; all others are [coerced to strings](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion).\n\nCurly braces can be included in a Svelte template by using their [HTML entity](https://developer.mozilla.org/docs/Glossary/Entity) strings: `&lbrace;`, `&lcub;`, or `&#123;` for `{` and `&rbrace;`, `&rcub;`, or `&#125;` for `}`.\n\nIf you're using a regular expression (`RegExp`) [literal notation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#literal_notation_and_constructor), you'll need to wrap it in parentheses.\n\n<!-- prettier-ignore -->\n```svelte\n<h1>Hello {name}!</h1>\n<p>{a} + {b} = {a + b}.</p>\n\n<div>{(/^[A-Za-z ]+$/).test(value) ? x : y}</div>\n```\n\nThe expression will be stringified and escaped to prevent code injections. If you want to render HTML, use the `{@html}` tag instead.\n\n```svelte\n{@html potentiallyUnsafeHtmlString}\n```\n\n> [!NOTE] Make sure that you either escape the passed string or only populate it with values that are under your control in order to prevent [XSS attacks](https://owasp.org/www-community/attacks/xss/)\n\n## Comments\n\nYou can use HTML comments inside components.\n\n```svelte\n<!-- this is a comment! --><h1>Hello world</h1>\n```\n\nComments beginning with `svelte-ignore` disable warnings for the next block of markup. Usually, these are accessibility warnings; make sure that you're disabling them for a good reason.\n\n```svelte\n<!-- svelte-ignore a11y_autofocus -->\n<input bind:value={name} autofocus />\n```\n\nYou can add a special comment starting with `@component` that will show up when hovering over the component name in other files.\n\n````svelte\n<!--\n@component\n- You can use markdown here.\n- You can also use code blocks here.\n- Usage:\n  ```html\n  <Main name=\"Arethra\">\n  ```\n-->\n<script>\n\tlet { name } = $props();\n</script>\n\n<main>\n\t<h1>\n\t\tHello, {name}\n\t</h1>\n</main>\n````",
    "svelte/if": "```svelte\n<!--- copy: false  --->\n{#if expression}...{/if}\n```\n\n```svelte\n<!--- copy: false  --->\n{#if expression}...{:else if expression}...{/if}\n```\n\n```svelte\n<!--- copy: false  --->\n{#if expression}...{:else}...{/if}\n```\n\nContent that is conditionally rendered can be wrapped in an if block.\n\n```svelte\n{#if answer === 42}\n\t<p>what was the question?</p>\n{/if}\n```\n\nAdditional conditions can be added with `{:else if expression}`, optionally ending in an `{:else}` clause.\n\n```svelte\n{#if porridge.temperature > 100}\n\t<p>too hot!</p>\n{:else if 80 > porridge.temperature}\n\t<p>too cold!</p>\n{:else}\n\t<p>just right!</p>\n{/if}\n```\n\n(Blocks don't have to wrap elements, they can also wrap text within elements.)",
    "svelte/each": "```svelte\n<!--- copy: false  --->\n{#each expression as name}...{/each}\n```\n\n```svelte\n<!--- copy: false  --->\n{#each expression as name, index}...{/each}\n```\n\nIterating over values can be done with an each block. The values in question can be arrays, array-like objects (i.e. anything with a `length` property), or iterables like `Map` and `Set` — in other words, anything that can be used with `Array.from`.\n\n```svelte\n<h1>Shopping list</h1>\n<ul>\n\t{#each items as item}\n\t\t<li>{item.name} x {item.qty}</li>\n\t{/each}\n</ul>\n```\n\nAn each block can also specify an _index_, equivalent to the second argument in an `array.map(...)` callback:\n\n```svelte\n{#each items as item, i}\n\t<li>{i + 1}: {item.name} x {item.qty}</li>\n{/each}\n```\n\n## Keyed each blocks\n\n```svelte\n<!--- copy: false  --->\n{#each expression as name (key)}...{/each}\n```\n\n```svelte\n<!--- copy: false  --->\n{#each expression as name, index (key)}...{/each}\n```\n\nIf a _key_ expression is provided — which must uniquely identify each list item — Svelte will use it to intelligently update the list when data changes by inserting, moving and deleting items, rather than adding or removing items at the end and updating the state in the middle.\n\nThe key can be any object, but strings and numbers are recommended since they allow identity to persist when the objects themselves change.\n\n```svelte\n{#each items as item (item.id)}\n\t<li>{item.name} x {item.qty}</li>\n{/each}\n\n<!-- or with additional index value -->\n{#each items as item, i (item.id)}\n\t<li>{i + 1}: {item.name} x {item.qty}</li>\n{/each}\n```\n\nYou can freely use destructuring and rest patterns in each blocks.\n\n```svelte\n{#each items as { id, name, qty }, i (id)}\n\t<li>{i + 1}: {name} x {qty}</li>\n{/each}\n\n{#each objects as { id, ...rest }}\n\t<li><span>{id}</span><MyComponent {...rest} /></li>\n{/each}\n\n{#each items as [id, ...rest]}\n\t<li><span>{id}</span><MyComponent values={rest} /></li>\n{/each}\n```\n\n## Each blocks without an item\n\n```svelte\n<!--- copy: false  --->\n{#each expression}...{/each}\n```\n\n```svelte\n<!--- copy: false  --->\n{#each expression, index}...{/each}\n```\n\nIn case you just want to render something `n` times, you can omit the `as` part ([demo](/playground/untitled#H4sIAAAAAAAAE3WR0W7CMAxFf8XKNAk0WsSeUEaRpn3Guoc0MbQiJFHiMlDVf18SOrZJ48259_jaVgZmxBEZZ28thgCNFV6xBdt1GgPj7wOji0t2EqI-wa_OleGEmpLWiID_6dIaQkMxhm1UdwKpRQhVzWSaVORJNdvWpqbhAYVsYQCNZk8thzWMC_DCHMZk3wPSThNQ088I3mghD9UwSwHwlLE5PMIzVFUFq3G7WUZ2OyUvU3JOuZU332wCXTRmtPy1NgzXZtUFp8WFw9536uWqpbIgPEaDsJBW90cTOHh0KGi2XsBq5-cT6-3nPauxXqHnsHJnCFZ3CvJVkyuCQ0mFF9TZyCQ162WGvteLKfG197Y3iv_pz_fmS68Hxt8iPBPj5HscP8YvCNX7uhYCAAA=)):\n\n```svelte\n<div class=\"chess-board\">\n\t{#each { length: 8 }, rank}\n\t\t{#each { length: 8 }, file}\n\t\t\t<div class:black={(rank + file) % 2 === 1}></div>\n\t\t{/each}\n\t{/each}\n</div>\n```\n\n## Else blocks\n\n```svelte\n<!--- copy: false  --->\n{#each expression as name}...{:else}...{/each}\n```\n\nAn each block can also have an `{:else}` clause, which is rendered if the list is empty.\n\n```svelte\n{#each todos as todo}\n\t<p>{todo.text}</p>\n{:else}\n\t<p>No tasks today!</p>\n{/each}\n```",
    "svelte/key": "```svelte\n<!--- copy: false  --->\n{#key expression}...{/key}\n```\n\nKey blocks destroy and recreate their contents when the value of an expression changes. When used around components, this will cause them to be reinstantiated and reinitialised:\n\n```svelte\n{#key value}\n\t<Component />\n{/key}\n```\n\nIt's also useful if you want a transition to play whenever a value changes:\n\n```svelte\n{#key value}\n\t<div transition:fade>{value}</div>\n{/key}\n```",
    "svelte/await": "```svelte\n<!--- copy: false  --->\n{#await expression}...{:then name}...{:catch name}...{/await}\n```\n\n```svelte\n<!--- copy: false  --->\n{#await expression}...{:then name}...{/await}\n```\n\n```svelte\n<!--- copy: false  --->\n{#await expression then name}...{/await}\n```\n\n```svelte\n<!--- copy: false  --->\n{#await expression catch name}...{/await}\n```\n\nAwait blocks allow you to branch on the three possible states of a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) — pending, fulfilled or rejected.\n\n```svelte\n{#await promise}\n\t<!-- promise is pending -->\n\t<p>waiting for the promise to resolve...</p>\n{:then value}\n\t<!-- promise was fulfilled or not a Promise -->\n\t<p>The value is {value}</p>\n{:catch error}\n\t<!-- promise was rejected -->\n\t<p>Something went wrong: {error.message}</p>\n{/await}\n```\n\n> [!NOTE] During server-side rendering, only the pending branch will be rendered.\n>\n> If the provided expression is not a `Promise`, only the `:then` branch will be rendered, including during server-side rendering.\n\nThe `catch` block can be omitted if you don't need to render anything when the promise rejects (or no error is possible).\n\n```svelte\n{#await promise}\n\t<!-- promise is pending -->\n\t<p>waiting for the promise to resolve...</p>\n{:then value}\n\t<!-- promise was fulfilled -->\n\t<p>The value is {value}</p>\n{/await}\n```\n\nIf you don't care about the pending state, you can also omit the initial block.\n\n```svelte\n{#await promise then value}\n\t<p>The value is {value}</p>\n{/await}\n```\n\nSimilarly, if you only want to show the error state, you can omit the `then` block.\n\n```svelte\n{#await promise catch error}\n\t<p>The error is {error}</p>\n{/await}\n```\n\n> [!NOTE] You can use `#await` with [`import(...)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import) to render components lazily:\n>\n> ```svelte\n> {#await import('./Component.svelte') then { default: Component }}\n> \t<Component />\n> {/await}\n> ```",
    "svelte/snippet": "```svelte\n<!--- copy: false  --->\n{#snippet name()}...{/snippet}\n```\n\n```svelte\n<!--- copy: false  --->\n{#snippet name(param1, param2, paramN)}...{/snippet}\n```\n\nSnippets, and [render tags](@render), are a way to create reusable chunks of markup inside your components. Instead of writing duplicative code like [this](/playground/untitled#H4sIAAAAAAAAE5VUYW-kIBD9K8Tmsm2yXXRzvQ-s3eR-R-0HqqOQKhAZb9sz_vdDkV1t000vRmHewMx7w2AflbIGG7GnPlK8gYhFv42JthG-m9Gwf6BGcLbVXZuPSGrzVho8ZirDGpDIhldgySN5GpEMez9kaNuckY1ANJZRamRuu2ZnhEZt6a84pvs43mzD4pMsUDDi8DMkQFYCGdkvsJwblFq5uCik9bmJ4JZwUkv1eoknWigX2eGNN6aGXa6bjV8ybP-X7sM36T58SVcrIIV2xVIaA41xeD5kKqWXuqpUJEefOqVuOkL9DfBchGrzWfu0vb-RpTd3o-zBR045Ga3HfuE5BmJpKauuhbPtENlUF2sqR9jqpsPSxWsMrlngyj3VJiyYjJXb1-lMa7IWC-iSk2M5Zzh-SJjShe-siq5kpZRPs55BbSGU5YPyte4vVV_VfFXxVb10dSLf17pS2lM5HnpPxw4Zpv6x-F57p0jI3OKlVnhv5V9wPQrNYQQ9D_f6aGHlC89fq1Z3qmDkJCTCweOGF4VUFSPJvD_DhreVdA0eu8ehJJ5x91dBaBkpWm3ureCFPt3uzRv56d4kdp-2euG38XZ6dsnd3ZmPG9yRBCrzRUvi-MccOdwz3qE-fOZ7AwAhlrtTUx3c76vRhSwlFBHDtoPhefgHX3dM0PkEAAA=)...\n\n```svelte\n{#each images as image}\n\t{#if image.href}\n\t\t<a href={image.href}>\n\t\t\t<figure>\n\t\t\t\t<img src={image.src} alt={image.caption} width={image.width} height={image.height} />\n\t\t\t\t<figcaption>{image.caption}</figcaption>\n\t\t\t</figure>\n\t\t</a>\n\t{:else}\n\t\t<figure>\n\t\t\t<img src={image.src} alt={image.caption} width={image.width} height={image.height} />\n\t\t\t<figcaption>{image.caption}</figcaption>\n\t\t</figure>\n\t{/if}\n{/each}\n```\n\n...you can write [this](/playground/untitled#H4sIAAAAAAAAE5VUYW-bMBD9KxbRlERKY4jWfSA02n5H6QcXDmwVbMs-lnaI_z6D7TTt1moTAnPvzvfenQ_GpBEd2CS_HxPJekjy5IfWyS7BFz0b9id0CM62ajDVjBS2MkLjqZQldoBE9KwFS-7I_YyUOPqlRGuqnKw5orY5pVpUduj3mitUln5LU3pI0_UuBp9FjTwnDr9AHETLMSeHK6xiGoWSLi9yYT034cwSRjohn17zcQPNFTs8s153sK9Uv_Yh0-5_5d7-o9zbD-UqCaRWrllSYZQxLw_HUhb0ta-y4NnJUxfUvc7QuLJSaO0a3oh2MLBZat8u-wsPnXzKQvTtVVF34xK5d69ThFmHEQ4SpzeVRediTG8rjD5vBSeN3E5JyHh6R1DQK9-iml5kjzQUN_lSgVU8DhYLx7wwjSvRkMDvTjiwF4zM1kXZ7DlF1eN3A7IG85e-zRrYEjjm0FkI4Cc7Ripm0pHOChexhcWXzreeZyRMU6Mk3ljxC9w4QH-cQZ_b3T5pjHxk1VNr1CDrnJy5QDh6XLO6FrLNSRb2l9gz0wo3S6m7HErSgLsPGMHkpDZK31jOanXeHPQz-eruLHUP0z6yTbpbrn223V70uMXNSpQSZjpL0y8hcxxpNqA6_ql3BQAxlxvfpQ_uT9GrWjQC6iRHM8D0MP0GQsIi92QEAAA=):\n\n```svelte\n{#snippet figure(image)}\n\t<figure>\n\t\t<img src={image.src} alt={image.caption} width={image.width} height={image.height} />\n\t\t<figcaption>{image.caption}</figcaption>\n\t</figure>\n{/snippet}\n\n{#each images as image}\n\t{#if image.href}\n\t\t<a href={image.href}>\n\t\t\t{@render figure(image)}\n\t\t</a>\n\t{:else}\n\t\t{@render figure(image)}\n\t{/if}\n{/each}\n```\n\nLike function declarations, snippets can have an arbitrary number of parameters, which can have default values, and you can destructure each parameter. You cannot use rest parameters, however.\n\n## Snippet scope\n\nSnippets can be declared anywhere inside your component. They can reference values declared outside themselves, for example in the `<script>` tag or in `{#each ...}` blocks ([demo](/playground/untitled#H4sIAAAAAAAAE12P0QrCMAxFfyWrwhSEvc8p-h1OcG5RC10bmkyQ0n-3HQPBx3vCPUmCemiDrOpLULYbUdXqTKR2Sj6UA7_RCKbMbvJ9Jg33XpMcW9uKQYEAIzJ3T4QD3LSUDE-PnYA4YET4uOkGMc3W5B3xZrtvbVP9HDas2GqiZHqhMW6Tr9jGbG_oOCMImcUCwrIpFk1FqRyqpRpn0cmjHdAvnrIzuscyq_4nd3dPPD01ukE_NA6qFj9hvMYvGjJADw8BAAA=))...\n\n```svelte\n<script>\n\tlet { message = `it's great to see you!` } = $props();\n</script>\n\n{#snippet hello(name)}\n\t<p>hello {name}! {message}!</p>\n{/snippet}\n\n{@render hello('alice')}\n{@render hello('bob')}\n```\n\n...and they are 'visible' to everything in the same lexical scope (i.e. siblings, and children of those siblings):\n\n```svelte\n<div>\n\t{#snippet x()}\n\t\t{#snippet y()}...{/snippet}\n\n\t\t<!-- this is fine -->\n\t\t{@render y()}\n\t{/snippet}\n\n\t<!-- this will error, as `y` is not in scope -->\n\t{@render y()}\n</div>\n\n<!-- this will also error, as `x` is not in scope -->\n{@render x()}\n```\n\nSnippets can reference themselves and each other ([demo](/playground/untitled#H4sIAAAAAAAAE2WPTQqDMBCFrxLiRqH1Zysi7TlqF1YnENBJSGJLCYGeo5tesUeosfYH3c2bee_jjaWMd6BpfrAU6x5oTvdS0g01V-mFPkNnYNRaDKrxGxto5FKCIaeu1kYwFkauwsoUWtZYPh_3W5FMY4U2mb3egL9kIwY0rbhgiO-sDTgjSEqSTvIDs-jiOP7i_MHuFGAL6p9BtiSbOTl0GtzCuihqE87cqtyam6WRGz_vRcsZh5bmRg3gju4Fptq_kzQBAAA=)):\n\n```svelte\n{#snippet blastoff()}\n\t<span>🚀</span>\n{/snippet}\n\n{#snippet countdown(n)}\n\t{#if n > 0}\n\t\t<span>{n}...</span>\n\t\t{@render countdown(n - 1)}\n\t{:else}\n\t\t{@render blastoff()}\n\t{/if}\n{/snippet}\n\n{@render countdown(10)}\n```\n\n## Passing snippets to components\n\n### Explicit props\n\nWithin the template, snippets are values just like any other. As such, they can be passed to components as props ([demo](/playground/untitled#H4sIAAAAAAAAE3VS247aMBD9lZGpBGwDASRegonaPvQL2qdlH5zYEKvBNvbQLbL875VzAcKyj3PmzJnLGU8UOwqSkd8KJdaCk4TsZS0cyV49wYuJuQiQpGd-N2bu_ooaI1YwJ57hpVYoFDqSEepKKw3mO7VDeTTaIvxiRS1gb_URxvO0ibrS8WanIrHUyiHs7Vmigy28RmyHHmKvDMbMmFq4cQInvGSwTsBYWYoMVhCSB2rBFFPsyl0uruTlR3JZCWvlTXl1Yy_mawiR_rbZKZrellJ-5JQ0RiBUgnFhJ9OGR7HKmwVoilXeIye8DOJGfYCgRlZ3iE876TBsZPX7hPdteO75PC4QaIo8vwNPePmANQ2fMeEFHrLD7rR1jTNkW986E8C3KwfwVr8HSHOSEBT_kGRozyIkn_zQveXDL3rIfPJHtUDwzShJd_Qk3gQCbOGLsdq4yfTRJopRuin3I7nv6kL7ARRjmLdBDG3uv1mhuLA3V2mKtqNEf_oCn8p9aN-WYqH5peP4kWBl1UwJzAEPT9U7K--0fRrrWnPTXpCm1_EVdXjpNmlA8G1hPPyM1fKgMqjFHjctXGjLhZ05w0qpDhksGrybuNEHtJnCalZWsuaTlfq6nPaaBSv_HKw-K57BjzOiVj9ZKQYKzQjZodYFqydYTRN4gPhVzTDO2xnma3HsVWjaLjT8nbfwHy7Q5f2dBAAA)):\n\n```svelte\n<script>\n\timport Table from './Table.svelte';\n\n\tconst fruits = [\n\t\t{ name: 'apples', qty: 5, price: 2 },\n\t\t{ name: 'bananas', qty: 10, price: 1 },\n\t\t{ name: 'cherries', qty: 20, price: 0.5 }\n\t];\n</script>\n\n{#snippet header()}\n\t<th>fruit</th>\n\t<th>qty</th>\n\t<th>price</th>\n\t<th>total</th>\n{/snippet}\n\n{#snippet row(d)}\n\t<td>{d.name}</td>\n\t<td>{d.qty}</td>\n\t<td>{d.price}</td>\n\t<td>{d.qty * d.price}</td>\n{/snippet}\n\n<Table data={fruits} {header} {row} />\n```\n\nThink about it like passing content instead of data to a component. The concept is similar to slots in web components.\n\n### Implicit props\n\nAs an authoring convenience, snippets declared directly _inside_ a component implicitly become props _on_ the component ([demo](/playground/untitled#H4sIAAAAAAAAE3VSTa_aMBD8Kyu_SkAbCA-JSzBR20N_QXt6vIMTO8SqsY29tI2s_PcqTiB8vaPHs7MzuxuIZgdBMvJLo0QlOElIJZXwJHsLBBvb_XUASc7Mb9Yu_B-hsMMK5sUzvDQahUZPMkJ96aTFfKd3KA_WOISfrFACKmcOMFmk8TWUTjY73RFLoz1C5U4SPWzhrcN2GKDrlcGEWauEnyRwxCaDdQLWyVJksII2uaMWTDPNLtzX5YX8-kgua-GcHJVXI3u5WEPb0d83O03TMZSmfRzOkG1Db7mNacOL19JagVALxoWbztq-H8U6j0SaYp2P2BGbOyQ2v8PQIFMXLKRDk177pq0zf6d8bMrzwBdd0pamyPMb-IjNEzS2f86Gz_Dwf-2F9nvNSUJQ_EOSoTuJNvngqK5v4Pas7n4-OCwlEEJcQTIMO-nSQwtb-GSdsX46e9gbRoP9yGQ11I0rEuycunu6PHx1QnPhxm3SFN15MOlYEFJZtf0dUywMbwZOeBGsrKNLYB54-1R9WNqVdki7usim6VmQphf7mnpshiQRhNAXdoOfMyX3OgMlKtz0cGEcF27uLSul3mewjPjgOOoDukxjPS9rqfh0pb-8zs6aBSt_7505aZ7B9xOi0T9YKW4UooVsr0zB1BTrWQJ3EL-oWcZ572GxFoezCk37QLe3897-B2i2U62uBAAA)):\n\n```svelte\n<!-- this is semantically the same as the above -->\n<Table data={fruits}>\n\t{#snippet header()}\n\t\t<th>fruit</th>\n\t\t<th>qty</th>\n\t\t<th>price</th>\n\t\t<th>total</th>\n\t{/snippet}\n\n\t{#snippet row(d)}\n\t\t<td>{d.name}</td>\n\t\t<td>{d.qty}</td>\n\t\t<td>{d.price}</td>\n\t\t<td>{d.qty * d.price}</td>\n\t{/snippet}\n</Table>\n```\n\n### Implicit `children` snippet\n\nAny content inside the component tags that is _not_ a snippet declaration implicitly becomes part of the `children` snippet ([demo](/playground/untitled#H4sIAAAAAAAAE3WOQQrCMBBFrzIMggql3ddY1Du4si5sOmIwnYRkFKX07lKqglqX8_7_w2uRDw1hjlsWI5ZqTPBoLEXMdy3K3fdZDzB5Ndfep_FKVnpWHSKNce1YiCVijirqYLwUJQOYxrsgsLmIOIZjcA1M02w4n-PpomSVvTclqyEutDX6DA2pZ7_ABIVugrmEC3XJH92P55_G39GodCmWBFrQJ2PrQAwdLGHig_NxNv9xrQa1dhWIawrv1Wzeqawa8953D-8QOmaEAQAA)):\n\n```svelte\n<!--- file: App.svelte --->\n<Button>click me</Button>\n```\n\n```svelte\n<!--- file: Button.svelte --->\n<script>\n\tlet { children } = $props();\n</script>\n\n<!-- result will be <button>click me</button> -->\n<button>{@render children()}</button>\n```\n\n> [!NOTE] Note that you cannot have a prop called `children` if you also have content inside the component — for this reason, you should avoid having props with that name\n\n### Optional snippet props\n\nYou can declare snippet props as being optional. You can either use optional chaining to not render anything if the snippet isn't set...\n\n```svelte\n<script>\n    let { children } = $props();\n</script>\n\n{@render children?.()}\n```\n\n...or use an `#if` block to render fallback content:\n\n```svelte\n<script>\n    let { children } = $props();\n</script>\n\n{#if children}\n    {@render children()}\n{:else}\n    fallback content\n{/if}\n```\n\n## Typing snippets\n\nSnippets implement the `Snippet` interface imported from `'svelte'`:\n\n```svelte\n<script lang=\"ts\">\n\timport type { Snippet } from 'svelte';\n\n\tinterface Props {\n\t\tdata: any[];\n\t\tchildren: Snippet;\n\t\trow: Snippet<[any]>;\n\t}\n\n\tlet { data, children, row }: Props = $props();\n</script>\n```\n\nWith this change, red squigglies will appear if you try and use the component without providing a `data` prop and a `row` snippet. Notice that the type argument provided to `Snippet` is a tuple, since snippets can have multiple parameters.\n\nWe can tighten things up further by declaring a generic, so that `data` and `row` refer to the same type:\n\n```svelte\n<script lang=\"ts\" generics=\"T\">\n\timport type { Snippet } from 'svelte';\n\n\tlet {\n\t\tdata,\n\t\tchildren,\n\t\trow\n\t}: {\n\t\tdata: T[];\n\t\tchildren: Snippet;\n\t\trow: Snippet<[T]>;\n\t} = $props();\n</script>\n```\n\n## Exporting snippets\n\nSnippets declared at the top level of a `.svelte` file can be exported from a `<script module>` for use in other components, provided they don't reference any declarations in a non-module `<script>` (whether directly or indirectly, via other snippets) ([demo](/playground/untitled#H4sIAAAAAAAAE3WPwY7CMAxEf8UyB1hRgdhjl13Bga8gHFJipEqtGyUGFUX5dxJUtEB3b9bYM_MckHVLWOKut50TMuC5tpbEY4GnuiGP5T6gXG0-ykLSB8vW2oW_UCNZq7Snv_Rjx0Kc4kpc-6OrrfwoVlK3uQ4CaGMgwsl1LUwXy0f54J9-KV4vf20cNo7YkMu22aqAz4-oOLUI9YKluDPF4h_at-hX5PFyzA1tZ84N3fGpf8YfUU6GvDumLqDKmEqCjjCHUEX4hqDTWCU5PJ6Or38c4g1cPu9tnAEAAA==)):\n\n```svelte\n<script module>\n\texport { add };\n</script>\n\n{#snippet add(a, b)}\n\t{a} + {b} = {a + b}\n{/snippet}\n```\n\n> [!NOTE]\n> This requires Svelte 5.5.0 or newer\n\n## Programmatic snippets\n\nSnippets can be created programmatically with the [`createRawSnippet`](svelte#createRawSnippet) API. This is intended for advanced use cases.\n\n## Snippets and slots\n\nIn Svelte 4, content can be passed to components using [slots](legacy-slots). Snippets are more powerful and flexible, and so slots have been deprecated in Svelte 5.",
    "svelte/@render": "To render a [snippet](snippet), use a `{@render ...}` tag.\n\n```svelte\n{#snippet sum(a, b)}\n\t<p>{a} + {b} = {a + b}</p>\n{/snippet}\n\n{@render sum(1, 2)}\n{@render sum(3, 4)}\n{@render sum(5, 6)}\n```\n\nThe expression can be an identifier like `sum`, or an arbitrary JavaScript expression:\n\n```svelte\n{@render (cool ? coolSnippet : lameSnippet)()}\n```\n\n## Optional snippets\n\nIf the snippet is potentially undefined — for example, because it's an incoming prop — then you can use optional chaining to only render it when it _is_ defined:\n\n```svelte\n{@render children?.()}\n```\n\nAlternatively, use an [`{#if ...}`](if) block with an `:else` clause to render fallback content:\n\n```svelte\n{#if children}\n\t{@render children()}\n{:else}\n\t<p>fallback content</p>\n{/if}\n```",
    "svelte/@html": "To inject raw HTML into your component, use the `{@html ...}` tag:\n\n```svelte\n<article>\n\t{@html content}\n</article>\n```\n\n> [!NOTE] Make sure that you either escape the passed string or only populate it with values that are under your control in order to prevent [XSS attacks](https://owasp.org/www-community/attacks/xss/). Never render unsanitized content.\n\nThe expression should be valid standalone HTML — this will not work, because `</div>` is not valid HTML:\n\n```svelte\n{@html '<div>'}content{@html '</div>'}\n```\n\nIt also will not compile Svelte code.\n\n## Styling\n\nContent rendered this way is 'invisible' to Svelte and as such will not receive [scoped styles](scoped-styles). In other words, this will not work, and the `a` and `img` styles will be regarded as unused:\n\n<!-- prettier-ignore -->\n```svelte\n<article>\n\t{@html content}\n</article>\n\n<style>\n\tarticle {\n\t\ta { color: hotpink }\n\t\timg { width: 100% }\n\t}\n</style>\n```\n\nInstead, use the `:global` modifier to target everything inside the `<article>`:\n\n<!-- prettier-ignore -->\n```svelte\n<style>\n\tarticle +++:global+++ {\n\t\ta { color: hotpink }\n\t\timg { width: 100% }\n\t}\n</style>\n```",
    "svelte/@attach": "Attachments are functions that run in an [effect]($effect) when an element is mounted to the DOM or when [state]($state) read inside the function updates.\n\nOptionally, they can return a function that is called before the attachment re-runs, or after the element is later removed from the DOM.\n\n> [!NOTE]\n> Attachments are available in Svelte 5.29 and newer.\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\t/** @type {import('svelte/attachments').Attachment} */\n\tfunction myAttachment(element) {\n\t\tconsole.log(element.nodeName); // 'DIV'\n\n\t\treturn () => {\n\t\t\tconsole.log('cleaning up');\n\t\t};\n\t}\n</script>\n\n<div {@attach myAttachment}>...</div>\n```\n\nAn element can have any number of attachments.\n\n## Attachment factories\n\nA useful pattern is for a function, such as `tooltip` in this example, to _return_ an attachment ([demo](/playground/untitled#H4sIAAAAAAAAE3VT0XLaMBD8lavbDiaNCUlbHhTItG_5h5AH2T5ArdBppDOEMv73SkbGJGnH47F9t3un3TsfMyO3mInsh2SW1Sa7zlZKo8_E0zHjg42pGAjxBPxp7cTvUHOMldLjv-IVGUbDoUw295VTlh-WZslqa8kxsLL2ACtHWxh175NffnQfAAGikSGxYQGfPEvGfPSIWtOH0TiBVo2pWJEBJtKhQp4YYzjG9JIdcuMM5IZqHMPioY8vOSA997zQoevf4a7heO7cdp34olRiTGr07OhwH1IdoO2A7dLMbwahZq6MbRhKZWqxk7rBxTGVbuHmhCgb5qDgmIx_J6XtHHukHTrYYqx_YpzYng8aO4RYayql7hU-1ZJl0akqHBE_D9KLolwL-Dibzc7iSln9XjtqTF1UpMkJ2EmXR-BgQErsN4pxIJKr0RVO1qrxAqaTO4fbc9bKulZm3cfDY3aZDgvFGErWjmzhN7KmfX5rXyDeX8Pt1mU-hXjdBOrtuB97vK4GPUtmJ41XcRMEGDLD8do0nJ73zhUhSlyRw0t3vPqD8cjfLs-axiFgNBrkUd9Ulp50c-GLxlXAVlJX-ffpZyiSn7H0eLCUySZQcQdXlxj4El0Yv_FZvIKElqqGTruVLhzu7VRKCh22_5toOyxsWqLwwzK-cCbYNdg-hy-p9D7sbiZWUnts_wLUOF3CJgQAAA==)):\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport tippy from 'tippy.js';\n\n\tlet content = $state('Hello!');\n\n\t/**\n\t * @param {string} content\n\t * @returns {import('svelte/attachments').Attachment}\n\t */\n\tfunction tooltip(content) {\n\t\treturn (element) => {\n\t\t\tconst tooltip = tippy(element, { content });\n\t\t\treturn tooltip.destroy;\n\t\t};\n\t}\n</script>\n\n<input bind:value={content} />\n\n<button {@attach tooltip(content)}>\n\tHover me\n</button>\n```\n\nSince the `tooltip(content)` expression runs inside an [effect]($effect), the attachment will be destroyed and recreated whenever `content` changes. The same thing would happen for any state read _inside_ the attachment function when it first runs. (If this isn't what you want, see [Controlling when attachments re-run](#Controlling-when-attachments-re-run).)\n\n## Inline attachments\n\nAttachments can also be created inline ([demo](/playground/untitled#H4sIAAAAAAAAE71Wf3OaWBT9KoyTTnW3MS-I3dYmnWXVtnRAazRJzbozRSQEApiRhwKO333vuY8m225m_9yZGOT9OPfcc84D943UTfxGr_G7K6Xr3TVeNW7D2M8avT_3DVk-YAoDNF4vNB8e2tnWjyXGlm7mPzfurVPpp5JgGmeZtwkf5PtFupCxLzVvHa832rl2lElX-s2Xm2DZFNqp_hs-rZetd4v07ORpT3qmQHu7MF2td0BZp8k6z_xkvfXP902_pZ2_1_aYWEiqm0kN8I4r79qbdZ6umnq3q_2iNf22F4dE6qt2oimwdpim_uY6XMm7Fuo-IQT_iTD_CeGTHwZ38ieIJUFQRxirR1Xf39Dw0X5z0I72Af4tD61vvPNwWKQnqmfPTbduhsEd2J3vO_oBd3dc6fF2X7umNdWGf0vBRhSS6qoV7cCXfTXWfKmvWG61_si_vfU92Wz-E4RhsLhNIYinsox9QKGVd8-tuACCeKXRX12P-T_eKf7fhTq0Hvt-f3ailtSeoxJHRo1-58NoPe1UiBc1hkL8Yeh45y_vQ3mcuNl9T8s3cXPRWLnS7YWJG_gn2Tb4tUjid8jua-PVl08j_ab8I14mH8Llx0s5Tz5Err4ql52r_GYg0mVy1bEGZuD0ze64b5TWYFiM-16wSuJ4JT5vfVpDcztrcG_YkRU4s6HxufzDWF4XuVeJ1P10IbzBemt3Vp1V2e04ZXfrJd7Wicyd039brRIv_RIVu_nXi7X1cfL2sy66ztToUp1TO7qJ7NlwZ0f30pld5qNSVE5o6PbMojFHjgZB7oSicPpGteyLclQap7SvY0dXtM_LR1NT2JFHey3aaxa0VxCeYJ7RMHemoiCcgPZV9pR7o7kgcOjeGliYk9hjDZx8FAq6enwlTPSZj_vYPw9Il64dXdIY8ZmapzwfEd8-1ZyaxWhqkIZOibXUd-6Upqi1pD4uMicCV1GA_7zi73UN8BaF4sC8peJtMjfmjbHZBFwq5ov50qRaE0l96NZggnW4KqypYRAW-uhSz9ADvklwJF2J-5W0Z5fQPBhDX92R6I_0IFxRgDftge4l4dP-gH1hjD7uqU6fsOEZ9UNrCdPB-nys6uXgY6O3ZMd9sy5T9PghqrWHdjo4jB51CgLiKJaDYYA-7WgYONf1FbjkI-mE3EAfUY_rijfuJ_CVPaR50oe9JF7Q0pI8Dw3osxxYHdYPGbp2CnwHF8KvwJv2wEv0Z3ilQI6U9uwbZxbYJXvEmjjQjjCHkvNLvNg3yhzXQd1olamsT4IRrZmX0MUDpwL7R8zzHj7pSh9hPHFSHjLezKqAST51uC5zmtQ87skDUaneLokT5RbXkPWSYz53Abgjc8_o4KFGUZ-Hgv2Z1l5OTYM9D-HfUD0L-EwxH5wRnIG61gS-khfgY1bq7IAP_DA4l5xRuh9xlm8yGjutc8t-wHtkhWv3hc7aqGwiK5KzgvM5xRkZYn193uEln-su55j1GaIv7oM4iPrsVHiG0Dx7TR9-1lBfqFdwfvSd5LNL5xyZVp5NoHFZ57FkfiF6vKs4k5zvIfrX5xX6MXmt0gM5MTu8DjnhukrHHzTRd3jm0dma0_f_x5cxP9f4jBdqHvmbq2fUjzqcKh2Cp-yWj9ntcHanXmBXxhu7Q--eyjhfNFpaV7zgz4nWEUb7zUOhpevjjf_gu_KZ99pxFlZ-T3sttkmYqrco_26q35v0Ewzv5EZPbnL_8BfduWGMnyyN3q0bZ_7hb_7KG_L4CQAA)):\n\n```svelte\n<!--- file: App.svelte --->\n<canvas\n\twidth={32}\n\theight={32}\n\t{@attach (canvas) => {\n\t\tconst context = canvas.getContext('2d');\n\n\t\t$effect(() => {\n\t\t\tcontext.fillStyle = color;\n\t\t\tcontext.fillRect(0, 0, canvas.width, canvas.height);\n\t\t});\n\t}}\n></canvas>\n```\n\n> [!NOTE]\n> The nested effect runs whenever `color` changes, while the outer effect (where `canvas.getContext(...)` is called) only runs once, since it doesn't read any reactive state.\n\n## Passing attachments to components\n\nWhen used on a component, `{@attach ...}` will create a prop whose key is a [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol). If the component then [spreads](/tutorial/svelte/spread-props) props onto an element, the element will receive those attachments.\n\nThis allows you to create _wrapper components_ that augment elements ([demo](/playground/untitled#H4sIAAAAAAAAE3VUS3ObMBD-KxvajnFqsJM2PhA7TXrKob31FjITAbKtRkiMtDhJPfz3LiAMdpxhGJvdb1_fPnaeYjn3Iu-WIbJ04028lZDcetHDzsO3olbVApI74F1RhHbLJdayhFl-Sp5qhVwhufEWNjWiwJtYxSjyQhsEFEXxBiujcxg1_8O_dnQ9APwsEbVyiHDafjrvDZCgkiO4MLCEzxYZcn90z6XUZ6OxA61KlaIgV6i1pFC-sxjDrlbHaDiWRoGvdMbHsLzp5DES0mJnRxGaRBvcBHb7yFUTCQeunEWYcYtGv12TqgFUDbCK1WLaM6IWQhUlQiJUFm2ZLPly51xXMG0Rjoyd69C7UqqG2nu95QZyXvtvLVpri2-SN4hoLXXCZFfhQ8aQBU1VgdEaH_vSgyBZR_BpPp_vi0tY-rw2ulRZkGqpTQRbZvwa2BPgFC8bgbw31CbjJjAsE6WNYBZeGp7vtQXLMqHWnZx-5kM1TR5ycpkZXQR2wzL94l8Ur1C_3-g168SfQf1MyfRi3LW9fs77emJEw5QV9SREoLTq06tcczq7d6xEUcJX2vAhO1b843XK34e5unZEMBr15ekuKEusluWAF8lXhE2ZTP2r2RcIHJ-163FPKerCgYJLOB9i4GvNwviI5-gAQiFFBk3tBTOU3HFXEk0R8o86WvUD64aINhv5K3oRmpJXkw8uxMG6Hh6JY9X7OwGSqfUy9tDG3sHNoEi0d_d_fv9qndxRU0VClFqo3KVo3U655Hnt1PXB3Qra2Y2QGdEwgTAMCxopsoxOe6SD0gD8movDhT0LAnhqlE8gVCpLWnRoV7OJCkFAwEXitrYL1W7p7pbiE_P7XH6E_rihODm5s52XtiH9Ekaw0VgI9exadWL1uoEYjPtg2672k5szsxbKyWB2fdT0w5Y_0hcT8oXOlRetmLS8-g-6TLXXQgYAAA==)):\n\n```svelte\n<!--- file: Button.svelte --->\n<script>\n\t/** @type {import('svelte/elements').HTMLButtonAttributes} */\n\tlet { children, ...props } = $props();\n</script>\n\n<!-- `props` includes attachments -->\n<button {...props}>\n\t{@render children?.()}\n</button>\n```\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport tippy from 'tippy.js';\n\timport Button from './Button.svelte';\n\n\tlet content = $state('Hello!');\n\n\t/**\n\t * @param {string} content\n\t * @returns {import('svelte/attachments').Attachment}\n\t */\n\tfunction tooltip(content) {\n\t\treturn (element) => {\n\t\t\tconst tooltip = tippy(element, { content });\n\t\t\treturn tooltip.destroy;\n\t\t};\n\t}\n</script>\n\n<input bind:value={content} />\n\n<Button {@attach tooltip(content)}>\n\tHover me\n</Button>\n```\n\n## Controlling when attachments re-run\n\nAttachments, unlike [actions](use), are fully reactive: `{@attach foo(bar)}` will re-run on changes to `foo` _or_ `bar` (or any state read inside `foo`):\n\n```js\n// @errors: 7006 2304 2552\nfunction foo(bar) {\n\treturn (node) => {\n\t\tveryExpensiveSetupWork(node);\n\t\tupdate(node, bar);\n\t};\n}\n```\n\nIn the rare case that this is a problem (for example, if `foo` does expensive and unavoidable setup work) consider passing the data inside a function and reading it in a child effect:\n\n```js\n// @errors: 7006 2304 2552\nfunction foo(+++getBar+++) {\n\treturn (node) => {\n\t\tveryExpensiveSetupWork(node);\n\n+++\t\t$effect(() => {\n\t\t\tupdate(node, getBar());\n\t\t});+++\n\t}\n}\n```\n\n## Creating attachments programmatically\n\nTo add attachments to an object that will be spread onto a component or element, use [`createAttachmentKey`](svelte-attachments#createAttachmentKey).\n\n## Converting actions to attachments\n\nIf you're using a library that only provides actions, you can convert them to attachments with [`fromAction`](svelte-attachments#fromAction), allowing you to (for example) use them with components.",
    "svelte/@const": "The `{@const ...}` tag defines a local constant.\n\n```svelte\n{#each boxes as box}\n\t{@const area = box.width * box.height}\n\t{box.width} * {box.height} = {area}\n{/each}\n```\n\n`{@const}` is only allowed as an immediate child of a block — `{#if ...}`, `{#each ...}`, `{#snippet ...}` and so on — a `<Component />` or a `<svelte:boundary>`.",
    "svelte/@debug": "The `{@debug ...}` tag offers an alternative to `console.log(...)`. It logs the values of specific variables whenever they change, and pauses code execution if you have devtools open.\n\n```svelte\n<script>\n\tlet user = {\n\t\tfirstname: 'Ada',\n\t\tlastname: 'Lovelace'\n\t};\n</script>\n\n{@debug user}\n\n<h1>Hello {user.firstname}!</h1>\n```\n\n`{@debug ...}` accepts a comma-separated list of variable names (not arbitrary expressions).\n\n```svelte\n<!-- Compiles -->\n{@debug user}\n{@debug user1, user2, user3}\n\n<!-- WON'T compile -->\n{@debug user.firstname}\n{@debug myArray[0]}\n{@debug !isReady}\n{@debug typeof user === 'object'}\n```\n\nThe `{@debug}` tag without any arguments will insert a `debugger` statement that gets triggered when _any_ state changes, as opposed to the specified variables.",
    "svelte/bind": "Data ordinarily flows down, from parent to child. The `bind:` directive allows data to flow the other way, from child to parent.\n\nThe general syntax is `bind:property={expression}`, where `expression` is an [_lvalue_](https://press.rebus.community/programmingfundamentals/chapter/lvalue-and-rvalue/) (i.e. a variable or an object property). When the expression is an identifier with the same name as the property, we can omit the expression — in other words these are equivalent:\n\n<!-- prettier-ignore -->\n```svelte\n<input bind:value={value} />\n<input bind:value />\n```\n\n\nSvelte creates an event listener that updates the bound value. If an element already has a listener for the same event, that listener will be fired before the bound value is updated.\n\nMost bindings are _two-way_, meaning that changes to the value will affect the element and vice versa. A few bindings are _readonly_, meaning that changing their value will have no effect on the element.\n\n## Function bindings\n\nYou can also use `bind:property={get, set}`, where `get` and `set` are functions, allowing you to perform validation and transformation:\n\n```svelte\n<input bind:value={\n\t() => value,\n\t(v) => value = v.toLowerCase()}\n/>\n```\n\nIn the case of readonly bindings like [dimension bindings](#Dimensions), the `get` value should be `null`:\n\n```svelte\n<div\n\tbind:clientWidth={null, redraw}\n\tbind:clientHeight={null, redraw}\n>...</div>\n```\n\n> [!NOTE]\n> Function bindings are available in Svelte 5.9.0 and newer.\n\n## `<input bind:value>`\n\nA `bind:value` directive on an `<input>` element binds the input's `value` property:\n\n<!-- prettier-ignore -->\n```svelte\n<script>\n\tlet message = $state('hello');\n</script>\n\n<input bind:value={message} />\n<p>{message}</p>\n```\n\nIn the case of a numeric input (`type=\"number\"` or `type=\"range\"`), the value will be coerced to a number ([demo](/playground/untitled#H4sIAAAAAAAAE6WPwYoCMQxAfyWEPeyiOOqx2w74Hds9pBql0IllmhGXYf5dKqwiyILsLXnwwsuI-5i4oPkaUX8yo7kCnKNQV7dNzoty4qSVBSr8jG-Poixa0KAt2z5mbb14TaxA4OCtKCm_rz4-f2m403WltrlrYhMFTtcLNkoeFGqZ8yhDF7j3CCHKzpwoDexGmqCL4jwuPUJHZ-dxVcfmyYGe5MAv-La5pbxYFf5Z9Zf_UJXb-sEMquFgJJhBmGyTW5yj8lnRaD_w9D1dAKSSj7zqAQAA)):\n\n```svelte\n<script>\n\tlet a = $state(1);\n\tlet b = $state(2);\n</script>\n\n<label>\n\t<input type=\"number\" bind:value={a} min=\"0\" max=\"10\" />\n\t<input type=\"range\" bind:value={a} min=\"0\" max=\"10\" />\n</label>\n\n<label>\n\t<input type=\"number\" bind:value={b} min=\"0\" max=\"10\" />\n\t<input type=\"range\" bind:value={b} min=\"0\" max=\"10\" />\n</label>\n\n<p>{a} + {b} = {a + b}</p>\n```\n\nIf the input is empty or invalid (in the case of `type=\"number\"`), the value is `undefined`.\n\nSince 5.6.0, if an `<input>` has a `defaultValue` and is part of a form, it will revert to that value instead of the empty string when the form is reset. Note that for the initial render the value of the binding takes precedence unless it is `null` or `undefined`.\n\n```svelte\n<script>\n\tlet value = $state('');\n</script>\n\n<form>\n\t<input bind:value defaultValue=\"not the empty string\">\n\t<input type=\"reset\" value=\"Reset\">\n</form>\n```\n\n> [!NOTE]\n> Use reset buttons sparingly, and ensure that users won't accidentally click them while trying to submit the form.\n\n## `<input bind:checked>`\n\nCheckbox inputs can be bound with `bind:checked`:\n\n```svelte\n<label>\n\t<input type=\"checkbox\" bind:checked={accepted} />\n\tAccept terms and conditions\n</label>\n```\n\nSince 5.6.0, if an `<input>` has a `defaultChecked` attribute and is part of a form, it will revert to that value instead of `false` when the form is reset. Note that for the initial render the value of the binding takes precedence unless it is `null` or `undefined`.\n\n```svelte\n<script>\n\tlet checked = $state(true);\n</script>\n\n<form>\n\t<input type=\"checkbox\" bind:checked defaultChecked={true}>\n\t<input type=\"reset\" value=\"Reset\">\n</form>\n```\n\n> [!NOTE] Use `bind:group` for radio inputs instead of `bind:checked`.\n\n## `<input bind:indeterminate>`\n\nCheckboxes can be in an [indeterminate](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/indeterminate) state, independently of whether they are checked or unchecked:\n\n```svelte\n<script>\n\tlet checked = $state(false);\n\tlet indeterminate = $state(true);\n</script>\n\n<form>\n\t<input type=\"checkbox\" bind:checked bind:indeterminate>\n\n\t{#if indeterminate}\n\t\twaiting...\n\t{:else if checked}\n\t\tchecked\n\t{:else}\n\t\tunchecked\n\t{/if}\n</form>\n```\n\n## `<input bind:group>`\n\nInputs that work together can use `bind:group` ([demo](/playground/untitled#H4sIAAAAAAAAE62T32_TMBDH_5XDQkpbrct7SCMGEvCEECDxsO7BSW6L2c227EvbKOv_jp0f6jYhQKJv5_P3PvdL1wstH1Bk4hMSGdgbRzUssFaM9VJciFtF6EV23QvubNRFR_BPUVfWXvodEkdfKT3-zl8Zzag5YETuK6csF1u9ZUIGNo4VkYQNvPYsGRfJF5JKJ8s3QRJE6WoFb2Nq6K-ck13u2Sl9Vxxhlc6QUBIFnz9Brm9ifJ6esun81XoNd860FmtwslYGlLYte5AO4aHlVhJ1gIeKWq92COt1iMtJlkhFPkgh1rHZiiF6K6BUus4G5KafGznCTlIbVUMfQZUWMJh5OrL-C_qjMYSwb1DyiH7iOEuCb1ZpWTUjfHqcwC_GWDVY3ZfmME_SGttSmD9IHaYatvWHIc6xLyqad3mq6KuqcCwnWn9p8p-p71BqP2IH81zc9w2in-od7XORP7ayCpd5YCeXI_-p59mObPF9WmwGpx3nqS2Gzw8TO3zOaS5_GqUXyQUkS3h8hOSz0ZhMESHGc0c4Hm3MAn00t1wrb0l2GZRkqvt4sXwczm6Qh8vnUJzI2LV4vAkvqWgfehTZrSSPx19WiVfFfAQAAA==)):\n\n```svelte\n<!--- file: BurritoChooser.svelte --->\n<script>\n\tlet tortilla = $state('Plain');\n\n\t/** @type {string[]} */\n\tlet fillings = $state([]);\n</script>\n\n<!-- grouped radio inputs are mutually exclusive -->\n<label><input type=\"radio\" bind:group={tortilla} value=\"Plain\" /> Plain</label>\n<label><input type=\"radio\" bind:group={tortilla} value=\"Whole wheat\" /> Whole wheat</label>\n<label><input type=\"radio\" bind:group={tortilla} value=\"Spinach\" /> Spinach</label>\n\n<!-- grouped checkbox inputs populate an array -->\n<label><input type=\"checkbox\" bind:group={fillings} value=\"Rice\" /> Rice</label>\n<label><input type=\"checkbox\" bind:group={fillings} value=\"Beans\" /> Beans</label>\n<label><input type=\"checkbox\" bind:group={fillings} value=\"Cheese\" /> Cheese</label>\n<label><input type=\"checkbox\" bind:group={fillings} value=\"Guac (extra)\" /> Guac (extra)</label>\n```\n\n> [!NOTE] `bind:group` only works if the inputs are in the same Svelte component.\n\n## `<input bind:files>`\n\nOn `<input>` elements with `type=\"file\"`, you can use `bind:files` to get the [`FileList` of selected files](https://developer.mozilla.org/en-US/docs/Web/API/FileList). When you want to update the files programmatically, you always need to use a `FileList` object. Currently `FileList` objects cannot be constructed directly, so you need to create a new [`DataTransfer`](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer) object and get `files` from there.\n\n```svelte\n<script>\n\tlet files = $state();\n\n\tfunction clear() {\n\t\tfiles = new DataTransfer().files; // null or undefined does not work\n\t}\n</script>\n\n<label for=\"avatar\">Upload a picture:</label>\n<input accept=\"image/png, image/jpeg\" bind:files id=\"avatar\" name=\"avatar\" type=\"file\" />\n<button onclick={clear}>clear</button>\n```\n\n`FileList` objects also cannot be modified, so if you want to e.g. delete a single file from the list, you need to create a new `DataTransfer` object and add the files you want to keep.\n\n> [!NOTE] `DataTransfer` may not be available in server-side JS runtimes. Leaving the state that is bound to `files` uninitialized prevents potential errors if components are server-side rendered.\n\n## `<select bind:value>`\n\nA `<select>` value binding corresponds to the `value` property on the selected `<option>`, which can be any value (not just strings, as is normally the case in the DOM).\n\n```svelte\n<select bind:value={selected}>\n\t<option value={a}>a</option>\n\t<option value={b}>b</option>\n\t<option value={c}>c</option>\n</select>\n```\n\nA `<select multiple>` element behaves similarly to a checkbox group. The bound variable is an array with an entry corresponding to the `value` property of each selected `<option>`.\n\n```svelte\n<select multiple bind:value={fillings}>\n\t<option value=\"Rice\">Rice</option>\n\t<option value=\"Beans\">Beans</option>\n\t<option value=\"Cheese\">Cheese</option>\n\t<option value=\"Guac (extra)\">Guac (extra)</option>\n</select>\n```\n\nWhen the value of an `<option>` matches its text content, the attribute can be omitted.\n\n```svelte\n<select multiple bind:value={fillings}>\n\t<option>Rice</option>\n\t<option>Beans</option>\n\t<option>Cheese</option>\n\t<option>Guac (extra)</option>\n</select>\n```\n\nYou can give the `<select>` a default value by adding a `selected` attribute to the`<option>` (or options, in the case of `<select multiple>`) that should be initially selected. If the `<select>` is part of a form, it will revert to that selection when the form is reset. Note that for the initial render the value of the binding takes precedence if it's not `undefined`.\n\n```svelte\n<select bind:value={selected}>\n\t<option value={a}>a</option>\n\t<option value={b} selected>b</option>\n\t<option value={c}>c</option>\n</select>\n```\n\n## `<audio>`\n\n`<audio>` elements have their own set of bindings — five two-way ones...\n\n- [`currentTime`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/currentTime)\n- [`playbackRate`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playbackRate)\n- [`paused`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/paused)\n- [`volume`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/volume)\n- [`muted`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/muted)\n\n...and six readonly ones:\n\n- [`duration`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/duration)\n- [`buffered`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/buffered)\n- [`seekable`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seekable)\n- [`seeking`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seeking_event)\n- [`ended`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/ended)\n- [`readyState`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/readyState)\n- [`played`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/played)\n\n```svelte\n<audio src={clip} bind:duration bind:currentTime bind:paused></audio>\n```\n\n## `<video>`\n\n`<video>` elements have all the same bindings as [`<audio>`](#audio) elements, plus readonly [`videoWidth`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/videoWidth) and [`videoHeight`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/videoHeight) bindings.\n\n## `<img>`\n\n`<img>` elements have two readonly bindings:\n\n- [`naturalWidth`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/naturalWidth)\n- [`naturalHeight`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/naturalHeight)\n\n## `<details bind:open>`\n\n`<details>` elements support binding to the `open` property.\n\n```svelte\n<details bind:open={isOpen}>\n\t<summary>How do you comfort a JavaScript bug?</summary>\n\t<p>You console it.</p>\n</details>\n```\n\n## `window` and `document`\n\nTo bind to properties of `window` and `document`, see [`<svelte:window>`](svelte-window) and [`<svelte:document>`](svelte-document).\n\n## Contenteditable bindings\n\nElements with the `contenteditable` attribute support the following bindings:\n\n- [`innerHTML`](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML)\n- [`innerText`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText)\n- [`textContent`](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent)\n\n> [!NOTE] There are [subtle differences between `innerText` and `textContent`](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent#differences_from_innertext).\n\n<!-- for some reason puts the comment and html on same line -->\n<!-- prettier-ignore -->\n```svelte\n<div contenteditable=\"true\" bind:innerHTML={html}></div>\n```\n\n## Dimensions\n\nAll visible elements have the following readonly bindings, measured with a `ResizeObserver`:\n\n- [`clientWidth`](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth)\n- [`clientHeight`](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight)\n- [`offsetWidth`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetWidth)\n- [`offsetHeight`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetHeight)\n- [`contentRect`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserverEntry/contentRect)\n- [`contentBoxSize`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserverEntry/contentBoxSize)\n- [`borderBoxSize`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserverEntry/borderBoxSize)\n- [`devicePixelContentBoxSize`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserverEntry/devicePixelContentBoxSize)\n\n```svelte\n<div bind:offsetWidth={width} bind:offsetHeight={height}>\n\t<Chart {width} {height} />\n</div>\n```\n\n> [!NOTE] `display: inline` elements do not have a width or height (except for elements with 'intrinsic' dimensions, like `<img>` and `<canvas>`), and cannot be observed with a `ResizeObserver`. You will need to change the `display` style of these elements to something else, such as `inline-block`. Note that CSS transformations do not trigger `ResizeObserver` callbacks.\n\n## bind:this\n\n```svelte\n<!--- copy: false --->\nbind:this={dom_node}\n```\n\nTo get a reference to a DOM node, use `bind:this`. The value will be `undefined` until the component is mounted — in other words, you should read it inside an effect or an event handler, but not during component initialisation:\n\n```svelte\n<script>\n\t/** @type {HTMLCanvasElement} */\n\tlet canvas;\n\n\t$effect(() => {\n\t\tconst ctx = canvas.getContext('2d');\n\t\tdrawStuff(ctx);\n\t});\n</script>\n\n<canvas bind:this={canvas}></canvas>\n```\n\nComponents also support `bind:this`, allowing you to interact with component instances programmatically.\n\n```svelte\n<!--- file: App.svelte --->\n<ShoppingCart bind:this={cart} />\n\n<button onclick={() => cart.empty()}> Empty shopping cart </button>\n```\n\n```svelte\n<!--- file: ShoppingCart.svelte --->\n<script>\n\t// All instance exports are available on the instance object\n\texport function empty() {\n\t\t// ...\n\t}\n</script>\n```\n\n> [!NOTE] In case of using [the function bindings](#Function-bindings), the getter is required to ensure that the correct value is nullified on component or element destruction.\n\n## bind:_property_ for components\n\n```svelte\nbind:property={variable}\n```\n\nYou can bind to component props using the same syntax as for elements.\n\n```svelte\n<Keypad bind:value={pin} />\n```\n\nWhile Svelte props are reactive without binding, that reactivity only flows downward into the component by default. Using `bind:property` allows changes to the property from within the component to flow back up out of the component.\n\nTo mark a property as bindable, use the [`$bindable`]($bindable) rune:\n\n```svelte\n<script>\n\tlet { readonlyProperty, bindableProperty = $bindable() } = $props();\n</script>\n```\n\nDeclaring a property as bindable means it _can_ be used using `bind:`, not that it _must_ be used using `bind:`.\n\nBindable properties can have a fallback value:\n\n```svelte\n<script>\n\tlet { bindableProperty = $bindable('fallback value') } = $props();\n</script>\n```\n\nThis fallback value _only_ applies when the property is _not_ bound. When the property is bound and a fallback value is present, the parent is expected to provide a value other than `undefined`, else a runtime error is thrown. This prevents hard-to-reason-about situations where it's unclear which value should apply.",
    "svelte/use": "> [!NOTE]\n> In Svelte 5.29 and newer, consider using [attachments](@attach) instead, as they are more flexible and composable.\n\nActions are functions that are called when an element is mounted. They are added with the `use:` directive, and will typically use an `$effect` so that they can reset any state when the element is unmounted:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\t/** @type {import('svelte/action').Action} */\n\tfunction myaction(node) {\n\t\t// the node has been mounted in the DOM\n\n\t\t$effect(() => {\n\t\t\t// setup goes here\n\n\t\t\treturn () => {\n\t\t\t\t// teardown goes here\n\t\t\t};\n\t\t});\n\t}\n</script>\n\n<div use:myaction>...</div>\n```\n\nAn action can be called with an argument:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\t/** @type {import('svelte/action').Action} */\n\tfunction myaction(node, +++data+++) {\n\t\t// ...\n\t}\n</script>\n\n<div use:myaction={+++data+++}>...</div>\n```\n\nThe action is only called once (but not during server-side rendering) — it will _not_ run again if the argument changes.\n\n> [!LEGACY]\n> Prior to the `$effect` rune, actions could return an object with `update` and `destroy` methods, where `update` would be called with the latest value of the argument if it changed. Using effects is preferred.\n\n## Typing\n\nThe `Action` interface receives three optional type arguments — a node type (which can be `Element`, if the action applies to everything), a parameter, and any custom event handlers created by the action:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\t/**\n\t * @type {import('svelte/action').Action<\n\t * \tHTMLDivElement,\n\t * \tundefined,\n\t * \t{\n\t * \t\tonswiperight: (e: CustomEvent) => void;\n\t * \t\tonswipeleft: (e: CustomEvent) => void;\n\t * \t\t// ...\n\t * \t}\n\t * >}\n\t */\n\tfunction gestures(node) {\n\t\t$effect(() => {\n\t\t\t// ...\n\t\t\tnode.dispatchEvent(new CustomEvent('swipeleft'));\n\n\t\t\t// ...\n\t\t\tnode.dispatchEvent(new CustomEvent('swiperight'));\n\t\t});\n\t}\n</script>\n\n<div\n\tuse:gestures\n\tonswipeleft={next}\n\tonswiperight={prev}\n>...</div>\n```",
    "svelte/transition": "A _transition_ is triggered by an element entering or leaving the DOM as a result of a state change.\n\nWhen a block (such as an `{#if ...}` block) is transitioning out, all elements inside it, including those that do not have their own transitions, are kept in the DOM until every transition in the block has been completed.\n\nThe `transition:` directive indicates a _bidirectional_ transition, which means it can be smoothly reversed while the transition is in progress.\n\n```svelte\n<script>\n\t+++import { fade } from 'svelte/transition';+++\n\n\tlet visible = $state(false);\n</script>\n\n<button onclick={() => visible = !visible}>toggle</button>\n\n{#if visible}\n\t<div +++transition:fade+++>fades in and out</div>\n{/if}\n```\n\n## Local vs global\n\nTransitions are local by default. Local transitions only play when the block they belong to is created or destroyed, _not_ when parent blocks are created or destroyed.\n\n```svelte\n{#if x}\n\t{#if y}\n\t\t<p transition:fade>fades in and out only when y changes</p>\n\n\t\t<p transition:fade|global>fades in and out when x or y change</p>\n\t{/if}\n{/if}\n```\n\n## Built-in transitions\n\nA selection of built-in transitions can be imported from the [`svelte/transition`](svelte-transition) module.\n\n## Transition parameters\n\nTransitions can have parameters.\n\n(The double `{{curlies}}` aren't a special syntax; this is an object literal inside an expression tag.)\n\n```svelte\n{#if visible}\n\t<div transition:fade={{ duration: 2000 }}>fades in and out over two seconds</div>\n{/if}\n```\n\n## Custom transition functions\n\n```js\n/// copy: false\n// @noErrors\ntransition = (node: HTMLElement, params: any, options: { direction: 'in' | 'out' | 'both' }) => {\n\tdelay?: number,\n\tduration?: number,\n\teasing?: (t: number) => number,\n\tcss?: (t: number, u: number) => string,\n\ttick?: (t: number, u: number) => void\n}\n```\n\nTransitions can use custom functions. If the returned object has a `css` function, Svelte will generate keyframes for a [web animation](https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API).\n\nThe `t` argument passed to `css` is a value between `0` and `1` after the `easing` function has been applied. _In_ transitions run from `0` to `1`, _out_ transitions run from `1` to `0` — in other words, `1` is the element's natural state, as though no transition had been applied. The `u` argument is equal to `1 - t`.\n\nThe function is called repeatedly _before_ the transition begins, with different `t` and `u` arguments.\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport { elasticOut } from 'svelte/easing';\n\n\t/** @type {boolean} */\n\texport let visible;\n\n\t/**\n\t * @param {HTMLElement} node\n\t * @param {{ delay?: number, duration?: number, easing?: (t: number) => number }} params\n\t */\n\tfunction whoosh(node, params) {\n\t\tconst existingTransform = getComputedStyle(node).transform.replace('none', '');\n\n\t\treturn {\n\t\t\tdelay: params.delay || 0,\n\t\t\tduration: params.duration || 400,\n\t\t\teasing: params.easing || elasticOut,\n\t\t\tcss: (t, u) => `transform: ${existingTransform} scale(${t})`\n\t\t};\n\t}\n</script>\n\n{#if visible}\n\t<div in:whoosh>whooshes in</div>\n{/if}\n```\n\nA custom transition function can also return a `tick` function, which is called _during_ the transition with the same `t` and `u` arguments.\n\n> [!NOTE] If it's possible to use `css` instead of `tick`, do so — web animations can run off the main thread, preventing jank on slower devices.\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\texport let visible = false;\n\n\t/**\n\t * @param {HTMLElement} node\n\t * @param {{ speed?: number }} params\n\t */\n\tfunction typewriter(node, { speed = 1 }) {\n\t\tconst valid = node.childNodes.length === 1 && node.childNodes[0].nodeType === Node.TEXT_NODE;\n\n\t\tif (!valid) {\n\t\t\tthrow new Error(`This transition only works on elements with a single text node child`);\n\t\t}\n\n\t\tconst text = node.textContent;\n\t\tconst duration = text.length / (speed * 0.01);\n\n\t\treturn {\n\t\t\tduration,\n\t\t\ttick: (t) => {\n\t\t\t\tconst i = ~~(text.length * t);\n\t\t\t\tnode.textContent = text.slice(0, i);\n\t\t\t}\n\t\t};\n\t}\n</script>\n\n{#if visible}\n\t<p in:typewriter={{ speed: 1 }}>The quick brown fox jumps over the lazy dog</p>\n{/if}\n```\n\nIf a transition returns a function instead of a transition object, the function will be called in the next microtask. This allows multiple transitions to coordinate, making [crossfade effects](/tutorial/deferred-transitions) possible.\n\nTransition functions also receive a third argument, `options`, which contains information about the transition.\n\nAvailable values in the `options` object are:\n\n- `direction` - one of `in`, `out`, or `both` depending on the type of transition\n\n## Transition events\n\nAn element with transitions will dispatch the following events in addition to any standard DOM events:\n\n- `introstart`\n- `introend`\n- `outrostart`\n- `outroend`\n\n```svelte\n{#if visible}\n\t<p\n\t\ttransition:fly={{ y: 200, duration: 2000 }}\n\t\tonintrostart={() => (status = 'intro started')}\n\t\tonoutrostart={() => (status = 'outro started')}\n\t\tonintroend={() => (status = 'intro ended')}\n\t\tonoutroend={() => (status = 'outro ended')}\n\t>\n\t\tFlies in and out\n\t</p>\n{/if}\n```",
    "svelte/in-and-out": "The `in:` and `out:` directives are identical to [`transition:`](transition), except that the resulting transitions are not bidirectional — an `in` transition will continue to 'play' alongside the `out` transition, rather than reversing, if the block is outroed while the transition is in progress. If an out transition is aborted, transitions will restart from scratch.\n\n```svelte\n<script>\n  import { fade, fly } from 'svelte/transition';\n  \n  let visible = $state(false);\n</script>\n\n<label>\n  <input type=\"checkbox\" bind:checked={visible}>\n  visible\n</label>\n\n{#if visible}\n\t<div in:fly={{ y: 200 }} out:fade>flies in, fades out</div>\n{/if}\n```",
    "svelte/animate": "An animation is triggered when the contents of a [keyed each block](each#Keyed-each-blocks) are re-ordered. Animations do not run when an element is added or removed, only when the index of an existing data item within the each block changes. Animate directives must be on an element that is an _immediate_ child of a keyed each block.\n\nAnimations can be used with Svelte's [built-in animation functions](svelte-animate) or [custom animation functions](#Custom-animation-functions).\n\n```svelte\n<!-- When `list` is reordered the animation will run -->\n{#each list as item, index (item)}\n\t<li animate:flip>{item}</li>\n{/each}\n```\n\n## Animation Parameters\n\nAs with actions and transitions, animations can have parameters.\n\n(The double `{{curlies}}` aren't a special syntax; this is an object literal inside an expression tag.)\n\n```svelte\n{#each list as item, index (item)}\n\t<li animate:flip={{ delay: 500 }}>{item}</li>\n{/each}\n```\n\n## Custom animation functions\n\n```js\n/// copy: false\n// @noErrors\nanimation = (node: HTMLElement, { from: DOMRect, to: DOMRect } , params: any) => {\n\tdelay?: number,\n\tduration?: number,\n\teasing?: (t: number) => number,\n\tcss?: (t: number, u: number) => string,\n\ttick?: (t: number, u: number) => void\n}\n```\n\nAnimations can use custom functions that provide the `node`, an `animation` object and any `parameters` as arguments. The `animation` parameter is an object containing `from` and `to` properties each containing a [DOMRect](https://developer.mozilla.org/en-US/docs/Web/API/DOMRect#Properties) describing the geometry of the element in its `start` and `end` positions. The `from` property is the DOMRect of the element in its starting position, and the `to` property is the DOMRect of the element in its final position after the list has been reordered and the DOM updated.\n\nIf the returned object has a `css` method, Svelte will create a [web animation](https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API) that plays on the element.\n\nThe `t` argument passed to `css` is a value that goes from `0` and `1` after the `easing` function has been applied. The `u` argument is equal to `1 - t`.\n\nThe function is called repeatedly _before_ the animation begins, with different `t` and `u` arguments.\n\n<!-- TODO: Types -->\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport { cubicOut } from 'svelte/easing';\n\n\t/**\n\t * @param {HTMLElement} node\n\t * @param {{ from: DOMRect; to: DOMRect }} states\n\t * @param {any} params\n\t */\n\tfunction whizz(node, { from, to }, params) {\n\t\tconst dx = from.left - to.left;\n\t\tconst dy = from.top - to.top;\n\n\t\tconst d = Math.sqrt(dx * dx + dy * dy);\n\n\t\treturn {\n\t\t\tdelay: 0,\n\t\t\tduration: Math.sqrt(d) * 120,\n\t\t\teasing: cubicOut,\n\t\t\tcss: (t, u) => `transform: translate(${u * dx}px, ${u * dy}px) rotate(${t * 360}deg);`\n\t\t};\n\t}\n</script>\n\n{#each list as item, index (item)}\n\t<div animate:whizz>{item}</div>\n{/each}\n```\n\nA custom animation function can also return a `tick` function, which is called _during_ the animation with the same `t` and `u` arguments.\n\n> [!NOTE] If it's possible to use `css` instead of `tick`, do so — web animations can run off the main thread, preventing jank on slower devices.\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport { cubicOut } from 'svelte/easing';\n\n\t/**\n\t * @param {HTMLElement} node\n\t * @param {{ from: DOMRect; to: DOMRect }} states\n\t * @param {any} params\n\t */\n\tfunction whizz(node, { from, to }, params) {\n\t\tconst dx = from.left - to.left;\n\t\tconst dy = from.top - to.top;\n\n\t\tconst d = Math.sqrt(dx * dx + dy * dy);\n\n\t\treturn {\n\t\t\tdelay: 0,\n\t\t\tduration: Math.sqrt(d) * 120,\n\t\t\teasing: cubicOut,\n\t\t\ttick: (t, u) => Object.assign(node.style, { color: t > 0.5 ? 'Pink' : 'Blue' })\n\t\t};\n\t}\n</script>\n\n{#each list as item, index (item)}\n\t<div animate:whizz>{item}</div>\n{/each}\n```",
    "svelte/style": "The `style:` directive provides a shorthand for setting multiple styles on an element.\n\n```svelte\n<!-- These are equivalent -->\n<div style:color=\"red\">...</div>\n<div style=\"color: red;\">...</div>\n```\n\nThe value can contain arbitrary expressions:\n\n```svelte\n<div style:color={myColor}>...</div>\n```\n\nThe shorthand form is allowed:\n\n```svelte\n<div style:color>...</div>\n```\n\nMultiple styles can be set on a single element:\n\n```svelte\n<div style:color style:width=\"12rem\" style:background-color={darkMode ? 'black' : 'white'}>...</div>\n```\n\nTo mark a style as important, use the `|important` modifier:\n\n```svelte\n<div style:color|important=\"red\">...</div>\n```\n\nWhen `style:` directives are combined with `style` attributes, the directives will take precedence,\neven over `!important` properties:\n\n```svelte\n<div style:color=\"red\" style=\"color: blue\">This will be red</div>\n<div style:color=\"red\" style=\"color: blue !important\">This will still be red</div>\n```",
    "svelte/class": "There are two ways to set classes on elements: the `class` attribute, and the `class:` directive.\n\n## Attributes\n\nPrimitive values are treated like any other attribute:\n\n```svelte\n<div class={large ? 'large' : 'small'}>...</div>\n```\n\n> [!NOTE]\n> For historical reasons, falsy values (like `false` and `NaN`) are stringified (`class=\"false\"`), though `class={undefined}` (or `null`) cause the attribute to be omitted altogether. In a future version of Svelte, all falsy values will cause `class` to be omitted.\n\n### Objects and arrays\n\nSince Svelte 5.16, `class` can be an object or array, and is converted to a string using [clsx](https://github.com/lukeed/clsx).\n\nIf the value is an object, the truthy keys are added:\n\n```svelte\n<script>\n\tlet { cool } = $props();\n</script>\n\n<!-- results in `class=\"cool\"` if `cool` is truthy,\n     `class=\"lame\"` otherwise -->\n<div class={{ cool, lame: !cool }}>...</div>\n```\n\nIf the value is an array, the truthy values are combined:\n\n```svelte\n<!-- if `faded` and `large` are both truthy, results in\n     `class=\"saturate-0 opacity-50 scale-200\"` -->\n<div class={[faded && 'saturate-0 opacity-50', large && 'scale-200']}>...</div>\n```\n\nNote that whether we're using the array or object form, we can set multiple classes simultaneously with a single condition, which is particularly useful if you're using things like Tailwind.\n\nArrays can contain arrays and objects, and clsx will flatten them. This is useful for combining local classes with props, for example:\n\n```svelte\n<!--- file: Button.svelte --->\n<script>\n\tlet props = $props();\n</script>\n\n<button {...props} class={['cool-button', props.class]}>\n\t{@render props.children?.()}\n</button>\n```\n\nThe user of this component has the same flexibility to use a mixture of objects, arrays and strings:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport Button from './Button.svelte';\n\tlet useTailwind = $state(false);\n</script>\n\n<Button\n\tonclick={() => useTailwind = true}\n\tclass={{ 'bg-blue-700 sm:w-1/2': useTailwind }}\n>\n\tAccept the inevitability of Tailwind\n</Button>\n```\n\nSince Svelte 5.19, Svelte also exposes the `ClassValue` type, which is the type of value that the `class` attribute on elements accept. This is useful if you want to use a type-safe class name in component props:\n\n```svelte\n<script lang=\"ts\">\n\timport type { ClassValue } from 'svelte/elements';\n\n\tconst props: { class: ClassValue } = $props();\n</script>\n\n<div class={['original', props.class]}>...</div>\n```\n\n## The `class:` directive\n\nPrior to Svelte 5.16, the `class:` directive was the most convenient way to set classes on elements conditionally.\n\n```svelte\n<!-- These are equivalent -->\n<div class={{ cool, lame: !cool }}>...</div>\n<div class:cool={cool} class:lame={!cool}>...</div>\n```\n\nAs with other directives, we can use a shorthand when the name of the class coincides with the value:\n\n```svelte\n<div class:cool class:lame={!cool}>...</div>\n```\n\n> [!NOTE] Unless you're using an older version of Svelte, consider avoiding `class:`, since the attribute is more powerful and composable.",
    "svelte/await-expressions": "As of Svelte 5.36, you can use the `await` keyword inside your components in three places where it was previously unavailable:\n\n- at the top level of your component's `<script>`\n- inside `$derived(...)` declarations\n- inside your markup\n\nThis feature is currently experimental, and you must opt in by adding the `experimental.async` option wherever you [configure](/docs/kit/configuration) Svelte, usually `svelte.config.js`:\n\n```js\n/// file: svelte.config.js\nexport default {\n\tcompilerOptions: {\n\t\texperimental: {\n\t\t\tasync: true\n\t\t}\n\t}\n};\n```\n\nThe experimental flag will be removed in Svelte 6.\n\n## Synchronized updates\n\nWhen an `await` expression depends on a particular piece of state, changes to that state will not be reflected in the UI until the asynchronous work has completed, so that the UI is not left in an inconsistent state. In other words, in an example like [this](/playground/untitled#H4sIAAAAAAAAE42QsWrDQBBEf2VZUkhYRE4gjSwJ0qVMkS6XYk9awcFpJe5Wdoy4fw-ycdykSPt2dpiZFYVGxgrf2PsJTlPwPWTcO-U-xwIH5zli9bminudNtwEsbl-v8_wYj-x1Y5Yi_8W7SZRFI1ZYxy64WVsjRj0rEDTwEJWUs6f8cKP2Tp8vVIxSPEsHwyKdukmA-j6jAmwO63Y1SidyCsIneA_T6CJn2ZBD00Jk_XAjT4tmQwEv-32eH6AsgYK6wXWOPPTs6Xy1CaxLECDYgb3kSUbq8p5aaifzorCt0RiUZbQcDIJ10ldH8gs3K6X2Xzqbro5zu1KCHaw2QQPrtclvwVSXc2sEC1T-Vqw0LJy-ClRy_uSkx2ogHzn9ADZ1CubKAQAA)...\n\n```svelte\n<script>\n\tlet a = $state(1);\n\tlet b = $state(2);\n\n\tasync function add(a, b) {\n\t\tawait new Promise((f) => setTimeout(f, 500)); // artificial delay\n\t\treturn a + b;\n\t}\n</script>\n\n<input type=\"number\" bind:value={a}>\n<input type=\"number\" bind:value={b}>\n\n<p>{a} + {b} = {await add(a, b)}</p>\n```\n\n...if you increment `a`, the contents of the `<p>` will _not_ immediately update to read this —\n\n```html\n<p>2 + 2 = 3</p>\n```\n\n— instead, the text will update to `2 + 2 = 4` when `add(a, b)` resolves.\n\nUpdates can overlap — a fast update will be reflected in the UI while an earlier slow update is still ongoing.\n\n## Concurrency\n\nSvelte will do as much asynchronous work as it can in parallel. For example if you have two `await` expressions in your markup...\n\n```svelte\n<p>{await one()}</p>\n<p>{await two()}</p>\n```\n\n...both functions will run at the same time, as they are independent expressions, even though they are _visually_ sequential.\n\nThis does not apply to sequential `await` expressions inside your `<script>` or inside async functions — these run like any other asynchronous JavaScript. An exception is that independent `$derived` expressions will update independently, even though they will run sequentially when they are first created:\n\n```js\nasync function one() { return 1; }\nasync function two() { return 2; }\n// ---cut---\n// these will run sequentially the first time,\n// but will update independently\nlet a = $derived(await one());\nlet b = $derived(await two());\n```\n\n> [!NOTE] If you write code like this, expect Svelte to give you an [`await_waterfall`](runtime-warnings#Client-warnings-await_waterfall) warning\n\n## Indicating loading states\n\nTo render placeholder UI, you can wrap content in a `<svelte:boundary>` with a [`pending`](svelte-boundary#Properties-pending) snippet. This will be shown when the boundary is first created, but not for subsequent updates, which are globally coordinated.\n\nAfter the contents of a boundary have resolved for the first time and have replaced the `pending` snippet, you can detect subsequent async work with [`$effect.pending()`]($effect#$effect.pending). This is what you would use to display a \"we're asynchronously validating your input\" spinner next to a form field, for example.\n\nYou can also use [`settled()`](svelte#settled) to get a promise that resolves when the current update is complete:\n\n```js\nlet color = 'red';\nlet answer = -1;\nlet updating = false;\n// ---cut---\nimport { tick, settled } from 'svelte';\n\nasync function onclick() {\n\tupdating = true;\n\n\t// without this, the change to `updating` will be\n\t// grouped with the other changes, meaning it\n\t// won't be reflected in the UI\n\tawait tick();\n\n\tcolor = 'octarine';\n\tanswer = 42;\n\n\tawait settled();\n\n\t// any updates affected by `color` or `answer`\n\t// have now been applied\n\tupdating = false;\n}\n```\n\n## Error handling\n\nErrors in `await` expressions will bubble to the nearest [error boundary](svelte-boundary).\n\n## Server-side rendering\n\nSvelte supports asynchronous server-side rendering (SSR) with the `render(...)` API. To use it, simply await the return value:\n\n```js\n/// file: server.js\nimport { render } from 'svelte/server';\nimport App from './App.svelte';\n\nconst { head, body } = +++await+++ render(App);\n```\n\n> [!NOTE] If you're using a framework like SvelteKit, this is done on your behalf.\n\nIf a `<svelte:boundary>` with a `pending` snippet is encountered during SSR, that snippet will be rendered while the rest of the content is ignored. All `await` expressions encountered outside boundaries with `pending` snippets will resolve and render their contents prior to `await render(...)` returning.\n\n> [!NOTE] In the future, we plan to add a streaming implementation that renders the content in the background.\n\n## Caveats\n\nAs an experimental feature, the details of how `await` is handled (and related APIs like `$effect.pending()`) are subject to breaking changes outside of a semver major release, though we intend to keep such changes to a bare minimum.\n\n## Breaking changes\n\nEffects run in a slightly different order when the `experimental.async` option is `true`. Specifically, _block_ effects like `{#if ...}` and `{#each ...}` now run before an `$effect.pre` or `beforeUpdate` in the same component, which means that in [very rare situations](/playground/untitled?#H4sIAAAAAAAAE22R3VLDIBCFX2WLvUhnTHsf0zre-Q7WmfwtFV2BgU1rJ5N3F0jaOuoVcPbw7VkYhK4_URTiGYkMnIyjDjLsFGO3EvdCKkIvipdB8NlGXxSCPt96snbtj0gctab2-J_eGs2oOWBE6VunLO_2es-EDKZ5x5ZhC0vPNWM2gHXGouNzAex6hHH1cPHil_Lsb95YT9VQX6KUAbS2DrNsBdsdDFHe8_XSYjH1SrhELTe3MLpsemajweiWVPuxHSbKNd-8eQTdE0EBf4OOaSg2hwNhhE_ABB_ulJzjj9FULvIcqgm5vnAqUB7wWFMfhuugQWkcAr8hVD-mq8D12kOep24J_IszToOXdveGDsuNnZwbJUNlXsKnhJdhUcTo42s41YpOSneikDV5HL8BktM6yRcCAAA=) it is possible to update a block that should no longer exist, but only if you update state inside an effect, [which you should avoid]($effect#When-not-to-use-$effect).",
    "svelte/scoped-styles": "Svelte components can include a `<style>` element containing CSS that belongs to the component. This CSS is _scoped_ by default, meaning that styles will not apply to any elements on the page outside the component in question.\n\nThis works by adding a class to affected elements, which is based on a hash of the component styles (e.g. `svelte-123xyz`).\n\n```svelte\n<style>\n\tp {\n\t\t/* this will only affect <p> elements in this component */\n\t\tcolor: burlywood;\n\t}\n</style>\n```\n\n## Specificity\n\nEach scoped selector receives a [specificity](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity) increase of 0-1-0, as a result of the scoping class (e.g. `.svelte-123xyz`) being added to the selector. This means that (for example) a `p` selector defined in a component will take precedence over a `p` selector defined in a global stylesheet, even if the global stylesheet is loaded later.\n\nIn some cases, the scoping class must be added to a selector multiple times, but after the first occurrence it is added with `:where(.svelte-xyz123)` in order to not increase specificity further.\n\n## Scoped keyframes\n\nIf a component defines `@keyframes`, the name is scoped to the component using the same hashing approach. Any `animation` rules in the component will be similarly adjusted:\n\n```svelte\n<style>\n\t.bouncy {\n\t\tanimation: bounce 10s;\n\t}\n\n\t/* these keyframes are only accessible inside this component */\n\t@keyframes bounce {\n\t\t/* ... */\n\t}\n</style>\n```",
    "svelte/global-styles": "## :global(...)\n\nTo apply styles to a single selector globally, use the `:global(...)` modifier:\n\n```svelte\n<style>\n\t:global(body) {\n\t\t/* applies to <body> */\n\t\tmargin: 0;\n\t}\n\n\tdiv :global(strong) {\n\t\t/* applies to all <strong> elements, in any component,\n\t\t   that are inside <div> elements belonging\n\t\t   to this component */\n\t\tcolor: goldenrod;\n\t}\n\n\tp:global(.big.red) {\n\t\t/* applies to all <p> elements belonging to this component\n\t\t   with `class=\"big red\"`, even if it is applied\n\t\t   programmatically (for example by a library) */\n\t}\n</style>\n```\n\nIf you want to make @keyframes that are accessible globally, you need to prepend your keyframe names with `-global-`.\n\nThe `-global-` part will be removed when compiled, and the keyframe will then be referenced using just `my-animation-name` elsewhere in your code.\n\n```svelte\n<style>\n\t@keyframes -global-my-animation-name {\n\t\t/* code goes here */\n\t}\n</style>\n```\n\n## :global\n\nTo apply styles to a group of selectors globally, create a `:global {...}` block:\n\n```svelte\n<style>\n\t:global {\n\t\t/* applies to every <div> in your application */\n\t\tdiv { ... }\n\n\t\t/* applies to every <p> in your application */\n\t\tp { ... }\n\t}\n\n\t.a :global {\n\t\t/* applies to every `.b .c .d` element, in any component,\n\t\t   that is inside an `.a` element in this component */\n\t\t.b .c .d {...}\n\t}\n</style>\n```\n\n> [!NOTE] The second example above could also be written as an equivalent `.a :global .b .c .d` selector, where everything after the `:global` is unscoped, though the nested form is preferred.",
    "svelte/custom-properties": "You can pass CSS custom properties — both static and dynamic — to components:\n\n```svelte\n<Slider\n\tbind:value\n\tmin={0}\n\tmax={100}\n\t--track-color=\"black\"\n\t--thumb-color=\"rgb({r} {g} {b})\"\n/>\n```\n\nThe above code essentially desugars to this:\n\n```svelte\n<svelte-css-wrapper style=\"display: contents; --track-color: black; --thumb-color: rgb({r} {g} {b})\">\n\t<Slider\n\t\tbind:value\n\t\tmin={0}\n\t\tmax={100}\n\t/>\n</svelte-css-wrapper>\n```\n\nFor an SVG element, it would use `<g>` instead:\n\n```svelte\n<g style=\"--track-color: black; --thumb-color: rgb({r} {g} {b})\">\n\t<Slider\n\t\tbind:value\n\t\tmin={0}\n\t\tmax={100}\n\t/>\n</g>\n```\n\nInside the component, we can read these custom properties (and provide fallback values) using [`var(...)`](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties):\n\n```svelte\n<style>\n\t.track {\n\t\tbackground: var(--track-color, #aaa);\n\t}\n\n\t.thumb {\n\t\tbackground: var(--thumb-color, blue);\n\t}\n</style>\n```\n\nYou don't _have_ to specify the values directly on the component; as long as the custom properties are defined on a parent element, the component can use them. It's common to define custom properties on the `:root` element in a global stylesheet so that they apply to your entire application.\n\n> [!NOTE] While the extra element will not affect layout, it _will_ affect any CSS selectors that (for example) use the `>` combinator to target an element directly inside the component's container.",
    "svelte/nested-style-elements": "There can only be one top-level `<style>` tag per component.\n\nHowever, it is possible to have a `<style>` tag nested inside other elements or logic blocks.\n\nIn that case, the `<style>` tag will be inserted as-is into the DOM; no scoping or processing will be done on the `<style>` tag.\n\n```svelte\n<div>\n\t<style>\n\t\t/* this style tag will be inserted as-is */\n\t\tdiv {\n\t\t\t/* this will apply to all `<div>` elements in the DOM */\n\t\t\tcolor: red;\n\t\t}\n\t</style>\n</div>\n```",
    "svelte/svelte-boundary": "```svelte\n<svelte:boundary onerror={handler}>...</svelte:boundary>\n```\n\n> [!NOTE]\n> This feature was added in 5.3.0\n\nBoundaries allow you to 'wall off' parts of your app, so that you can:\n\n- provide UI that should be shown when [`await`](await-expressions) expressions are first resolving\n- handle errors that occur during rendering or while running effects, and provide UI that should be rendered when an error happens\n\nIf a boundary handles an error (with a `failed` snippet or `onerror` handler, or both) its existing content will be removed.\n\n> [!NOTE] Errors occurring outside the rendering process (for example, in event handlers or after a `setTimeout` or async work) are _not_ caught by error boundaries.\n\n## Properties\n\nFor the boundary to do anything, one or more of the following must be provided.\n\n### `pending`\n\nAs of Svelte 5.36, boundaries with a `pending` snippet can contain [`await`](await-expressions) expressions. This snippet will be shown when the boundary is first created, and will remain visible until all the `await` expressions inside the boundary have resolved ([demo](/playground/untitled#H4sIAAAAAAAAE21QQW6DQAz8ytY9BKQVpFdKkPqDHnorPWzAaSwt3tWugUaIv1eE0KpKD5as8YxnNBOw6RAKKOOAVrA4up5bEy6VGknOyiO3xJ8qMnmPAhpOZDFC8T6BXPyiXADQ258X77P1FWg4moj_4Y1jQZZ49W0CealqruXUcyPkWLVozQXbZDC2R606spYiNo7bqA7qab_fp2paFLUElD6wYhzVa3AdRUySgNHZAVN1qDZaLRHljTp0vSTJ9XJjrSbpX5f0eZXN6zLXXOa_QfmurIVU-moyoyH5ib87o7XuYZfOZe6vnGWmx1uZW7lJOq9upa-sMwuUZdkmmfIbfQ1xZwwaBL8ECgk9zh8axJAdiVsoTsZGnL8Bg4tX_OMBAAA=)):\n\n```svelte\n<svelte:boundary>\n\t<p>{await delayed('hello!')}</p>\n\n\t{#snippet pending()}\n\t\t<p>loading...</p>\n\t{/snippet}\n</svelte:boundary>\n```\n\nThe `pending` snippet will _not_ be shown for subsequent async updates — for these, you can use [`$effect.pending()`]($effect#$effect.pending).\n\n> [!NOTE] In the [playground](/playground), your app is rendered inside a boundary with an empty pending snippet, so that you can use `await` without having to create one.\n\n\n### `failed`\n\nIf a `failed` snippet is provided, it will be rendered when an error is thrown inside the boundary, with the `error` and a `reset` function that recreates the contents ([demo](/playground/hello-world#H4sIAAAAAAAAE3VRy26DMBD8lS2tFCIh6JkAUlWp39Cq9EBg06CAbdlLArL87zWGKk8ORnhmd3ZnrD1WtOjFXqKO2BDGW96xqpBD5gXerm5QefG39mgQY9EIWHxueRMinLosti0UPsJLzggZKTeilLWgLGc51a3gkuCjKQ7DO7cXZotgJ3kLqzC6hmex1SZnSXTWYHcrj8LJjWTk0PHoZ8VqIdCOKayPykcpuQxAokJaG1dGybYj4gw4K5u6PKTasSbjXKgnIDlA8VvUdo-pzonraBY2bsH7HAl78mKSHZpgIcuHjq9jXSpZSLixRlveKYQUXhQVhL6GPobXAAb7BbNeyvNUs4qfRg3OnELLj5hqH9eQZqCnoBwR9lYcQxuVXeBzc8kMF8yXY4yNJ5oGiUzP_aaf_waTRGJib5_Ad3P_vbCuaYxzeNpbU0eUMPAOKh7Yw1YErgtoXyuYlPLzc10_xo_5A91zkQL_AgAA)):\n\n```svelte\n<svelte:boundary>\n\t<FlakyComponent />\n\n\t{#snippet failed(error, reset)}\n\t\t<button onclick={reset}>oops! try again</button>\n\t{/snippet}\n</svelte:boundary>\n```\n\n> [!NOTE]\n> As with [snippets passed to components](snippet#Passing-snippets-to-components), the `failed` snippet can be passed explicitly as a property...\n>\n> ```svelte\n> <svelte:boundary {failed}>...</svelte:boundary>\n> ```\n>\n> ...or implicitly by declaring it directly inside the boundary, as in the example above.\n\n### `onerror`\n\nIf an `onerror` function is provided, it will be called with the same two `error` and `reset` arguments. This is useful for tracking the error with an error reporting service...\n\n```svelte\n<svelte:boundary onerror={(e) => report(e)}>\n\t...\n</svelte:boundary>\n```\n\n...or using `error` and `reset` outside the boundary itself:\n\n```svelte\n<script>\n\tlet error = $state(null);\n\tlet reset = $state(() => {});\n\n\tfunction onerror(e, r) {\n\t\terror = e;\n\t\treset = r;\n\t}\n</script>\n\n<svelte:boundary {onerror}>\n\t<FlakyComponent />\n</svelte:boundary>\n\n{#if error}\n\t<button onclick={() => {\n\t\terror = null;\n\t\treset();\n\t}}>\n\t\toops! try again\n\t</button>\n{/if}\n```\n\nIf an error occurs inside the `onerror` function (or if you rethrow the error), it will be handled by a parent boundary if such exists.",
    "svelte/svelte-window": "```svelte\n<svelte:window onevent={handler} />\n```\n\n```svelte\n<svelte:window bind:prop={value} />\n```\n\nThe `<svelte:window>` element allows you to add event listeners to the `window` object without worrying about removing them when the component is destroyed, or checking for the existence of `window` when server-side rendering.\n\nThis element may only appear at the top level of your component — it cannot be inside a block or element.\n\n```svelte\n<script>\n\tfunction handleKeydown(event) {\n\t\talert(`pressed the ${event.key} key`);\n\t}\n</script>\n\n<svelte:window onkeydown={handleKeydown} />\n```\n\nYou can also bind to the following properties:\n\n- `innerWidth`\n- `innerHeight`\n- `outerWidth`\n- `outerHeight`\n- `scrollX`\n- `scrollY`\n- `online` — an alias for `window.navigator.onLine`\n- `devicePixelRatio`\n\nAll except `scrollX` and `scrollY` are readonly.\n\n```svelte\n<svelte:window bind:scrollY={y} />\n```\n\n> [!NOTE] Note that the page will not be scrolled to the initial value to avoid accessibility issues. Only subsequent changes to the bound variable of `scrollX` and `scrollY` will cause scrolling. If you have a legitimate reason to scroll when the component is rendered, call `scrollTo()` in an `$effect`.",
    "svelte/svelte-document": "```svelte\n<svelte:document onevent={handler} />\n```\n\n```svelte\n<svelte:document bind:prop={value} />\n```\n\nSimilarly to `<svelte:window>`, this element allows you to add listeners to events on `document`, such as `visibilitychange`, which don't fire on `window`. It also lets you use [actions](use) on `document`.\n\nAs with `<svelte:window>`, this element may only appear the top level of your component and must never be inside a block or element.\n\n```svelte\n<svelte:document onvisibilitychange={handleVisibilityChange} use:someAction />\n```\n\nYou can also bind to the following properties:\n\n- `activeElement`\n- `fullscreenElement`\n- `pointerLockElement`\n- `visibilityState`\n\nAll are readonly.",
    "svelte/svelte-body": "```svelte\n<svelte:body onevent={handler} />\n```\n\nSimilarly to `<svelte:window>`, this element allows you to add listeners to events on `document.body`, such as `mouseenter` and `mouseleave`, which don't fire on `window`. It also lets you use [actions](use) on the `<body>` element.\n\nAs with `<svelte:window>` and `<svelte:document>`, this element may only appear at the top level of your component and must never be inside a block or element.\n\n```svelte\n<svelte:body onmouseenter={handleMouseenter} onmouseleave={handleMouseleave} use:someAction />\n```",
    "svelte/svelte-head": "```svelte\n<svelte:head>...</svelte:head>\n```\n\nThis element makes it possible to insert elements into `document.head`. During server-side rendering, `head` content is exposed separately to the main `body` content.\n\nAs with `<svelte:window>`, `<svelte:document>` and `<svelte:body>`, this element may only appear at the top level of your component and must never be inside a block or element.\n\n```svelte\n<svelte:head>\n\t<title>Hello world!</title>\n\t<meta name=\"description\" content=\"This is where the description goes for SEO\" />\n</svelte:head>\n```",
    "svelte/svelte-element": "```svelte\n<svelte:element this={expression} />\n```\n\nThe `<svelte:element>` element lets you render an element that is unknown at author time, for example because it comes from a CMS. Any properties and event listeners present will be applied to the element.\n\nThe only supported binding is `bind:this`, since Svelte's built-in bindings do not work with generic elements.\n\nIf `this` has a nullish value, the element and its children will not be rendered.\n\nIf `this` is the name of a [void element](https://developer.mozilla.org/en-US/docs/Glossary/Void_element) (e.g., `br`) and `<svelte:element>` has child elements, a runtime error will be thrown in development mode:\n\n```svelte\n<script>\n\tlet tag = $state('hr');\n</script>\n\n<svelte:element this={tag}>\n\tThis text cannot appear inside an hr element\n</svelte:element>\n```\n\nSvelte tries its best to infer the correct namespace from the element's surroundings, but it's not always possible. You can make it explicit with an `xmlns` attribute:\n\n```svelte\n<svelte:element this={tag} xmlns=\"http://www.w3.org/2000/svg\" />\n```\n\n`this` needs to be a valid DOM element tag, things like `#text` or `svelte:head` will not work.",
    "svelte/svelte-options": "```svelte\n<svelte:options option={value} />\n```\n\nThe `<svelte:options>` element provides a place to specify per-component compiler options, which are detailed in the [compiler section](svelte-compiler#compile). The possible options are:\n\n- `runes={true}` — forces a component into _runes mode_ (see the [Legacy APIs](legacy-overview) section)\n- `runes={false}` — forces a component into _legacy mode_\n- `namespace=\"...\"` — the namespace where this component will be used, can be \"html\" (the default), \"svg\" or \"mathml\"\n- `customElement={...}` — the [options](custom-elements#Component-options) to use when compiling this component as a custom element. If a string is passed, it is used as the `tag` option\n- `css=\"injected\"` — the component will inject its styles inline: During server-side rendering, it's injected as a `<style>` tag in the `head`, during client side rendering, it's loaded via JavaScript\n\n> [!LEGACY] Deprecated options\n> Svelte 4 also included the following options. They are deprecated in Svelte 5 and non-functional in runes mode.\n>\n> - `immutable={true}` — you never use mutable data, so the compiler can do simple referential equality checks to determine if values have changed\n> - `immutable={false}` — the default. Svelte will be more conservative about whether or not mutable objects have changed\n> - `accessors={true}` — adds getters and setters for the component's props\n> - `accessors={false}` — the default\n\n```svelte\n<svelte:options customElement=\"my-custom-element\" />\n```",
    "svelte/stores": "<!-- - how to use\n- how to write\n- TODO should the details for the store methods belong to the reference section? -->\n\nA _store_ is an object that allows reactive access to a value via a simple _store contract_. The [`svelte/store` module](../svelte-store) contains minimal store implementations which fulfil this contract.\n\nAny time you have a reference to a store, you can access its value inside a component by prefixing it with the `$` character. This causes Svelte to declare the prefixed variable, subscribe to the store at component initialisation and unsubscribe when appropriate.\n\nAssignments to `$`-prefixed variables require that the variable be a writable store, and will result in a call to the store's `.set` method.\n\nNote that the store must be declared at the top level of the component — not inside an `if` block or a function, for example.\n\nLocal variables (that do not represent store values) must _not_ have a `$` prefix.\n\n```svelte\n<script>\n\timport { writable } from 'svelte/store';\n\n\tconst count = writable(0);\n\tconsole.log($count); // logs 0\n\n\tcount.set(1);\n\tconsole.log($count); // logs 1\n\n\t$count = 2;\n\tconsole.log($count); // logs 2\n</script>\n```\n\n## When to use stores\n\nPrior to Svelte 5, stores were the go-to solution for creating cross-component reactive states or extracting logic. With runes, these use cases have greatly diminished.\n\n- when extracting logic, it's better to take advantage of runes' universal reactivity: You can use runes outside the top level of components and even place them into JavaScript or TypeScript files (using a `.svelte.js` or `.svelte.ts` file ending)\n- when creating shared state, you can create a `$state` object containing the values you need and then manipulate said state\n\n```ts\n/// file: state.svelte.js\nexport const userState = $state({\n\tname: 'name',\n\t/* ... */\n});\n```\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport { userState } from './state.svelte.js';\n</script>\n\n<p>User name: {userState.name}</p>\n<button onclick={() => {\n\tuserState.name = 'new name';\n}}>\n\tchange name\n</button>\n```\n\nStores are still a good solution when you have complex asynchronous data streams or it's important to have more manual control over updating values or listening to changes. If you're familiar with RxJs and want to reuse that knowledge, the `$` also comes in handy for you.\n\n## svelte/store\n\nThe `svelte/store` module contains a minimal store implementation which fulfil the store contract. It provides methods for creating stores that you can update from the outside, stores you can only update from the inside, and for combining and deriving stores.\n\n### `writable`\n\nFunction that creates a store which has values that can be set from 'outside' components. It gets created as an object with additional `set` and `update` methods.\n\n`set` is a method that takes one argument which is the value to be set. The store value gets set to the value of the argument if the store value is not already equal to it.\n\n`update` is a method that takes one argument which is a callback. The callback takes the existing store value as its argument and returns the new value to be set to the store.\n\n```js\n/// file: store.js\nimport { writable } from 'svelte/store';\n\nconst count = writable(0);\n\ncount.subscribe((value) => {\n\tconsole.log(value);\n}); // logs '0'\n\ncount.set(1); // logs '1'\n\ncount.update((n) => n + 1); // logs '2'\n```\n\nIf a function is passed as the second argument, it will be called when the number of subscribers goes from zero to one (but not from one to two, etc). That function will be passed a `set` function which changes the value of the store, and an `update` function which works like the `update` method on the store, taking a callback to calculate the store's new value from its old value. It must return a `stop` function that is called when the subscriber count goes from one to zero.\n\n```js\n/// file: store.js\nimport { writable } from 'svelte/store';\n\nconst count = writable(0, () => {\n\tconsole.log('got a subscriber');\n\treturn () => console.log('no more subscribers');\n});\n\ncount.set(1); // does nothing\n\nconst unsubscribe = count.subscribe((value) => {\n\tconsole.log(value);\n}); // logs 'got a subscriber', then '1'\n\nunsubscribe(); // logs 'no more subscribers'\n```\n\nNote that the value of a `writable` is lost when it is destroyed, for example when the page is refreshed. However, you can write your own logic to sync the value to for example the `localStorage`.\n\n### `readable`\n\nCreates a store whose value cannot be set from 'outside', the first argument is the store's initial value, and the second argument to `readable` is the same as the second argument to `writable`.\n\n```ts\nimport { readable } from 'svelte/store';\n\nconst time = readable(new Date(), (set) => {\n\tset(new Date());\n\n\tconst interval = setInterval(() => {\n\t\tset(new Date());\n\t}, 1000);\n\n\treturn () => clearInterval(interval);\n});\n\nconst ticktock = readable('tick', (set, update) => {\n\tconst interval = setInterval(() => {\n\t\tupdate((sound) => (sound === 'tick' ? 'tock' : 'tick'));\n\t}, 1000);\n\n\treturn () => clearInterval(interval);\n});\n```\n\n### `derived`\n\nDerives a store from one or more other stores. The callback runs initially when the first subscriber subscribes and then whenever the store dependencies change.\n\nIn the simplest version, `derived` takes a single store, and the callback returns a derived value.\n\n```ts\n// @filename: ambient.d.ts\nimport { type Writable } from 'svelte/store';\n\ndeclare global {\n\tconst a: Writable<number>;\n}\n\nexport {};\n\n// @filename: index.ts\n// ---cut---\nimport { derived } from 'svelte/store';\n\nconst doubled = derived(a, ($a) => $a * 2);\n```\n\nThe callback can set a value asynchronously by accepting a second argument, `set`, and an optional third argument, `update`, calling either or both of them when appropriate.\n\nIn this case, you can also pass a third argument to `derived` — the initial value of the derived store before `set` or `update` is first called. If no initial value is specified, the store's initial value will be `undefined`.\n\n```ts\n// @filename: ambient.d.ts\nimport { type Writable } from 'svelte/store';\n\ndeclare global {\n\tconst a: Writable<number>;\n}\n\nexport {};\n\n// @filename: index.ts\n// @errors: 18046 2769 7006\n// ---cut---\nimport { derived } from 'svelte/store';\n\nconst delayed = derived(\n\ta,\n\t($a, set) => {\n\t\tsetTimeout(() => set($a), 1000);\n\t},\n\t2000\n);\n\nconst delayedIncrement = derived(a, ($a, set, update) => {\n\tset($a);\n\tsetTimeout(() => update((x) => x + 1), 1000);\n\t// every time $a produces a value, this produces two\n\t// values, $a immediately and then $a + 1 a second later\n});\n```\n\nIf you return a function from the callback, it will be called when a) the callback runs again, or b) the last subscriber unsubscribes.\n\n```ts\n// @filename: ambient.d.ts\nimport { type Writable } from 'svelte/store';\n\ndeclare global {\n\tconst frequency: Writable<number>;\n}\n\nexport {};\n\n// @filename: index.ts\n// ---cut---\nimport { derived } from 'svelte/store';\n\nconst tick = derived(\n\tfrequency,\n\t($frequency, set) => {\n\t\tconst interval = setInterval(() => {\n\t\t\tset(Date.now());\n\t\t}, 1000 / $frequency);\n\n\t\treturn () => {\n\t\t\tclearInterval(interval);\n\t\t};\n\t},\n\t2000\n);\n```\n\nIn both cases, an array of arguments can be passed as the first argument instead of a single store.\n\n```ts\n// @filename: ambient.d.ts\nimport { type Writable } from 'svelte/store';\n\ndeclare global {\n\tconst a: Writable<number>;\n\tconst b: Writable<number>;\n}\n\nexport {};\n\n// @filename: index.ts\n\n// ---cut---\nimport { derived } from 'svelte/store';\n\nconst summed = derived([a, b], ([$a, $b]) => $a + $b);\n\nconst delayed = derived([a, b], ([$a, $b], set) => {\n\tsetTimeout(() => set($a + $b), 1000);\n});\n```\n\n### `readonly`\n\nThis simple helper function makes a store readonly. You can still subscribe to the changes from the original one using this new readable store.\n\n```js\nimport { readonly, writable } from 'svelte/store';\n\nconst writableStore = writable(1);\nconst readableStore = readonly(writableStore);\n\nreadableStore.subscribe(console.log);\n\nwritableStore.set(2); // console: 2\n// @errors: 2339\nreadableStore.set(2); // ERROR\n```\n\n### `get`\n\nGenerally, you should read the value of a store by subscribing to it and using the value as it changes over time. Occasionally, you may need to retrieve the value of a store to which you're not subscribed. `get` allows you to do so.\n\n> [!NOTE] This works by creating a subscription, reading the value, then unsubscribing. It's therefore not recommended in hot code paths.\n\n```ts\n// @filename: ambient.d.ts\nimport { type Writable } from 'svelte/store';\n\ndeclare global {\n\tconst store: Writable<string>;\n}\n\nexport {};\n\n// @filename: index.ts\n// ---cut---\nimport { get } from 'svelte/store';\n\nconst value = get(store);\n```\n\n## Store contract\n\n```ts\n// @noErrors\nstore = { subscribe: (subscription: (value: any) => void) => (() => void), set?: (value: any) => void }\n```\n\nYou can create your own stores without relying on [`svelte/store`](../svelte-store), by implementing the _store contract_:\n\n1. A store must contain a `.subscribe` method, which must accept as its argument a subscription function. This subscription function must be immediately and synchronously called with the store's current value upon calling `.subscribe`. All of a store's active subscription functions must later be synchronously called whenever the store's value changes.\n2. The `.subscribe` method must return an unsubscribe function. Calling an unsubscribe function must stop its subscription, and its corresponding subscription function must not be called again by the store.\n3. A store may _optionally_ contain a `.set` method, which must accept as its argument a new value for the store, and which synchronously calls all of the store's active subscription functions. Such a store is called a _writable store_.\n\nFor interoperability with RxJS Observables, the `.subscribe` method is also allowed to return an object with an `.unsubscribe` method, rather than return the unsubscription function directly. Note however that unless `.subscribe` synchronously calls the subscription (which is not required by the Observable spec), Svelte will see the value of the store as `undefined` until it does.",
    "svelte/context": "Context allows components to access values owned by parent components without passing them down as props (potentially through many layers of intermediate components, known as 'prop-drilling'). The parent component sets context with `setContext(key, value)`...\n\n```svelte\n<!--- file: Parent.svelte --->\n<script>\n\timport { setContext } from 'svelte';\n\n\tsetContext('my-context', 'hello from Parent.svelte');\n</script>\n```\n\n...and the child retrieves it with `getContext`:\n\n```svelte\n<!--- file: Child.svelte --->\n<script>\n\timport { getContext } from 'svelte';\n\n\tconst message = getContext('my-context');\n</script>\n\n<h1>{message}, inside Child.svelte</h1>\n```\n\nThis is particularly useful when `Parent.svelte` is not directly aware of `Child.svelte`, but instead renders it as part of a `children` [snippet](snippet) ([demo](/playground/untitled#H4sIAAAAAAAAE42Q3W6DMAyFX8WyJgESK-oto6hTX2D3YxcM3IIUQpR40yqUd58CrCXsp7tL7HNsf2dAWXaEKR56yfTBGOOxFWQwfR6Qz8q1XAHjL-GjUhvzToJd7bU09FO9ctMkG0wxM5VuFeeFLLjtVK8ZnkpNkuGo-w6CTTJ9Z3PwsBAemlbUF934W8iy5DpaZtOUcU02-ZLcaS51jHEkTFm_kY1_wfOO8QnXrb8hBzDEc6pgZ4gFoyz4KgiD7nxfTe8ghqAhIfrJ46cTzVZBbkPlODVJsLCDO6V7ZcJoncyw1yRr0hd1GNn_ZbEM3I9i1bmVxOlWElUvDUNHxpQngt3C4CXzjS1rtvkw22wMrTRtTbC8Lkuabe7jvthPPe3DofYCAAA=)):\n\n```svelte\n<Parent>\n\t<Child />\n</Parent>\n```\n\nThe key (`'my-context'`, in the example above) and the context itself can be any JavaScript value.\n\nIn addition to [`setContext`](svelte#setContext) and [`getContext`](svelte#getContext), Svelte exposes [`hasContext`](svelte#hasContext) and [`getAllContexts`](svelte#getAllContexts) functions.\n\n## Using context with state\n\nYou can store reactive state in context ([demo](/playground/untitled#H4sIAAAAAAAAE41R0W6DMAz8FSuaBNUQdK8MkKZ-wh7HHihzu6hgosRMm1D-fUpSVNq12x4iEvvOx_kmQU2PIhfP3DCCJGgHYvxkkYid7NCI_GUS_KUcxhVEMjOelErNB3bsatvG4LW6n0ZsRC4K02qpuKqpZtmrQTNMYJA3QRAs7PTQQxS40eMCt3mX3duxnWb-lS5h7nTI0A4jMWoo4c44P_Hku-zrOazdy64chWo-ScfRkRgl8wgHKrLTH1OxHZkHgoHaTraHcopXUFYzPPVfuC_hwQaD1GrskdiNCdQwJljJqlvXfyqVsA5CGg0uRUQifHw56xFtciO75QrP07vo_JXf_tf8yK2ezDKY_ZWt_1y2qqYzv7bI1IW1V_sN19m-07wCAAA=))...\n\n```svelte\n<script>\n\timport { setContext } from 'svelte';\n\timport Child from './Child.svelte';\n\n\tlet counter = $state({\n\t\tcount: 0\n\t});\n\n\tsetContext('counter', counter);\n</script>\n\n<button onclick={() => counter.count += 1}>\n\tincrement\n</button>\n\n<Child />\n<Child />\n<Child />\n```\n\n...though note that if you _reassign_ `counter` instead of updating it, you will 'break the link' — in other words instead of this...\n\n```svelte\n<button onclick={() => counter = { count: 0 }}>\n\treset\n</button>\n```\n\n...you must do this:\n\n```svelte\n<button onclick={() => +++counter.count = 0+++}>\n\treset\n</button>\n```\n\nSvelte will warn you if you get it wrong.\n\n## Type-safe context\n\nA useful pattern is to wrap the calls to `setContext` and `getContext` inside helper functions that let you preserve type safety:\n\n```js\n/// file: context.js\n// @filename: ambient.d.ts\ninterface User {}\n\n// @filename: index.js\n// ---cut---\nimport { getContext, setContext } from 'svelte';\n\nconst key = {};\n\n/** @param {User} user */\nexport function setUserContext(user) {\n\tsetContext(key, user);\n}\n\nexport function getUserContext() {\n\treturn /** @type {User} */ (getContext(key));\n}\n```\n\n## Replacing global state\n\nWhen you have state shared by many different components, you might be tempted to put it in its own module and just import it wherever it's needed:\n\n```js\n/// file: state.svelte.js\nexport const myGlobalState = $state({\n\tuser: {\n\t\t// ...\n\t}\n\t// ...\n});\n```\n\nIn many cases this is perfectly fine, but there is a risk: if you mutate the state during server-side rendering (which is discouraged, but entirely possible!)...\n\n```svelte\n<!--- file: App.svelte ---->\n<script>\n\timport { myGlobalState } from './state.svelte.js';\n\n\tlet { data } = $props();\n\n\tif (data.user) {\n\t\tmyGlobalState.user = data.user;\n\t}\n</script>\n```\n\n...then the data may be accessible by the _next_ user. Context solves this problem because it is not shared between requests.",
    "svelte/lifecycle-hooks": "<!-- - onMount/onDestroy\n- mention that `$effect` might be better for your use case\n- beforeUpdate/afterUpdate with deprecation notice?\n- or skip this entirely and only have it in the reference docs? -->\n\nIn Svelte 5, the component lifecycle consists of only two parts: Its creation and its destruction. Everything in-between — when certain state is updated — is not related to the component as a whole; only the parts that need to react to the state change are notified. This is because under the hood the smallest unit of change is actually not a component, it's the (render) effects that the component sets up upon component initialization. Consequently, there's no such thing as a \"before update\"/\"after update\" hook.\n\n## `onMount`\n\nThe `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM. It must be called during the component's initialisation (but doesn't need to live _inside_ the component; it can be called from an external module).\n\n`onMount` does not run inside a component that is rendered on the server.\n\n```svelte\n<script>\n\timport { onMount } from 'svelte';\n\n\tonMount(() => {\n\t\tconsole.log('the component has mounted');\n\t});\n</script>\n```\n\nIf a function is returned from `onMount`, it will be called when the component is unmounted.\n\n```svelte\n<script>\n\timport { onMount } from 'svelte';\n\n\tonMount(() => {\n\t\tconst interval = setInterval(() => {\n\t\t\tconsole.log('beep');\n\t\t}, 1000);\n\n\t\treturn () => clearInterval(interval);\n\t});\n</script>\n```\n\n> [!NOTE] This behaviour will only work when the function passed to `onMount` is _synchronous_. `async` functions always return a `Promise`.\n\n## `onDestroy`\n\nSchedules a callback to run immediately before the component is unmounted.\n\nOut of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the only one that runs inside a server-side component.\n\n```svelte\n<script>\n\timport { onDestroy } from 'svelte';\n\n\tonDestroy(() => {\n\t\tconsole.log('the component is being destroyed');\n\t});\n</script>\n```\n\n## `tick`\n\nWhile there's no \"after update\" hook, you can use `tick` to ensure that the UI is updated before continuing. `tick` returns a promise that resolves once any pending state changes have been applied, or in the next microtask if there are none.\n\n```svelte\n<script>\n\timport { tick } from 'svelte';\n\n\t$effect.pre(() => {\n\t\tconsole.log('the component is about to update');\n\t\ttick().then(() => {\n\t\t\t\tconsole.log('the component just updated');\n\t\t});\n\t});\n</script>\n```\n\n## Deprecated: `beforeUpdate` / `afterUpdate`\n\nSvelte 4 contained hooks that ran before and after the component as a whole was updated. For backwards compatibility, these hooks were shimmed in Svelte 5 but not available inside components that use runes.\n\n```svelte\n<script>\n\timport { beforeUpdate, afterUpdate } from 'svelte';\n\n\tbeforeUpdate(() => {\n\t\tconsole.log('the component is about to update');\n\t});\n\n\tafterUpdate(() => {\n\t\tconsole.log('the component just updated');\n\t});\n</script>\n```\n\nInstead of `beforeUpdate` use `$effect.pre` and instead of `afterUpdate` use `$effect` instead - these runes offer more granular control and only react to the changes you're actually interested in.\n\n### Chat window example\n\nTo implement a chat window that autoscrolls to the bottom when new messages appear (but only if you were _already_ scrolled to the bottom), we need to measure the DOM before we update it.\n\nIn Svelte 4, we do this with `beforeUpdate`, but this is a flawed approach — it fires before _every_ update, whether it's relevant or not. In the example below, we need to introduce checks like `updatingMessages` to make sure we don't mess with the scroll position when someone toggles dark mode.\n\nWith runes, we can use `$effect.pre`, which behaves the same as `$effect` but runs before the DOM is updated. As long as we explicitly reference `messages` inside the effect body, it will run whenever `messages` changes, but _not_ when `theme` changes.\n\n`beforeUpdate`, and its equally troublesome counterpart `afterUpdate`, are therefore deprecated in Svelte 5.\n\n- [Before](/playground/untitled#H4sIAAAAAAAAE31WXa_bNgz9K6yL1QmWOLlrC-w6H8MeBgwY9tY9NfdBtmlbiywZkpyPBfnvo2zLcZK28AWuRPGI5OGhkEuQc4EmiL9eAskqDOLg97oOZoE9125jDigs0t6oRqfOsjap5rXd7uTO8qpW2sIFEsyVxn_qjFmcAcstar-xPN3DFXKtKgi768IVgQku0ELj3Lgs_kZjWIEGNpAzYXDlHWyJFZI1zJjeh4O5uvl_DY8oUkVeVoFuJKYls-_CGYS25Aboj0EtWNqel0wWoBoLTGZgmdgDS9zW4Uz4NsrswPHoyutN4xInkylstnBxdmIhh8m7xzqmoNE2Wq46n1RJQzEbq4g-JQSl7e-HDx-GdaTy3KD9E3lRWvj5Zu9QX1QN20dj7zyHz8s-1S6lW7Cpz3RnXTcm04hIlfdFuO8p2mQ5-3a06cqjrn559bF_2NHOnRZ5I1PLlXQNyQT-hedMHeUEDyjtdMxsa4n2eIbNhlTwhyRthaOKOmYtniwF6pwt0wXa6MBEg0OibZec27gz_dk3UrZ6hB2LLYoiv521Yd8Gt-foTrfhiCDP0lC9VUUhcDLU49Xe_9943cNvEArHfAjxeBTovvXiNpFynfEDpIIZs9kFbg52QbeNHWZzebz32s7xHco3nJAJl1nshmhz8dYOQJDyZetnbb2gTWe-vEeWlrfpZMavr56ldb29eNt6UXvgwgFbp_WC0tl2RK25rGk6lYz3nUI2lzvBXGHhPZPGWmKUXFNBKqdaW259wl_aHbiqoVIZdpE60Nax6IOujT0LbFFxIVTCxCRR2XloUcYNvSbnGHKBp763jHoj59xiZWJI0Wm0P_m3MSS985xkasn-cFq20xTDy3J5KFcjgUTD69BHdcHIjz431z28IqlxGcPSfdFnrGDZn6gD6lyo45zyHAD-btczf-98nhQxHEvKfeUtOVkSejD3q-9X7JbzjGtsdUxlKdFU8qGsT78uaw848syWMXz85Waq2Gnem4mAn3prweq4q6Y3JEpnqMmnPoFRgmd3ySW0LLRqSKlwYHriCvJvUs2yjMaaoA-XzTXLeGMe45zmhv_XAno3Mj0xF7USuqNvnE9H343QHlq-eAgxpbTPNR9yzUkgLjwSR0NK4wKoxy-jDg-9vy8sUSToakzW-9fX13Em9Q8T6Z26uZhBN36XUYo5q7ggLXBZoub2Ofv7g6GCZfTxe034NCjiudXj7Omla0eTfo7QBPOcYxbE7qG-vl3_B1G-_i_JCAAA)\n- [After](/playground/untitled#H4sIAAAAAAAAE31WXa-jNhD9K7PsdknUQJLurtRLPqo-VKrU1327uQ8GBnBjbGSb5KZR_nvHgMlXtyIS9njO-MyZGZRzUHCBJkhez4FkNQZJ8HvTBLPAnhq3MQcUFmlvVKszZ1mbTPPGbndyZ3ndKG3hDJZne7hAoVUNYY8JV-RBPgIt2AprhA18MpZZnIQ50_twuvLHNRrDSjRXj9fwiCJTBLIKdCsxq5j9EM4gtBU3QD8GjWBZd14xWYJqLTCZg2ViDyx1W4cz4dv0hsiB49FRHkyfsCgws3GjcTKZwmYLZ2feWc9o1W8zJQ2Fb62i5JUQRNRHgs-fx3WsisKg_RN5WVn4-WrvUd9VA9tH4-AcwbfFQIpkLWByvWzqSe2sk3kyjUlOec_XPU-3TRaz_75tuvKoi19e3OvipSpamVmupJM2F_gXnnJ1lBM8oLQjHceys8R7PMFms4HwD2lRhzeEe-EsvluSrHe2TJdo4wMTLY48XKwPzm0KGm2r5ajFtRYU4TWOY7-ddWHfxhDP0QkQhnf5PWRnVVkKnIx8fZsOb5dR16nwG4TCCRdCMphWQ7z1_DoOcp3zA2SCGbPZBa5jd0G_TRxmc36Me-mG6A7l60XIlMs8ce2-OXtrDyBItdz6qVjPadObzx-RZdV1nJjx64tXad1sz962njceOHfAzmk9JzrbXqg1lw3NkZL7vgE257t-uMDcO6attSSokpmgFqVMO2U93e_dDlzOUKsc-3t6zNZp6K9cG3sS2KGSUqiUiUmq8tNYoJwbmvpTAoXA96GyjCojI26xNglk6DpwOPm7NdRYp4ia0JL94bTqRiGB5WJxqFY37RGPoz3c6i4jP3rcUA7wmhqNywQW7om_YQ2L4UQdUBdCHSPiOQJ8bFcxHzeK0jKBY0XcV95SkCWlD9t-9eOM3TLKucauiyktJdpaPqT19ddF4wFHntsqgS-_XE01e48GMwnw02AtWZP02QyGVOkcNfk072CU4PkduZSWpVYt9SkcmJ64hPwHpWF5ziVls3wIFmmW89Y83vMeGf5PBxjcyPSkXNy10J18t3x6-a6CDtBq6SGklNKeazFyLahB3PVIGo2UbhOgGi9vKjzW_j6xVFFD17difXx5ebll0vwvkcGpn4sZ9MN3vqFYsJoL6gUuK9TcPrO_PxgzWMRfflSEr2NHPJf6lj1957rRpH8CNMG84JgHidUtXt4u_wK21LXERAgAAA==)\n\n<!-- prettier-ignore -->\n```svelte\n<script>\n\timport { ---beforeUpdate, afterUpdate,--- tick } from 'svelte';\n\n\t---let updatingMessages = false;---\n\tlet theme = +++$state('dark')+++;\n\tlet messages = +++$state([])+++;\n\n\tlet viewport;\n\n\t---beforeUpdate(() => {---\n\t+++$effect.pre(() => {+++\n\t\t---if (!updatingMessages) return;---\n\t\t+++messages;+++\n\t\tconst autoscroll = viewport && viewport.offsetHeight + viewport.scrollTop > viewport.scrollHeight - 50;\n\n\t\tif (autoscroll) {\n\t\t\ttick().then(() => {\n\t\t\t\tviewport.scrollTo(0, viewport.scrollHeight);\n\t\t\t});\n\t\t}\n\n\t\t---updatingMessages = false;---\n\t});\n\n\tfunction handleKeydown(event) {\n\t\tif (event.key === 'Enter') {\n\t\t\tconst text = event.target.value;\n\t\t\tif (!text) return;\n\n\t\t\t---updatingMessages = true;---\n\t\t\tmessages = [...messages, text];\n\t\t\tevent.target.value = '';\n\t\t}\n\t}\n\n\tfunction toggle() {\n\t\ttheme = theme === 'dark' ? 'light' : 'dark';\n\t}\n</script>\n\n<div class:dark={theme === 'dark'}>\n\t<div bind:this={viewport}>\n\t\t{#each messages as message}\n\t\t\t<p>{message}</p>\n\t\t{/each}\n\t</div>\n\n\t<input +++onkeydown+++={handleKeydown} />\n\n\t<button +++onclick+++={toggle}> Toggle dark mode </button>\n</div>\n```",
    "svelte/imperative-component-api": "<!-- better title needed?\n\n- mount\n- unmount\n- render\n- hydrate\n- how they interact with each other -->\n\nEvery Svelte application starts by imperatively creating a root component. On the client this component is mounted to a specific element. On the server, you want to get back a string of HTML instead which you can render. The following functions help you achieve those tasks.\n\n## `mount`\n\nInstantiates a component and mounts it to the given target:\n\n```js\n// @errors: 2322\nimport { mount } from 'svelte';\nimport App from './App.svelte';\n\nconst app = mount(App, {\n\ttarget: document.querySelector('#app'),\n\tprops: { some: 'property' }\n});\n```\n\nYou can mount multiple components per page, and you can also mount from within your application, for example when creating a tooltip component and attaching it to the hovered element.\n\nNote that unlike calling `new App(...)` in Svelte 4, things like effects (including `onMount` callbacks, and action functions) will not run during `mount`. If you need to force pending effects to run (in the context of a test, for example) you can do so with `flushSync()`.\n\n## `unmount`\n\nUnmounts a component that was previously created with [`mount`](#mount) or [`hydrate`](#hydrate).\n\nIf `options.outro` is `true`, [transitions](transition) will play before the component is removed from the DOM:\n\n```js\nimport { mount, unmount } from 'svelte';\nimport App from './App.svelte';\n\nconst app = mount(App, { target: document.body });\n\n// later\nunmount(app, { outro: true });\n```\n\nReturns a `Promise` that resolves after transitions have completed if `options.outro` is true, or immediately otherwise.\n\n## `render`\n\nOnly available on the server and when compiling with the `server` option. Takes a component and returns an object with `body` and `head` properties on it, which you can use to populate the HTML when server-rendering your app:\n\n```js\n// @errors: 2724 2305 2307\nimport { render } from 'svelte/server';\nimport App from './App.svelte';\n\nconst result = render(App, {\n\tprops: { some: 'property' }\n});\nresult.body; // HTML for somewhere in this <body> tag\nresult.head; // HTML for somewhere in this <head> tag\n```\n\n## `hydrate`\n\nLike `mount`, but will reuse up any HTML rendered by Svelte's SSR output (from the [`render`](#render) function) inside the target and make it interactive:\n\n```js\n// @errors: 2322\nimport { hydrate } from 'svelte';\nimport App from './App.svelte';\n\nconst app = hydrate(App, {\n\ttarget: document.querySelector('#app'),\n\tprops: { some: 'property' }\n});\n```\n\nAs with `mount`, effects will not run during `hydrate` — use `flushSync()` immediately afterwards if you need them to.",
    "svelte/testing": "Testing helps you write and maintain your code and guard against regressions. Testing frameworks help you with that, allowing you to describe assertions or expectations about how your code should behave. Svelte is unopinionated about which testing framework you use — you can write unit tests, integration tests, and end-to-end tests using solutions like [Vitest](https://vitest.dev/), [Jasmine](https://jasmine.github.io/), [Cypress](https://www.cypress.io/) and [Playwright](https://playwright.dev/).\n\n## Unit and component tests with Vitest\n\nUnit tests allow you to test small isolated parts of your code. Integration tests allow you to test parts of your application to see if they work together. If you're using Vite (including via SvelteKit), we recommend using [Vitest](https://vitest.dev/). You can use the Svelte CLI to [setup Vitest](/docs/cli/vitest) either during project creation or later on.\n\nTo setup Vitest manually, first install it:\n\n```sh\nnpm install -D vitest\n```\n\nThen adjust your `vite.config.js`:\n\n<!-- prettier-ignore -->\n```js\n/// file: vite.config.js\nimport { defineConfig } from +++'vitest/config'+++;\n\nexport default defineConfig({\n\t// ...\n\t// Tell Vitest to use the `browser` entry points in `package.json` files, even though it's running in Node\n\tresolve: process.env.VITEST\n\t\t? {\n\t\t\t\tconditions: ['browser']\n\t\t\t}\n\t\t: undefined\n});\n```\n\n> [!NOTE] If loading the browser version of all your packages is undesirable, because (for example) you also test backend libraries, [you may need to resort to an alias configuration](https://github.com/testing-library/svelte-testing-library/issues/222#issuecomment-1909993331)\n\nYou can now write unit tests for code inside your `.js/.ts` files:\n\n```js\n/// file: multiplier.svelte.test.js\nimport { flushSync } from 'svelte';\nimport { expect, test } from 'vitest';\nimport { multiplier } from './multiplier.svelte.js';\n\ntest('Multiplier', () => {\n\tlet double = multiplier(0, 2);\n\n\texpect(double.value).toEqual(0);\n\n\tdouble.set(5);\n\n\texpect(double.value).toEqual(10);\n});\n```\n\n```js\n/// file: multiplier.svelte.js\n/**\n * @param {number} initial\n * @param {number} k\n */\nexport function multiplier(initial, k) {\n\tlet count = $state(initial);\n\n\treturn {\n\t\tget value() {\n\t\t\treturn count * k;\n\t\t},\n\t\t/** @param {number} c */\n\t\tset: (c) => {\n\t\t\tcount = c;\n\t\t}\n\t};\n}\n```\n\n### Using runes inside your test files\n\nSince Vitest processes your test files the same way as your source files, you can use runes inside your tests as long as the filename includes `.svelte`:\n\n```js\n/// file: multiplier.svelte.test.js\nimport { flushSync } from 'svelte';\nimport { expect, test } from 'vitest';\nimport { multiplier } from './multiplier.svelte.js';\n\ntest('Multiplier', () => {\n\tlet count = $state(0);\n\tlet double = multiplier(() => count, 2);\n\n\texpect(double.value).toEqual(0);\n\n\tcount = 5;\n\n\texpect(double.value).toEqual(10);\n});\n```\n\n```js\n/// file: multiplier.svelte.js\n/**\n * @param {() => number} getCount\n * @param {number} k\n */\nexport function multiplier(getCount, k) {\n\treturn {\n\t\tget value() {\n\t\t\treturn getCount() * k;\n\t\t}\n\t};\n}\n```\n\nIf the code being tested uses effects, you need to wrap the test inside `$effect.root`:\n\n```js\n/// file: logger.svelte.test.js\nimport { flushSync } from 'svelte';\nimport { expect, test } from 'vitest';\nimport { logger } from './logger.svelte.js';\n\ntest('Effect', () => {\n\tconst cleanup = $effect.root(() => {\n\t\tlet count = $state(0);\n\n\t\t// logger uses an $effect to log updates of its input\n\t\tlet log = logger(() => count);\n\n\t\t// effects normally run after a microtask,\n\t\t// use flushSync to execute all pending effects synchronously\n\t\tflushSync();\n\t\texpect(log).toEqual([0]);\n\n\t\tcount = 1;\n\t\tflushSync();\n\n\t\texpect(log).toEqual([0, 1]);\n\t});\n\n\tcleanup();\n});\n```\n\n```js\n/// file: logger.svelte.js\n/**\n * @param {() => any} getValue\n */\nexport function logger(getValue) {\n\t/** @type {any[]} */\n\tlet log = [];\n\n\t$effect(() => {\n\t\tlog.push(getValue());\n\t});\n\n\treturn log;\n}\n```\n\n### Component testing\n\nIt is possible to test your components in isolation, which allows you to render them in a browser (real or simulated), simulate behavior, and make assertions, without spinning up your whole app.\n\n> [!NOTE] Before writing component tests, think about whether you actually need to test the component, or if it's more about the logic _inside_ the component. If so, consider extracting out that logic to test it in isolation, without the overhead of a component.\n\nTo get started, install jsdom (a library that shims DOM APIs):\n\n```sh\nnpm install -D jsdom\n```\n\nThen adjust your `vite.config.js`:\n\n```js\n/// file: vite.config.js\nimport { defineConfig } from 'vitest/config';\n\nexport default defineConfig({\n\tplugins: [\n\t\t/* ... */\n\t],\n\ttest: {\n\t\t// If you are testing components client-side, you need to setup a DOM environment.\n\t\t// If not all your files should have this environment, you can use a\n\t\t// `// @vitest-environment jsdom` comment at the top of the test files instead.\n\t\tenvironment: 'jsdom'\n\t},\n\t// Tell Vitest to use the `browser` entry points in `package.json` files, even though it's running in Node\n\tresolve: process.env.VITEST\n\t\t? {\n\t\t\t\tconditions: ['browser']\n\t\t\t}\n\t\t: undefined\n});\n```\n\nAfter that, you can create a test file in which you import the component to test, interact with it programmatically and write expectations about the results:\n\n```js\n/// file: component.test.js\nimport { flushSync, mount, unmount } from 'svelte';\nimport { expect, test } from 'vitest';\nimport Component from './Component.svelte';\n\ntest('Component', () => {\n\t// Instantiate the component using Svelte's `mount` API\n\tconst component = mount(Component, {\n\t\ttarget: document.body, // `document` exists because of jsdom\n\t\tprops: { initial: 0 }\n\t});\n\n\texpect(document.body.innerHTML).toBe('<button>0</button>');\n\n\t// Click the button, then flush the changes so you can synchronously write expectations\n\tdocument.body.querySelector('button').click();\n\tflushSync();\n\n\texpect(document.body.innerHTML).toBe('<button>1</button>');\n\n\t// Remove the component from the DOM\n\tunmount(component);\n});\n```\n\nWhile the process is very straightforward, it is also low level and somewhat brittle, as the precise structure of your component may change frequently. Tools like [@testing-library/svelte](https://testing-library.com/docs/svelte-testing-library/intro/) can help streamline your tests. The above test could be rewritten like this:\n\n```js\n/// file: component.test.js\nimport { render, screen } from '@testing-library/svelte';\nimport userEvent from '@testing-library/user-event';\nimport { expect, test } from 'vitest';\nimport Component from './Component.svelte';\n\ntest('Component', async () => {\n\tconst user = userEvent.setup();\n\trender(Component);\n\n\tconst button = screen.getByRole('button');\n\texpect(button).toHaveTextContent(0);\n\n\tawait user.click(button);\n\texpect(button).toHaveTextContent(1);\n});\n```\n\nWhen writing component tests that involve two-way bindings, context or snippet props, it's best to create a wrapper component for your specific test and interact with that. `@testing-library/svelte` contains some [examples](https://testing-library.com/docs/svelte-testing-library/example).\n\n## Component tests with Storybook\n\n[Storybook](https://storybook.js.org) is a tool for developing and documenting UI components, and it can also be used to test your components. They're run with Vitest's browser mode, which renders your components in a real browser for the most realistic testing environment.\n\nTo get started, first install Storybook ([using Svelte's CLI](/docs/cli/storybook)) in your project via `npx sv add storybook` and choose the recommended configuration that includes testing features. If you're already using Storybook, and for more information on Storybook's testing capabilities, follow the [Storybook testing docs](https://storybook.js.org/docs/writing-tests?renderer=svelte) to get started.\n\nYou can create stories for component variations and test interactions with the [play function](https://storybook.js.org/docs/writing-tests/interaction-testing?renderer=svelte#writing-interaction-tests), which allows you to simulate behavior and make assertions using the Testing Library and Vitest APIs. Here's an example of two stories that can be tested, one that renders an empty LoginForm component and one that simulates a user filling out the form:\n\n```svelte\n/// file: LoginForm.stories.svelte\n<script module>\n\timport { defineMeta } from '@storybook/addon-svelte-csf';\n\timport { expect, fn } from 'storybook/test';\n\n\timport LoginForm from './LoginForm.svelte';\n\n\tconst { Story } = defineMeta({\n\t\tcomponent: LoginForm,\n\t\targs: {\n\t\t\t// Pass a mock function to the `onSubmit` prop\n\t\t\tonSubmit: fn(),\n\t\t}\n\t});\n</script>\n \n<Story name=\"Empty Form\" />\n \n<Story\n\tname=\"Filled Form\"\n\tplay={async ({ args, canvas, userEvent }) => {\n\t\t// Simulate a user filling out the form\n\t\tawait userEvent.type(canvas.getByTestId('email'), 'email@provider.com');\n\t\tawait userEvent.type(canvas.getByTestId('password'), 'a-random-password');\n\t\tawait userEvent.click(canvas.getByRole('button'));\n\n\t\t// Run assertions\n\t\tawait expect(args.onSubmit).toHaveBeenCalledTimes(1);\n\t\tawait expect(canvas.getByText('You’re in!')).toBeInTheDocument();\n\t}}\n/>\n```\n\n## End-to-end tests with Playwright\n\nE2E (short for 'end to end') tests allow you to test your full application through the eyes of the user. This section uses [Playwright](https://playwright.dev/) as an example, but you can also use other solutions like [Cypress](https://www.cypress.io/) or [NightwatchJS](https://nightwatchjs.org/).\n\nYou can use the Svelte CLI to [setup Playwright](/docs/cli/playwright) either during project creation or later on. You can also [set it up with `npm init playwright`](https://playwright.dev/docs/intro). Additionally, you may also want to install an IDE plugin such as [the VS Code extension](https://playwright.dev/docs/getting-started-vscode) to be able to execute tests from inside your IDE.\n\nIf you've run `npm init playwright` or are not using Vite, you may need to adjust the Playwright config to tell Playwright what to do before running the tests - mainly starting your application at a certain port. For example:\n\n```js\n/// file: playwright.config.js\nconst config = {\n\twebServer: {\n\t\tcommand: 'npm run build && npm run preview',\n\t\tport: 4173\n\t},\n\ttestDir: 'tests',\n\ttestMatch: /(.+\\.)?(test|spec)\\.[jt]s/\n};\n\nexport default config;\n```\n\nYou can now start writing tests. These are totally unaware of Svelte as a framework, so you mainly interact with the DOM and write assertions.\n\n```js\n// @errors: 2307 7031\n/// file: tests/hello-world.spec.js\nimport { expect, test } from '@playwright/test';\n\ntest('home page has expected h1', async ({ page }) => {\n\tawait page.goto('/');\n\tawait expect(page.locator('h1')).toBeVisible();\n});\n```",
    "svelte/typescript": "<!-- - [basically what we have today](https://svelte.dev/docs/typescript)\n- built-in support, but only for type-only features\n- generics\n- using `Component` and the other helper types\n- using `svelte-check` -->\n\nYou can use TypeScript within Svelte components. IDE extensions like the [Svelte VS Code extension](https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode) will help you catch errors right in your editor, and [`svelte-check`](https://www.npmjs.com/package/svelte-check) does the same on the command line, which you can integrate into your CI.\n\n## `<script lang=\"ts\">`\n\nTo use TypeScript inside your Svelte components, add `lang=\"ts\"` to your `script` tags:\n\n```svelte\n<script lang=\"ts\">\n\tlet name: string = 'world';\n\n\tfunction greet(name: string) {\n\t\talert(`Hello, ${name}!`);\n\t}\n</script>\n\n<button onclick={(e: Event) => greet(e.target.innerText)}>\n\t{name as string}\n</button>\n```\n\nDoing so allows you to use TypeScript's _type-only_ features. That is, all features that just disappear when transpiling to JavaScript, such as type annotations or interface declarations. Features that require the TypeScript compiler to output actual code are not supported. This includes:\n\n- using enums\n- using `private`, `protected` or `public` modifiers in constructor functions together with initializers\n- using features that are not yet part of the ECMAScript standard (i.e. not level 4 in the TC39 process) and therefore not implemented yet within Acorn, the parser we use for parsing JavaScript\n\nIf you want to use one of these features, you need to setup up a `script` preprocessor.\n\n## Preprocessor setup\n\nTo use non-type-only TypeScript features within Svelte components, you need to add a preprocessor that will turn TypeScript into JavaScript.\n\n```ts\n/// file: svelte.config.js\n// @noErrors\nimport { vitePreprocess } from '@sveltejs/vite-plugin-svelte';\n\nconst config = {\n\t// Note the additional `{ script: true }`\n\tpreprocess: vitePreprocess({ script: true })\n};\n\nexport default config;\n```\n\n### Using SvelteKit or Vite\n\nThe easiest way to get started is scaffolding a new SvelteKit project by typing `npx sv create`, following the prompts and choosing the TypeScript option.\n\n```ts\n/// file: svelte.config.js\n// @noErrors\nimport { vitePreprocess } from '@sveltejs/vite-plugin-svelte';\n\nconst config = {\n\tpreprocess: vitePreprocess()\n};\n\nexport default config;\n```\n\nIf you don't need or want all the features SvelteKit has to offer, you can scaffold a Svelte-flavoured Vite project instead by typing `npm create vite@latest` and selecting the `svelte-ts` option.\n\nIn both cases, a `svelte.config.js` with `vitePreprocess` will be added. Vite/SvelteKit will read from this config file.\n\n### Other build tools\n\nIf you're using tools like Rollup or Webpack instead, install their respective Svelte plugins. For Rollup that's [rollup-plugin-svelte](https://github.com/sveltejs/rollup-plugin-svelte) and for Webpack that's [svelte-loader](https://github.com/sveltejs/svelte-loader). For both, you need to install `typescript` and `svelte-preprocess` and add the preprocessor to the plugin config (see the respective READMEs for more info). If you're starting a new project, you can also use the [rollup](https://github.com/sveltejs/template) or [webpack](https://github.com/sveltejs/template-webpack) template to scaffold the setup from a script.\n\n> [!NOTE] If you're starting a new project, we recommend using SvelteKit or Vite instead\n\n## tsconfig.json settings\n\nWhen using TypeScript, make sure your `tsconfig.json` is setup correctly.\n\n- Use a [`target`](https://www.typescriptlang.org/tsconfig/#target) of at least `ES2015` so classes are not compiled to functions\n- Set [`verbatimModuleSyntax`](https://www.typescriptlang.org/tsconfig/#verbatimModuleSyntax) to `true` so that imports are left as-is\n- Set [`isolatedModules`](https://www.typescriptlang.org/tsconfig/#isolatedModules) to `true` so that each file is looked at in isolation. TypeScript has a few features which require cross-file analysis and compilation, which the Svelte compiler and tooling like Vite don't do. \n\n## Typing `$props`\n\nType `$props` just like a regular object with certain properties.\n\n```svelte\n<script lang=\"ts\">\n\timport type { Snippet } from 'svelte';\n\n\tinterface Props {\n\t\trequiredProperty: number;\n\t\toptionalProperty?: boolean;\n\t\tsnippetWithStringArgument: Snippet<[string]>;\n\t\teventHandler: (arg: string) => void;\n\t\t[key: string]: unknown;\n\t}\n\n\tlet {\n\t\trequiredProperty,\n\t\toptionalProperty,\n\t\tsnippetWithStringArgument,\n\t\teventHandler,\n\t\t...everythingElse\n\t}: Props = $props();\n</script>\n\n<button onclick={() => eventHandler('clicked button')}>\n\t{@render snippetWithStringArgument('hello')}\n</button>\n```\n\n## Generic `$props`\n\nComponents can declare a generic relationship between their properties. One example is a generic list component that receives a list of items and a callback property that receives an item from the list. To declare that the `items` property and the `select` callback operate on the same types, add the `generics` attribute to the `script` tag:\n\n```svelte\n<script lang=\"ts\" generics=\"Item extends { text: string }\">\n\tinterface Props {\n\t\titems: Item[];\n\t\tselect(item: Item): void;\n\t}\n\n\tlet { items, select }: Props = $props();\n</script>\n\n{#each items as item}\n\t<button onclick={() => select(item)}>\n\t\t{item.text}\n\t</button>\n{/each}\n```\n\nThe content of `generics` is what you would put between the `<...>` tags of a generic function. In other words, you can use multiple generics, `extends` and fallback types.\n\n## Typing wrapper components\n\nIn case you're writing a component that wraps a native element, you may want to expose all the attributes of the underlying element to the user. In that case, use (or extend from) one of the interfaces provided by `svelte/elements`. Here's an example for a `Button` component:\n\n```svelte\n<script lang=\"ts\">\n\timport type { HTMLButtonAttributes } from 'svelte/elements';\n\n\tlet { children, ...rest }: HTMLButtonAttributes = $props();\n</script>\n\n<button {...rest}>\n\t{@render children?.()}\n</button>\n```\n\nNot all elements have a dedicated type definition. For those without one, use `SvelteHTMLElements`:\n\n```svelte\n<script lang=\"ts\">\n\timport type { SvelteHTMLElements } from 'svelte/elements';\n\n\tlet { children, ...rest }: SvelteHTMLElements['div'] = $props();\n</script>\n\n<div {...rest}>\n\t{@render children?.()}\n</div>\n```\n\n## Typing `$state`\n\nYou can type `$state` like any other variable.\n\n```ts\nlet count: number = $state(0);\n```\n\nIf you don't give `$state` an initial value, part of its types will be `undefined`.\n\n```ts\n// @noErrors\n// Error: Type 'number | undefined' is not assignable to type 'number'\nlet count: number = $state();\n```\n\nIf you know that the variable _will_ be defined before you first use it, use an `as` casting. This is especially useful in the context of classes:\n\n```ts\nclass Counter {\n\tcount = $state() as number;\n\tconstructor(initial: number) {\n\t\tthis.count = initial;\n\t}\n}\n```\n\n## The `Component` type\n\nSvelte components are of type `Component`. You can use it and its related types to express a variety of constraints.\n\nUsing it together with dynamic components to restrict what kinds of component can be passed to it:\n\n```svelte\n<script lang=\"ts\">\n\timport type { Component } from 'svelte';\n\n\tinterface Props {\n\t\t// only components that have at most the \"prop\"\n\t\t// property required can be passed\n\t\tDynamicComponent: Component<{ prop: string }>;\n\t}\n\n\tlet { DynamicComponent }: Props = $props();\n</script>\n\n<DynamicComponent prop=\"foo\" />\n```\n\n> [!LEGACY] In Svelte 4, components were of type `SvelteComponent`\n\nTo extract the properties from a component, use `ComponentProps`.\n\n```ts\nimport type { Component, ComponentProps } from 'svelte';\nimport MyComponent from './MyComponent.svelte';\n\nfunction withProps<TComponent extends Component<any>>(\n\tcomponent: TComponent,\n\tprops: ComponentProps<TComponent>\n) {}\n\n// Errors if the second argument is not the correct props expected\n// by the component in the first argument.\nwithProps(MyComponent, { foo: 'bar' });\n```\n\nTo declare that a variable expects the constructor or instance type of a component:\n\n```svelte\n<script lang=\"ts\">\n\timport MyComponent from './MyComponent.svelte';\n\n\tlet componentConstructor: typeof MyComponent = MyComponent;\n\tlet componentInstance: MyComponent;\n</script>\n\n<MyComponent bind:this={componentInstance} />\n```\n\n## Enhancing built-in DOM types\n\nSvelte provides a best effort of all the HTML DOM types that exist. Sometimes you may want to use experimental attributes or custom events coming from an action. In these cases, TypeScript will throw a type error, saying that it does not know these types. If it's a non-experimental standard attribute/event, this may very well be a missing typing from our [HTML typings](https://github.com/sveltejs/svelte/blob/main/packages/svelte/elements.d.ts). In that case, you are welcome to open an issue and/or a PR fixing it.\n\nIn case this is a custom or experimental attribute/event, you can enhance the typings by augmenting the `svelte/elements` module like this:\n\n```ts\n/// file: additional-svelte-typings.d.ts\nimport { HTMLButtonAttributes } from 'svelte/elements';\n\ndeclare module 'svelte/elements' {\n\t// add a new element\n\texport interface SvelteHTMLElements {\n\t\t'custom-button': HTMLButtonAttributes;\n\t}\n\n\t// add a new global attribute that is available on all html elements\n\texport interface HTMLAttributes<T> {\n\t\tglobalattribute?: string;\n\t}\n\n\t// add a new attribute for button elements\n\texport interface HTMLButtonAttributes {\n\t\tveryexperimentalattribute?: string;\n\t}\n}\n\nexport {}; // ensure this is not an ambient module, else types will be overridden instead of augmented\n```\n\nThen make sure that the `d.ts` file is referenced in your `tsconfig.json`. If it reads something like `\"include\": [\"src/**/*\"]` and your `d.ts` file is inside `src`, it should work. You may need to reload for the changes to take effect.",
    "svelte/custom-elements": "<!-- - [basically what we have today](https://svelte.dev/docs/custom-elements-api) -->\n\nSvelte components can also be compiled to custom elements (aka web components) using the `customElement: true` compiler option. You should specify a tag name for the component using the `<svelte:options>` [element](svelte-options). Within the custom element you can access the host element via the [`$host`](https://svelte.dev/docs/svelte/$host) rune.\n\n```svelte\n<svelte:options customElement=\"my-element\" />\n\n<script>\n\tlet { name = 'world' } = $props();\n</script>\n\n<h1>Hello {name}!</h1>\n<slot />\n```\n\nYou can leave out the tag name for any of your inner components which you don't want to expose and use them like regular Svelte components. Consumers of the component can still name it afterwards if needed, using the static `element` property which contains the custom element constructor and which is available when the `customElement` compiler option is `true`.\n\n```js\n// @noErrors\nimport MyElement from './MyElement.svelte';\n\ncustomElements.define('my-element', MyElement.element);\n```\n\nOnce a custom element has been defined, it can be used as a regular DOM element:\n\n```js\ndocument.body.innerHTML = `\n\t<my-element>\n\t\t<p>This is some slotted content</p>\n\t</my-element>\n`;\n```\n\nAny [props](basic-markup#Component-props) are exposed as properties of the DOM element (as well as being readable/writable as attributes, where possible).\n\n```js\n// @noErrors\nconst el = document.querySelector('my-element');\n\n// get the current value of the 'name' prop\nconsole.log(el.name);\n\n// set a new value, updating the shadow DOM\nel.name = 'everybody';\n```\n\nNote that you need to list out all properties explicitly, i.e. doing `let props = $props()` without declaring `props` in the [component options](#Component-options) means that Svelte can't know which props to expose as properties on the DOM element.\n\n## Component lifecycle\n\nCustom elements are created from Svelte components using a wrapper approach. This means the inner Svelte component has no knowledge that it is a custom element. The custom element wrapper takes care of handling its lifecycle appropriately.\n\nWhen a custom element is created, the Svelte component it wraps is _not_ created right away. It is only created in the next tick after the `connectedCallback` is invoked. Properties assigned to the custom element before it is inserted into the DOM are temporarily saved and then set on component creation, so their values are not lost. The same does not work for invoking exported functions on the custom element though, they are only available after the element has mounted. If you need to invoke functions before component creation, you can work around it by using the [`extend` option](#Component-options).\n\nWhen a custom element written with Svelte is created or updated, the shadow DOM will reflect the value in the next tick, not immediately. This way updates can be batched, and DOM moves which temporarily (but synchronously) detach the element from the DOM don't lead to unmounting the inner component.\n\nThe inner Svelte component is destroyed in the next tick after the `disconnectedCallback` is invoked.\n\n## Component options\n\nWhen constructing a custom element, you can tailor several aspects by defining `customElement` as an object within `<svelte:options>` since Svelte 4. This object may contain the following properties:\n\n- `tag: string`: an optional `tag` property for the custom element's name. If set, a custom element with this tag name will be defined with the document's `customElements` registry upon importing this component.\n- `shadow`: an optional property that can be set to `\"none\"` to forgo shadow root creation. Note that styles are then no longer encapsulated, and you can't use slots\n- `props`: an optional property to modify certain details and behaviors of your component's properties. It offers the following settings:\n  - `attribute: string`: To update a custom element's prop, you have two alternatives: either set the property on the custom element's reference as illustrated above or use an HTML attribute. For the latter, the default attribute name is the lowercase property name. Modify this by assigning `attribute: \"<desired name>\"`.\n  - `reflect: boolean`: By default, updated prop values do not reflect back to the DOM. To enable this behavior, set `reflect: true`.\n  - `type: 'String' | 'Boolean' | 'Number' | 'Array' | 'Object'`: While converting an attribute value to a prop value and reflecting it back, the prop value is assumed to be a `String` by default. This may not always be accurate. For instance, for a number type, define it using `type: \"Number\"`\n    You don't need to list all properties, those not listed will use the default settings.\n- `extend`: an optional property which expects a function as its argument. It is passed the custom element class generated by Svelte and expects you to return a custom element class. This comes in handy if you have very specific requirements to the life cycle of the custom element or want to enhance the class to for example use [ElementInternals](https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals#examples) for better HTML form integration.\n\n```svelte\n<svelte:options\n\tcustomElement={{\n\t\ttag: 'custom-element',\n\t\tshadow: 'none',\n\t\tprops: {\n\t\t\tname: { reflect: true, type: 'Number', attribute: 'element-index' }\n\t\t},\n\t\textend: (customElementConstructor) => {\n\t\t\t// Extend the class so we can let it participate in HTML forms\n\t\t\treturn class extends customElementConstructor {\n\t\t\t\tstatic formAssociated = true;\n\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper();\n\t\t\t\t\tthis.attachedInternals = this.attachInternals();\n\t\t\t\t}\n\n\t\t\t\t// Add the function here, not below in the component so that\n\t\t\t\t// it's always available, not just when the inner Svelte component\n\t\t\t\t// is mounted\n\t\t\t\trandomIndex() {\n\t\t\t\t\tthis.elementIndex = Math.random();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}}\n/>\n\n<script>\n\tlet { elementIndex, attachedInternals } = $props();\n\t// ...\n\tfunction check() {\n\t\tattachedInternals.checkValidity();\n\t}\n</script>\n\n...\n```\n\n> [!NOTE] While Typescript is supported in the `extend` function, it is subject to limitations: you need to set `lang=\"ts\"` on one of the scripts AND you can only use [erasable syntax](https://www.typescriptlang.org/tsconfig/#erasableSyntaxOnly) in it. They are not processed by script preprocessors.\n\n## Caveats and limitations\n\nCustom elements can be a useful way to package components for consumption in a non-Svelte app, as they will work with vanilla HTML and JavaScript as well as [most frameworks](https://custom-elements-everywhere.com/). There are, however, some important differences to be aware of:\n\n- Styles are _encapsulated_, rather than merely _scoped_ (unless you set `shadow: \"none\"`). This means that any non-component styles (such as you might have in a `global.css` file) will not apply to the custom element, including styles with the `:global(...)` modifier\n- Instead of being extracted out as a separate .css file, styles are inlined into the component as a JavaScript string\n- Custom elements are not generally suitable for server-side rendering, as the shadow DOM is invisible until JavaScript loads\n- In Svelte, slotted content renders _lazily_. In the DOM, it renders _eagerly_. In other words, it will always be created even if the component's `<slot>` element is inside an `{#if ...}` block. Similarly, including a `<slot>` in an `{#each ...}` block will not cause the slotted content to be rendered multiple times\n- The deprecated `let:` directive has no effect, because custom elements do not have a way to pass data to the parent component that fills the slot\n- Polyfills are required to support older browsers\n- You can use Svelte's context feature between regular Svelte components within a custom element, but you can't use them across custom elements. In other words, you can't use `setContext` on a parent custom element and read that with `getContext` in a child custom element.\n- Don't declare properties or attributes starting with `on`, as their usage will be interpreted as an event listener. In other words, Svelte treats `<custom-element oneworld={true}></custom-element>` as `customElement.addEventListener('eworld', true)` (and not as `customElement.oneworld = true`)",
    "svelte/v4-migration-guide": "This migration guide provides an overview of how to migrate from Svelte version 3 to 4. See the linked PRs for more details about each change. Use the migration script to migrate some of these automatically: `npx svelte-migrate@latest svelte-4`\n\nIf you're a library author, consider whether to only support Svelte 4 or if it's possible to support Svelte 3 too. Since most of the breaking changes don't affect many people, this may be easily possible. Also remember to update the version range in your `peerDependencies`.\n\n## Minimum version requirements\n\n- Upgrade to Node 16 or higher. Earlier versions are no longer supported. ([#8566](https://github.com/sveltejs/svelte/issues/8566))\n- If you are using SvelteKit, upgrade to 1.20.4 or newer ([sveltejs/kit#10172](https://github.com/sveltejs/kit/pull/10172))\n- If you are using Vite without SvelteKit, upgrade to `vite-plugin-svelte` 2.4.1 or newer ([#8516](https://github.com/sveltejs/svelte/issues/8516))\n- If you are using webpack, upgrade to webpack 5 or higher and `svelte-loader` 3.1.8 or higher. Earlier versions are no longer supported. ([#8515](https://github.com/sveltejs/svelte/issues/8515), [198dbcf](https://github.com/sveltejs/svelte/commit/198dbcf))\n- If you are using Rollup, upgrade to `rollup-plugin-svelte` 7.1.5 or higher ([198dbcf](https://github.com/sveltejs/svelte/commit/198dbcf))\n- If you are using TypeScript, upgrade to TypeScript 5 or higher. Lower versions might still work, but no guarantees are made about that. ([#8488](https://github.com/sveltejs/svelte/issues/8488))\n\n## Browser conditions for bundlers\n\nBundlers must now specify the `browser` condition when building a frontend bundle for the browser. SvelteKit and Vite will handle this automatically for you. If you're using any others, you may observe lifecycle callbacks such as `onMount` not get called and you'll need to update the module resolution configuration.\n- For Rollup this is done within the `@rollup/plugin-node-resolve` plugin by setting `browser: true` in its options. See the [`rollup-plugin-svelte`](https://github.com/sveltejs/rollup-plugin-svelte/#usage) documentation for more details\n- For webpack this is done by adding `\"browser\"` to the `conditionNames` array. You may also have to update your `alias` config, if you have set it. See the [`svelte-loader`](https://github.com/sveltejs/svelte-loader#usage) documentation for more details\n\n([#8516](https://github.com/sveltejs/svelte/issues/8516))\n\n## Removal of CJS related output\n\nSvelte no longer supports the CommonJS (CJS) format for compiler output and has also removed the `svelte/register` hook and the CJS runtime version. If you need to stay on the CJS output format, consider using a bundler to convert Svelte's ESM output to CJS in a post-build step. ([#8613](https://github.com/sveltejs/svelte/issues/8613))\n\n## Stricter types for Svelte functions\n\nThere are now stricter types for `createEventDispatcher`, `Action`, `ActionReturn`, and `onMount`:\n\n- `createEventDispatcher` now supports specifying that a payload is optional, required, or non-existent, and the call sites are checked accordingly ([#7224](https://github.com/sveltejs/svelte/issues/7224))\n\n```ts\n// @errors: 2554 2345\nimport { createEventDispatcher } from 'svelte';\n\nconst dispatch = createEventDispatcher<{\n\toptional: number | null;\n\trequired: string;\n\tnoArgument: null;\n}>();\n\n// Svelte version 3:\ndispatch('optional');\ndispatch('required'); // I can still omit the detail argument\ndispatch('noArgument', 'surprise'); // I can still add a detail argument\n\n// Svelte version 4 using TypeScript strict mode:\ndispatch('optional');\ndispatch('required'); // error, missing argument\ndispatch('noArgument', 'surprise'); // error, cannot pass an argument\n```\n\n- `Action` and `ActionReturn` have a default parameter type of `undefined` now, which means you need to type the generic if you want to specify that this action receives a parameter. The migration script will migrate this automatically ([#7442](https://github.com/sveltejs/svelte/pull/7442))\n\n```ts\n// @noErrors\n---const action: Action = (node, params) => { ... } // this is now an error if you use params in any way---\n+++const action: Action<HTMLElement, string> = (node, params) => { ... } // params is of type string+++\n```\n\n- `onMount` now shows a type error if you return a function asynchronously from it, because this is likely a bug in your code where you expect the callback to be called on destroy, which it will only do for synchronously returned functions ([#8136](https://github.com/sveltejs/svelte/issues/8136))\n\n```js\n// @noErrors\n// Example where this change reveals an actual bug\nonMount(\n---\t// someCleanup() not called because function handed to onMount is async\n\tasync () => {\n\t\tconst something = await foo();---\n+++\t// someCleanup() is called because function handed to onMount is sync\n\t() => {\n\t\tfoo().then(something => {...});\n\t\t// ...\n\t\treturn () => someCleanup();\n\t}\n);\n```\n\n## Custom Elements with Svelte\n\nThe creation of custom elements with Svelte has been overhauled and significantly improved. The `tag` option is deprecated in favor of the new `customElement` option:\n\n```svelte\n---<svelte:options tag=\"my-component\" />---\n+++<svelte:options customElement=\"my-component\" />+++\n```\n\nThis change was made to allow [more configurability](custom-elements#Component-options) for advanced use cases. The migration script will adjust your code automatically. The update timing of properties has changed slightly as well. ([#8457](https://github.com/sveltejs/svelte/issues/8457))\n\n## SvelteComponentTyped is deprecated\n\n`SvelteComponentTyped` is deprecated, as `SvelteComponent` now has all its typing capabilities. Replace all instances of `SvelteComponentTyped` with `SvelteComponent`.\n\n```js\n---import { SvelteComponentTyped } from 'svelte';---\n+++import { SvelteComponent } from 'svelte';+++\n\n---export class Foo extends SvelteComponentTyped<{ aProp: string }> {}---\n+++export class Foo extends SvelteComponent<{ aProp: string }> {}+++\n```\n\nIf you have used `SvelteComponent` as the component instance type previously, you may see a somewhat opaque type error now, which is solved by changing `: typeof SvelteComponent` to `: typeof SvelteComponent<any>`.\n\n```svelte\n<script>\n\timport ComponentA from './ComponentA.svelte';\n\timport ComponentB from './ComponentB.svelte';\n\timport { SvelteComponent } from 'svelte';\n\n\tlet component: typeof SvelteComponent+++<any>+++;\n\n\tfunction choseRandomly() {\n\t\tcomponent = Math.random() > 0.5 ? ComponentA : ComponentB;\n\t}\n</script>\n\n<button on:click={choseRandomly}>random</button>\n<svelte:element this={component} />\n```\n\nThe migration script will do both automatically for you. ([#8512](https://github.com/sveltejs/svelte/issues/8512))\n\n## Transitions are local by default\n\nTransitions are now local by default to prevent confusion around page navigations. \"local\" means that a transition will not play if it's within a nested control flow block (`each/if/await/key`) and not the direct parent block but a block above it is created/destroyed. In the following example, the `slide` intro animation will only play when `success` goes from `false` to `true`, but it will _not_ play when `show` goes from `false` to `true`:\n\n```svelte\n{#if show}\n\t...\n\t{#if success}\n\t\t<p in:slide>Success</p>\n\t{/each}\n{/if}\n```\n\nTo make transitions global, add the `|global` modifier - then they will play when _any_ control flow block above is created/destroyed. The migration script will do this automatically for you. ([#6686](https://github.com/sveltejs/svelte/issues/6686))\n\n## Default slot bindings\n\nDefault slot bindings are no longer exposed to named slots and vice versa:\n\n```svelte\n<script>\n\timport Nested from './Nested.svelte';\n</script>\n\n<Nested let:count>\n\t<p>\n\t\tcount in default slot - is available: {count}\n\t</p>\n\t<p slot=\"bar\">\n\t\tcount in bar slot - is not available: {count}\n\t</p>\n</Nested>\n```\n\nThis makes slot bindings more consistent as the behavior is undefined when for example the default slot is from a list and the named slot is not. ([#6049](https://github.com/sveltejs/svelte/issues/6049))\n\n## Preprocessors\n\nThe order in which preprocessors are applied has changed. Now, preprocessors are executed in order, and within one group, the order is markup, script, style.\n\n```js\n// @errors: 2304\nimport { preprocess } from 'svelte/compiler';\n\nconst { code } = await preprocess(\n\tsource,\n\t[\n\t\t{\n\t\t\tmarkup: () => {\n\t\t\t\tconsole.log('markup-1');\n\t\t\t},\n\t\t\tscript: () => {\n\t\t\t\tconsole.log('script-1');\n\t\t\t},\n\t\t\tstyle: () => {\n\t\t\t\tconsole.log('style-1');\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmarkup: () => {\n\t\t\t\tconsole.log('markup-2');\n\t\t\t},\n\t\t\tscript: () => {\n\t\t\t\tconsole.log('script-2');\n\t\t\t},\n\t\t\tstyle: () => {\n\t\t\t\tconsole.log('style-2');\n\t\t\t}\n\t\t}\n\t],\n\t{\n\t\tfilename: 'App.svelte'\n\t}\n);\n\n// Svelte 3 logs:\n// markup-1\n// markup-2\n// script-1\n// script-2\n// style-1\n// style-2\n\n// Svelte 4 logs:\n// markup-1\n// script-1\n// style-1\n// markup-2\n// script-2\n// style-2\n```\n\nThis could affect you for example if you are using `MDsveX` - in which case you should make sure it comes before any script or style preprocessor.\n\n```js\n// @noErrors\npreprocess: [\n---\tvitePreprocess(),\n\tmdsvex(mdsvexConfig)---\n+++\tmdsvex(mdsvexConfig),\n\tvitePreprocess()+++\n]\n```\n\nEach preprocessor must also have a name. ([#8618](https://github.com/sveltejs/svelte/issues/8618))\n\n## New eslint package\n\n`eslint-plugin-svelte3` is deprecated. It may still work with Svelte 4 but we make no guarantees about that. We recommend switching to our new package [eslint-plugin-svelte](https://github.com/sveltejs/eslint-plugin-svelte). See [this Github post](https://github.com/sveltejs/kit/issues/10242#issuecomment-1610798405) for an instruction how to migrate. Alternatively, you can create a new project using `npm create svelte@latest`, select the eslint (and possibly TypeScript) option and then copy over the related files into your existing project.\n\n## Other breaking changes\n\n- the `inert` attribute is now applied to outroing elements to make them invisible to assistive technology and prevent interaction. ([#8628](https://github.com/sveltejs/svelte/pull/8628))\n- the runtime now uses `classList.toggle(name, boolean)` which may not work in very old browsers. Consider using a [polyfill](https://github.com/eligrey/classList.js) if you need to support these browsers. ([#8629](https://github.com/sveltejs/svelte/issues/8629))\n- the runtime now uses the `CustomEvent` constructor which may not work in very old browsers. Consider using a [polyfill](https://github.com/theftprevention/event-constructor-polyfill/tree/master) if you need to support these browsers. ([#8775](https://github.com/sveltejs/svelte/pull/8775))\n- people implementing their own stores from scratch using the `StartStopNotifier` interface (which is passed to the create function of `writable` etc) from `svelte/store` now need to pass an update function in addition to the set function. This has no effect on people using stores or creating stores using the existing Svelte stores. ([#6750](https://github.com/sveltejs/svelte/issues/6750))\n- `derived` will now throw an error on falsy values instead of stores passed to it. ([#7947](https://github.com/sveltejs/svelte/issues/7947))\n- type definitions for `svelte/internal` were removed to further discourage usage of those internal methods which are not public API. Most of these will likely change for Svelte 5\n- Removal of DOM nodes is now batched which slightly changes its order, which might affect the order of events fired if you're using a `MutationObserver` on these elements ([#8763](https://github.com/sveltejs/svelte/pull/8763))\n- if you enhanced the global typings through the `svelte.JSX` namespace before, you need to migrate this to use the `svelteHTML` namespace. Similarly if you used the `svelte.JSX` namespace to use type definitions from it, you need to migrate those to use the types from `svelte/elements` instead. You can find more information about what to do [here](https://github.com/sveltejs/language-tools/blob/master/docs/preprocessors/typescript.md#im-getting-deprecation-warnings-for-sveltejsx--i-want-to-migrate-to-the-new-typings)",
    "svelte/v5-migration-guide": "Version 5 comes with an overhauled syntax and reactivity system. While it may look different at first, you'll soon notice many similarities. This guide goes over the changes in detail and shows you how to upgrade. Along with it, we also provide information on _why_ we did these changes.\n\nYou don't have to migrate to the new syntax right away - Svelte 5 still supports the old Svelte 4 syntax, and you can mix and match components using the new syntax with components using the old and vice versa. We expect many people to be able to upgrade with only a few lines of code changed initially. There's also a [migration script](#Migration-script) that helps you with many of these steps automatically.\n\n## Reactivity syntax changes\n\nAt the heart of Svelte 5 is the new runes API. Runes are basically compiler instructions that inform Svelte about reactivity. Syntactically, runes are functions starting with a dollar-sign.\n\n### let → $state\n\nIn Svelte 4, a `let` declaration at the top level of a component was implicitly reactive. In Svelte 5, things are more explicit: a variable is reactive when created using the `$state` rune. Let's migrate the counter to runes mode by wrapping the counter in `$state`:\n\n```svelte\n<script>\n\tlet count = +++$state(0)+++;\n</script>\n```\n\nNothing else changes. `count` is still the number itself, and you read and write directly to it, without a wrapper like `.value` or `getCount()`.\n\n> [!DETAILS] Why we did this\n> `let` being implicitly reactive at the top level worked great, but it meant that reactivity was constrained - a `let` declaration anywhere else was not reactive. This forced you to resort to using stores when refactoring code out of the top level of components for reuse. This meant you had to learn an entirely separate reactivity model, and the result often wasn't as nice to work with. Because reactivity is more explicit in Svelte 5, you can keep using the same API outside the top level of components. Head to [the tutorial](/tutorial) to learn more.\n\n### $: → $derived/$effect\n\nIn Svelte 4, a `$:` statement at the top level of a component could be used to declare a derivation, i.e. state that is entirely defined through a computation of other state. In Svelte 5, this is achieved using the `$derived` rune:\n\n```svelte\n<script>\n\tlet count = $state(0);\n\t---$:--- +++const+++ double = +++$derived(count * 2)+++;\n</script>\n```\n\nAs with `$state`, nothing else changes. `double` is still the number itself, and you read it directly, without a wrapper like `.value` or `getDouble()`.\n\nA `$:` statement could also be used to create side effects. In Svelte 5, this is achieved using the `$effect` rune:\n\n```svelte\n<script>\n\tlet count = $state(0);\n\n\t---$:---+++$effect(() =>+++ {\n\t\tif (count > 5) {\n\t\t\talert('Count is too high!');\n\t\t}\n\t}+++);+++\n</script>\n```\n\nNote that [when `$effect` runs is different]($effect#Understanding-dependencies) than when `$:` runs.\n\n> [!DETAILS] Why we did this\n> `$:` was a great shorthand and easy to get started with: you could slap a `$:` in front of most code and it would somehow work. This intuitiveness was also its drawback the more complicated your code became, because it wasn't as easy to reason about. Was the intent of the code to create a derivation, or a side effect? With `$derived` and `$effect`, you have a bit more up-front decision making to do (spoiler alert: 90% of the time you want `$derived`), but future-you and other developers on your team will have an easier time.\n>\n> There were also gotchas that were hard to spot:\n>\n> - `$:` only updated directly before rendering, which meant you could read stale values in-between rerenders\n> - `$:` only ran once per tick, which meant that statements may run less often than you think\n> - `$:` dependencies were determined through static analysis of the dependencies. This worked in most cases, but could break in subtle ways during a refactoring where dependencies would be for example moved into a function and no longer be visible as a result\n> - `$:` statements were also ordered by using static analysis of the dependencies. In some cases there could be ties and the ordering would be wrong as a result, needing manual interventions. Ordering could also break while refactoring code and some dependencies no longer being visible as a result.\n>\n> Lastly, it wasn't TypeScript-friendly (our editor tooling had to jump through some hoops to make it valid for TypeScript), which was a blocker for making Svelte's reactivity model truly universal.\n>\n> `$derived` and `$effect` fix all of these by\n>\n> - always returning the latest value\n> - running as often as needed to be stable\n> - determining the dependencies at runtime, and therefore being immune to refactorings\n> - executing dependencies as needed and therefore being immune to ordering problems\n> - being TypeScript-friendly\n\n### export let → $props\n\nIn Svelte 4, properties of a component were declared using `export let`. Each property was one declaration. In Svelte 5, all properties are declared through the `$props` rune, through destructuring:\n\n```svelte\n<script>\n\t---export let optional = 'unset';---\n\t---export let required;---\n\t+++let { optional = 'unset', required } = $props();+++\n</script>\n```\n\nThere are multiple cases where declaring properties becomes less straightforward than having a few `export let` declarations:\n\n- you want to rename the property, for example because the name is a reserved identifier (e.g. `class`)\n- you don't know which other properties to expect in advance\n- you want to forward every property to another component\n\nAll these cases need special syntax in Svelte 4:\n\n- renaming: `export { klass as class}`\n- other properties: `$$restProps`\n- all properties `$$props`\n\nIn Svelte 5, the `$props` rune makes this straightforward without any additional Svelte-specific syntax:\n\n- renaming: use property renaming `let { class: klass } = $props();`\n- other properties: use spreading `let { foo, bar, ...rest } = $props();`\n- all properties: don't destructure `let props = $props();`\n\n```svelte\n<script>\n\t---let klass = '';---\n\t---export { klass as class};---\n\t+++let { class: klass, ...rest } = $props();+++\n</script>\n<button class={klass} {...---$$restProps---+++rest+++}>click me</button>\n```\n\n> [!DETAILS] Why we did this\n> `export let` was one of the more controversial API decisions, and there was a lot of debate about whether you should think about a property being `export`ed or `import`ed. `$props` doesn't have this trait. It's also in line with the other runes, and the general thinking reduces to \"everything special to reactivity in Svelte is a rune\".\n>\n> There were also a lot of limitations around `export let`, which required additional API, as shown above. `$props` unite this in one syntactical concept that leans heavily on regular JavaScript destructuring syntax.\n\n## Event changes\n\nEvent handlers have been given a facelift in Svelte 5. Whereas in Svelte 4 we use the `on:` directive to attach an event listener to an element, in Svelte 5 they are properties like any other (in other words - remove the colon):\n\n```svelte\n<script>\n\tlet count = $state(0);\n</script>\n\n<button on---:---click={() => count++}>\n\tclicks: {count}\n</button>\n```\n\nSince they're just properties, you can use the normal shorthand syntax...\n\n```svelte\n<script>\n\tlet count = $state(0);\n\n\tfunction onclick() {\n\t\tcount++;\n\t}\n</script>\n\n<button {onclick}>\n\tclicks: {count}\n</button>\n```\n\n...though when using a named event handler function it's usually better to use a more descriptive name.\n\n### Component events\n\nIn Svelte 4, components could emit events by creating a dispatcher with `createEventDispatcher`.\n\nThis function is deprecated in Svelte 5. Instead, components should accept _callback props_ - which means you then pass functions as properties to these components:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport Pump from './Pump.svelte';\n\n\tlet size = $state(15);\n\tlet burst = $state(false);\n\n\tfunction reset() {\n\t\tsize = 15;\n\t\tburst = false;\n\t}\n</script>\n\n<Pump\n\t---on:---inflate={(power) => {\n\t\tsize += power---.detail---;\n\t\tif (size > 75) burst = true;\n\t}}\n\t---on:---deflate={(power) => {\n\t\tif (size > 0) size -= power---.detail---;\n\t}}\n/>\n\n{#if burst}\n\t<button onclick={reset}>new balloon</button>\n\t<span class=\"boom\">💥</span>\n{:else}\n\t<span class=\"balloon\" style=\"scale: {0.01 * size}\">\n\t\t🎈\n\t</span>\n{/if}\n```\n\n```svelte\n<!--- file: Pump.svelte --->\n<script>\n\t---import { createEventDispatcher } from 'svelte';---\n\t---const dispatch = createEventDispatcher();---\n\n\t+++let { inflate, deflate } = $props();+++\n\tlet power = $state(5);\n</script>\n\n<button onclick={() => ---dispatch('inflate', power)---+++inflate(power)+++}>\n\tinflate\n</button>\n<button onclick={() => ---dispatch('deflate', power)---+++deflate(power)+++}>\n\tdeflate\n</button>\n<button onclick={() => power--}>-</button>\nPump power: {power}\n<button onclick={() => power++}>+</button>\n```\n\n### Bubbling events\n\nInstead of doing `<button on:click>` to 'forward' the event from the element to the component, the component should accept an `onclick` callback prop:\n\n```svelte\n<script>\n\t+++let { onclick } = $props();+++\n</script>\n\n<button ---on:click--- +++{onclick}+++>\n\tclick me\n</button>\n```\n\nNote that this also means you can 'spread' event handlers onto the element along with other props instead of tediously forwarding each event separately:\n\n```svelte\n<script>\n\tlet props = $props();\n</script>\n\n<button ---{...$$props} on:click on:keydown on:all_the_other_stuff--- +++{...props}+++>\n\tclick me\n</button>\n```\n\n### Event modifiers\n\nIn Svelte 4, you can add event modifiers to handlers:\n\n```svelte\n<button on:click|once|preventDefault={handler}>...</button>\n```\n\nModifiers are specific to `on:` and so do not work with modern event handlers. Adding things like `event.preventDefault()` inside the handler itself is preferable, since all the logic lives in one place rather than being split between handler and modifiers.\n\nSince event handlers are just functions, you can create your own wrappers as necessary:\n\n```svelte\n<script>\n\tfunction once(fn) {\n\t\treturn function (event) {\n\t\t\tif (fn) fn.call(this, event);\n\t\t\tfn = null;\n\t\t};\n\t}\n\n\tfunction preventDefault(fn) {\n\t\treturn function (event) {\n\t\t\tevent.preventDefault();\n\t\t\tfn.call(this, event);\n\t\t};\n\t}\n</script>\n\n<button onclick={once(preventDefault(handler))}>...</button>\n```\n\nThere are three modifiers — `capture`, `passive` and `nonpassive` — that can't be expressed as wrapper functions, since they need to be applied when the event handler is bound rather than when it runs.\n\nFor `capture`, we add the modifier to the event name:\n\n```svelte\n<button onclickcapture={...}>...</button>\n```\n\nChanging the [`passive`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#using_passive_listeners) option of an event handler, meanwhile, is not something to be done lightly. If you have a use case for it — and you probably don't! — then you will need to use an action to apply the event handler yourself.\n\n### Multiple event handlers\n\nIn Svelte 4, this is possible:\n\n```svelte\n<button on:click={one} on:click={two}>...</button>\n```\n\nDuplicate attributes/properties on elements — which now includes event handlers — are not allowed. Instead, do this:\n\n```svelte\n<button\n\tonclick={(e) => {\n\t\tone(e);\n\t\ttwo(e);\n\t}}\n>\n\t...\n</button>\n```\n\nWhen spreading props, local event handlers must go _after_ the spread, or they risk being overwritten:\n\n```svelte\n<button\n\t{...props}\n\tonclick={(e) => {\n\t\tdoStuff(e);\n\t\tprops.onclick?.(e);\n\t}}\n>\n\t...\n</button>\n```\n\n> [!DETAILS] Why we did this\n> `createEventDispatcher` was always a bit boilerplate-y:\n>\n> - import the function\n> - call the function to get a dispatch function\n> - call said dispatch function with a string and possibly a payload\n> - retrieve said payload on the other end through a `.detail` property, because the event itself was always a `CustomEvent`\n>\n> It was always possible to use component callback props, but because you had to listen to DOM events using `on:`, it made sense to use `createEventDispatcher` for component events due to syntactical consistency. Now that we have event attributes (`onclick`), it's the other way around: Callback props are now the more sensible thing to do.\n>\n> The removal of event modifiers is arguably one of the changes that seems like a step back for those who've liked the shorthand syntax of event modifiers. Given that they are not used that frequently, we traded a smaller surface area for more explicitness. Modifiers also were inconsistent, because most of them were only useable on DOM elements.\n>\n> Multiple listeners for the same event are also no longer possible, but it was something of an anti-pattern anyway, since it impedes readability: if there are many attributes, it becomes harder to spot that there are two handlers unless they are right next to each other. It also implies that the two handlers are independent, when in fact something like `event.stopImmediatePropagation()` inside `one` would prevent `two` from being called.\n>\n> By deprecating `createEventDispatcher` and the `on:` directive in favour of callback props and normal element properties, we:\n>\n> - reduce Svelte's learning curve\n> - remove boilerplate, particularly around `createEventDispatcher`\n> - remove the overhead of creating `CustomEvent` objects for events that may not even have listeners\n> - add the ability to spread event handlers\n> - add the ability to know which event handlers were provided to a component\n> - add the ability to express whether a given event handler is required or optional\n> - increase type safety (previously, it was effectively impossible for Svelte to guarantee that a component didn't emit a particular event)\n\n## Snippets instead of slots\n\nIn Svelte 4, content can be passed to components using slots. Svelte 5 replaces them with snippets, which are more powerful and flexible, and so slots are deprecated in Svelte 5.\n\nThey continue to work, however, and you can pass snippets to a component that uses slots:\n\n```svelte\n<!--- file: Child.svelte --->\n<slot />\n<hr />\n<slot name=\"foo\" message=\"hello\" />\n```\n\n```svelte\n<!--- file: Parent.svelte --->\n<script>\n\timport Child from './Child.svelte';\n</script>\n\n<Child>\n\tdefault child content\n\n\t{#snippet foo({ message })}\n\t\tmessage from child: {message}\n\t{/snippet}\n</Child>\n```\n\n(The reverse is not true — you cannot pass slotted content to a component that uses [`{@render ...}`](/docs/svelte/@render) tags.)\n\nWhen using custom elements, you should still use `<slot />` like before. In a future version, when Svelte removes its internal version of slots, it will leave those slots as-is, i.e. output a regular DOM tag instead of transforming it.\n\n### Default content\n\nIn Svelte 4, the easiest way to pass a piece of UI to the child was using a `<slot />`. In Svelte 5, this is done using the `children` prop instead, which is then shown with `{@render children()}`:\n\n```svelte\n<script>\n\t+++let { children } = $props();+++\n</script>\n\n---<slot />---\n+++{@render children?.()}+++\n```\n\n### Multiple content placeholders\n\nIf you wanted multiple UI placeholders, you had to use named slots. In Svelte 5, use props instead, name them however you like and `{@render ...}` them:\n\n```svelte\n<script>\n\t+++let { header, main, footer } = $props();+++\n</script>\n\n<header>\n\t---<slot name=\"header\" />---\n\t+++{@render header()}+++\n</header>\n\n<main>\n\t---<slot name=\"main\" />---\n\t+++{@render main()}+++\n</main>\n\n<footer>\n\t---<slot name=\"footer\" />---\n\t+++{@render footer()}+++\n</footer>\n```\n\n### Passing data back up\n\nIn Svelte 4, you would pass data to a `<slot />` and then retrieve it with `let:` in the parent component. In Svelte 5, snippets take on that responsibility:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport List from './List.svelte';\n</script>\n\n<List items={['one', 'two', 'three']} ---let:item--->\n\t+++{#snippet item(text)}+++\n\t\t<span>{text}</span>\n\t+++{/snippet}+++\n\t---<span slot=\"empty\">No items yet</span>---\n\t+++{#snippet empty()}\n\t\t<span>No items yet</span>\n\t{/snippet}+++\n</List>\n```\n\n```svelte\n<!--- file: List.svelte --->\n<script>\n\tlet { items, +++item, empty+++ } = $props();\n</script>\n\n{#if items.length}\n\t<ul>\n\t\t{#each items as entry}\n\t\t\t<li>\n\t\t\t\t---<slot item={entry} />---\n\t\t\t\t+++{@render item(entry)}+++\n\t\t\t</li>\n\t\t{/each}\n\t</ul>\n{:else}\n\t---<slot name=\"empty\" />---\n\t+++{@render empty?.()}+++\n{/if}\n```\n\n> [!DETAILS] Why we did this\n> Slots were easy to get started with, but the more advanced the use case became, the more involved and confusing the syntax became:\n>\n> - the `let:` syntax was confusing to many people as it _creates_ a variable whereas all other `:` directives _receive_ a variable\n> - the scope of a variable declared with `let:` wasn't clear. In the example above, it may look like you can use the `item` slot prop in the `empty` slot, but that's not true\n> - named slots had to be applied to an element using the `slot` attribute. Sometimes you didn't want to create an element, so we had to add the `<svelte:fragment>` API\n> - named slots could also be applied to a component, which changed the semantics of where `let:` directives are available (even today us maintainers often don't know which way around it works)\n>\n> Snippets solve all of these problems by being much more readable and clear. At the same time they're more powerful as they allow you to define sections of UI that you can render _anywhere_, not just passing them as props to a component.\n\n## Migration script\n\nBy now you should have a pretty good understanding of the before/after and how the old syntax relates to the new syntax. It probably also became clear that a lot of these migrations are rather technical and repetitive - something you don't want to do by hand.\n\nWe thought the same, which is why we provide a migration script to do most of the migration automatically. You can upgrade your project by using `npx sv migrate svelte-5`. This will do the following things:\n\n- bump core dependencies in your `package.json`\n- migrate to runes (`let` → `$state` etc)\n- migrate to event attributes for DOM elements (`on:click` → `onclick`)\n- migrate slot creations to render tags (`<slot />` → `{@render children()}`)\n- migrate slot usages to snippets (`<div slot=\"x\">...</div>` → `{#snippet x()}<div>...</div>{/snippet}`)\n- migrate obvious component creations (`new Component(...)` → `mount(Component, ...)`)\n\nYou can also migrate a single component in VS Code through the `Migrate Component to Svelte 5 Syntax` command, or in our Playground through the `Migrate` button.\n\nNot everything can be migrated automatically, and some migrations need manual cleanup afterwards. The following sections describe these in more detail.\n\n### run\n\nYou may see that the migration script converts some of your `$:` statements to a `run` function which is imported from `svelte/legacy`. This happens if the migration script couldn't reliably migrate the statement to a `$derived` and concluded this is a side effect instead. In some cases this may be wrong and it's best to change this to use a `$derived` instead. In other cases it may be right, but since `$:` statements also ran on the server but `$effect` does not, it isn't safe to transform it as such. Instead, `run` is used as a stopgap solution. `run` mimics most of the characteristics of `$:`, in that it runs on the server once, and runs as `$effect.pre` on the client (`$effect.pre` runs _before_ changes are applied to the DOM; most likely you want to use `$effect` instead).\n\n```svelte\n<script>\n\t---import { run } from 'svelte/legacy';---\n\t---run(() => {---\n\t+++$effect(() => {+++\n\t\t// some side effect code\n\t})\n</script>\n```\n\n### Event modifiers\n\nEvent modifiers are not applicable to event attributes (e.g. you can't do `onclick|preventDefault={...}`). Therefore, when migrating event directives to event attributes, we need a function-replacement for these modifiers. These are imported from `svelte/legacy`, and should be migrated away from in favor of e.g. just using `event.preventDefault()`.\n\n```svelte\n<script>\n\t---import { preventDefault } from 'svelte/legacy';---\n</script>\n\n<button\n\tonclick={---preventDefault---((event) => {\n\t\t+++event.preventDefault();+++\n\t\t// ...\n\t})}\n>\n\tclick me\n</button>\n```\n\n### Things that are not automigrated\n\nThe migration script does not convert `createEventDispatcher`. You need to adjust those parts manually. It doesn't do it because it's too risky because it could result in breakage for users of the component, which the migration script cannot find out.\n\nThe migration script does not convert `beforeUpdate/afterUpdate`. It doesn't do it because it's impossible to determine the actual intent of the code. As a rule of thumb you can often go with a combination of `$effect.pre` (runs at the same time as `beforeUpdate` did) and `tick` (imported from `svelte`, allows you to wait until changes are applied to the DOM and then do some work).\n\n## Components are no longer classes\n\nIn Svelte 3 and 4, components are classes. In Svelte 5 they are functions and should be instantiated differently. If you need to manually instantiate components, you should use `mount` or `hydrate` (imported from `svelte`) instead. If you see this error using SvelteKit, try updating to the latest version of SvelteKit first, which adds support for Svelte 5. If you're using Svelte without SvelteKit, you'll likely have a `main.js` file (or similar) which you need to adjust:\n\n```js\n+++import { mount } from 'svelte';+++\nimport App from './App.svelte'\n\n---const app = new App({ target: document.getElementById(\"app\") });---\n+++const app = mount(App, { target: document.getElementById(\"app\") });+++\n\nexport default app;\n```\n\n`mount` and `hydrate` have the exact same API. The difference is that `hydrate` will pick up the Svelte's server-rendered HTML inside its target and hydrate it. Both return an object with the exports of the component and potentially property accessors (if compiled with `accessors: true`). They do not come with the `$on`, `$set` and `$destroy` methods you may know from the class component API. These are its replacements:\n\nFor `$on`, instead of listening to events, pass them via the `events` property on the options argument.\n\n```js\n+++import { mount } from 'svelte';+++\nimport App from './App.svelte'\n\n---const app = new App({ target: document.getElementById(\"app\") });\napp.$on('event', callback);---\n+++const app = mount(App, { target: document.getElementById(\"app\"), events: { event: callback } });+++\n```\n\n> [!NOTE] Note that using `events` is discouraged — instead, [use callbacks](#Event-changes)\n\nFor `$set`, use `$state` instead to create a reactive property object and manipulate it. If you're doing this inside a `.js` or `.ts` file, adjust the ending to include `.svelte`, i.e. `.svelte.js` or `.svelte.ts`.\n\n```js\n+++import { mount } from 'svelte';+++\nimport App from './App.svelte'\n\n---const app = new App({ target: document.getElementById(\"app\"), props: { foo: 'bar' } });\napp.$set({ foo: 'baz' });---\n+++const props = $state({ foo: 'bar' });\nconst app = mount(App, { target: document.getElementById(\"app\"), props });\nprops.foo = 'baz';+++\n```\n\nFor `$destroy`, use `unmount` instead.\n\n```js\n+++import { mount, unmount } from 'svelte';+++\nimport App from './App.svelte'\n\n---const app = new App({ target: document.getElementById(\"app\"), props: { foo: 'bar' } });\napp.$destroy();---\n+++const app = mount(App, { target: document.getElementById(\"app\") });\nunmount(app);+++\n```\n\nAs a stop-gap-solution, you can also use `createClassComponent` or `asClassComponent` (imported from `svelte/legacy`) instead to keep the same API known from Svelte 4 after instantiating.\n\n```js\n+++import { createClassComponent } from 'svelte/legacy';+++\nimport App from './App.svelte'\n\n---const app = new App({ target: document.getElementById(\"app\") });---\n+++const app = createClassComponent({ component: App, target: document.getElementById(\"app\") });+++\n\nexport default app;\n```\n\nIf this component is not under your control, you can use the `compatibility.componentApi` compiler option for auto-applied backwards compatibility, which means code using `new Component(...)` keeps working without adjustments (note that this adds a bit of overhead to each component). This will also add `$set` and `$on` methods for all component instances you get through `bind:this`.\n\n```js\n/// svelte.config.js\nexport default {\n\tcompilerOptions: {\n\t\tcompatibility: {\n\t\t\tcomponentApi: 4\n\t\t}\n\t}\n};\n```\n\nNote that `mount` and `hydrate` are _not_ synchronous, so things like `onMount` won't have been called by the time the function returns and the pending block of promises will not have been rendered yet (because `#await` waits a microtask to wait for a potentially immediately-resolved promise). If you need that guarantee, call `flushSync` (import from `'svelte'`) after calling `mount/hydrate`.\n\n### Server API changes\n\nSimilarly, components no longer have a `render` method when compiled for server-side rendering. Instead, pass the function to `render` from `svelte/server`:\n\n```js\n+++import { render } from 'svelte/server';+++\nimport App from './App.svelte';\n\n---const { html, head } = App.render({ props: { message: 'hello' }});---\n+++const { html, head } = render(App, { props: { message: 'hello' }});+++\n```\n\nIn Svelte 4, rendering a component to a string also returned the CSS of all components. In Svelte 5, this is no longer the case by default because most of the time you're using a tooling chain that takes care of it in other ways (like SvelteKit). If you need CSS to be returned from `render`, you can set the `css` compiler option to `'injected'` and it will add `<style>` elements to the `head`.\n\n### Component typing changes\n\nThe change from classes towards functions is also reflected in the typings: `SvelteComponent`, the base class from Svelte 4, is deprecated in favour of the new `Component` type which defines the function shape of a Svelte component. To manually define a component shape in a `d.ts` file:\n\n```ts\nimport type { Component } from 'svelte';\nexport declare const MyComponent: Component<{\n\tfoo: string;\n}>;\n```\n\nTo declare that a component of a certain type is required:\n\n```js\nimport { ComponentA, ComponentB } from 'component-library';\n---import type { SvelteComponent } from 'svelte';---\n+++import type { Component } from 'svelte';+++\n\n---let C: typeof SvelteComponent<{ foo: string }> = $state(---\n+++let C: Component<{ foo: string }> = $state(+++\n\tMath.random() ? ComponentA : ComponentB\n);\n```\n\nThe two utility types `ComponentEvents` and `ComponentType` are also deprecated. `ComponentEvents` is obsolete because events are defined as callback props now, and `ComponentType` is obsolete because the new `Component` type is the component type already (i.e. `ComponentType<SvelteComponent<{ prop: string }>>` is equivalent to `Component<{ prop: string }>`).\n\n### bind:this changes\n\nBecause components are no longer classes, using `bind:this` no longer returns a class instance with `$set`, `$on` and `$destroy` methods on it. It only returns the instance exports (`export function/const`) and, if you're using the `accessors` option, a getter/setter-pair for each property.\n\n## `<svelte:component>` is no longer necessary\n\nIn Svelte 4, components are _static_ — if you render `<Thing>`, and the value of `Thing` changes, [nothing happens](/playground/7f1fa24f0ab44c1089dcbb03568f8dfa?version=4.2.18). To make it dynamic you had to use `<svelte:component>`.\n\nThis is no longer true in Svelte 5:\n\n```svelte\n<script>\n\timport A from './A.svelte';\n\timport B from './B.svelte';\n\n\tlet Thing = $state();\n</script>\n\n<select bind:value={Thing}>\n\t<option value={A}>A</option>\n\t<option value={B}>B</option>\n</select>\n\n<!-- these are equivalent -->\n<Thing />\n<svelte:component this={Thing} />\n```\nWhile migrating, keep in mind that your component's name should be capitalized (`Thing`) to distinguish it from elements, unless using dot notation.\n\n### Dot notation indicates a component\n\nIn Svelte 4, `<foo.bar>` would create an element with a tag name of `\"foo.bar\"`. In Svelte 5, `foo.bar` is treated as a component instead. This is particularly useful inside `each` blocks:\n\n```svelte\n{#each items as item}\n\t<item.component {...item.props} />\n{/each}\n```\n\n## Whitespace handling changed\n\nPreviously, Svelte employed a very complicated algorithm to determine if whitespace should be kept or not. Svelte 5 simplifies this which makes it easier to reason about as a developer. The rules are:\n\n- Whitespace between nodes is collapsed to one whitespace\n- Whitespace at the start and end of a tag is removed completely\n- Certain exceptions apply such as keeping whitespace inside `pre` tags\n\nAs before, you can disable whitespace trimming by setting the `preserveWhitespace` option in your compiler settings or on a per-component basis in `<svelte:options>`.\n\n## Modern browser required\n\nSvelte 5 requires a modern browser (in other words, not Internet Explorer) for various reasons:\n\n- it uses [`Proxies`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy)\n- elements with `clientWidth`/`clientHeight`/`offsetWidth`/`offsetHeight` bindings use a [`ResizeObserver`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver) rather than a convoluted `<iframe>` hack\n- `<input type=\"range\" bind:value={...} />` only uses an `input` event listener, rather than also listening for `change` events as a fallback\n\nThe `legacy` compiler option, which generated bulkier but IE-friendly code, no longer exists.\n\n## Changes to compiler options\n\n- The `false`/`true` (already deprecated previously) and the `\"none\"` values were removed as valid values from the `css` option\n- The `legacy` option was repurposed\n- The `hydratable` option has been removed. Svelte components are always hydratable now\n- The `enableSourcemap` option has been removed. Source maps are always generated now, tooling can choose to ignore it\n- The `tag` option was removed. Use `<svelte:options customElement=\"tag-name\" />` inside the component instead\n- The `loopGuardTimeout`, `format`, `sveltePath`, `errorMode` and `varsReport` options were removed\n\n## The `children` prop is reserved\n\nContent inside component tags becomes a snippet prop called `children`. You cannot have a separate prop by that name.\n\n## Breaking changes in runes mode\n\nSome breaking changes only apply once your component is in runes mode.\n\n### Bindings to component exports are not allowed\n\nExports from runes mode components cannot be bound to directly. For example, having `export const foo = ...` in component `A` and then doing `<A bind:foo />` causes an error. Use `bind:this` instead — `<A bind:this={a} />` — and access the export as `a.foo`. This change makes things easier to reason about, as it enforces a clear separation between props and exports.\n\n### Bindings need to be explicitly defined using `$bindable()`\n\nIn Svelte 4 syntax, every property (declared via `export let`) is bindable, meaning you can `bind:` to it. In runes mode, properties are not bindable by default: you need to denote bindable props with the `$bindable` rune.\n\nIf a bindable property has a default value (e.g. `let { foo = $bindable('bar') } = $props();`), you need to pass a non-`undefined` value to that property if you're binding to it. This prevents ambiguous behavior — the parent and child must have the same value — and results in better performance (in Svelte 4, the default value was reflected back to the parent, resulting in wasteful additional render cycles).\n\n### `accessors` option is ignored\n\nSetting the `accessors` option to `true` makes properties of a component directly accessible on the component instance.\n\n```svelte\n<svelte:options accessors={true} />\n\n<script>\n\t// available via componentInstance.name\n\texport let name;\n</script>\n```\n\nIn runes mode, properties are never accessible on the component instance. You can use component exports instead if you need to expose them.\n\n```svelte\n<script>\n\tlet { name } = $props();\n\t// available via componentInstance.getName()\n\texport const getName = () => name;\n</script>\n```\n\nAlternatively, if the place where they are instantiated is under your control, you can also make use of runes inside `.js/.ts` files by adjusting their ending to include `.svelte`, i.e. `.svelte.js` or `.svelte.ts`, and then use `$state`:\n\n```js\n+++import { mount } from 'svelte';+++\nimport App from './App.svelte'\n\n---const app = new App({ target: document.getElementById(\"app\"), props: { foo: 'bar' } });\napp.foo = 'baz'---\n+++const props = $state({ foo: 'bar' });\nconst app = mount(App, { target: document.getElementById(\"app\"), props });\nprops.foo = 'baz';+++\n```\n\n### `immutable` option is ignored\n\nSetting the `immutable` option has no effect in runes mode. This concept is replaced by how `$state` and its variations work.\n\n### Classes are no longer \"auto-reactive\"\n\nIn Svelte 4, doing the following triggered reactivity:\n\n```svelte\n<script>\n\tlet foo = new Foo();\n</script>\n\n<button on:click={() => (foo.value = 1)}>{foo.value}</button\n>\n```\n\nThis is because the Svelte compiler treated the assignment to `foo.value` as an instruction to update anything that referenced `foo`. In Svelte 5, reactivity is determined at runtime rather than compile time, so you should define `value` as a reactive `$state` field on the `Foo` class. Wrapping `new Foo()` with `$state(...)` will have no effect — only vanilla objects and arrays are made deeply reactive.\n\n### Touch and wheel events are passive\n\nWhen using `onwheel`, `onmousewheel`, `ontouchstart` and `ontouchmove` event attributes, the handlers are [passive](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#using_passive_listeners) to align with browser defaults. This greatly improves responsiveness by allowing the browser to scroll the document immediately, rather than waiting to see if the event handler calls `event.preventDefault()`.\n\nIn the very rare cases that you need to prevent these event defaults, you should use [`on`](/docs/svelte/svelte-events#on) instead (for example inside an action).\n\n### Attribute/prop syntax is stricter\n\nIn Svelte 4, complex attribute values needn't be quoted:\n\n<!-- prettier-ignore -->\n```svelte\n<Component prop=this{is}valid />\n```\n\nThis is a footgun. In runes mode, if you want to concatenate stuff you must wrap the value in quotes:\n\n```svelte\n<Component prop=\"this{is}valid\" />\n```\n\nNote that Svelte 5 will also warn if you have a single expression wrapped in quotes, like `answer=\"{42}\"` — in Svelte 6, that will cause the value to be converted to a string, rather than passed as a number.\n\n### HTML structure is stricter\n\nIn Svelte 4, you were allowed to write HTML code that would be repaired by the browser when server-side rendering it. For example you could write this...\n\n```svelte\n<table>\n\t<tr>\n\t\t<td>hi</td>\n\t</tr>\n</table>\n```\n\n... and the browser would auto-insert a `<tbody>` element:\n\n```svelte\n<table>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>hi</td>\n\t\t</tr>\n\t</tbody>\n</table>\n```\n\nSvelte 5 is more strict about the HTML structure and will throw a compiler error in cases where the browser would repair the DOM.\n\n## Other breaking changes\n\n### Stricter `@const` assignment validation\n\nAssignments to destructured parts of a `@const` declaration are no longer allowed. It was an oversight that this was ever allowed.\n\n### :is(...), :has(...), and :where(...) are scoped\n\nPreviously, Svelte did not analyse selectors inside `:is(...)`, `:has(...)`, and `:where(...)`, effectively treating them as global. Svelte 5 analyses them in the context of the current component. Some selectors may now therefore be treated as unused if they were relying on this treatment. To fix this, use `:global(...)` inside the `:is(...)/:has(...)/:where(...)` selectors.\n\nWhen using Tailwind's `@apply` directive, add a `:global` selector to preserve rules that use Tailwind-generated `:is(...)` selectors:\n\n<!-- prettier-ignore -->\n```css\nmain +++:global+++ {\n\t@apply bg-blue-100 dark:bg-blue-900;\n}\n```\n\n### CSS hash position no longer deterministic\n\nPreviously Svelte would always insert the CSS hash last. This is no longer guaranteed in Svelte 5. This is only breaking if you [have very weird css selectors](https://stackoverflow.com/questions/15670631/does-the-order-of-classes-listed-on-an-item-affect-the-css).\n\n### Scoped CSS uses :where(...)\n\nTo avoid issues caused by unpredictable specificity changes, scoped CSS selectors now use `:where(.svelte-xyz123)` selector modifiers alongside `.svelte-xyz123` (where `xyz123` is, as previously, a hash of the `<style>` contents). You can read more detail [here](https://github.com/sveltejs/svelte/pull/10443).\n\nIn the event that you need to support ancient browsers that don't implement `:where`, you can manually alter the emitted CSS, at the cost of unpredictable specificity changes:\n\n```js\n// @errors: 2552\ncss = css.replace(/:where\\((.+?)\\)/, '$1');\n```\n\n### Error/warning codes have been renamed\n\nError and warning codes have been renamed. Previously they used dashes to separate the words, they now use underscores (e.g. foo-bar becomes foo_bar). Additionally, a handful of codes have been reworded slightly.\n\n### Reduced number of namespaces\n\nThe number of valid namespaces you can pass to the compiler option `namespace` has been reduced to `html` (the default), `mathml` and `svg`.\n\nThe `foreign` namespace was only useful for Svelte Native, which we're planning to support differently in a 5.x minor.\n\n### beforeUpdate/afterUpdate changes\n\n`beforeUpdate` no longer runs twice on initial render if it modifies a variable referenced in the template.\n\n`afterUpdate` callbacks in a parent component will now run after `afterUpdate` callbacks in any child components.\n\n`beforeUpdate/afterUpdate` no longer run when the component contains a `<slot>` and its content is updated.\n\nBoth functions are disallowed in runes mode — use `$effect.pre(...)` and `$effect(...)` instead.\n\n### `contenteditable` behavior change\n\nIf you have a `contenteditable` node with a corresponding binding _and_ a reactive value inside it (example: `<div contenteditable=true bind:textContent>count is {count}</div>`), then the value inside the contenteditable will not be updated by updates to `count` because the binding takes full control over the content immediately and it should only be updated through it.\n\n### `oneventname` attributes no longer accept string values\n\nIn Svelte 4, it was possible to specify event attributes on HTML elements as a string:\n\n```svelte\n<button onclick=\"alert('hello')\">...</button>\n```\n\nThis is not recommended, and is no longer possible in Svelte 5, where properties like `onclick` replace `on:click` as the mechanism for adding event handlers.\n\n### `null` and `undefined` become the empty string\n\nIn Svelte 4, `null` and `undefined` were printed as the corresponding string. In 99 out of 100 cases you want this to become the empty string instead, which is also what most other frameworks out there do. Therefore, in Svelte 5, `null` and `undefined` become the empty string.\n\n### `bind:files` values can only be `null`, `undefined` or `FileList`\n\n`bind:files` is now a two-way binding. As such, when setting a value, it needs to be either falsy (`null` or `undefined`) or of type `FileList`.\n\n### Bindings now react to form resets\n\nPreviously, bindings did not take into account `reset` event of forms, and therefore values could get out of sync with the DOM. Svelte 5 fixes this by placing a `reset` listener on the document and invoking bindings where necessary.\n\n### `walk` no longer exported\n\n`svelte/compiler` reexported `walk` from `estree-walker` for convenience. This is no longer true in Svelte 5, import it directly from that package instead in case you need it.\n\n### Content inside `svelte:options` is forbidden\n\nIn Svelte 4 you could have content inside a `<svelte:options />` tag. It was ignored, but you could write something in there. In Svelte 5, content inside that tag is a compiler error.\n\n### `<slot>` elements in declarative shadow roots are preserved\n\nSvelte 4 replaced the `<slot />` tag in all places with its own version of slots. Svelte 5 preserves them in the case they are a child of a `<template shadowrootmode=\"...\">` element.\n\n### `<svelte:element>` tag must be an expression\n\nIn Svelte 4, `<svelte:element this=\"div\">` is valid code. This makes little sense — you should just do `<div>`. In the vanishingly rare case that you _do_ need to use a literal value for some reason, you can do this:\n\n```svelte\n<svelte:element this=+++{+++\"div\"+++}+++>\n```\n\nNote that whereas Svelte 4 would treat `<svelte:element this=\"input\">` (for example) identically to `<input>` for the purposes of determining which `bind:` directives could be applied, Svelte 5 does not.\n\n### `mount` plays transitions by default\n\nThe `mount` function used to render a component tree plays transitions by default unless the `intro` option is set to `false`. This is different from legacy class components which, when manually instantiated, didn't play transitions by default.\n\n### `<img src={...}>` and `{@html ...}` hydration mismatches are not repaired\n\nIn Svelte 4, if the value of a `src` attribute or `{@html ...}` tag differ between server and client (a.k.a. a hydration mismatch), the mismatch is repaired. This is very costly: setting a `src` attribute (even if it evaluates to the same thing) causes images and iframes to be reloaded, and reinserting a large blob of HTML is slow.\n\nSince these mismatches are extremely rare, Svelte 5 assumes that the values are unchanged, but in development will warn you if they are not. To force an update you can do something like this:\n\n```svelte\n<script>\n\tlet { markup, src } = $props();\n\n\tif (typeof window !== 'undefined') {\n\t\t// stash the values...\n\t\tconst initial = { markup, src };\n\n\t\t// unset them...\n\t\tmarkup = src = undefined;\n\n\t\t$effect(() => {\n\t\t\t// ...and reset after we've mounted\n\t\t\tmarkup = initial.markup;\n\t\t\tsrc = initial.src;\n\t\t});\n\t}\n</script>\n\n{@html markup}\n<img {src} />\n```\n\n### Hydration works differently\n\nSvelte 5 makes use of comments during server-side rendering which are used for more robust and efficient hydration on the client. You therefore should not remove comments from your HTML output if you intend to hydrate it, and if you manually authored HTML to be hydrated by a Svelte component, you need to adjust that HTML to include said comments at the correct positions.\n\n### `onevent` attributes are delegated\n\nEvent attributes replace event directives: Instead of `on:click={handler}` you write `onclick={handler}`. For backwards compatibility the `on:event` syntax is still supported and behaves the same as in Svelte 4. Some of the `onevent` attributes however are delegated, which means you need to take care to not stop event propagation on those manually, as they then might never reach the listener for this event type at the root.\n\n### `--style-props` uses a different element\n\nSvelte 5 uses an extra `<svelte-css-wrapper>` element instead of a `<div>` to wrap the component when using CSS custom properties.\n\n<!-- TODO in final docs, add link to corresponding section for more details -->",
    "svelte/faq": "## I'm new to Svelte. Where should I start?\n\nWe think the best way to get started is playing through the interactive [tutorial](/tutorial). Each step there is mainly focused on one specific aspect and is easy to follow. You'll be editing and running real Svelte components right in your browser.\n\nFive to ten minutes should be enough to get you up and running. An hour and a half should get you through the entire tutorial.\n\n## Where can I get support?\n\nIf your question is about certain syntax, the [reference docs](/docs/svelte) are a good place to start.\n\nStack Overflow is a popular forum to ask code-level questions or if you’re stuck with a specific error. Read through the existing questions tagged with [Svelte](https://stackoverflow.com/questions/tagged/svelte+or+svelte-3) or [ask your own](https://stackoverflow.com/questions/ask?tags=svelte)!\n\nThere are online forums and chats which are a great place for discussion about best practices, application architecture or just to get to know fellow Svelte users. [Our Discord](/chat) or [the Reddit channel](https://www.reddit.com/r/sveltejs/) are examples of that. If you have an answerable code-level question, Stack Overflow is usually a better fit.\n\n## Are there any third-party resources?\n\nSvelte Society maintains a [list of books and videos](https://sveltesociety.dev/resources).\n\n## How can I get VS Code to syntax-highlight my .svelte files?\n\nThere is an [official VS Code extension for Svelte](https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode).\n\n## Is there a tool to automatically format my .svelte files?\n\nYou can use prettier with the [prettier-plugin-svelte](https://www.npmjs.com/package/prettier-plugin-svelte) plugin.\n\n## How do I document my components?\n\nIn editors which use the Svelte Language Server you can document Components, functions and exports using specially formatted comments.\n\n````svelte\n<script>\n\t/** What should we call the user? */\n\texport let name = 'world';\n</script>\n\n<!--\n@component\nHere's some documentation for this component.\nIt will show up on hover.\n\n- You can use markdown here.\n- You can also use code blocks here.\n- Usage:\n  ```svelte\n  <main name=\"Arethra\">\n  ```\n-->\n<main>\n\t<h1>\n\t\tHello, {name}\n\t</h1>\n</main>\n````\n\nNote: The `@component` is necessary in the HTML comment which describes your component.\n\n## Does Svelte scale?\n\nThere will be a blog post about this eventually, but in the meantime, check out [this issue](https://github.com/sveltejs/svelte/issues/2546).\n\n## Is there a UI component library?\n\nThere are several [UI component libraries](/packages#component-libraries) as well as standalone components listed on [the packages page](/packages).\n\n## How do I test Svelte apps?\n\nHow your application is structured and where logic is defined will determine the best way to ensure it is properly tested. It is important to note that not all logic belongs within a component - this includes concerns such as data transformation, cross-component state management, and logging, among others. Remember that the Svelte library has its own test suite, so you do not need to write tests to validate implementation details provided by Svelte.\n\nA Svelte application will typically have three different types of tests: Unit, Component, and End-to-End (E2E).\n\n_Unit Tests_: Focus on testing business logic in isolation. Often this is validating individual functions and edge cases. By minimizing the surface area of these tests they can be kept lean and fast, and by extracting as much logic as possible from your Svelte components more of your application can be covered using them. When creating a new SvelteKit project, you will be asked whether you would like to setup [Vitest](https://vitest.dev/) for unit testing. There are a number of other test runners that could be used as well.\n\n_Component Tests_: Validating that a Svelte component mounts and interacts as expected throughout its lifecycle requires a tool that provides a Document Object Model (DOM). Components can be compiled (since Svelte is a compiler and not a normal library) and mounted to allow asserting against element structure, listeners, state, and all the other capabilities provided by a Svelte component. Tools for component testing range from an in-memory implementation like jsdom paired with a test runner like [Vitest](https://vitest.dev/) to solutions that leverage an actual browser to provide a visual testing capability such as [Playwright](https://playwright.dev/docs/test-components) or [Cypress](https://www.cypress.io/).\n\n_End-to-End Tests_: To ensure your users are able to interact with your application it is necessary to test it as a whole in a manner as close to production as possible. This is done by writing end-to-end (E2E) tests which load and interact with a deployed version of your application in order to simulate how the user will interact with your application. When creating a new SvelteKit project, you will be asked whether you would like to setup [Playwright](https://playwright.dev/) for end-to-end testing. There are many other E2E test libraries available for use as well.\n\nSome resources for getting started with testing:\n\n- [Svelte docs on testing](/docs/svelte/testing)\n- [Setup Vitest using the Svelte CLI](/docs/cli/vitest)\n- [Svelte Testing Library](https://testing-library.com/docs/svelte-testing-library/example/)\n- [Svelte Component Testing in Cypress](https://docs.cypress.io/guides/component-testing/svelte/overview)\n- [Example using uvu test runner with JSDOM](https://github.com/lukeed/uvu/tree/master/examples/svelte)\n- [Test Svelte components using Vitest & Playwright](https://davipon.hashnode.dev/test-svelte-component-using-vitest-playwright)\n- [Component testing with WebdriverIO](https://webdriver.io/docs/component-testing/svelte)\n\n## Is there a router?\n\nThe official routing library is [SvelteKit](/docs/kit). SvelteKit provides a filesystem router, server-side rendering (SSR), and hot module reloading (HMR) in one easy-to-use package. It shares similarities with Next.js for React and Nuxt.js for Vue.\n\nHowever, you can use any router library. A sampling of available routers are highlighted [on the packages page](/packages#routing).\n\n## How do I write a mobile app with Svelte?\n\nWhile most mobile apps are written without using JavaScript, if you'd like to leverage your existing Svelte components and knowledge of Svelte when building mobile apps, you can turn a [SvelteKit SPA](https://kit.svelte.dev/docs/single-page-apps) into a mobile app with [Tauri](https://v2.tauri.app/start/frontend/sveltekit/) or [Capacitor](https://capacitorjs.com/solution/svelte). Mobile features like the camera, geolocation, and push notifications are available via plugins for both platforms.\n\nSvelte Native was an option available for Svelte 4, but note that Svelte 5 does not currently support it. Svelte Native lets you write NativeScript apps using Svelte components that contain [NativeScript UI components](https://docs.nativescript.org/ui/) rather than DOM elements, which may be familiar for users coming from React Native.\n\n## Can I tell Svelte not to remove my unused styles?\n\nNo. Svelte removes the styles from the component and warns you about them in order to prevent issues that would otherwise arise.\n\nSvelte's component style scoping works by generating a class unique to the given component, adding it to the relevant elements in the component that are under Svelte's control, and then adding it to each of the selectors in that component's styles. When the compiler can't see what elements a style selector applies to, there would be two bad options for keeping it:\n\n- If it keeps the selector and adds the scoping class to it, the selector will likely not match the expected elements in the component, and they definitely won't if they were created by a child component or `{@html ...}`.\n- If it keeps the selector without adding the scoping class to it, the given style will become a global style, affecting your entire page.\n\nIf you need to style something that Svelte can't identify at compile time, you will need to explicitly opt into global styles by using `:global(...)`. But also keep in mind that you can wrap `:global(...)` around only part of a selector. `.foo :global(.bar) { ... }` will style any `.bar` elements that appear within the component's `.foo` elements. As long as there's some parent element in the current component to start from, partially global selectors like this will almost always be able to get you what you want.\n\n## Is Svelte v2 still available?\n\nNew features aren't being added to it, and bugs will probably only be fixed if they are extremely nasty or present some sort of security vulnerability.\n\nThe documentation is still available [here](https://v2.svelte.dev/guide).\n\n## How do I do hot module reloading?\n\nWe recommend using [SvelteKit](/docs/kit), which supports HMR out of the box and is built on top of [Vite](https://vitejs.dev/) and [svelte-hmr](https://github.com/sveltejs/svelte-hmr). There are also community plugins for [rollup](https://github.com/rixo/rollup-plugin-svelte-hot) and [webpack](https://github.com/sveltejs/svelte-loader).",
    "svelte/svelte": "```js\n// @noErrors\nimport {\n\tSvelteComponent,\n\tSvelteComponentTyped,\n\tafterUpdate,\n\tbeforeUpdate,\n\tcreateEventDispatcher,\n\tcreateRawSnippet,\n\tflushSync,\n\tgetAbortSignal,\n\tgetAllContexts,\n\tgetContext,\n\thasContext,\n\thydrate,\n\tmount,\n\tonDestroy,\n\tonMount,\n\tsetContext,\n\tsettled,\n\ttick,\n\tunmount,\n\tuntrack\n} from 'svelte';\n```\n\n## SvelteComponent\n\nThis was the base class for Svelte components in Svelte 4. Svelte 5+ components\nare completely different under the hood. For typing, use `Component` instead.\nTo instantiate components, use `mount` instead.\nSee [migration guide](/docs/svelte/v5-migration-guide#Components-are-no-longer-classes) for more info.\n\n<div class=\"ts-block\">\n\n```dts\nclass SvelteComponent<\n\tProps extends Record<string, any> = Record<string, any>,\n\tEvents extends Record<string, any> = any,\n\tSlots extends Record<string, any> = any\n> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nstatic element?: typeof HTMLElement;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe custom element version of the component. Only present if compiled with the `customElement` compiler option\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n[prop: string]: any;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nconstructor(options: ComponentConstructorOptions<Properties<Props, Slots>>);\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag deprecated\">deprecated</span> This constructor only exists when using the `asClassComponent` compatibility helper, which\nis a stop-gap solution. Migrate towards using `mount` instead. See\n[migration guide](https://svelte.dev/docs/svelte/v5-migration-guide#Components-are-no-longer-classes) for more info.\n\n</div>\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n$destroy(): void;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag deprecated\">deprecated</span> This method only exists when using one of the legacy compatibility helpers, which\nis a stop-gap solution. See [migration guide](https://svelte.dev/docs/svelte/v5-migration-guide#Components-are-no-longer-classes)\nfor more info.\n\n</div>\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n$on<K extends Extract<keyof Events, string>>(\n\ttype: K,\n\tcallback: (e: Events[K]) => void\n): () => void;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag deprecated\">deprecated</span> This method only exists when using one of the legacy compatibility helpers, which\nis a stop-gap solution. See [migration guide](https://svelte.dev/docs/svelte/v5-migration-guide#Components-are-no-longer-classes)\nfor more info.\n\n</div>\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n$set(props: Partial<Props>): void;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag deprecated\">deprecated</span> This method only exists when using one of the legacy compatibility helpers, which\nis a stop-gap solution. See [migration guide](https://svelte.dev/docs/svelte/v5-migration-guide#Components-are-no-longer-classes)\nfor more info.\n\n</div>\n\n</div>\n</div></div>\n\n\n\n## SvelteComponentTyped\n\n<blockquote class=\"tag deprecated note\">\n\nUse `Component` instead. See [migration guide](/docs/svelte/v5-migration-guide#Components-are-no-longer-classes) for more information.\n\n</blockquote>\n\n<div class=\"ts-block\">\n\n```dts\nclass SvelteComponentTyped<\n\tProps extends Record<string, any> = Record<string, any>,\n\tEvents extends Record<string, any> = any,\n\tSlots extends Record<string, any> = any\n> extends SvelteComponent<Props, Events, Slots> {}\n```\n\n</div>\n\n\n\n## afterUpdate\n\n<blockquote class=\"tag deprecated note\">\n\nUse [`$effect`](/docs/svelte/$effect) instead\n\n</blockquote>\n\nSchedules a callback to run immediately after the component has been updated.\n\nThe first time the callback runs will be after the initial `onMount`.\n\nIn runes mode use `$effect` instead.\n\n<div class=\"ts-block\">\n\n```dts\nfunction afterUpdate(fn: () => void): void;\n```\n\n</div>\n\n\n\n## beforeUpdate\n\n<blockquote class=\"tag deprecated note\">\n\nUse [`$effect.pre`](/docs/svelte/$effect#$effect.pre) instead\n\n</blockquote>\n\nSchedules a callback to run immediately before the component is updated after any state change.\n\nThe first time the callback runs will be before the initial `onMount`.\n\nIn runes mode use `$effect.pre` instead.\n\n<div class=\"ts-block\">\n\n```dts\nfunction beforeUpdate(fn: () => void): void;\n```\n\n</div>\n\n\n\n## createEventDispatcher\n\n<blockquote class=\"tag deprecated note\">\n\nUse callback props and/or the `$host()` rune instead — see [migration guide](/docs/svelte/v5-migration-guide#Event-changes-Component-events)\n\n</blockquote>\n\nCreates an event dispatcher that can be used to dispatch [component events](/docs/svelte/legacy-on#Component-events).\nEvent dispatchers are functions that can take two arguments: `name` and `detail`.\n\nComponent events created with `createEventDispatcher` create a\n[CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\nThese events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\nThe `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\nproperty and can contain any type of data.\n\nThe event dispatcher can be typed to narrow the allowed event names and the type of the `detail` argument:\n```ts\nconst dispatch = createEventDispatcher<{\n loaded: null; // does not take a detail argument\n change: string; // takes a detail argument of type string, which is required\n optional: number | null; // takes an optional detail argument of type number\n}>();\n```\n\n<div class=\"ts-block\">\n\n```dts\nfunction createEventDispatcher<\n\tEventMap extends Record<string, any> = any\n>(): EventDispatcher<EventMap>;\n```\n\n</div>\n\n\n\n## createRawSnippet\n\nCreate a snippet programmatically\n\n<div class=\"ts-block\">\n\n```dts\nfunction createRawSnippet<Params extends unknown[]>(\n\tfn: (...params: Getters<Params>) => {\n\t\trender: () => string;\n\t\tsetup?: (element: Element) => void | (() => void);\n\t}\n): Snippet<Params>;\n```\n\n</div>\n\n\n\n## flushSync\n\nSynchronously flush any pending updates.\nReturns void if no callback is provided, otherwise returns the result of calling the callback.\n\n<div class=\"ts-block\">\n\n```dts\nfunction flushSync<T = void>(fn?: (() => T) | undefined): T;\n```\n\n</div>\n\n\n\n## getAbortSignal\n\nReturns an [`AbortSignal`](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal) that aborts when the current [derived](/docs/svelte/$derived) or [effect](/docs/svelte/$effect) re-runs or is destroyed.\n\nMust be called while a derived or effect is running.\n\n```svelte\n<script>\n\timport { getAbortSignal } from 'svelte';\n\n\tlet { id } = $props();\n\n\tasync function getData(id) {\n\t\tconst response = await fetch(`/items/${id}`, {\n\t\t\tsignal: getAbortSignal()\n\t\t});\n\n\t\treturn await response.json();\n\t}\n\n\tconst data = $derived(await getData(id));\n</script>\n```\n\n<div class=\"ts-block\">\n\n```dts\nfunction getAbortSignal(): AbortSignal;\n```\n\n</div>\n\n\n\n## getAllContexts\n\nRetrieves the whole context map that belongs to the closest parent component.\nMust be called during component initialisation. Useful, for example, if you\nprogrammatically create a component and want to pass the existing context to it.\n\n<div class=\"ts-block\">\n\n```dts\nfunction getAllContexts<\n\tT extends Map<any, any> = Map<any, any>\n>(): T;\n```\n\n</div>\n\n\n\n## getContext\n\nRetrieves the context that belongs to the closest parent component with the specified `key`.\nMust be called during component initialisation.\n\n<div class=\"ts-block\">\n\n```dts\nfunction getContext<T>(key: any): T;\n```\n\n</div>\n\n\n\n## hasContext\n\nChecks whether a given `key` has been set in the context of a parent component.\nMust be called during component initialisation.\n\n<div class=\"ts-block\">\n\n```dts\nfunction hasContext(key: any): boolean;\n```\n\n</div>\n\n\n\n## hydrate\n\nHydrates a component on the given target and returns the exports and potentially the props (if compiled with `accessors: true`) of the component\n\n<div class=\"ts-block\">\n\n```dts\nfunction hydrate<\n\tProps extends Record<string, any>,\n\tExports extends Record<string, any>\n>(\n\tcomponent:\n\t\t| ComponentType<SvelteComponent<Props>>\n\t\t| Component<Props, Exports, any>,\n\toptions: {} extends Props\n\t\t? {\n\t\t\t\ttarget: Document | Element | ShadowRoot;\n\t\t\t\tprops?: Props;\n\t\t\t\tevents?: Record<string, (e: any) => any>;\n\t\t\t\tcontext?: Map<any, any>;\n\t\t\t\tintro?: boolean;\n\t\t\t\trecover?: boolean;\n\t\t\t}\n\t\t: {\n\t\t\t\ttarget: Document | Element | ShadowRoot;\n\t\t\t\tprops: Props;\n\t\t\t\tevents?: Record<string, (e: any) => any>;\n\t\t\t\tcontext?: Map<any, any>;\n\t\t\t\tintro?: boolean;\n\t\t\t\trecover?: boolean;\n\t\t\t}\n): Exports;\n```\n\n</div>\n\n\n\n## mount\n\nMounts a component to the given target and returns the exports and potentially the props (if compiled with `accessors: true`) of the component.\nTransitions will play during the initial render unless the `intro` option is set to `false`.\n\n<div class=\"ts-block\">\n\n```dts\nfunction mount<\n\tProps extends Record<string, any>,\n\tExports extends Record<string, any>\n>(\n\tcomponent:\n\t\t| ComponentType<SvelteComponent<Props>>\n\t\t| Component<Props, Exports, any>,\n\toptions: MountOptions<Props>\n): Exports;\n```\n\n</div>\n\n\n\n## onDestroy\n\nSchedules a callback to run immediately before the component is unmounted.\n\nOut of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\nonly one that runs inside a server-side component.\n\n<div class=\"ts-block\">\n\n```dts\nfunction onDestroy(fn: () => any): void;\n```\n\n</div>\n\n\n\n## onMount\n\n`onMount`, like [`$effect`](/docs/svelte/$effect), schedules a function to run as soon as the component has been mounted to the DOM.\nUnlike `$effect`, the provided function only runs once.\n\nIt must be called during the component's initialisation (but doesn't need to live _inside_ the component;\nit can be called from an external module). If a function is returned _synchronously_ from `onMount`,\nit will be called when the component is unmounted.\n\n`onMount` functions do not run during [server-side rendering](/docs/svelte/svelte-server#render).\n\n<div class=\"ts-block\">\n\n```dts\nfunction onMount<T>(\n\tfn: () =>\n\t\t| NotFunction<T>\n\t\t| Promise<NotFunction<T>>\n\t\t| (() => any)\n): void;\n```\n\n</div>\n\n\n\n## setContext\n\nAssociates an arbitrary `context` object with the current component and the specified `key`\nand returns that object. The context is then available to children of the component\n(including slotted content) with `getContext`.\n\nLike lifecycle functions, this must be called during component initialisation.\n\n<div class=\"ts-block\">\n\n```dts\nfunction setContext<T>(key: any, context: T): T;\n```\n\n</div>\n\n\n\n## settled\n\n<blockquote class=\"since note\">\n\nAvailable since 5.36\n\n</blockquote>\n\nReturns a promise that resolves once any state changes, and asynchronous work resulting from them,\nhave resolved and the DOM has been updated\n\n<div class=\"ts-block\">\n\n```dts\nfunction settled(): Promise<void>;\n```\n\n</div>\n\n\n\n## tick\n\nReturns a promise that resolves once any pending state changes have been applied.\n\n<div class=\"ts-block\">\n\n```dts\nfunction tick(): Promise<void>;\n```\n\n</div>\n\n\n\n## unmount\n\nUnmounts a component that was previously mounted using `mount` or `hydrate`.\n\nSince 5.13.0, if `options.outro` is `true`, [transitions](/docs/svelte/transition) will play before the component is removed from the DOM.\n\nReturns a `Promise` that resolves after transitions have completed if `options.outro` is true, or immediately otherwise (prior to 5.13.0, returns `void`).\n\n```js\n// @errors: 7031\nimport { mount, unmount } from 'svelte';\nimport App from './App.svelte';\n\nconst app = mount(App, { target: document.body });\n\n// later...\nunmount(app, { outro: true });\n```\n\n<div class=\"ts-block\">\n\n```dts\nfunction unmount(\n\tcomponent: Record<string, any>,\n\toptions?:\n\t\t| {\n\t\t\t\toutro?: boolean;\n\t\t  }\n\t\t| undefined\n): Promise<void>;\n```\n\n</div>\n\n\n\n## untrack\n\nWhen used inside a [`$derived`](/docs/svelte/$derived) or [`$effect`](/docs/svelte/$effect),\nany state read inside `fn` will not be treated as a dependency.\n\n```ts\n$effect(() => {\n\t// this will run when `data` changes, but not when `time` changes\n\tsave(data, {\n\t\ttimestamp: untrack(() => time)\n\t});\n});\n```\n\n<div class=\"ts-block\">\n\n```dts\nfunction untrack<T>(fn: () => T): T;\n```\n\n</div>\n\n\n\n## Component\n\nCan be used to create strongly typed Svelte components.\n\n#### Example:\n\nYou have component library on npm called `component-library`, from which\nyou export a component called `MyComponent`. For Svelte+TypeScript users,\nyou want to provide typings. Therefore you create a `index.d.ts`:\n```ts\nimport type { Component } from 'svelte';\nexport declare const MyComponent: Component<{ foo: string }> {}\n```\nTyping this makes it possible for IDEs like VS Code with the Svelte extension\nto provide intellisense and to use the component like this in a Svelte file\nwith TypeScript:\n```svelte\n<script lang=\"ts\">\n\timport { MyComponent } from \"component-library\";\n</script>\n<MyComponent foo={'bar'} />\n```\n\n<div class=\"ts-block\">\n\n```dts\ninterface Component<\n\tProps extends Record<string, any> = {},\n\tExports extends Record<string, any> = {},\n\tBindings extends keyof Props | '' = string\n> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\n(\n\tthis: void,\n\tinternals: ComponentInternals,\n\tprops: Props\n): {\n\t/**\n\t * @deprecated This method only exists when using one of the legacy compatibility helpers, which\n\t * is a stop-gap solution. See [migration guide](https://svelte.dev/docs/svelte/v5-migration-guide#Components-are-no-longer-classes)\n\t * for more info.\n\t */\n\t$on?(type: string, callback: (e: any) => void): () => void;\n\t/**\n\t * @deprecated This method only exists when using one of the legacy compatibility helpers, which\n\t * is a stop-gap solution. See [migration guide](https://svelte.dev/docs/svelte/v5-migration-guide#Components-are-no-longer-classes)\n\t * for more info.\n\t */\n\t$set?(props: Partial<Props>): void;\n} & Exports;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- `internal` An internal object used by Svelte. Do not use or modify.\n- `props` The props passed to the component.\n\n</div>\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nelement?: typeof HTMLElement;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe custom element version of the component. Only present if compiled with the `customElement` compiler option\n\n</div>\n</div></div>\n\n## ComponentConstructorOptions\n\n<blockquote class=\"tag deprecated note\">\n\nIn Svelte 4, components are classes. In Svelte 5, they are functions.\nUse `mount` instead to instantiate components.\nSee [migration guide](/docs/svelte/v5-migration-guide#Components-are-no-longer-classes)\nfor more info.\n\n</blockquote>\n\n<div class=\"ts-block\">\n\n```dts\ninterface ComponentConstructorOptions<\n\tProps extends Record<string, any> = Record<string, any>\n> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\ntarget: Element | Document | ShadowRoot;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nanchor?: Element;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nprops?: Props;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ncontext?: Map<any, any>;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nhydrate?: boolean;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nintro?: boolean;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nrecover?: boolean;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nsync?: boolean;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nidPrefix?: string;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\n$$inline?: boolean;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n## ComponentEvents\n\n<blockquote class=\"tag deprecated note\">\n\nThe new `Component` type does not have a dedicated Events type. Use `ComponentProps` instead.\n\n</blockquote>\n\n<div class=\"ts-block\">\n\n```dts\ntype ComponentEvents<Comp extends SvelteComponent> =\n\tComp extends SvelteComponent<any, infer Events>\n\t\t? Events\n\t\t: never;\n```\n\n</div>\n\n## ComponentInternals\n\nInternal implementation details that vary between environments\n\n<div class=\"ts-block\">\n\n```dts\ntype ComponentInternals = Branded<{}, 'ComponentInternals'>;\n```\n\n</div>\n\n## ComponentProps\n\nConvenience type to get the props the given component expects.\n\nExample: Ensure a variable contains the props expected by `MyComponent`:\n\n```ts\nimport type { ComponentProps } from 'svelte';\nimport MyComponent from './MyComponent.svelte';\n\n// Errors if these aren't the correct props expected by MyComponent.\nconst props: ComponentProps<typeof MyComponent> = { foo: 'bar' };\n```\n\n> [!NOTE] In Svelte 4, you would do `ComponentProps<MyComponent>` because `MyComponent` was a class.\n\nExample: A generic function that accepts some component and infers the type of its props:\n\n```ts\nimport type { Component, ComponentProps } from 'svelte';\nimport MyComponent from './MyComponent.svelte';\n\nfunction withProps<TComponent extends Component<any>>(\n\tcomponent: TComponent,\n\tprops: ComponentProps<TComponent>\n) {};\n\n// Errors if the second argument is not the correct props expected by the component in the first argument.\nwithProps(MyComponent, { foo: 'bar' });\n```\n\n<div class=\"ts-block\">\n\n```dts\ntype ComponentProps<\n\tComp extends SvelteComponent | Component<any, any>\n> =\n\tComp extends SvelteComponent<infer Props>\n\t\t? Props\n\t\t: Comp extends Component<infer Props, any>\n\t\t\t? Props\n\t\t\t: never;\n```\n\n</div>\n\n## ComponentType\n\n<blockquote class=\"tag deprecated note\">\n\nThis type is obsolete when working with the new `Component` type.\n\n</blockquote>\n\n<div class=\"ts-block\">\n\n```dts\ntype ComponentType<\n\tComp extends SvelteComponent = SvelteComponent\n> = (new (\n\toptions: ComponentConstructorOptions<\n\t\tComp extends SvelteComponent<infer Props>\n\t\t\t? Props\n\t\t\t: Record<string, any>\n\t>\n) => Comp) & {\n\t/** The custom element version of the component. Only present if compiled with the `customElement` compiler option */\n\telement?: typeof HTMLElement;\n};\n```\n\n</div>\n\n## EventDispatcher\n\n<div class=\"ts-block\">\n\n```dts\ninterface EventDispatcher<\n\tEventMap extends Record<string, any>\n> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\n<Type extends keyof EventMap>(\n\t...args: null extends EventMap[Type]\n\t\t? [type: Type, parameter?: EventMap[Type] | null | undefined, options?: DispatchOptions]\n\t\t: undefined extends EventMap[Type]\n\t\t\t? [type: Type, parameter?: EventMap[Type] | null | undefined, options?: DispatchOptions]\n\t\t\t: [type: Type, parameter: EventMap[Type], options?: DispatchOptions]\n): boolean;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n## MountOptions\n\nDefines the options accepted by the `mount()` function.\n\n<div class=\"ts-block\">\n\n```dts\ntype MountOptions<\n\tProps extends Record<string, any> = Record<string, any>\n> = {\n\t/**\n\t * Target element where the component will be mounted.\n\t */\n\ttarget: Document | Element | ShadowRoot;\n\t/**\n\t * Optional node inside `target`. When specified, it is used to render the component immediately before it.\n\t */\n\tanchor?: Node;\n\t/**\n\t * Allows the specification of events.\n\t * @deprecated Use callback props instead.\n\t */\n\tevents?: Record<string, (e: any) => any>;\n\t/**\n\t * Can be accessed via `getContext()` at the component level.\n\t */\n\tcontext?: Map<any, any>;\n\t/**\n\t * Whether or not to play transitions on initial render.\n\t * @default true\n\t */\n\tintro?: boolean;\n} & ({} extends Props\n\t? {\n\t\t\t/**\n\t\t\t * Component properties.\n\t\t\t */\n\t\t\tprops?: Props;\n\t\t}\n\t: {\n\t\t\t/**\n\t\t\t * Component properties.\n\t\t\t */\n\t\t\tprops: Props;\n\t\t});\n```\n\n</div>\n\n## Snippet\n\nThe type of a `#snippet` block. You can use it to (for example) express that your component expects a snippet of a certain type:\n```ts\nlet { banner }: { banner: Snippet<[{ text: string }]> } = $props();\n```\nYou can only call a snippet through the `{@render ...}` tag.\n\nSee the [snippet documentation](/docs/svelte/snippet) for more info.\n\n<div class=\"ts-block\">\n\n```dts\ninterface Snippet<Parameters extends unknown[] = []> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\n(\n\tthis: void,\n\t// this conditional allows tuples but not arrays. Arrays would indicate a\n\t// rest parameter type, which is not supported. If rest parameters are added\n\t// in the future, the condition can be removed.\n\t...args: number extends Parameters['length'] ? never : Parameters\n): {\n\t'{@render ...} must be called with a Snippet': \"import type { Snippet } from 'svelte'\";\n} & typeof SnippetReturn;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>",
    "svelte/svelte-action": "This module provides types for [actions](use), which have been superseded by [attachments](@attach).\n\n## Action\n\nActions are functions that are called when an element is created.\nYou can use this interface to type such actions.\nThe following example defines an action that only works on `<div>` elements\nand optionally accepts a parameter which it has a default value for:\n```ts\nexport const myAction: Action<HTMLDivElement, { someProperty: boolean } | undefined> = (node, param = { someProperty: true }) => {\n\t// ...\n}\n```\n`Action<HTMLDivElement>` and `Action<HTMLDivElement, undefined>` both signal that the action accepts no parameters.\n\nYou can return an object with methods `update` and `destroy` from the function and type which additional attributes and events it has.\nSee interface `ActionReturn` for more details.\n\n<div class=\"ts-block\">\n\n```dts\ninterface Action<\n\tElement = HTMLElement,\n\tParameter = undefined,\n\tAttributes extends Record<string, any> = Record<\n\t\tnever,\n\t\tany\n\t>\n> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\n<Node extends Element>(\n\t...args: undefined extends Parameter\n\t\t? [node: Node, parameter?: Parameter]\n\t\t: [node: Node, parameter: Parameter]\n): void | ActionReturn<Parameter, Attributes>;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n## ActionReturn\n\nActions can return an object containing the two properties defined in this interface. Both are optional.\n- update: An action can have a parameter. This method will be called whenever that parameter changes,\n\timmediately after Svelte has applied updates to the markup. `ActionReturn` and `ActionReturn<undefined>` both\n\tmean that the action accepts no parameters.\n- destroy: Method that is called after the element is unmounted\n\nAdditionally, you can specify which additional attributes and events the action enables on the applied element.\nThis applies to TypeScript typings only and has no effect at runtime.\n\nExample usage:\n```ts\ninterface Attributes {\n\tnewprop?: string;\n\t'on:event': (e: CustomEvent<boolean>) => void;\n}\n\nexport function myAction(node: HTMLElement, parameter: Parameter): ActionReturn<Parameter, Attributes> {\n\t// ...\n\treturn {\n\t\tupdate: (updatedParameter) => {...},\n\t\tdestroy: () => {...}\n\t};\n}\n```\n\n<div class=\"ts-block\">\n\n```dts\ninterface ActionReturn<\n\tParameter = undefined,\n\tAttributes extends Record<string, any> = Record<\n\t\tnever,\n\t\tany\n\t>\n> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nupdate?: (parameter: Parameter) => void;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ndestroy?: () => void;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>",
    "svelte/svelte-animate": "```js\n// @noErrors\nimport { flip } from 'svelte/animate';\n```\n\n## flip\n\nThe flip function calculates the start and end position of an element and animates between them, translating the x and y values.\n`flip` stands for [First, Last, Invert, Play](https://aerotwist.com/blog/flip-your-animations/).\n\n<div class=\"ts-block\">\n\n```dts\nfunction flip(\n\tnode: Element,\n\t{\n\t\tfrom,\n\t\tto\n\t}: {\n\t\tfrom: DOMRect;\n\t\tto: DOMRect;\n\t},\n\tparams?: FlipParams\n): AnimationConfig;\n```\n\n</div>\n\n\n\n## AnimationConfig\n\n<div class=\"ts-block\">\n\n```dts\ninterface AnimationConfig {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\ndelay?: number;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nduration?: number;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\neasing?: (t: number) => number;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ncss?: (t: number, u: number) => string;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ntick?: (t: number, u: number) => void;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n## FlipParams\n\n<div class=\"ts-block\">\n\n```dts\ninterface FlipParams {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\ndelay?: number;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nduration?: number | ((len: number) => number);\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\neasing?: (t: number) => number;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>",
    "svelte/svelte-attachments": "```js\n// @noErrors\nimport { createAttachmentKey, fromAction } from 'svelte/attachments';\n```\n\n## createAttachmentKey\n\n<blockquote class=\"since note\">\n\nAvailable since 5.29\n\n</blockquote>\n\nCreates an object key that will be recognised as an attachment when the object is spread onto an element,\nas a programmatic alternative to using `{@attach ...}`. This can be useful for library authors, though\nis generally not needed when building an app.\n\n```svelte\n<script>\n\timport { createAttachmentKey } from 'svelte/attachments';\n\n\tconst props = {\n\t\tclass: 'cool',\n\t\tonclick: () => alert('clicked'),\n\t\t[createAttachmentKey()]: (node) => {\n\t\t\tnode.textContent = 'attached!';\n\t\t}\n\t};\n</script>\n\n<button {...props}>click me</button>\n```\n\n<div class=\"ts-block\">\n\n```dts\nfunction createAttachmentKey(): symbol;\n```\n\n</div>\n\n\n\n## fromAction\n\nConverts an [action](/docs/svelte/use) into an [attachment](/docs/svelte/@attach) keeping the same behavior.\nIt's useful if you want to start using attachments on components but you have actions provided by a library.\n\nNote that the second argument, if provided, must be a function that _returns_ the argument to the\naction function, not the argument itself.\n\n```svelte\n<!-- with an action -->\n<div use:foo={bar}>...</div>\n\n<!-- with an attachment -->\n<div {@attach fromAction(foo, () => bar)}>...</div>\n```\n\n<div class=\"ts-block\">\n\n```dts\nfunction fromAction<\n\tE extends EventTarget,\n\tT extends unknown\n>(\n\taction:\n\t\t| Action<E, T>\n\t\t| ((element: E, arg: T) => void | ActionReturn<T>),\n\tfn: () => T\n): Attachment<E>;\n```\n\n</div>\n\n<div class=\"ts-block\">\n\n```dts\nfunction fromAction<E extends EventTarget>(\n\taction:\n\t\t| Action<E, void>\n\t\t| ((element: E) => void | ActionReturn<void>)\n): Attachment<E>;\n```\n\n</div>\n\n\n\n## Attachment\n\nAn [attachment](/docs/svelte/@attach) is a function that runs when an element is mounted\nto the DOM, and optionally returns a function that is called when the element is later removed.\n\nIt can be attached to an element with an `{@attach ...}` tag, or by spreading an object containing\na property created with [`createAttachmentKey`](/docs/svelte/svelte-attachments#createAttachmentKey).\n\n<div class=\"ts-block\">\n\n```dts\ninterface Attachment<T extends EventTarget = Element> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\n(element: T): void | (() => void);\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>",
    "svelte/svelte-compiler": "```js\n// @noErrors\nimport {\n\tVERSION,\n\tcompile,\n\tcompileModule,\n\tmigrate,\n\tparse,\n\tpreprocess,\n\twalk\n} from 'svelte/compiler';\n```\n\n## VERSION\n\nThe current version, as set in package.json.\n\n<div class=\"ts-block\">\n\n```dts\nconst VERSION: string;\n```\n\n</div>\n\n\n\n## compile\n\n`compile` converts your `.svelte` source code into a JavaScript module that exports a component\n\n<div class=\"ts-block\">\n\n```dts\nfunction compile(\n\tsource: string,\n\toptions: CompileOptions\n): CompileResult;\n```\n\n</div>\n\n\n\n## compileModule\n\n`compileModule` takes your JavaScript source code containing runes, and turns it into a JavaScript module.\n\n<div class=\"ts-block\">\n\n```dts\nfunction compileModule(\n\tsource: string,\n\toptions: ModuleCompileOptions\n): CompileResult;\n```\n\n</div>\n\n\n\n## migrate\n\nDoes a best-effort migration of Svelte code towards using runes, event attributes and render tags.\nMay throw an error if the code is too complex to migrate automatically.\n\n<div class=\"ts-block\">\n\n```dts\nfunction migrate(\n\tsource: string,\n\t{\n\t\tfilename,\n\t\tuse_ts\n\t}?:\n\t\t| {\n\t\t\t\tfilename?: string;\n\t\t\t\tuse_ts?: boolean;\n\t\t  }\n\t\t| undefined\n): {\n\tcode: string;\n};\n```\n\n</div>\n\n\n\n## parse\n\nThe parse function parses a component, returning only its abstract syntax tree.\n\nThe `modern` option (`false` by default in Svelte 5) makes the parser return a modern AST instead of the legacy AST.\n`modern` will become `true` by default in Svelte 6, and the option will be removed in Svelte 7.\n\n<div class=\"ts-block\">\n\n```dts\nfunction parse(\n\tsource: string,\n\toptions: {\n\t\tfilename?: string;\n\t\tmodern: true;\n\t\tloose?: boolean;\n\t}\n): AST.Root;\n```\n\n</div>\n\n<div class=\"ts-block\">\n\n```dts\nfunction parse(\n\tsource: string,\n\toptions?:\n\t\t| {\n\t\t\t\tfilename?: string;\n\t\t\t\tmodern?: false;\n\t\t\t\tloose?: boolean;\n\t\t  }\n\t\t| undefined\n): Record<string, any>;\n```\n\n</div>\n\n\n\n## preprocess\n\nThe preprocess function provides convenient hooks for arbitrarily transforming component source code.\nFor example, it can be used to convert a `<style lang=\"sass\">` block into vanilla CSS.\n\n<div class=\"ts-block\">\n\n```dts\nfunction preprocess(\n\tsource: string,\n\tpreprocessor: PreprocessorGroup | PreprocessorGroup[],\n\toptions?:\n\t\t| {\n\t\t\t\tfilename?: string;\n\t\t  }\n\t\t| undefined\n): Promise<Processed>;\n```\n\n</div>\n\n\n\n## walk\n\n<blockquote class=\"tag deprecated note\">\n\nReplace this with `import { walk } from 'estree-walker'`\n\n</blockquote>\n\n<div class=\"ts-block\">\n\n```dts\nfunction walk(): never;\n```\n\n</div>\n\n\n\n## AST\n\n<div class=\"ts-block\">\n\n```dts\nnamespace AST {\n\texport interface BaseNode {\n\t\ttype: string;\n\t\tstart: number;\n\t\tend: number;\n\t}\n\n\texport interface Fragment {\n\t\ttype: 'Fragment';\n\t\tnodes: Array<\n\t\t\tText | Tag | ElementLike | Block | Comment\n\t\t>;\n\t}\n\n\texport interface Root extends BaseNode {\n\t\ttype: 'Root';\n\t\t/**\n\t\t * Inline options provided by `<svelte:options>` — these override options passed to `compile(...)`\n\t\t */\n\t\toptions: SvelteOptions | null;\n\t\tfragment: Fragment;\n\t\t/** The parsed `<style>` element, if exists */\n\t\tcss: AST.CSS.StyleSheet | null;\n\t\t/** The parsed `<script>` element, if exists */\n\t\tinstance: Script | null;\n\t\t/** The parsed `<script module>` element, if exists */\n\t\tmodule: Script | null;\n\t\t/** Comments found in <script> and {expressions} */\n\t\tcomments: JSComment[];\n\t}\n\n\texport interface SvelteOptions {\n\t\t// start/end info (needed for warnings and for our Prettier plugin)\n\t\tstart: number;\n\t\tend: number;\n\t\t// options\n\t\trunes?: boolean;\n\t\timmutable?: boolean;\n\t\taccessors?: boolean;\n\t\tpreserveWhitespace?: boolean;\n\t\tnamespace?: Namespace;\n\t\tcss?: 'injected';\n\t\tcustomElement?: {\n\t\t\ttag?: string;\n\t\t\tshadow?: 'open' | 'none';\n\t\t\tprops?: Record<\n\t\t\t\tstring,\n\t\t\t\t{\n\t\t\t\t\tattribute?: string;\n\t\t\t\t\treflect?: boolean;\n\t\t\t\t\ttype?:\n\t\t\t\t\t\t| 'Array'\n\t\t\t\t\t\t| 'Boolean'\n\t\t\t\t\t\t| 'Number'\n\t\t\t\t\t\t| 'Object'\n\t\t\t\t\t\t| 'String';\n\t\t\t\t}\n\t\t\t>;\n\t\t\t/**\n\t\t\t * Is of type\n\t\t\t * ```ts\n\t\t\t * (ceClass: new () => HTMLElement) => new () => HTMLElement\n\t\t\t * ```\n\t\t\t */\n\t\t\textend?: ArrowFunctionExpression | Identifier;\n\t\t};\n\t\tattributes: Attribute[];\n\t}\n\n\t/** Static text */\n\texport interface Text extends BaseNode {\n\t\ttype: 'Text';\n\t\t/** Text with decoded HTML entities */\n\t\tdata: string;\n\t\t/** The original text, with undecoded HTML entities */\n\t\traw: string;\n\t}\n\n\t/** A (possibly reactive) template expression — `{...}` */\n\texport interface ExpressionTag extends BaseNode {\n\t\ttype: 'ExpressionTag';\n\t\texpression: Expression;\n\t}\n\n\t/** A (possibly reactive) HTML template expression — `{@html ...}` */\n\texport interface HtmlTag extends BaseNode {\n\t\ttype: 'HtmlTag';\n\t\texpression: Expression;\n\t}\n\n\t/** An HTML comment */\n\t// TODO rename to disambiguate\n\texport interface Comment extends BaseNode {\n\t\ttype: 'Comment';\n\t\t/** the contents of the comment */\n\t\tdata: string;\n\t}\n\n\t/** A `{@const ...}` tag */\n\texport interface ConstTag extends BaseNode {\n\t\ttype: 'ConstTag';\n\t\tdeclaration: VariableDeclaration & {\n\t\t\tdeclarations: [\n\t\t\t\tVariableDeclarator & {\n\t\t\t\t\tid: Pattern;\n\t\t\t\t\tinit: Expression;\n\t\t\t\t}\n\t\t\t];\n\t\t};\n\t}\n\n\t/** A `{@debug ...}` tag */\n\texport interface DebugTag extends BaseNode {\n\t\ttype: 'DebugTag';\n\t\tidentifiers: Identifier[];\n\t}\n\n\t/** A `{@render foo(...)} tag */\n\texport interface RenderTag extends BaseNode {\n\t\ttype: 'RenderTag';\n\t\texpression:\n\t\t\t| SimpleCallExpression\n\t\t\t| (ChainExpression & {\n\t\t\t\t\texpression: SimpleCallExpression;\n\t\t\t  });\n\t}\n\n\t/** A `{@attach foo(...)} tag */\n\texport interface AttachTag extends BaseNode {\n\t\ttype: 'AttachTag';\n\t\texpression: Expression;\n\t}\n\n\t/** An `animate:` directive */\n\texport interface AnimateDirective extends BaseNode {\n\t\ttype: 'AnimateDirective';\n\t\t/** The 'x' in `animate:x` */\n\t\tname: string;\n\t\t/** The y in `animate:x={y}` */\n\t\texpression: null | Expression;\n\t}\n\n\t/** A `bind:` directive */\n\texport interface BindDirective extends BaseNode {\n\t\ttype: 'BindDirective';\n\t\t/** The 'x' in `bind:x` */\n\t\tname: string;\n\t\t/** The y in `bind:x={y}` */\n\t\texpression:\n\t\t\t| Identifier\n\t\t\t| MemberExpression\n\t\t\t| SequenceExpression;\n\t}\n\n\t/** A `class:` directive */\n\texport interface ClassDirective extends BaseNode {\n\t\ttype: 'ClassDirective';\n\t\t/** The 'x' in `class:x` */\n\t\tname: 'class';\n\t\t/** The 'y' in `class:x={y}`, or the `x` in `class:x` */\n\t\texpression: Expression;\n\t}\n\n\t/** A `let:` directive */\n\texport interface LetDirective extends BaseNode {\n\t\ttype: 'LetDirective';\n\t\t/** The 'x' in `let:x` */\n\t\tname: string;\n\t\t/** The 'y' in `let:x={y}` */\n\t\texpression:\n\t\t\t| null\n\t\t\t| Identifier\n\t\t\t| ArrayExpression\n\t\t\t| ObjectExpression;\n\t}\n\n\t/** An `on:` directive */\n\texport interface OnDirective extends BaseNode {\n\t\ttype: 'OnDirective';\n\t\t/** The 'x' in `on:x` */\n\t\tname: string;\n\t\t/** The 'y' in `on:x={y}` */\n\t\texpression: null | Expression;\n\t\tmodifiers: Array<\n\t\t\t| 'capture'\n\t\t\t| 'nonpassive'\n\t\t\t| 'once'\n\t\t\t| 'passive'\n\t\t\t| 'preventDefault'\n\t\t\t| 'self'\n\t\t\t| 'stopImmediatePropagation'\n\t\t\t| 'stopPropagation'\n\t\t\t| 'trusted'\n\t\t>;\n\t}\n\n\t/** A `style:` directive */\n\texport interface StyleDirective extends BaseNode {\n\t\ttype: 'StyleDirective';\n\t\t/** The 'x' in `style:x` */\n\t\tname: string;\n\t\t/** The 'y' in `style:x={y}` */\n\t\tvalue:\n\t\t\t| true\n\t\t\t| ExpressionTag\n\t\t\t| Array<ExpressionTag | Text>;\n\t\tmodifiers: Array<'important'>;\n\t}\n\n\t// TODO have separate in/out/transition directives\n\t/** A `transition:`, `in:` or `out:` directive */\n\texport interface TransitionDirective extends BaseNode {\n\t\ttype: 'TransitionDirective';\n\t\t/** The 'x' in `transition:x` */\n\t\tname: string;\n\t\t/** The 'y' in `transition:x={y}` */\n\t\texpression: null | Expression;\n\t\tmodifiers: Array<'local' | 'global'>;\n\t\t/** True if this is a `transition:` or `in:` directive */\n\t\tintro: boolean;\n\t\t/** True if this is a `transition:` or `out:` directive */\n\t\toutro: boolean;\n\t}\n\n\t/** A `use:` directive */\n\texport interface UseDirective extends BaseNode {\n\t\ttype: 'UseDirective';\n\t\t/** The 'x' in `use:x` */\n\t\tname: string;\n\t\t/** The 'y' in `use:x={y}` */\n\t\texpression: null | Expression;\n\t}\n\n\tinterface BaseElement extends BaseNode {\n\t\tname: string;\n\t\tattributes: Array<\n\t\t\tAttribute | SpreadAttribute | Directive | AttachTag\n\t\t>;\n\t\tfragment: Fragment;\n\t}\n\n\texport interface Component extends BaseElement {\n\t\ttype: 'Component';\n\t}\n\n\texport interface TitleElement extends BaseElement {\n\t\ttype: 'TitleElement';\n\t\tname: 'title';\n\t}\n\n\texport interface SlotElement extends BaseElement {\n\t\ttype: 'SlotElement';\n\t\tname: 'slot';\n\t}\n\n\texport interface RegularElement extends BaseElement {\n\t\ttype: 'RegularElement';\n\t}\n\n\texport interface SvelteBody extends BaseElement {\n\t\ttype: 'SvelteBody';\n\t\tname: 'svelte:body';\n\t}\n\n\texport interface SvelteComponent extends BaseElement {\n\t\ttype: 'SvelteComponent';\n\t\tname: 'svelte:component';\n\t\texpression: Expression;\n\t}\n\n\texport interface SvelteDocument extends BaseElement {\n\t\ttype: 'SvelteDocument';\n\t\tname: 'svelte:document';\n\t}\n\n\texport interface SvelteElement extends BaseElement {\n\t\ttype: 'SvelteElement';\n\t\tname: 'svelte:element';\n\t\ttag: Expression;\n\t}\n\n\texport interface SvelteFragment extends BaseElement {\n\t\ttype: 'SvelteFragment';\n\t\tname: 'svelte:fragment';\n\t}\n\n\texport interface SvelteBoundary extends BaseElement {\n\t\ttype: 'SvelteBoundary';\n\t\tname: 'svelte:boundary';\n\t}\n\n\texport interface SvelteHead extends BaseElement {\n\t\ttype: 'SvelteHead';\n\t\tname: 'svelte:head';\n\t}\n\n\t/** This is only an intermediate representation while parsing, it doesn't exist in the final AST */\n\texport interface SvelteOptionsRaw extends BaseElement {\n\t\ttype: 'SvelteOptions';\n\t\tname: 'svelte:options';\n\t}\n\n\texport interface SvelteSelf extends BaseElement {\n\t\ttype: 'SvelteSelf';\n\t\tname: 'svelte:self';\n\t}\n\n\texport interface SvelteWindow extends BaseElement {\n\t\ttype: 'SvelteWindow';\n\t\tname: 'svelte:window';\n\t}\n\n\t/** An `{#each ...}` block */\n\texport interface EachBlock extends BaseNode {\n\t\ttype: 'EachBlock';\n\t\texpression: Expression;\n\t\t/** The `entry` in `{#each item as entry}`. `null` if `as` part is omitted */\n\t\tcontext: Pattern | null;\n\t\tbody: Fragment;\n\t\tfallback?: Fragment;\n\t\tindex?: string;\n\t\tkey?: Expression;\n\t}\n\n\t/** An `{#if ...}` block */\n\texport interface IfBlock extends BaseNode {\n\t\ttype: 'IfBlock';\n\t\telseif: boolean;\n\t\ttest: Expression;\n\t\tconsequent: Fragment;\n\t\talternate: Fragment | null;\n\t}\n\n\t/** An `{#await ...}` block */\n\texport interface AwaitBlock extends BaseNode {\n\t\ttype: 'AwaitBlock';\n\t\texpression: Expression;\n\t\t// TODO can/should we move these inside the ThenBlock and CatchBlock?\n\t\t/** The resolved value inside the `then` block */\n\t\tvalue: Pattern | null;\n\t\t/** The rejection reason inside the `catch` block */\n\t\terror: Pattern | null;\n\t\tpending: Fragment | null;\n\t\tthen: Fragment | null;\n\t\tcatch: Fragment | null;\n\t}\n\n\texport interface KeyBlock extends BaseNode {\n\t\ttype: 'KeyBlock';\n\t\texpression: Expression;\n\t\tfragment: Fragment;\n\t}\n\n\texport interface SnippetBlock extends BaseNode {\n\t\ttype: 'SnippetBlock';\n\t\texpression: Identifier;\n\t\tparameters: Pattern[];\n\t\ttypeParams?: string;\n\t\tbody: Fragment;\n\t}\n\n\texport interface Attribute extends BaseNode {\n\t\ttype: 'Attribute';\n\t\tname: string;\n\t\t/**\n\t\t * Quoted/string values are represented by an array, even if they contain a single expression like `\"{x}\"`\n\t\t */\n\t\tvalue:\n\t\t\t| true\n\t\t\t| ExpressionTag\n\t\t\t| Array<Text | ExpressionTag>;\n\t}\n\n\texport interface SpreadAttribute extends BaseNode {\n\t\ttype: 'SpreadAttribute';\n\t\texpression: Expression;\n\t}\n\n\texport interface Script extends BaseNode {\n\t\ttype: 'Script';\n\t\tcontext: 'default' | 'module';\n\t\tcontent: Program;\n\t\tattributes: Attribute[];\n\t}\n\n\texport interface JSComment {\n\t\ttype: 'Line' | 'Block';\n\t\tvalue: string;\n\t\tstart: number;\n\t\tend: number;\n\t\tloc: {\n\t\t\tstart: { line: number; column: number };\n\t\t\tend: { line: number; column: number };\n\t\t};\n\t}\n\n\texport type AttributeLike =\n\t\t| Attribute\n\t\t| SpreadAttribute\n\t\t| Directive;\n\n\texport type Directive =\n\t\t| AST.AnimateDirective\n\t\t| AST.BindDirective\n\t\t| AST.ClassDirective\n\t\t| AST.LetDirective\n\t\t| AST.OnDirective\n\t\t| AST.StyleDirective\n\t\t| AST.TransitionDirective\n\t\t| AST.UseDirective;\n\n\texport type Block =\n\t\t| AST.EachBlock\n\t\t| AST.IfBlock\n\t\t| AST.AwaitBlock\n\t\t| AST.KeyBlock\n\t\t| AST.SnippetBlock;\n\n\texport type ElementLike =\n\t\t| AST.Component\n\t\t| AST.TitleElement\n\t\t| AST.SlotElement\n\t\t| AST.RegularElement\n\t\t| AST.SvelteBody\n\t\t| AST.SvelteBoundary\n\t\t| AST.SvelteComponent\n\t\t| AST.SvelteDocument\n\t\t| AST.SvelteElement\n\t\t| AST.SvelteFragment\n\t\t| AST.SvelteHead\n\t\t| AST.SvelteOptionsRaw\n\t\t| AST.SvelteSelf\n\t\t| AST.SvelteWindow\n\t\t| AST.SvelteBoundary;\n\n\texport type Tag =\n\t\t| AST.AttachTag\n\t\t| AST.ConstTag\n\t\t| AST.DebugTag\n\t\t| AST.ExpressionTag\n\t\t| AST.HtmlTag\n\t\t| AST.RenderTag;\n\n\texport type TemplateNode =\n\t\t| AST.Root\n\t\t| AST.Text\n\t\t| Tag\n\t\t| ElementLike\n\t\t| AST.Attribute\n\t\t| AST.SpreadAttribute\n\t\t| Directive\n\t\t| AST.AttachTag\n\t\t| AST.Comment\n\t\t| Block;\n\n\texport type SvelteNode =\n\t\t| Node\n\t\t| TemplateNode\n\t\t| AST.Fragment\n\t\t| _CSS.Node\n\t\t| Script;\n\n\texport type { _CSS as CSS };\n}\n```\n\n</div>\n\n## CompileError\n\n<div class=\"ts-block\">\n\n```dts\ninterface CompileError extends ICompileDiagnostic {}\n```\n\n</div>\n\n## CompileOptions\n\n<div class=\"ts-block\">\n\n```dts\ninterface CompileOptions extends ModuleCompileOptions {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nname?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\nSets the name of the resulting JavaScript class (though the compiler will rename it if it would otherwise conflict with other variables in scope).\nIf unspecified, will be inferred from `filename`\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ncustomElement?: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `false`\n\n</div>\n\nIf `true`, tells the compiler to generate a custom element constructor instead of a regular Svelte component.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\naccessors?: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `false`\n- <span class=\"tag deprecated\">deprecated</span> This will have no effect in runes mode\n\n</div>\n\nIf `true`, getters and setters will be created for the component's props. If `false`, they will only be created for readonly exported values (i.e. those declared with `const`, `class` and `function`). If compiling with `customElement: true` this option defaults to `true`.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nnamespace?: Namespace;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `'html'`\n\n</div>\n\nThe namespace of the element; e.g., `\"html\"`, `\"svg\"`, `\"mathml\"`.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nimmutable?: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `false`\n- <span class=\"tag deprecated\">deprecated</span> This will have no effect in runes mode\n\n</div>\n\nIf `true`, tells the compiler that you promise not to mutate any objects.\nThis allows it to be less conservative about checking whether values have changed.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ncss?: 'injected' | 'external';\n```\n\n<div class=\"ts-block-property-details\">\n\n- `'injected'`: styles will be included in the `head` when using `render(...)`, and injected into the document (if not already present) when the component mounts. For components compiled as custom elements, styles are injected to the shadow root.\n- `'external'`: the CSS will only be returned in the `css` field of the compilation result. Most Svelte bundler plugins will set this to `'external'` and use the CSS that is statically generated for better performance, as it will result in smaller JavaScript bundles and the output can be served as cacheable `.css` files.\nThis is always `'injected'` when compiling with `customElement` mode.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ncssHash?: CssHashGetter;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `undefined`\n\n</div>\n\nA function that takes a `{ hash, css, name, filename }` argument and returns the string that is used as a classname for scoped CSS.\nIt defaults to returning `svelte-${hash(filename ?? css)}`.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\npreserveComments?: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `false`\n\n</div>\n\nIf `true`, your HTML comments will be preserved in the output. By default, they are stripped out.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\npreserveWhitespace?: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `false`\n\n</div>\n\nIf `true`, whitespace inside and between elements is kept as you typed it, rather than removed or collapsed to a single space where possible.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nfragments?: 'html' | 'tree';\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `'html'`\n- <span class=\"tag since\">available since</span> v5.33\n\n</div>\n\nWhich strategy to use when cloning DOM fragments:\n\n- `html` populates a `<template>` with `innerHTML` and clones it. This is faster, but cannot be used if your app's [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/CSP) includes [`require-trusted-types-for 'script'`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Content-Security-Policy/require-trusted-types-for)\n- `tree` creates the fragment one element at a time and _then_ clones it. This is slower, but works everywhere\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nrunes?: boolean | undefined;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `undefined`\n\n</div>\n\nSet to `true` to force the compiler into runes mode, even if there are no indications of runes usage.\nSet to `false` to force the compiler into ignoring runes, even if there are indications of runes usage.\nSet to `undefined` (the default) to infer runes mode from the component code.\nIs always `true` for JS/TS modules compiled with Svelte.\nWill be `true` by default in Svelte 6.\nNote that setting this to `true` in your `svelte.config.js` will force runes mode for your entire project, including components in `node_modules`,\nwhich is likely not what you want. If you're using Vite, consider using [dynamicCompileOptions](https://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/config.md#dynamiccompileoptions) instead.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ndiscloseVersion?: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `true`\n\n</div>\n\nIf `true`, exposes the Svelte major version in the browser by adding it to a `Set` stored in the global `window.__svelte.v`.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ncompatibility?: {/*…*/}\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag deprecated\">deprecated</span> Use these only as a temporary solution before migrating your code\n\n</div>\n\n<div class=\"ts-block-property-children\"><div class=\"ts-block-property\">\n\n```dts\ncomponentApi?: 4 | 5;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `5`\n\n</div>\n\nApplies a transformation so that the default export of Svelte files can still be instantiated the same way as in Svelte 4 —\nas a class when compiling for the browser (as though using `createClassComponent(MyComponent, {...})` from `svelte/legacy`)\nor as an object with a `.render(...)` method when compiling for the server\n\n</div>\n</div></div>\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nsourcemap?: object | string;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `null`\n\n</div>\n\nAn initial sourcemap that will be merged into the final output sourcemap.\nThis is usually the preprocessor sourcemap.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\noutputFilename?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `null`\n\n</div>\n\nUsed for your JavaScript sourcemap.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ncssOutputFilename?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `null`\n\n</div>\n\nUsed for your CSS sourcemap.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nhmr?: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `false`\n\n</div>\n\nIf `true`, compiles components with hot reloading support.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nmodernAst?: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `false`\n\n</div>\n\nIf `true`, returns the modern version of the AST.\nWill become `true` by default in Svelte 6, and the option will be removed in Svelte 7.\n\n</div>\n</div></div>\n\n## CompileResult\n\nThe return value of `compile` from `svelte/compiler`\n\n<div class=\"ts-block\">\n\n```dts\ninterface CompileResult {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\njs: {/*…*/}\n```\n\n<div class=\"ts-block-property-details\">\n\nThe compiled JavaScript\n\n<div class=\"ts-block-property-children\"><div class=\"ts-block-property\">\n\n```dts\ncode: string;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe generated code\n\n</div>\n</div>\n<div class=\"ts-block-property\">\n\n```dts\nmap: SourceMap;\n```\n\n<div class=\"ts-block-property-details\">\n\nA source map\n\n</div>\n</div></div>\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ncss: null | {\n\t/** The generated code */\n\tcode: string;\n\t/** A source map */\n\tmap: SourceMap;\n\t/** Whether or not the CSS includes global rules */\n\thasGlobal: boolean;\n};\n```\n\n<div class=\"ts-block-property-details\">\n\nThe compiled CSS\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nwarnings: Warning[];\n```\n\n<div class=\"ts-block-property-details\">\n\nAn array of warning objects that were generated during compilation. Each warning has several properties:\n- `code` is a string identifying the category of warning\n- `message` describes the issue in human-readable terms\n- `start` and `end`, if the warning relates to a specific location, are objects with `line`, `column` and `character` properties\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nmetadata: {/*…*/}\n```\n\n<div class=\"ts-block-property-details\">\n\nMetadata about the compiled component\n\n<div class=\"ts-block-property-children\"><div class=\"ts-block-property\">\n\n```dts\nrunes: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\nWhether the file was compiled in runes mode, either because of an explicit option or inferred from usage.\nFor `compileModule`, this is always `true`\n\n</div>\n</div></div>\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nast: any;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe AST\n\n</div>\n</div></div>\n\n## MarkupPreprocessor\n\nA markup preprocessor that takes a string of code and returns a processed version.\n\n<div class=\"ts-block\">\n\n```dts\ntype MarkupPreprocessor = (options: {\n\t/**\n\t * The whole Svelte file content\n\t */\n\tcontent: string;\n\t/**\n\t * The filename of the Svelte file\n\t */\n\tfilename?: string;\n}) => Processed | void | Promise<Processed | void>;\n```\n\n</div>\n\n## ModuleCompileOptions\n\n<div class=\"ts-block\">\n\n```dts\ninterface ModuleCompileOptions {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\ndev?: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `false`\n\n</div>\n\nIf `true`, causes extra code to be added that will perform runtime checks and provide debugging information during development.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ngenerate?: 'client' | 'server' | false;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `'client'`\n\n</div>\n\nIf `\"client\"`, Svelte emits code designed to run in the browser.\nIf `\"server\"`, Svelte emits code suitable for server-side rendering.\nIf `false`, nothing is generated. Useful for tooling that is only interested in warnings.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nfilename?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\nUsed for debugging hints and sourcemaps. Your bundler plugin will set it automatically.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nrootDir?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag\">default</span> `process.cwd() on node-like environments, undefined elsewhere`\n\n</div>\n\nUsed for ensuring filenames don't leak filesystem information. Your bundler plugin will set it automatically.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nwarningFilter?: (warning: Warning) => boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\nA function that gets a `Warning` as an argument and returns a boolean.\nUse this to filter out warnings. Return `true` to keep the warning, `false` to discard it.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nexperimental?: {/*…*/}\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag since\">available since</span> v5.36\n\n</div>\n\nExperimental options\n\n<div class=\"ts-block-property-children\"><div class=\"ts-block-property\">\n\n```dts\nasync?: boolean;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag since\">available since</span> v5.36\n\n</div>\n\nAllow `await` keyword in deriveds, template expressions, and the top level of components\n\n</div>\n</div></div>\n\n</div>\n</div></div>\n\n## Preprocessor\n\nA script/style preprocessor that takes a string of code and returns a processed version.\n\n<div class=\"ts-block\">\n\n```dts\ntype Preprocessor = (options: {\n\t/**\n\t * The script/style tag content\n\t */\n\tcontent: string;\n\t/**\n\t * The attributes on the script/style tag\n\t */\n\tattributes: Record<string, string | boolean>;\n\t/**\n\t * The whole Svelte file content\n\t */\n\tmarkup: string;\n\t/**\n\t * The filename of the Svelte file\n\t */\n\tfilename?: string;\n}) => Processed | void | Promise<Processed | void>;\n```\n\n</div>\n\n## PreprocessorGroup\n\nA preprocessor group is a set of preprocessors that are applied to a Svelte file.\n\n<div class=\"ts-block\">\n\n```dts\ninterface PreprocessorGroup {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nname?: string;\n```\n\n<div class=\"ts-block-property-details\">\n\nName of the preprocessor. Will be a required option in the next major version\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nmarkup?: MarkupPreprocessor;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nstyle?: Preprocessor;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nscript?: Preprocessor;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n## Processed\n\nThe result of a preprocessor run. If the preprocessor does not return a result, it is assumed that the code is unchanged.\n\n<div class=\"ts-block\">\n\n```dts\ninterface Processed {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\ncode: string;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe new code\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nmap?: string | object;\n```\n\n<div class=\"ts-block-property-details\">\n\nA source map mapping back to the original code\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ndependencies?: string[];\n```\n\n<div class=\"ts-block-property-details\">\n\nA list of additional files to watch for changes\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nattributes?: Record<string, string | boolean>;\n```\n\n<div class=\"ts-block-property-details\">\n\nOnly for script/style preprocessors: The updated attributes to set on the tag. If undefined, attributes stay unchanged.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ntoString?: () => string;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n## Warning\n\n<div class=\"ts-block\">\n\n```dts\ninterface Warning extends ICompileDiagnostic {}\n```\n\n</div>",
    "svelte/svelte-easing": "```js\n// @noErrors\nimport {\n\tbackIn,\n\tbackInOut,\n\tbackOut,\n\tbounceIn,\n\tbounceInOut,\n\tbounceOut,\n\tcircIn,\n\tcircInOut,\n\tcircOut,\n\tcubicIn,\n\tcubicInOut,\n\tcubicOut,\n\telasticIn,\n\telasticInOut,\n\telasticOut,\n\texpoIn,\n\texpoInOut,\n\texpoOut,\n\tlinear,\n\tquadIn,\n\tquadInOut,\n\tquadOut,\n\tquartIn,\n\tquartInOut,\n\tquartOut,\n\tquintIn,\n\tquintInOut,\n\tquintOut,\n\tsineIn,\n\tsineInOut,\n\tsineOut\n} from 'svelte/easing';\n```\n\n## backIn\n\n<div class=\"ts-block\">\n\n```dts\nfunction backIn(t: number): number;\n```\n\n</div>\n\n\n\n## backInOut\n\n<div class=\"ts-block\">\n\n```dts\nfunction backInOut(t: number): number;\n```\n\n</div>\n\n\n\n## backOut\n\n<div class=\"ts-block\">\n\n```dts\nfunction backOut(t: number): number;\n```\n\n</div>\n\n\n\n## bounceIn\n\n<div class=\"ts-block\">\n\n```dts\nfunction bounceIn(t: number): number;\n```\n\n</div>\n\n\n\n## bounceInOut\n\n<div class=\"ts-block\">\n\n```dts\nfunction bounceInOut(t: number): number;\n```\n\n</div>\n\n\n\n## bounceOut\n\n<div class=\"ts-block\">\n\n```dts\nfunction bounceOut(t: number): number;\n```\n\n</div>\n\n\n\n## circIn\n\n<div class=\"ts-block\">\n\n```dts\nfunction circIn(t: number): number;\n```\n\n</div>\n\n\n\n## circInOut\n\n<div class=\"ts-block\">\n\n```dts\nfunction circInOut(t: number): number;\n```\n\n</div>\n\n\n\n## circOut\n\n<div class=\"ts-block\">\n\n```dts\nfunction circOut(t: number): number;\n```\n\n</div>\n\n\n\n## cubicIn\n\n<div class=\"ts-block\">\n\n```dts\nfunction cubicIn(t: number): number;\n```\n\n</div>\n\n\n\n## cubicInOut\n\n<div class=\"ts-block\">\n\n```dts\nfunction cubicInOut(t: number): number;\n```\n\n</div>\n\n\n\n## cubicOut\n\n<div class=\"ts-block\">\n\n```dts\nfunction cubicOut(t: number): number;\n```\n\n</div>\n\n\n\n## elasticIn\n\n<div class=\"ts-block\">\n\n```dts\nfunction elasticIn(t: number): number;\n```\n\n</div>\n\n\n\n## elasticInOut\n\n<div class=\"ts-block\">\n\n```dts\nfunction elasticInOut(t: number): number;\n```\n\n</div>\n\n\n\n## elasticOut\n\n<div class=\"ts-block\">\n\n```dts\nfunction elasticOut(t: number): number;\n```\n\n</div>\n\n\n\n## expoIn\n\n<div class=\"ts-block\">\n\n```dts\nfunction expoIn(t: number): number;\n```\n\n</div>\n\n\n\n## expoInOut\n\n<div class=\"ts-block\">\n\n```dts\nfunction expoInOut(t: number): number;\n```\n\n</div>\n\n\n\n## expoOut\n\n<div class=\"ts-block\">\n\n```dts\nfunction expoOut(t: number): number;\n```\n\n</div>\n\n\n\n## linear\n\n<div class=\"ts-block\">\n\n```dts\nfunction linear(t: number): number;\n```\n\n</div>\n\n\n\n## quadIn\n\n<div class=\"ts-block\">\n\n```dts\nfunction quadIn(t: number): number;\n```\n\n</div>\n\n\n\n## quadInOut\n\n<div class=\"ts-block\">\n\n```dts\nfunction quadInOut(t: number): number;\n```\n\n</div>\n\n\n\n## quadOut\n\n<div class=\"ts-block\">\n\n```dts\nfunction quadOut(t: number): number;\n```\n\n</div>\n\n\n\n## quartIn\n\n<div class=\"ts-block\">\n\n```dts\nfunction quartIn(t: number): number;\n```\n\n</div>\n\n\n\n## quartInOut\n\n<div class=\"ts-block\">\n\n```dts\nfunction quartInOut(t: number): number;\n```\n\n</div>\n\n\n\n## quartOut\n\n<div class=\"ts-block\">\n\n```dts\nfunction quartOut(t: number): number;\n```\n\n</div>\n\n\n\n## quintIn\n\n<div class=\"ts-block\">\n\n```dts\nfunction quintIn(t: number): number;\n```\n\n</div>\n\n\n\n## quintInOut\n\n<div class=\"ts-block\">\n\n```dts\nfunction quintInOut(t: number): number;\n```\n\n</div>\n\n\n\n## quintOut\n\n<div class=\"ts-block\">\n\n```dts\nfunction quintOut(t: number): number;\n```\n\n</div>\n\n\n\n## sineIn\n\n<div class=\"ts-block\">\n\n```dts\nfunction sineIn(t: number): number;\n```\n\n</div>\n\n\n\n## sineInOut\n\n<div class=\"ts-block\">\n\n```dts\nfunction sineInOut(t: number): number;\n```\n\n</div>\n\n\n\n## sineOut\n\n<div class=\"ts-block\">\n\n```dts\nfunction sineOut(t: number): number;\n```\n\n</div>",
    "svelte/svelte-events": "```js\n// @noErrors\nimport { on } from 'svelte/events';\n```\n\n## on\n\nAttaches an event handler to the window and returns a function that removes the handler. Using this\nrather than `addEventListener` will preserve the correct order relative to handlers added declaratively\n(with attributes like `onclick`), which use event delegation for performance reasons\n\n<div class=\"ts-block\">\n\n```dts\nfunction on<Type extends keyof WindowEventMap>(\n\twindow: Window,\n\ttype: Type,\n\thandler: (\n\t\tthis: Window,\n\t\tevent: WindowEventMap[Type]\n\t) => any,\n\toptions?: AddEventListenerOptions | undefined\n): () => void;\n```\n\n</div>\n\n<div class=\"ts-block\">\n\n```dts\nfunction on<Type extends keyof DocumentEventMap>(\n\tdocument: Document,\n\ttype: Type,\n\thandler: (\n\t\tthis: Document,\n\t\tevent: DocumentEventMap[Type]\n\t) => any,\n\toptions?: AddEventListenerOptions | undefined\n): () => void;\n```\n\n</div>\n\n<div class=\"ts-block\">\n\n```dts\nfunction on<\n\tElement extends HTMLElement,\n\tType extends keyof HTMLElementEventMap\n>(\n\telement: Element,\n\ttype: Type,\n\thandler: (\n\t\tthis: Element,\n\t\tevent: HTMLElementEventMap[Type]\n\t) => any,\n\toptions?: AddEventListenerOptions | undefined\n): () => void;\n```\n\n</div>\n\n<div class=\"ts-block\">\n\n```dts\nfunction on<\n\tElement extends MediaQueryList,\n\tType extends keyof MediaQueryListEventMap\n>(\n\telement: Element,\n\ttype: Type,\n\thandler: (\n\t\tthis: Element,\n\t\tevent: MediaQueryListEventMap[Type]\n\t) => any,\n\toptions?: AddEventListenerOptions | undefined\n): () => void;\n```\n\n</div>\n\n<div class=\"ts-block\">\n\n```dts\nfunction on(\n\telement: EventTarget,\n\ttype: string,\n\thandler: EventListener,\n\toptions?: AddEventListenerOptions | undefined\n): () => void;\n```\n\n</div>",
    "svelte/svelte-legacy": "This module provides various functions for use during the migration, since some features can't be replaced one to one with new features. All imports are marked as deprecated and should be migrated away from over time.\n\n\n\n```js\n// @noErrors\nimport {\n\tasClassComponent,\n\tcreateBubbler,\n\tcreateClassComponent,\n\thandlers,\n\tnonpassive,\n\tonce,\n\tpassive,\n\tpreventDefault,\n\trun,\n\tself,\n\tstopImmediatePropagation,\n\tstopPropagation,\n\ttrusted\n} from 'svelte/legacy';\n```\n\n## asClassComponent\n\n<blockquote class=\"tag deprecated note\">\n\nUse this only as a temporary solution to migrate your imperative component code to Svelte 5.\n\n</blockquote>\n\nTakes the component function and returns a Svelte 4 compatible component constructor.\n\n<div class=\"ts-block\">\n\n```dts\nfunction asClassComponent<\n\tProps extends Record<string, any>,\n\tExports extends Record<string, any>,\n\tEvents extends Record<string, any>,\n\tSlots extends Record<string, any>\n>(\n\tcomponent:\n\t\t| SvelteComponent<Props, Events, Slots>\n\t\t| Component<Props>\n): ComponentType<\n\tSvelteComponent<Props, Events, Slots> & Exports\n>;\n```\n\n</div>\n\n\n\n## createBubbler\n\n<blockquote class=\"tag deprecated note\">\n\nUse this only as a temporary solution to migrate your automatically delegated events in Svelte 5.\n\n</blockquote>\n\nFunction to create a `bubble` function that mimic the behavior of `on:click` without handler available in svelte 4.\n\n<div class=\"ts-block\">\n\n```dts\nfunction createBubbler(): (\n\ttype: string\n) => (event: Event) => boolean;\n```\n\n</div>\n\n\n\n## createClassComponent\n\n<blockquote class=\"tag deprecated note\">\n\nUse this only as a temporary solution to migrate your imperative component code to Svelte 5.\n\n</blockquote>\n\nTakes the same options as a Svelte 4 component and the component function and returns a Svelte 4 compatible component.\n\n<div class=\"ts-block\">\n\n```dts\nfunction createClassComponent<\n\tProps extends Record<string, any>,\n\tExports extends Record<string, any>,\n\tEvents extends Record<string, any>,\n\tSlots extends Record<string, any>\n>(\n\toptions: ComponentConstructorOptions<Props> & {\n\t\tcomponent:\n\t\t\t| ComponentType<SvelteComponent<Props, Events, Slots>>\n\t\t\t| Component<Props>;\n\t}\n): SvelteComponent<Props, Events, Slots> & Exports;\n```\n\n</div>\n\n\n\n## handlers\n\nFunction to mimic the multiple listeners available in svelte 4\n\n<div class=\"ts-block\">\n\n```dts\nfunction handlers(\n\t...handlers: EventListener[]\n): EventListener;\n```\n\n</div>\n\n\n\n## nonpassive\n\nSubstitute for the `nonpassive` event modifier, implemented as an action\n\n<div class=\"ts-block\">\n\n```dts\nfunction nonpassive(\n\tnode: HTMLElement,\n\t[event, handler]: [\n\t\tevent: string,\n\t\thandler: () => EventListener\n\t]\n): void;\n```\n\n</div>\n\n\n\n## once\n\nSubstitute for the `once` event modifier\n\n<div class=\"ts-block\">\n\n```dts\nfunction once(\n\tfn: (event: Event, ...args: Array<unknown>) => void\n): (event: Event, ...args: unknown[]) => void;\n```\n\n</div>\n\n\n\n## passive\n\nSubstitute for the `passive` event modifier, implemented as an action\n\n<div class=\"ts-block\">\n\n```dts\nfunction passive(\n\tnode: HTMLElement,\n\t[event, handler]: [\n\t\tevent: string,\n\t\thandler: () => EventListener\n\t]\n): void;\n```\n\n</div>\n\n\n\n## preventDefault\n\nSubstitute for the `preventDefault` event modifier\n\n<div class=\"ts-block\">\n\n```dts\nfunction preventDefault(\n\tfn: (event: Event, ...args: Array<unknown>) => void\n): (event: Event, ...args: unknown[]) => void;\n```\n\n</div>\n\n\n\n## run\n\n<blockquote class=\"tag deprecated note\">\n\nUse this only as a temporary solution to migrate your component code to Svelte 5.\n\n</blockquote>\n\nRuns the given function once immediately on the server, and works like `$effect.pre` on the client.\n\n<div class=\"ts-block\">\n\n```dts\nfunction run(fn: () => void | (() => void)): void;\n```\n\n</div>\n\n\n\n## self\n\nSubstitute for the `self` event modifier\n\n<div class=\"ts-block\">\n\n```dts\nfunction self(\n\tfn: (event: Event, ...args: Array<unknown>) => void\n): (event: Event, ...args: unknown[]) => void;\n```\n\n</div>\n\n\n\n## stopImmediatePropagation\n\nSubstitute for the `stopImmediatePropagation` event modifier\n\n<div class=\"ts-block\">\n\n```dts\nfunction stopImmediatePropagation(\n\tfn: (event: Event, ...args: Array<unknown>) => void\n): (event: Event, ...args: unknown[]) => void;\n```\n\n</div>\n\n\n\n## stopPropagation\n\nSubstitute for the `stopPropagation` event modifier\n\n<div class=\"ts-block\">\n\n```dts\nfunction stopPropagation(\n\tfn: (event: Event, ...args: Array<unknown>) => void\n): (event: Event, ...args: unknown[]) => void;\n```\n\n</div>\n\n\n\n## trusted\n\nSubstitute for the `trusted` event modifier\n\n<div class=\"ts-block\">\n\n```dts\nfunction trusted(\n\tfn: (event: Event, ...args: Array<unknown>) => void\n): (event: Event, ...args: unknown[]) => void;\n```\n\n</div>\n\n\n\n## LegacyComponentType\n\nSupport using the component as both a class and function during the transition period\n\n<div class=\"ts-block\">\n\n```dts\ntype LegacyComponentType = {\n\tnew (o: ComponentConstructorOptions): SvelteComponent;\n\t(\n\t\t...args: Parameters<Component<Record<string, any>>>\n\t): ReturnType<\n\t\tComponent<Record<string, any>, Record<string, any>>\n\t>;\n};\n```\n\n</div>",
    "svelte/svelte-motion": "```js\n// @noErrors\nimport {\n\tSpring,\n\tTween,\n\tprefersReducedMotion,\n\tspring,\n\ttweened\n} from 'svelte/motion';\n```\n\n## Spring\n\n<blockquote class=\"since note\">\n\nAvailable since 5.8.0\n\n</blockquote>\n\nA wrapper for a value that behaves in a spring-like fashion. Changes to `spring.target` will cause `spring.current` to\nmove towards it over time, taking account of the `spring.stiffness` and `spring.damping` parameters.\n\n```svelte\n<script>\n\timport { Spring } from 'svelte/motion';\n\n\tconst spring = new Spring(0);\n</script>\n\n<input type=\"range\" bind:value={spring.target} />\n<input type=\"range\" bind:value={spring.current} disabled />\n```\n\n<div class=\"ts-block\">\n\n```dts\nclass Spring<T> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nconstructor(value: T, options?: SpringOpts);\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nstatic of<U>(fn: () => U, options?: SpringOpts): Spring<U>;\n```\n\n<div class=\"ts-block-property-details\">\n\nCreate a spring whose value is bound to the return value of `fn`. This must be called\ninside an effect root (for example, during component initialisation).\n\n```svelte\n<script>\n\timport { Spring } from 'svelte/motion';\n\n\tlet { number } = $props();\n\n\tconst spring = Spring.of(() => number);\n</script>\n```\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nset(value: T, options?: SpringUpdateOpts): Promise<void>;\n```\n\n<div class=\"ts-block-property-details\">\n\nSets `spring.target` to `value` and returns a `Promise` that resolves if and when `spring.current` catches up to it.\n\nIf `options.instant` is `true`, `spring.current` immediately matches `spring.target`.\n\nIf `options.preserveMomentum` is provided, the spring will continue on its current trajectory for\nthe specified number of milliseconds. This is useful for things like 'fling' gestures.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ndamping: number;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nprecision: number;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nstiffness: number;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ntarget: T;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe end value of the spring.\nThis property only exists on the `Spring` class, not the legacy `spring` store.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nget current(): T;\n```\n\n<div class=\"ts-block-property-details\">\n\nThe current value of the spring.\nThis property only exists on the `Spring` class, not the legacy `spring` store.\n\n</div>\n</div></div>\n\n\n\n## Tween\n\n<blockquote class=\"since note\">\n\nAvailable since 5.8.0\n\n</blockquote>\n\nA wrapper for a value that tweens smoothly to its target value. Changes to `tween.target` will cause `tween.current` to\nmove towards it over time, taking account of the `delay`, `duration` and `easing` options.\n\n```svelte\n<script>\n\timport { Tween } from 'svelte/motion';\n\n\tconst tween = new Tween(0);\n</script>\n\n<input type=\"range\" bind:value={tween.target} />\n<input type=\"range\" bind:value={tween.current} disabled />\n```\n\n<div class=\"ts-block\">\n\n```dts\nclass Tween<T> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nstatic of<U>(fn: () => U, options?: TweenedOptions<U> | undefined): Tween<U>;\n```\n\n<div class=\"ts-block-property-details\">\n\nCreate a tween whose value is bound to the return value of `fn`. This must be called\ninside an effect root (for example, during component initialisation).\n\n```svelte\n<script>\n\timport { Tween } from 'svelte/motion';\n\n\tlet { number } = $props();\n\n\tconst tween = Tween.of(() => number);\n</script>\n```\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nconstructor(value: T, options?: TweenedOptions<T>);\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nset(value: T, options?: TweenedOptions<T> | undefined): Promise<void>;\n```\n\n<div class=\"ts-block-property-details\">\n\nSets `tween.target` to `value` and returns a `Promise` that resolves if and when `tween.current` catches up to it.\n\nIf `options` are provided, they will override the tween's defaults.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nget current(): T;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nset target(v: T);\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nget target(): T;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n\n\n## prefersReducedMotion\n\n<blockquote class=\"since note\">\n\nAvailable since 5.7.0\n\n</blockquote>\n\nA [media query](/docs/svelte/svelte-reactivity#MediaQuery) that matches if the user [prefers reduced motion](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion).\n\n```svelte\n<script>\n\timport { prefersReducedMotion } from 'svelte/motion';\n\timport { fly } from 'svelte/transition';\n\n\tlet visible = $state(false);\n</script>\n\n<button onclick={() => visible = !visible}>\n\ttoggle\n</button>\n\n{#if visible}\n\t<p transition:fly={{ y: prefersReducedMotion.current ? 0 : 200 }}>\n\t\tflies in, unless the user prefers reduced motion\n\t</p>\n{/if}\n```\n\n<div class=\"ts-block\">\n\n```dts\nconst prefersReducedMotion: MediaQuery;\n```\n\n</div>\n\n\n\n## spring\n\n<blockquote class=\"tag deprecated note\">\n\nUse [`Spring`](/docs/svelte/svelte-motion#Spring) instead\n\n</blockquote>\n\nThe spring function in Svelte creates a store whose value is animated, with a motion that simulates the behavior of a spring. This means when the value changes, instead of transitioning at a steady rate, it \"bounces\" like a spring would, depending on the physics parameters provided. This adds a level of realism to the transitions and can enhance the user experience.\n\n<div class=\"ts-block\">\n\n```dts\nfunction spring<T = any>(\n\tvalue?: T | undefined,\n\topts?: SpringOpts | undefined\n): Spring<T>;\n```\n\n</div>\n\n\n\n## tweened\n\n<blockquote class=\"tag deprecated note\">\n\nUse [`Tween`](/docs/svelte/svelte-motion#Tween) instead\n\n</blockquote>\n\nA tweened store in Svelte is a special type of store that provides smooth transitions between state values over time.\n\n<div class=\"ts-block\">\n\n```dts\nfunction tweened<T>(\n\tvalue?: T | undefined,\n\tdefaults?: TweenedOptions<T> | undefined\n): Tweened<T>;\n```\n\n</div>\n\n\n\n## Spring\n\n<div class=\"ts-block\">\n\n```dts\ninterface Spring<T> extends Readable<T> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nset(new_value: T, opts?: SpringUpdateOpts): Promise<void>;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nupdate: (fn: Updater<T>, opts?: SpringUpdateOpts) => Promise<void>;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag deprecated\">deprecated</span> Only exists on the legacy `spring` store, not the `Spring` class\n\n</div>\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nsubscribe(fn: (value: T) => void): Unsubscriber;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- <span class=\"tag deprecated\">deprecated</span> Only exists on the legacy `spring` store, not the `Spring` class\n\n</div>\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nprecision: number;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ndamping: number;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nstiffness: number;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n## Tweened\n\n<div class=\"ts-block\">\n\n```dts\ninterface Tweened<T> extends Readable<T> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nset(value: T, opts?: TweenedOptions<T>): Promise<void>;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nupdate(updater: Updater<T>, opts?: TweenedOptions<T>): Promise<void>;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>",
    "svelte/svelte-reactivity-window": "This module exports reactive versions of various `window` values, each of which has a reactive `current` property that you can reference in reactive contexts (templates, [deriveds]($derived) and [effects]($effect)) without using [`<svelte:window>`](svelte-window) bindings or manually creating your own event listeners.\n\n```svelte\n<script>\n\timport { innerWidth, innerHeight } from 'svelte/reactivity/window';\n</script>\n\n<p>{innerWidth.current}x{innerHeight.current}</p>\n```\n\n\n\n```js\n// @noErrors\nimport {\n\tdevicePixelRatio,\n\tinnerHeight,\n\tinnerWidth,\n\tonline,\n\touterHeight,\n\touterWidth,\n\tscreenLeft,\n\tscreenTop,\n\tscrollX,\n\tscrollY\n} from 'svelte/reactivity/window';\n```\n\n## devicePixelRatio\n\n<blockquote class=\"since note\">\n\nAvailable since 5.11.0\n\n</blockquote>\n\n`devicePixelRatio.current` is a reactive view of `window.devicePixelRatio`. On the server it is `undefined`.\nNote that behaviour differs between browsers — on Chrome it will respond to the current zoom level,\non Firefox and Safari it won't.\n\n<div class=\"ts-block\">\n\n```dts\nconst devicePixelRatio: {\n\tget current(): number | undefined;\n};\n```\n\n</div>\n\n\n\n## innerHeight\n\n<blockquote class=\"since note\">\n\nAvailable since 5.11.0\n\n</blockquote>\n\n`innerHeight.current` is a reactive view of `window.innerHeight`. On the server it is `undefined`.\n\n<div class=\"ts-block\">\n\n```dts\nconst innerHeight: ReactiveValue<number | undefined>;\n```\n\n</div>\n\n\n\n## innerWidth\n\n<blockquote class=\"since note\">\n\nAvailable since 5.11.0\n\n</blockquote>\n\n`innerWidth.current` is a reactive view of `window.innerWidth`. On the server it is `undefined`.\n\n<div class=\"ts-block\">\n\n```dts\nconst innerWidth: ReactiveValue<number | undefined>;\n```\n\n</div>\n\n\n\n## online\n\n<blockquote class=\"since note\">\n\nAvailable since 5.11.0\n\n</blockquote>\n\n`online.current` is a reactive view of `navigator.onLine`. On the server it is `undefined`.\n\n<div class=\"ts-block\">\n\n```dts\nconst online: ReactiveValue<boolean | undefined>;\n```\n\n</div>\n\n\n\n## outerHeight\n\n<blockquote class=\"since note\">\n\nAvailable since 5.11.0\n\n</blockquote>\n\n`outerHeight.current` is a reactive view of `window.outerHeight`. On the server it is `undefined`.\n\n<div class=\"ts-block\">\n\n```dts\nconst outerHeight: ReactiveValue<number | undefined>;\n```\n\n</div>\n\n\n\n## outerWidth\n\n<blockquote class=\"since note\">\n\nAvailable since 5.11.0\n\n</blockquote>\n\n`outerWidth.current` is a reactive view of `window.outerWidth`. On the server it is `undefined`.\n\n<div class=\"ts-block\">\n\n```dts\nconst outerWidth: ReactiveValue<number | undefined>;\n```\n\n</div>\n\n\n\n## screenLeft\n\n<blockquote class=\"since note\">\n\nAvailable since 5.11.0\n\n</blockquote>\n\n`screenLeft.current` is a reactive view of `window.screenLeft`. It is updated inside a `requestAnimationFrame` callback. On the server it is `undefined`.\n\n<div class=\"ts-block\">\n\n```dts\nconst screenLeft: ReactiveValue<number | undefined>;\n```\n\n</div>\n\n\n\n## screenTop\n\n<blockquote class=\"since note\">\n\nAvailable since 5.11.0\n\n</blockquote>\n\n`screenTop.current` is a reactive view of `window.screenTop`. It is updated inside a `requestAnimationFrame` callback. On the server it is `undefined`.\n\n<div class=\"ts-block\">\n\n```dts\nconst screenTop: ReactiveValue<number | undefined>;\n```\n\n</div>\n\n\n\n## scrollX\n\n<blockquote class=\"since note\">\n\nAvailable since 5.11.0\n\n</blockquote>\n\n`scrollX.current` is a reactive view of `window.scrollX`. On the server it is `undefined`.\n\n<div class=\"ts-block\">\n\n```dts\nconst scrollX: ReactiveValue<number | undefined>;\n```\n\n</div>\n\n\n\n## scrollY\n\n<blockquote class=\"since note\">\n\nAvailable since 5.11.0\n\n</blockquote>\n\n`scrollY.current` is a reactive view of `window.scrollY`. On the server it is `undefined`.\n\n<div class=\"ts-block\">\n\n```dts\nconst scrollY: ReactiveValue<number | undefined>;\n```\n\n</div>",
    "svelte/svelte-reactivity": "Svelte provides reactive versions of various built-ins like [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map), [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) and [`URL`](https://developer.mozilla.org/en-US/docs/Web/API/URL) that can be used just like their native counterparts, as well as a handful of additional utilities for handling reactivity.\n\n\n\n```js\n// @noErrors\nimport {\n\tMediaQuery,\n\tSvelteDate,\n\tSvelteMap,\n\tSvelteSet,\n\tSvelteURL,\n\tSvelteURLSearchParams,\n\tcreateSubscriber\n} from 'svelte/reactivity';\n```\n\n## MediaQuery\n\n<blockquote class=\"since note\">\n\nAvailable since 5.7.0\n\n</blockquote>\n\nCreates a media query and provides a `current` property that reflects whether or not it matches.\n\nUse it carefully — during server-side rendering, there is no way to know what the correct value should be, potentially causing content to change upon hydration.\nIf you can use the media query in CSS to achieve the same effect, do that.\n\n```svelte\n<script>\n\timport { MediaQuery } from 'svelte/reactivity';\n\n\tconst large = new MediaQuery('min-width: 800px');\n</script>\n\n<h1>{large.current ? 'large screen' : 'small screen'}</h1>\n```\n\n<div class=\"ts-block\">\n\n```dts\nclass MediaQuery extends ReactiveValue<boolean> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nconstructor(query: string, fallback?: boolean | undefined);\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- `query` A media query string\n- `fallback` Fallback value for the server\n\n</div>\n\n</div>\n</div></div>\n\n\n\n## SvelteDate\n\nA reactive version of the built-in [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object.\nReading the date (whether with methods like `date.getTime()` or `date.toString()`, or via things like [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat))\nin an [effect](/docs/svelte/$effect) or [derived](/docs/svelte/$derived)\nwill cause it to be re-evaluated when the value of the date changes.\n\n```svelte\n<script>\n\timport { SvelteDate } from 'svelte/reactivity';\n\n\tconst date = new SvelteDate();\n\n\tconst formatter = new Intl.DateTimeFormat(undefined, {\n\t  hour: 'numeric',\n\t  minute: 'numeric',\n\t  second: 'numeric'\n\t});\n\n\t$effect(() => {\n\t\tconst interval = setInterval(() => {\n\t\t\tdate.setTime(Date.now());\n\t\t}, 1000);\n\n\t\treturn () => {\n\t\t\tclearInterval(interval);\n\t\t};\n\t});\n</script>\n\n<p>The time is {formatter.format(date)}</p>\n```\n\n<div class=\"ts-block\">\n\n```dts\nclass SvelteDate extends Date {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nconstructor(...params: any[]);\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n\n\n## SvelteMap\n\nA reactive version of the built-in [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) object.\nReading contents of the map (by iterating, or by reading `map.size` or calling `map.get(...)` or `map.has(...)` as in the [tic-tac-toe example](/playground/0b0ff4aa49c9443f9b47fe5203c78293) below) in an [effect](/docs/svelte/$effect) or [derived](/docs/svelte/$derived)\nwill cause it to be re-evaluated as necessary when the map is updated.\n\nNote that values in a reactive map are _not_ made [deeply reactive](/docs/svelte/$state#Deep-state).\n\n```svelte\n<script>\n\timport { SvelteMap } from 'svelte/reactivity';\n\timport { result } from './game.js';\n\n\tlet board = new SvelteMap();\n\tlet player = $state('x');\n\tlet winner = $derived(result(board));\n\n\tfunction reset() {\n\t\tplayer = 'x';\n\t\tboard.clear();\n\t}\n</script>\n\n<div class=\"board\">\n\t{#each Array(9), i}\n\t\t<button\n\t\t\tdisabled={board.has(i) || winner}\n\t\t\tonclick={() => {\n\t\t\t\tboard.set(i, player);\n\t\t\t\tplayer = player === 'x' ? 'o' : 'x';\n\t\t\t}}\n\t\t>{board.get(i)}</button>\n\t{/each}\n</div>\n\n{#if winner}\n\t<p>{winner} wins!</p>\n\t<button onclick={reset}>reset</button>\n{:else}\n\t<p>{player} is next</p>\n{/if}\n```\n\n<div class=\"ts-block\">\n\n```dts\nclass SvelteMap<K, V> extends Map<K, V> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nconstructor(value?: Iterable<readonly [K, V]> | null | undefined);\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nset(key: K, value: V): this;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n\n\n## SvelteSet\n\nA reactive version of the built-in [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) object.\nReading contents of the set (by iterating, or by reading `set.size` or calling `set.has(...)` as in the [example](/playground/53438b51194b4882bcc18cddf9f96f15) below) in an [effect](/docs/svelte/$effect) or [derived](/docs/svelte/$derived)\nwill cause it to be re-evaluated as necessary when the set is updated.\n\nNote that values in a reactive set are _not_ made [deeply reactive](/docs/svelte/$state#Deep-state).\n\n```svelte\n<script>\n\timport { SvelteSet } from 'svelte/reactivity';\n\tlet monkeys = new SvelteSet();\n\n\tfunction toggle(monkey) {\n\t\tif (monkeys.has(monkey)) {\n\t\t\tmonkeys.delete(monkey);\n\t\t} else {\n\t\t\tmonkeys.add(monkey);\n\t\t}\n\t}\n</script>\n\n{#each ['🙈', '🙉', '🙊'] as monkey}\n\t<button onclick={() => toggle(monkey)}>{monkey}</button>\n{/each}\n\n<button onclick={() => monkeys.clear()}>clear</button>\n\n{#if monkeys.has('🙈')}<p>see no evil</p>{/if}\n{#if monkeys.has('🙉')}<p>hear no evil</p>{/if}\n{#if monkeys.has('🙊')}<p>speak no evil</p>{/if}\n```\n\n<div class=\"ts-block\">\n\n```dts\nclass SvelteSet<T> extends Set<T> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nconstructor(value?: Iterable<T> | null | undefined);\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nadd(value: T): this;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n\n\n## SvelteURL\n\nA reactive version of the built-in [`URL`](https://developer.mozilla.org/en-US/docs/Web/API/URL) object.\nReading properties of the URL (such as `url.href` or `url.pathname`) in an [effect](/docs/svelte/$effect) or [derived](/docs/svelte/$derived)\nwill cause it to be re-evaluated as necessary when the URL changes.\n\nThe `searchParams` property is an instance of [SvelteURLSearchParams](/docs/svelte/svelte-reactivity#SvelteURLSearchParams).\n\n[Example](/playground/5a694758901b448c83dc40dc31c71f2a):\n\n```svelte\n<script>\n\timport { SvelteURL } from 'svelte/reactivity';\n\n\tconst url = new SvelteURL('https://example.com/path');\n</script>\n\n<!-- changes to these... -->\n<input bind:value={url.protocol} />\n<input bind:value={url.hostname} />\n<input bind:value={url.pathname} />\n\n<hr />\n\n<!-- will update `href` and vice versa -->\n<input bind:value={url.href} size=\"65\" />\n```\n\n<div class=\"ts-block\">\n\n```dts\nclass SvelteURL extends URL {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nget searchParams(): SvelteURLSearchParams;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n\n\n## SvelteURLSearchParams\n\nA reactive version of the built-in [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) object.\nReading its contents (by iterating, or by calling `params.get(...)` or `params.getAll(...)` as in the [example](/playground/b3926c86c5384bab9f2cf993bc08c1c8) below) in an [effect](/docs/svelte/$effect) or [derived](/docs/svelte/$derived)\nwill cause it to be re-evaluated as necessary when the params are updated.\n\n```svelte\n<script>\n\timport { SvelteURLSearchParams } from 'svelte/reactivity';\n\n\tconst params = new SvelteURLSearchParams('message=hello');\n\n\tlet key = $state('key');\n\tlet value = $state('value');\n</script>\n\n<input bind:value={key} />\n<input bind:value={value} />\n<button onclick={() => params.append(key, value)}>append</button>\n\n<p>?{params.toString()}</p>\n\n{#each params as [key, value]}\n\t<p>{key}: {value}</p>\n{/each}\n```\n\n<div class=\"ts-block\">\n\n```dts\nclass SvelteURLSearchParams extends URLSearchParams {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\n[REPLACE](params: URLSearchParams): void;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n\n\n## createSubscriber\n\n<blockquote class=\"since note\">\n\nAvailable since 5.7.0\n\n</blockquote>\n\nReturns a `subscribe` function that integrates external event-based systems with Svelte's reactivity.\nIt's particularly useful for integrating with web APIs like `MediaQuery`, `IntersectionObserver`, or `WebSocket`.\n\nIf `subscribe` is called inside an effect (including indirectly, for example inside a getter),\nthe `start` callback will be called with an `update` function. Whenever `update` is called, the effect re-runs.\n\nIf `start` returns a cleanup function, it will be called when the effect is destroyed.\n\nIf `subscribe` is called in multiple effects, `start` will only be called once as long as the effects\nare active, and the returned teardown function will only be called when all effects are destroyed.\n\nIt's best understood with an example. Here's an implementation of [`MediaQuery`](/docs/svelte/svelte-reactivity#MediaQuery):\n\n```js\n// @errors: 7031\nimport { createSubscriber } from 'svelte/reactivity';\nimport { on } from 'svelte/events';\n\nexport class MediaQuery {\n\t#query;\n\t#subscribe;\n\n\tconstructor(query) {\n\t\tthis.#query = window.matchMedia(`(${query})`);\n\n\t\tthis.#subscribe = createSubscriber((update) => {\n\t\t\t// when the `change` event occurs, re-run any effects that read `this.current`\n\t\t\tconst off = on(this.#query, 'change', update);\n\n\t\t\t// stop listening when all the effects are destroyed\n\t\t\treturn () => off();\n\t\t});\n\t}\n\n\tget current() {\n\t\t// This makes the getter reactive, if read in an effect\n\t\tthis.#subscribe();\n\n\t\t// Return the current state of the query, whether or not we're in an effect\n\t\treturn this.#query.matches;\n\t}\n}\n```\n\n<div class=\"ts-block\">\n\n```dts\nfunction createSubscriber(\n\tstart: (update: () => void) => (() => void) | void\n): () => void;\n```\n\n</div>",
    "svelte/svelte-server": "```js\n// @noErrors\nimport { render } from 'svelte/server';\n```\n\n## render\n\nOnly available on the server and when compiling with the `server` option.\nTakes a component and returns an object with `body` and `head` properties on it, which you can use to populate the HTML when server-rendering your app.\n\n<div class=\"ts-block\">\n\n```dts\nfunction render<\n\tComp extends SvelteComponent<any> | Component<any>,\n\tProps extends ComponentProps<Comp> = ComponentProps<Comp>\n>(\n\t...args: {} extends Props\n\t\t? [\n\t\t\t\tcomponent: Comp extends SvelteComponent<any>\n\t\t\t\t\t? ComponentType<Comp>\n\t\t\t\t\t: Comp,\n\t\t\t\toptions?: {\n\t\t\t\t\tprops?: Omit<Props, '$$slots' | '$$events'>;\n\t\t\t\t\tcontext?: Map<any, any>;\n\t\t\t\t\tidPrefix?: string;\n\t\t\t\t}\n\t\t\t]\n\t\t: [\n\t\t\t\tcomponent: Comp extends SvelteComponent<any>\n\t\t\t\t\t? ComponentType<Comp>\n\t\t\t\t\t: Comp,\n\t\t\t\toptions: {\n\t\t\t\t\tprops: Omit<Props, '$$slots' | '$$events'>;\n\t\t\t\t\tcontext?: Map<any, any>;\n\t\t\t\t\tidPrefix?: string;\n\t\t\t\t}\n\t\t\t]\n): RenderOutput;\n```\n\n</div>",
    "svelte/svelte-store": "```js\n// @noErrors\nimport {\n\tderived,\n\tfromStore,\n\tget,\n\treadable,\n\treadonly,\n\ttoStore,\n\twritable\n} from 'svelte/store';\n```\n\n## derived\n\nDerived value store by synchronizing one or more readable stores and\napplying an aggregation function over its input values.\n\n<div class=\"ts-block\">\n\n```dts\nfunction derived<S extends Stores, T>(\n\tstores: S,\n\tfn: (\n\t\tvalues: StoresValues<S>,\n\t\tset: (value: T) => void,\n\t\tupdate: (fn: Updater<T>) => void\n\t) => Unsubscriber | void,\n\tinitial_value?: T | undefined\n): Readable<T>;\n```\n\n</div>\n\n<div class=\"ts-block\">\n\n```dts\nfunction derived<S extends Stores, T>(\n\tstores: S,\n\tfn: (values: StoresValues<S>) => T,\n\tinitial_value?: T | undefined\n): Readable<T>;\n```\n\n</div>\n\n\n\n## fromStore\n\n<div class=\"ts-block\">\n\n```dts\nfunction fromStore<V>(store: Writable<V>): {\n\tcurrent: V;\n};\n```\n\n</div>\n\n<div class=\"ts-block\">\n\n```dts\nfunction fromStore<V>(store: Readable<V>): {\n\treadonly current: V;\n};\n```\n\n</div>\n\n\n\n## get\n\nGet the current value from a store by subscribing and immediately unsubscribing.\n\n<div class=\"ts-block\">\n\n```dts\nfunction get<T>(store: Readable<T>): T;\n```\n\n</div>\n\n\n\n## readable\n\nCreates a `Readable` store that allows reading by subscription.\n\n<div class=\"ts-block\">\n\n```dts\nfunction readable<T>(\n\tvalue?: T | undefined,\n\tstart?: StartStopNotifier<T> | undefined\n): Readable<T>;\n```\n\n</div>\n\n\n\n## readonly\n\nTakes a store and returns a new one derived from the old one that is readable.\n\n<div class=\"ts-block\">\n\n```dts\nfunction readonly<T>(store: Readable<T>): Readable<T>;\n```\n\n</div>\n\n\n\n## toStore\n\n<div class=\"ts-block\">\n\n```dts\nfunction toStore<V>(\n\tget: () => V,\n\tset: (v: V) => void\n): Writable<V>;\n```\n\n</div>\n\n<div class=\"ts-block\">\n\n```dts\nfunction toStore<V>(get: () => V): Readable<V>;\n```\n\n</div>\n\n\n\n## writable\n\nCreate a `Writable` store that allows both updating and reading by subscription.\n\n<div class=\"ts-block\">\n\n```dts\nfunction writable<T>(\n\tvalue?: T | undefined,\n\tstart?: StartStopNotifier<T> | undefined\n): Writable<T>;\n```\n\n</div>\n\n\n\n## Readable\n\nReadable interface for subscribing.\n\n<div class=\"ts-block\">\n\n```dts\ninterface Readable<T> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nsubscribe(this: void, run: Subscriber<T>, invalidate?: () => void): Unsubscriber;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- `run` subscription callback\n- `invalidate` cleanup callback\n\n</div>\n\nSubscribe on value changes.\n\n</div>\n</div></div>\n\n## StartStopNotifier\n\nStart and stop notification callbacks.\nThis function is called when the first subscriber subscribes.\n\n<div class=\"ts-block\">\n\n```dts\ntype StartStopNotifier<T> = (\n\tset: (value: T) => void,\n\tupdate: (fn: Updater<T>) => void\n) => void | (() => void);\n```\n\n</div>\n\n## Subscriber\n\nCallback to inform of a value updates.\n\n<div class=\"ts-block\">\n\n```dts\ntype Subscriber<T> = (value: T) => void;\n```\n\n</div>\n\n## Unsubscriber\n\nUnsubscribes from value updates.\n\n<div class=\"ts-block\">\n\n```dts\ntype Unsubscriber = () => void;\n```\n\n</div>\n\n## Updater\n\nCallback to update a value.\n\n<div class=\"ts-block\">\n\n```dts\ntype Updater<T> = (value: T) => T;\n```\n\n</div>\n\n## Writable\n\nWritable interface for both updating and subscribing.\n\n<div class=\"ts-block\">\n\n```dts\ninterface Writable<T> extends Readable<T> {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\nset(this: void, value: T): void;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- `value` to set\n\n</div>\n\nSet value and inform subscribers.\n\n</div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nupdate(this: void, updater: Updater<T>): void;\n```\n\n<div class=\"ts-block-property-details\">\n\n<div class=\"ts-block-property-bullets\">\n\n- `updater` callback\n\n</div>\n\nUpdate value using callback and inform subscribers.\n\n</div>\n</div></div>",
    "svelte/svelte-transition": "```js\n// @noErrors\nimport {\n\tblur,\n\tcrossfade,\n\tdraw,\n\tfade,\n\tfly,\n\tscale,\n\tslide\n} from 'svelte/transition';\n```\n\n## blur\n\nAnimates a `blur` filter alongside an element's opacity.\n\n<div class=\"ts-block\">\n\n```dts\nfunction blur(\n\tnode: Element,\n\t{\n\t\tdelay,\n\t\tduration,\n\t\teasing,\n\t\tamount,\n\t\topacity\n\t}?: BlurParams | undefined\n): TransitionConfig;\n```\n\n</div>\n\n\n\n## crossfade\n\nThe `crossfade` function creates a pair of [transitions](/docs/svelte/transition) called `send` and `receive`. When an element is 'sent', it looks for a corresponding element being 'received', and generates a transition that transforms the element to its counterpart's position and fades it out. When an element is 'received', the reverse happens. If there is no counterpart, the `fallback` transition is used.\n\n<div class=\"ts-block\">\n\n```dts\nfunction crossfade({\n\tfallback,\n\t...defaults\n}: CrossfadeParams & {\n\tfallback?: (\n\t\tnode: Element,\n\t\tparams: CrossfadeParams,\n\t\tintro: boolean\n\t) => TransitionConfig;\n}): [\n\t(\n\t\tnode: any,\n\t\tparams: CrossfadeParams & {\n\t\t\tkey: any;\n\t\t}\n\t) => () => TransitionConfig,\n\t(\n\t\tnode: any,\n\t\tparams: CrossfadeParams & {\n\t\t\tkey: any;\n\t\t}\n\t) => () => TransitionConfig\n];\n```\n\n</div>\n\n\n\n## draw\n\nAnimates the stroke of an SVG element, like a snake in a tube. `in` transitions begin with the path invisible and draw the path to the screen over time. `out` transitions start in a visible state and gradually erase the path. `draw` only works with elements that have a `getTotalLength` method, like `<path>` and `<polyline>`.\n\n<div class=\"ts-block\">\n\n```dts\nfunction draw(\n\tnode: SVGElement & {\n\t\tgetTotalLength(): number;\n\t},\n\t{\n\t\tdelay,\n\t\tspeed,\n\t\tduration,\n\t\teasing\n\t}?: DrawParams | undefined\n): TransitionConfig;\n```\n\n</div>\n\n\n\n## fade\n\nAnimates the opacity of an element from 0 to the current opacity for `in` transitions and from the current opacity to 0 for `out` transitions.\n\n<div class=\"ts-block\">\n\n```dts\nfunction fade(\n\tnode: Element,\n\t{ delay, duration, easing }?: FadeParams | undefined\n): TransitionConfig;\n```\n\n</div>\n\n\n\n## fly\n\nAnimates the x and y positions and the opacity of an element. `in` transitions animate from the provided values, passed as parameters to the element's default values. `out` transitions animate from the element's default values to the provided values.\n\n<div class=\"ts-block\">\n\n```dts\nfunction fly(\n\tnode: Element,\n\t{\n\t\tdelay,\n\t\tduration,\n\t\teasing,\n\t\tx,\n\t\ty,\n\t\topacity\n\t}?: FlyParams | undefined\n): TransitionConfig;\n```\n\n</div>\n\n\n\n## scale\n\nAnimates the opacity and scale of an element. `in` transitions animate from the provided values, passed as parameters, to an element's current (default) values. `out` transitions animate from an element's default values to the provided values.\n\n<div class=\"ts-block\">\n\n```dts\nfunction scale(\n\tnode: Element,\n\t{\n\t\tdelay,\n\t\tduration,\n\t\teasing,\n\t\tstart,\n\t\topacity\n\t}?: ScaleParams | undefined\n): TransitionConfig;\n```\n\n</div>\n\n\n\n## slide\n\nSlides an element in and out.\n\n<div class=\"ts-block\">\n\n```dts\nfunction slide(\n\tnode: Element,\n\t{\n\t\tdelay,\n\t\tduration,\n\t\teasing,\n\t\taxis\n\t}?: SlideParams | undefined\n): TransitionConfig;\n```\n\n</div>\n\n\n\n## BlurParams\n\n<div class=\"ts-block\">\n\n```dts\ninterface BlurParams {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\ndelay?: number;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nduration?: number;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\neasing?: EasingFunction;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\namount?: number | string;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nopacity?: number;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n## CrossfadeParams\n\n<div class=\"ts-block\">\n\n```dts\ninterface CrossfadeParams {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\ndelay?: number;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nduration?: number | ((len: number) => number);\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\neasing?: EasingFunction;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n## DrawParams\n\n<div class=\"ts-block\">\n\n```dts\ninterface DrawParams {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\ndelay?: number;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nspeed?: number;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nduration?: number | ((len: number) => number);\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\neasing?: EasingFunction;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n## EasingFunction\n\n<div class=\"ts-block\">\n\n```dts\ntype EasingFunction = (t: number) => number;\n```\n\n</div>\n\n## FadeParams\n\n<div class=\"ts-block\">\n\n```dts\ninterface FadeParams {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\ndelay?: number;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nduration?: number;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\neasing?: EasingFunction;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n## FlyParams\n\n<div class=\"ts-block\">\n\n```dts\ninterface FlyParams {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\ndelay?: number;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nduration?: number;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\neasing?: EasingFunction;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nx?: number | string;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ny?: number | string;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nopacity?: number;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n## ScaleParams\n\n<div class=\"ts-block\">\n\n```dts\ninterface ScaleParams {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\ndelay?: number;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nduration?: number;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\neasing?: EasingFunction;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nstart?: number;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nopacity?: number;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n## SlideParams\n\n<div class=\"ts-block\">\n\n```dts\ninterface SlideParams {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\ndelay?: number;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nduration?: number;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\neasing?: EasingFunction;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\naxis?: 'x' | 'y';\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>\n\n## TransitionConfig\n\n<div class=\"ts-block\">\n\n```dts\ninterface TransitionConfig {/*…*/}\n```\n\n<div class=\"ts-block-property\">\n\n```dts\ndelay?: number;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\nduration?: number;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\neasing?: EasingFunction;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ncss?: (t: number, u: number) => string;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div>\n\n<div class=\"ts-block-property\">\n\n```dts\ntick?: (t: number, u: number) => void;\n```\n\n<div class=\"ts-block-property-details\"></div>\n</div></div>",
    "svelte/compiler-errors": "<!-- This file is generated by scripts/process-messages/index.js. Do not edit! -->\n\n### animation_duplicate\n\n```\nAn element can only have one 'animate' directive\n```\n\n### animation_invalid_placement\n\n```\nAn element that uses the `animate:` directive must be the only child of a keyed `{#each ...}` block\n```\n\n### animation_missing_key\n\n```\nAn element that uses the `animate:` directive must be the only child of a keyed `{#each ...}` block. Did you forget to add a key to your each block?\n```\n\n### attribute_contenteditable_dynamic\n\n```\n'contenteditable' attribute cannot be dynamic if element uses two-way binding\n```\n\n### attribute_contenteditable_missing\n\n```\n'contenteditable' attribute is required for textContent, innerHTML and innerText two-way bindings\n```\n\n### attribute_duplicate\n\n```\nAttributes need to be unique\n```\n\n### attribute_empty_shorthand\n\n```\nAttribute shorthand cannot be empty\n```\n\n### attribute_invalid_event_handler\n\n```\nEvent attribute must be a JavaScript expression, not a string\n```\n\n### attribute_invalid_multiple\n\n```\n'multiple' attribute must be static if select uses two-way binding\n```\n\n### attribute_invalid_name\n\n```\n'%name%' is not a valid attribute name\n```\n\n### attribute_invalid_sequence_expression\n\n```\nSequence expressions are not allowed as attribute/directive values in runes mode, unless wrapped in parentheses\n```\n\n### attribute_invalid_type\n\n```\n'type' attribute must be a static text value if input uses two-way binding\n```\n\n### attribute_unquoted_sequence\n\n```\nAttribute values containing `{...}` must be enclosed in quote marks, unless the value only contains the expression\n```\n\n### bind_group_invalid_expression\n\n```\n`bind:group` can only bind to an Identifier or MemberExpression\n```\n\n### bind_group_invalid_snippet_parameter\n\n```\nCannot `bind:group` to a snippet parameter\n```\n\n### bind_invalid_expression\n\n```\nCan only bind to an Identifier or MemberExpression or a `{get, set}` pair\n```\n\n### bind_invalid_name\n\n```\n`bind:%name%` is not a valid binding\n```\n\n```\n`bind:%name%` is not a valid binding. %explanation%\n```\n\n### bind_invalid_parens\n\n```\n`bind:%name%={get, set}` must not have surrounding parentheses\n```\n\n### bind_invalid_target\n\n```\n`bind:%name%` can only be used with %elements%\n```\n\n### bind_invalid_value\n\n```\nCan only bind to state or props\n```\n\n### bindable_invalid_location\n\n```\n`$bindable()` can only be used inside a `$props()` declaration\n```\n\n### block_duplicate_clause\n\n```\n%name% cannot appear more than once within a block\n```\n\n### block_invalid_continuation_placement\n\n```\n{:...} block is invalid at this position (did you forget to close the preceding element or block?)\n```\n\n### block_invalid_elseif\n\n```\n'elseif' should be 'else if'\n```\n\n### block_invalid_placement\n\n```\n{#%name% ...} block cannot be %location%\n```\n\n### block_unclosed\n\n```\nBlock was left open\n```\n\n### block_unexpected_character\n\n```\nExpected a `%character%` character immediately following the opening bracket\n```\n\n### block_unexpected_close\n\n```\nUnexpected block closing tag\n```\n\n### component_invalid_directive\n\n```\nThis type of directive is not valid on components\n```\n\n### const_tag_cycle\n\n```\nCyclical dependency detected: %cycle%\n```\n\n### const_tag_invalid_expression\n\n```\n{@const ...} must consist of a single variable declaration\n```\n\n### const_tag_invalid_placement\n\n```\n`{@const}` must be the immediate child of `{#snippet}`, `{#if}`, `{:else if}`, `{:else}`, `{#each}`, `{:then}`, `{:catch}`, `<svelte:fragment>`, `<svelte:boundary` or `<Component>`\n```\n\n### const_tag_invalid_reference\n\n```\nThe `{@const %name% = ...}` declaration is not available in this snippet \n```\n\nThe following is an error:\n\n```svelte\n<svelte:boundary>\n    {@const foo = 'bar'}\n\n    {#snippet failed()}\n        {foo}\n    {/snippet}\n</svelte:boundary>\n```\n\nHere, `foo` is not available inside `failed`. The top level code inside `<svelte:boundary>` becomes part of the implicit `children` snippet, in other words the above code is equivalent to this:\n\n```svelte\n<svelte:boundary>\n    {#snippet children()}\n        {@const foo = 'bar'}\n    {/snippet}\n\n    {#snippet failed()}\n        {foo}\n    {/snippet}\n</svelte:boundary>\n```\n\nThe same applies to components:\n\n```svelte\n<Component>\n    {@const foo = 'bar'}\n\n    {#snippet someProp()}\n        <!-- error -->\n        {foo}\n    {/snippet}\n</Component>\n```\n\n### constant_assignment\n\n```\nCannot assign to %thing%\n```\n\n### constant_binding\n\n```\nCannot bind to %thing%\n```\n\n### css_empty_declaration\n\n```\nDeclaration cannot be empty\n```\n\n### css_expected_identifier\n\n```\nExpected a valid CSS identifier\n```\n\n### css_global_block_invalid_combinator\n\n```\nA `:global` selector cannot follow a `%name%` combinator\n```\n\n### css_global_block_invalid_declaration\n\n```\nA top-level `:global {...}` block can only contain rules, not declarations\n```\n\n### css_global_block_invalid_list\n\n```\nA `:global` selector cannot be part of a selector list with entries that don't contain `:global`\n```\n\nThe following CSS is invalid:\n\n```css\n:global, x {\n    y {\n        color: red;\n    }\n}\n```\n\nThis is mixing a `:global` block, which means \"everything in here is unscoped\", with a scoped selector (`x` in this case). As a result it's not possible to transform the inner selector (`y` in this case) into something that satisfies both requirements. You therefore have to split this up into two selectors:\n\n```css\n:global {\n    y {\n        color: red;\n    }\n}\n\nx y {\n    color: red;\n}\n```\n\n### css_global_block_invalid_modifier\n\n```\nA `:global` selector cannot modify an existing selector\n```\n\n### css_global_block_invalid_modifier_start\n\n```\nA `:global` selector can only be modified if it is a descendant of other selectors\n```\n\n### css_global_block_invalid_placement\n\n```\nA `:global` selector cannot be inside a pseudoclass\n```\n\n### css_global_invalid_placement\n\n```\n`:global(...)` can be at the start or end of a selector sequence, but not in the middle\n```\n\n### css_global_invalid_selector\n\n```\n`:global(...)` must contain exactly one selector\n```\n\n### css_global_invalid_selector_list\n\n```\n`:global(...)` must not contain type or universal selectors when used in a compound selector\n```\n\n### css_nesting_selector_invalid_placement\n\n```\nNesting selectors can only be used inside a rule or as the first selector inside a lone `:global(...)`\n```\n\n### css_selector_invalid\n\n```\nInvalid selector\n```\n\n### css_type_selector_invalid_placement\n\n```\n`:global(...)` must not be followed by a type selector\n```\n\n### debug_tag_invalid_arguments\n\n```\n{@debug ...} arguments must be identifiers, not arbitrary expressions\n```\n\n### declaration_duplicate\n\n```\n`%name%` has already been declared\n```\n\n### declaration_duplicate_module_import\n\n```\nCannot declare a variable with the same name as an import inside `<script module>`\n```\n\n### derived_invalid_export\n\n```\nCannot export derived state from a module. To expose the current derived value, export a function returning its value\n```\n\n### directive_invalid_value\n\n```\nDirective value must be a JavaScript expression enclosed in curly braces\n```\n\n### directive_missing_name\n\n```\n`%type%` name cannot be empty\n```\n\n### dollar_binding_invalid\n\n```\nThe $ name is reserved, and cannot be used for variables and imports\n```\n\n### dollar_prefix_invalid\n\n```\nThe $ prefix is reserved, and cannot be used for variables and imports\n```\n\n### duplicate_class_field\n\n```\n`%name%` has already been declared\n```\n\n### each_item_invalid_assignment\n\n```\nCannot reassign or bind to each block argument in runes mode. Use the array and index variables instead (e.g. `array[i] = value` instead of `entry = value`, or `bind:value={array[i]}` instead of `bind:value={entry}`)\n```\n\nIn legacy mode, it was possible to reassign or bind to the each block argument itself:\n\n```svelte\n<script>\n\tlet array = [1, 2, 3];\n</script>\n\n{#each array as entry}\n\t<!-- reassignment -->\n\t<button on:click={() => entry = 4}>change</button>\n\n\t<!-- binding -->\n\t<input bind:value={entry}>\n{/each}\n```\n\nThis turned out to be buggy and unpredictable, particularly when working with derived values (such as `array.map(...)`), and as such is forbidden in runes mode. You can achieve the same outcome by using the index instead:\n\n```svelte\n<script>\n\tlet array = $state([1, 2, 3]);\n</script>\n\n{#each array as entry, i}\n\t<!-- reassignment -->\n\t<button onclick={() => array[i] = 4}>change</button>\n\n\t<!-- binding -->\n\t<input bind:value={array[i]}>\n{/each}\n```\n\n### effect_invalid_placement\n\n```\n`$effect()` can only be used as an expression statement\n```\n\n### element_invalid_closing_tag\n\n```\n`</%name%>` attempted to close an element that was not open\n```\n\n### element_invalid_closing_tag_autoclosed\n\n```\n`</%name%>` attempted to close element that was already automatically closed by `<%reason%>` (cannot nest `<%reason%>` inside `<%name%>`)\n```\n\n### element_unclosed\n\n```\n`<%name%>` was left open\n```\n\n### event_handler_invalid_component_modifier\n\n```\nEvent modifiers other than 'once' can only be used on DOM elements\n```\n\n### event_handler_invalid_modifier\n\n```\nValid event modifiers are %list%\n```\n\n### event_handler_invalid_modifier_combination\n\n```\nThe '%modifier1%' and '%modifier2%' modifiers cannot be used together\n```\n\n### expected_attribute_value\n\n```\nExpected attribute value\n```\n\n### expected_block_type\n\n```\nExpected 'if', 'each', 'await', 'key' or 'snippet'\n```\n\n### expected_identifier\n\n```\nExpected an identifier\n```\n\n### expected_pattern\n\n```\nExpected identifier or destructure pattern\n```\n\n### expected_token\n\n```\nExpected token %token%\n```\n\n### expected_whitespace\n\n```\nExpected whitespace\n```\n\n### experimental_async\n\n```\nCannot use `await` in deriveds and template expressions, or at the top level of a component, unless the `experimental.async` compiler option is `true`\n```\n\n### export_undefined\n\n```\n`%name%` is not defined\n```\n\n### global_reference_invalid\n\n```\n`%name%` is an illegal variable name. To reference a global variable called `%name%`, use `globalThis.%name%`\n```\n\n### host_invalid_placement\n\n```\n`$host()` can only be used inside custom element component instances\n```\n\n### illegal_element_attribute\n\n```\n`<%name%>` does not support non-event attributes or spread attributes\n```\n\n### import_svelte_internal_forbidden\n\n```\nImports of `svelte/internal/*` are forbidden. It contains private runtime code which is subject to change without notice. If you're importing from `svelte/internal/*` to work around a limitation of Svelte, please open an issue at https://github.com/sveltejs/svelte and explain your use case\n```\n\n### inspect_trace_generator\n\n```\n`$inspect.trace(...)` cannot be used inside a generator function\n```\n\n### inspect_trace_invalid_placement\n\n```\n`$inspect.trace(...)` must be the first statement of a function body\n```\n\n### invalid_arguments_usage\n\n```\nThe arguments keyword cannot be used within the template or at the top level of a component\n```\n\n### js_parse_error\n\n```\n%message%\n```\n\n### legacy_await_invalid\n\n```\nCannot use `await` in deriveds and template expressions, or at the top level of a component, unless in runes mode\n```\n\n### legacy_export_invalid\n\n```\nCannot use `export let` in runes mode — use `$props()` instead\n```\n\n### legacy_props_invalid\n\n```\nCannot use `$$props` in runes mode\n```\n\n### legacy_reactive_statement_invalid\n\n```\n`$:` is not allowed in runes mode, use `$derived` or `$effect` instead\n```\n\n### legacy_rest_props_invalid\n\n```\nCannot use `$$restProps` in runes mode\n```\n\n### let_directive_invalid_placement\n\n```\n`let:` directive at invalid position\n```\n\n### mixed_event_handler_syntaxes\n\n```\nMixing old (on:%name%) and new syntaxes for event handling is not allowed. Use only the on%name% syntax\n```\n\n### module_illegal_default_export\n\n```\nA component cannot have a default export\n```\n\n### node_invalid_placement\n\n```\n%message%. The browser will 'repair' the HTML (by moving, removing, or inserting elements) which breaks Svelte's assumptions about the structure of your components.\n```\n\nHTML restricts where certain elements can appear. In case of a violation the browser will 'repair' the HTML in a way that breaks Svelte's assumptions about the structure of your components. Some examples:\n\n- `<p>hello <div>world</div></p>` will result in `<p>hello </p><div>world</div><p></p>` (the `<div>` autoclosed the `<p>` because `<p>` cannot contain block-level elements)\n- `<option><div>option a</div></option>` will result in `<option>option a</option>` (the `<div>` is removed)\n- `<table><tr><td>cell</td></tr></table>` will result in `<table><tbody><tr><td>cell</td></tr></tbody></table>` (a `<tbody>` is auto-inserted)\n\n### options_invalid_value\n\n```\nInvalid compiler option: %details%\n```\n\n### options_removed\n\n```\nInvalid compiler option: %details%\n```\n\n### options_unrecognised\n\n```\nUnrecognised compiler option %keypath%\n```\n\n### props_duplicate\n\n```\nCannot use `%rune%()` more than once\n```\n\n### props_id_invalid_placement\n\n```\n`$props.id()` can only be used at the top level of components as a variable declaration initializer\n```\n\n### props_illegal_name\n\n```\nDeclaring or accessing a prop starting with `$$` is illegal (they are reserved for Svelte internals)\n```\n\n### props_invalid_identifier\n\n```\n`$props()` can only be used with an object destructuring pattern\n```\n\n### props_invalid_pattern\n\n```\n`$props()` assignment must not contain nested properties or computed keys\n```\n\n### props_invalid_placement\n\n```\n`$props()` can only be used at the top level of components as a variable declaration initializer\n```\n\n### reactive_declaration_cycle\n\n```\nCyclical dependency detected: %cycle%\n```\n\n### render_tag_invalid_call_expression\n\n```\nCalling a snippet function using apply, bind or call is not allowed\n```\n\n### render_tag_invalid_expression\n\n```\n`{@render ...}` tags can only contain call expressions\n```\n\n### render_tag_invalid_spread_argument\n\n```\ncannot use spread arguments in `{@render ...}` tags\n```\n\n### rune_invalid_arguments\n\n```\n`%rune%` cannot be called with arguments\n```\n\n### rune_invalid_arguments_length\n\n```\n`%rune%` must be called with %args%\n```\n\n### rune_invalid_computed_property\n\n```\nCannot access a computed property of a rune\n```\n\n### rune_invalid_name\n\n```\n`%name%` is not a valid rune\n```\n\n### rune_invalid_spread\n\n```\n`%rune%` cannot be called with a spread argument\n```\n\n### rune_invalid_usage\n\n```\nCannot use `%rune%` rune in non-runes mode\n```\n\n### rune_missing_parentheses\n\n```\nCannot use rune without parentheses\n```\n\n### rune_removed\n\n```\nThe `%name%` rune has been removed\n```\n\n### rune_renamed\n\n```\n`%name%` is now `%replacement%`\n```\n\n### runes_mode_invalid_import\n\n```\n%name% cannot be used in runes mode\n```\n\n### script_duplicate\n\n```\nA component can have a single top-level `<script>` element and/or a single top-level `<script module>` element\n```\n\n### script_invalid_attribute_value\n\n```\nIf the `%name%` attribute is supplied, it must be a boolean attribute\n```\n\n### script_invalid_context\n\n```\nIf the context attribute is supplied, its value must be \"module\"\n```\n\n### script_reserved_attribute\n\n```\nThe `%name%` attribute is reserved and cannot be used\n```\n\n### slot_attribute_duplicate\n\n```\nDuplicate slot name '%name%' in <%component%>\n```\n\n### slot_attribute_invalid\n\n```\nslot attribute must be a static value\n```\n\n### slot_attribute_invalid_placement\n\n```\nElement with a slot='...' attribute must be a child of a component or a descendant of a custom element\n```\n\n### slot_default_duplicate\n\n```\nFound default slot content alongside an explicit slot=\"default\"\n```\n\n### slot_element_invalid_attribute\n\n```\n`<slot>` can only receive attributes and (optionally) let directives\n```\n\n### slot_element_invalid_name\n\n```\nslot attribute must be a static value\n```\n\n### slot_element_invalid_name_default\n\n```\n`default` is a reserved word — it cannot be used as a slot name\n```\n\n### slot_snippet_conflict\n\n```\nCannot use `<slot>` syntax and `{@render ...}` tags in the same component. Migrate towards `{@render ...}` tags completely\n```\n\n### snippet_conflict\n\n```\nCannot use explicit children snippet at the same time as implicit children content. Remove either the non-whitespace content or the children snippet block\n```\n\n### snippet_invalid_export\n\n```\nAn exported snippet can only reference things declared in a `<script module>`, or other exportable snippets\n```\n\nIt's possible to export a snippet from a `<script module>` block, but only if it doesn't reference anything defined inside a non-module-level `<script>`. For example you can't do this...\n\n```svelte\n<script module>\n\texport { greeting };\n</script>\n\n<script>\n\tlet message = 'hello';\n</script>\n\n{#snippet greeting(name)}\n\t<p>{message} {name}!</p>\n{/snippet}\n```\n\n...because `greeting` references `message`, which is defined in the second `<script>`.\n\n### snippet_invalid_rest_parameter\n\n```\nSnippets do not support rest parameters; use an array instead\n```\n\n### snippet_parameter_assignment\n\n```\nCannot reassign or bind to snippet parameter\n```\n\n### snippet_shadowing_prop\n\n```\nThis snippet is shadowing the prop `%prop%` with the same name\n```\n\n### state_field_duplicate\n\n```\n`%name%` has already been declared on this class\n```\n\nAn assignment to a class field that uses a `$state` or `$derived` rune is considered a _state field declaration_. The declaration can happen in the class body...\n\n```js\nclass Counter {\n\tcount = $state(0);\n}\n```\n\n...or inside the constructor...\n\n```js\nclass Counter {\n\tconstructor() {\n\t\tthis.count = $state(0);\n\t}\n}\n```\n\n...but it can only happen once.\n\n### state_field_invalid_assignment\n\n```\nCannot assign to a state field before its declaration\n```\n\n### state_invalid_export\n\n```\nCannot export state from a module if it is reassigned. Either export a function returning the state value or only mutate the state value's properties\n```\n\n### state_invalid_placement\n\n```\n`%rune%(...)` can only be used as a variable declaration initializer, a class field declaration, or the first assignment to a class field at the top level of the constructor.\n```\n\n### store_invalid_scoped_subscription\n\n```\nCannot subscribe to stores that are not declared at the top level of the component\n```\n\n### store_invalid_subscription\n\n```\nCannot reference store value inside `<script module>`\n```\n\n### store_invalid_subscription_module\n\n```\nCannot reference store value outside a `.svelte` file\n```\n\nUsing a `$` prefix to refer to the value of a store is only possible inside `.svelte` files, where Svelte can automatically create subscriptions when a component is mounted and unsubscribe when the component is unmounted. Consider migrating to runes instead.\n\n### style_directive_invalid_modifier\n\n```\n`style:` directive can only use the `important` modifier\n```\n\n### style_duplicate\n\n```\nA component can have a single top-level `<style>` element\n```\n\n### svelte_body_illegal_attribute\n\n```\n`<svelte:body>` does not support non-event attributes or spread attributes\n```\n\n### svelte_boundary_invalid_attribute\n\n```\nValid attributes on `<svelte:boundary>` are `onerror` and `failed`\n```\n\n### svelte_boundary_invalid_attribute_value\n\n```\nAttribute value must be a non-string expression\n```\n\n### svelte_component_invalid_this\n\n```\nInvalid component definition — must be an `{expression}`\n```\n\n### svelte_component_missing_this\n\n```\n`<svelte:component>` must have a 'this' attribute\n```\n\n### svelte_element_missing_this\n\n```\n`<svelte:element>` must have a 'this' attribute with a value\n```\n\n### svelte_fragment_invalid_attribute\n\n```\n`<svelte:fragment>` can only have a slot attribute and (optionally) a let: directive\n```\n\n### svelte_fragment_invalid_placement\n\n```\n`<svelte:fragment>` must be the direct child of a component\n```\n\n### svelte_head_illegal_attribute\n\n```\n`<svelte:head>` cannot have attributes nor directives\n```\n\n### svelte_meta_duplicate\n\n```\nA component can only have one `<%name%>` element\n```\n\n### svelte_meta_invalid_content\n\n```\n<%name%> cannot have children\n```\n\n### svelte_meta_invalid_placement\n\n```\n`<%name%>` tags cannot be inside elements or blocks\n```\n\n### svelte_meta_invalid_tag\n\n```\nValid `<svelte:...>` tag names are %list%\n```\n\n### svelte_options_deprecated_tag\n\n```\n\"tag\" option is deprecated — use \"customElement\" instead\n```\n\n### svelte_options_invalid_attribute\n\n```\n`<svelte:options>` can only receive static attributes\n```\n\n### svelte_options_invalid_attribute_value\n\n```\nValue must be %list%, if specified\n```\n\n### svelte_options_invalid_customelement\n\n```\n\"customElement\" must be a string literal defining a valid custom element name or an object of the form { tag?: string; shadow?: \"open\" | \"none\"; props?: { [key: string]: { attribute?: string; reflect?: boolean; type: .. } } }\n```\n\n### svelte_options_invalid_customelement_props\n\n```\n\"props\" must be a statically analyzable object literal of the form \"{ [key: string]: { attribute?: string; reflect?: boolean; type?: \"String\" | \"Boolean\" | \"Number\" | \"Array\" | \"Object\" }\"\n```\n\n### svelte_options_invalid_customelement_shadow\n\n```\n\"shadow\" must be either \"open\" or \"none\"\n```\n\n### svelte_options_invalid_tagname\n\n```\nTag name must be lowercase and hyphenated\n```\n\nSee https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name for more information on valid tag names\n\n### svelte_options_reserved_tagname\n\n```\nTag name is reserved\n```\n\nSee https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name for more information on valid tag names\n\n### svelte_options_unknown_attribute\n\n```\n`<svelte:options>` unknown attribute '%name%'\n```\n\n### svelte_self_invalid_placement\n\n```\n`<svelte:self>` components can only exist inside `{#if}` blocks, `{#each}` blocks, `{#snippet}` blocks or slots passed to components\n```\n\n### tag_invalid_name\n\n```\nExpected a valid element or component name. Components must have a valid variable name or dot notation expression\n```\n\n### tag_invalid_placement\n\n```\n{@%name% ...} tag cannot be %location%\n```\n\n### textarea_invalid_content\n\n```\nA `<textarea>` can have either a value attribute or (equivalently) child content, but not both\n```\n\n### title_illegal_attribute\n\n```\n`<title>` cannot have attributes nor directives\n```\n\n### title_invalid_content\n\n```\n`<title>` can only contain text and {tags}\n```\n\n### transition_conflict\n\n```\nCannot use `%type%:` alongside existing `%existing%:` directive\n```\n\n### transition_duplicate\n\n```\nCannot use multiple `%type%:` directives on a single element\n```\n\n### typescript_invalid_feature\n\n```\nTypeScript language features like %feature% are not natively supported, and their use is generally discouraged. Outside of `<script>` tags, these features are not supported. For use within `<script>` tags, you will need to use a preprocessor to convert it to JavaScript before it gets passed to the Svelte compiler. If you are using `vitePreprocess`, make sure to specifically enable preprocessing script tags (`vitePreprocess({ script: true })`)\n```\n\n### unexpected_eof\n\n```\nUnexpected end of input\n```\n\n### unexpected_reserved_word\n\n```\n'%word%' is a reserved word in JavaScript and cannot be used here\n```\n\n### unterminated_string_constant\n\n```\nUnterminated string constant\n```\n\n### void_element_invalid_content\n\n```\nVoid elements cannot have children or closing tags\n```",
    "svelte/compiler-warnings": "Svelte warns you at compile time if it catches potential mistakes, such as writing inaccessible markup.\n\nSome warnings may be incorrect in your concrete use case. You can disable such false positives by placing a `<!-- svelte-ignore <code> -->` comment above the line that causes the warning. Example:\n\n```svelte\n<!-- svelte-ignore a11y_autofocus -->\n<input autofocus />\n```\n\nYou can list multiple rules in a single comment (separated by commas), and add an explanatory note (in parentheses) alongside them:\n\n```svelte\n<!-- svelte-ignore a11y_click_events_have_key_events, a11y_no_static_element_interactions (because of reasons) -->\n<div onclick>...</div>\n```\n\n<!-- This file is generated by scripts/process-messages/index.js. Do not edit! -->\n\n### a11y_accesskey\n\n```\nAvoid using accesskey\n```\n\nEnforce no `accesskey` on element. Access keys are HTML attributes that allow web developers to assign keyboard shortcuts to elements. Inconsistencies between keyboard shortcuts and keyboard commands used by screen reader and keyboard-only users create accessibility complications. To avoid complications, access keys should not be used.\n\n<!-- prettier-ignore -->\n```svelte\n<!-- A11y: Avoid using accesskey -->\n<div accesskey=\"z\"></div>\n```\n\n### a11y_aria_activedescendant_has_tabindex\n\n```\nAn element with an aria-activedescendant attribute should have a tabindex value\n```\n\nAn element with `aria-activedescendant` must be tabbable, so it must either have an inherent `tabindex` or declare `tabindex` as an attribute.\n\n```svelte\n<!-- A11y: Elements with attribute aria-activedescendant should have tabindex value -->\n<div aria-activedescendant=\"some-id\"></div>\n```\n\n### a11y_aria_attributes\n\n```\n`<%name%>` should not have aria-* attributes\n```\n\nCertain reserved DOM elements do not support ARIA roles, states and properties. This is often because they are not visible, for example `meta`, `html`, `script`, `style`. This rule enforces that these DOM elements do not contain the `aria-*` props.\n\n```svelte\n<!-- A11y: <meta> should not have aria-* attributes -->\n<meta aria-hidden=\"false\" />\n```\n\n### a11y_autocomplete_valid\n\n```\n'%value%' is an invalid value for 'autocomplete' on `<input type=\"%type%\">`\n```\n\n### a11y_autofocus\n\n```\nAvoid using autofocus\n```\n\nEnforce that `autofocus` is not used on elements. Autofocusing elements can cause usability issues for sighted and non-sighted users alike.\n\n```svelte\n<!-- A11y: Avoid using autofocus -->\n<input autofocus />\n```\n\n### a11y_click_events_have_key_events\n\n```\nVisible, non-interactive elements with a click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as `<button type=\"button\">` or `<a>` might be more appropriate\n```\n\nEnforce that visible, non-interactive elements with an `onclick` event are accompanied by a keyboard event handler.\n\nUsers should first consider whether an interactive element might be more appropriate such as a `<button type=\"button\">` element for actions or `<a>` element for navigations. These elements are more semantically meaningful and will have built-in key handling. E.g. `Space` and `Enter` will trigger a `<button>` and `Enter` will trigger an `<a>` element.\n\nIf a non-interactive element is required then `onclick` should be accompanied by an `onkeyup` or `onkeydown` handler that enables the user to perform equivalent actions via the keyboard. In order for the user to be able to trigger a key press, the element will also need to be focusable by adding a [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex). While an `onkeypress` handler will also silence this warning, it should be noted that the `keypress` event is deprecated.\n\n```svelte\n<!-- A11y: visible, non-interactive elements with an onclick event must be accompanied by a keyboard event handler. -->\n<div onclick={() => {}}></div>\n```\n\nCoding for the keyboard is important for users with physical disabilities who cannot use a mouse, AT compatibility, and screenreader users.\n\n### a11y_consider_explicit_label\n\n```\nButtons and links should either contain text or have an `aria-label`, `aria-labelledby` or `title` attribute\n```\n\n### a11y_distracting_elements\n\n```\nAvoid `<%name%>` elements\n```\n\nEnforces that no distracting elements are used. Elements that can be visually distracting can cause accessibility issues with visually impaired users. Such elements are most likely deprecated, and should be avoided.\n\nThe following elements are visually distracting: `<marquee>` and `<blink>`.\n\n```svelte\n<!-- A11y: Avoid <marquee> elements -->\n<marquee></marquee>\n```\n\n### a11y_figcaption_index\n\n```\n`<figcaption>` must be first or last child of `<figure>`\n```\n\n### a11y_figcaption_parent\n\n```\n`<figcaption>` must be an immediate child of `<figure>`\n```\n\nEnforce that certain DOM elements have the correct structure.\n\n```svelte\n<!-- A11y: <figcaption> must be an immediate child of <figure> -->\n<div>\n\t<figcaption>Image caption</figcaption>\n</div>\n```\n\n### a11y_hidden\n\n```\n`<%name%>` element should not be hidden\n```\n\nCertain DOM elements are useful for screen reader navigation and should not be hidden.\n\n<!-- prettier-ignore -->\n```svelte\n<!-- A11y: <h2> element should not be hidden -->\n<h2 aria-hidden=\"true\">invisible header</h2>\n```\n\n### a11y_img_redundant_alt\n\n```\nScreenreaders already announce `<img>` elements as an image\n```\n\nEnforce img alt attribute does not contain the word image, picture, or photo. Screen readers already announce `img` elements as an image. There is no need to use words such as _image_, _photo_, and/or _picture_.\n\n```svelte\n<img src=\"foo\" alt=\"Foo eating a sandwich.\" />\n\n<!-- aria-hidden, won't be announced by screen reader -->\n<img src=\"bar\" aria-hidden=\"true\" alt=\"Picture of me taking a photo of an image\" />\n\n<!-- A11y: Screen readers already announce <img> elements as an image. -->\n<img src=\"foo\" alt=\"Photo of foo being weird.\" />\n\n<!-- A11y: Screen readers already announce <img> elements as an image. -->\n<img src=\"bar\" alt=\"Image of me at a bar!\" />\n\n<!-- A11y: Screen readers already announce <img> elements as an image. -->\n<img src=\"foo\" alt=\"Picture of baz fixing a bug.\" />\n```\n\n### a11y_incorrect_aria_attribute_type\n\n```\nThe value of '%attribute%' must be a %type%\n```\n\nEnforce that only the correct type of value is used for aria attributes. For example, `aria-hidden`\nshould only receive a boolean.\n\n```svelte\n<!-- A11y: The value of 'aria-hidden' must be exactly one of true or false -->\n<div aria-hidden=\"yes\"></div>\n```\n\n### a11y_incorrect_aria_attribute_type_boolean\n\n```\nThe value of '%attribute%' must be either 'true' or 'false'. It cannot be empty\n```\n\n### a11y_incorrect_aria_attribute_type_id\n\n```\nThe value of '%attribute%' must be a string that represents a DOM element ID\n```\n\n### a11y_incorrect_aria_attribute_type_idlist\n\n```\nThe value of '%attribute%' must be a space-separated list of strings that represent DOM element IDs\n```\n\n### a11y_incorrect_aria_attribute_type_integer\n\n```\nThe value of '%attribute%' must be an integer\n```\n\n### a11y_incorrect_aria_attribute_type_token\n\n```\nThe value of '%attribute%' must be exactly one of %values%\n```\n\n### a11y_incorrect_aria_attribute_type_tokenlist\n\n```\nThe value of '%attribute%' must be a space-separated list of one or more of %values%\n```\n\n### a11y_incorrect_aria_attribute_type_tristate\n\n```\nThe value of '%attribute%' must be exactly one of true, false, or mixed\n```\n\n### a11y_interactive_supports_focus\n\n```\nElements with the '%role%' interactive role must have a tabindex value\n```\n\nEnforce that elements with an interactive role and interactive handlers (mouse or key press) must be focusable or tabbable.\n\n```svelte\n<!-- A11y: Elements with the 'button' interactive role must have a tabindex value. -->\n<div role=\"button\" onkeypress={() => {}} />\n```\n\n### a11y_invalid_attribute\n\n```\n'%href_value%' is not a valid %href_attribute% attribute\n```\n\nEnforce that attributes important for accessibility have a valid value. For example, `href` should not be empty, `'#'`, or `javascript:`.\n\n```svelte\n<!-- A11y: '' is not a valid href attribute -->\n<a href=\"\">invalid</a>\n```\n\n### a11y_label_has_associated_control\n\n```\nA form label must be associated with a control\n```\n\nEnforce that a label tag has a text label and an associated control.\n\nThere are two supported ways to associate a label with a control:\n\n- Wrapping a control in a label tag.\n- Adding `for` to a label and assigning it the ID of an input on the page.\n\n```svelte\n<label for=\"id\">B</label>\n\n<label>C <input type=\"text\" /></label>\n\n<!-- A11y: A form label must be associated with a control. -->\n<label>A</label>\n```\n\n### a11y_media_has_caption\n\n```\n`<video>` elements must have a `<track kind=\"captions\">`\n```\n\nProviding captions for media is essential for deaf users to follow along. Captions should be a transcription or translation of the dialogue, sound effects, relevant musical cues, and other relevant audio information. Not only is this important for accessibility, but can also be useful for all users in the case that the media is unavailable (similar to `alt` text on an image when an image is unable to load).\n\nThe captions should contain all important and relevant information to understand the corresponding media. This may mean that the captions are not a 1:1 mapping of the dialogue in the media content. However, captions are not necessary for video components with the `muted` attribute.\n\n```svelte\n<video><track kind=\"captions\" /></video>\n\n<audio muted></audio>\n\n<!-- A11y: Media elements must have a <track kind=\\\"captions\\\"> -->\n<video></video>\n\n<!-- A11y: Media elements must have a <track kind=\\\"captions\\\"> -->\n<video><track /></video>\n```\n\n### a11y_misplaced_role\n\n```\n`<%name%>` should not have role attribute\n```\n\nCertain reserved DOM elements do not support ARIA roles, states and properties. This is often because they are not visible, for example `meta`, `html`, `script`, `style`. This rule enforces that these DOM elements do not contain the `role` props.\n\n```svelte\n<!-- A11y: <meta> should not have role attribute -->\n<meta role=\"tooltip\" />\n```\n\n### a11y_misplaced_scope\n\n```\nThe scope attribute should only be used with `<th>` elements\n```\n\nThe scope attribute should only be used on `<th>` elements.\n\n<!-- prettier-ignore -->\n```svelte\n<!-- A11y: The scope attribute should only be used with <th> elements -->\n<div scope=\"row\" />\n```\n\n### a11y_missing_attribute\n\n```\n`<%name%>` element should have %article% %sequence% attribute\n```\n\nEnforce that attributes required for accessibility are present on an element. This includes the following checks:\n\n- `<a>` should have an href (unless it's a [fragment-defining tag](https://github.com/sveltejs/svelte/issues/4697))\n- `<area>` should have alt, aria-label, or aria-labelledby\n- `<html>` should have lang\n- `<iframe>` should have title\n- `<img>` should have alt\n- `<object>` should have title, aria-label, or aria-labelledby\n- `<input type=\"image\">` should have alt, aria-label, or aria-labelledby\n\n```svelte\n<!-- A11y: <input type=\\\"image\\\"> element should have an alt, aria-label or aria-labelledby attribute -->\n<input type=\"image\" />\n\n<!-- A11y: <html> element should have a lang attribute -->\n<html></html>\n\n<!-- A11y: <a> element should have an href attribute -->\n<a>text</a>\n```\n\n### a11y_missing_content\n\n```\n`<%name%>` element should contain text\n```\n\nEnforce that heading elements (`h1`, `h2`, etc.) and anchors have content and that the content is accessible to screen readers\n\n```svelte\n<!-- A11y: <a> element should have child content -->\n<a href=\"/foo\"></a>\n\n<!-- A11y: <h1> element should have child content -->\n<h1></h1>\n```\n\n### a11y_mouse_events_have_key_events\n\n```\n'%event%' event must be accompanied by '%accompanied_by%' event\n```\n\nEnforce that `onmouseover` and `onmouseout` are accompanied by `onfocus` and `onblur`, respectively. This helps to ensure that any functionality triggered by these mouse events is also accessible to keyboard users.\n\n```svelte\n<!-- A11y: onmouseover must be accompanied by onfocus -->\n<div onmouseover={handleMouseover} />\n\n<!-- A11y: onmouseout must be accompanied by onblur -->\n<div onmouseout={handleMouseout} />\n```\n\n### a11y_no_abstract_role\n\n```\nAbstract role '%role%' is forbidden\n```\n\n### a11y_no_interactive_element_to_noninteractive_role\n\n```\n`<%element%>` cannot have role '%role%'\n```\n\n[WAI-ARIA](https://www.w3.org/TR/wai-aria-1.1/#usage_intro) roles should not be used to convert an interactive element to a non-interactive element. Non-interactive ARIA roles include `article`, `banner`, `complementary`, `img`, `listitem`, `main`, `region` and `tooltip`.\n\n```svelte\n<!-- A11y: <textarea> cannot have role 'listitem' -->\n<textarea role=\"listitem\"></textarea>\n```\n\n### a11y_no_noninteractive_element_interactions\n\n```\nNon-interactive element `<%element%>` should not be assigned mouse or keyboard event listeners\n```\n\nA non-interactive element does not support event handlers (mouse and key handlers). Non-interactive elements include `<main>`, `<area>`, `<h1>` (,`<h2>`, etc), `<p>`, `<img>`, `<li>`, `<ul>` and `<ol>`. Non-interactive [WAI-ARIA roles](https://www.w3.org/TR/wai-aria-1.1/#usage_intro) include `article`, `banner`, `complementary`, `img`, `listitem`, `main`, `region` and `tooltip`.\n\n```sv\n<!-- `A11y: Non-interactive element <li> should not be assigned mouse or keyboard event listeners.` -->\n<li onclick={() => {}}></li>\n\n<!-- `A11y: Non-interactive element <div> should not be assigned mouse or keyboard event listeners.` -->\n<div role=\"listitem\" onclick={() => {}}></div>\n```\n\n### a11y_no_noninteractive_element_to_interactive_role\n\n```\nNon-interactive element `<%element%>` cannot have interactive role '%role%'\n```\n\n[WAI-ARIA](https://www.w3.org/TR/wai-aria-1.1/#usage_intro) roles should not be used to convert a non-interactive element to an interactive element. Interactive ARIA roles include `button`, `link`, `checkbox`, `menuitem`, `menuitemcheckbox`, `menuitemradio`, `option`, `radio`, `searchbox`, `switch` and `textbox`.\n\n```svelte\n<!-- A11y: Non-interactive element <h3> cannot have interactive role 'searchbox' -->\n<h3 role=\"searchbox\">Button</h3>\n```\n\n### a11y_no_noninteractive_tabindex\n\n```\nnoninteractive element cannot have nonnegative tabIndex value\n```\n\nTab key navigation should be limited to elements on the page that can be interacted with.\n\n<!-- prettier-ignore -->\n```svelte\n<!-- A11y: noninteractive element cannot have nonnegative tabIndex value -->\n<div tabindex=\"0\"></div>\n```\n\n### a11y_no_redundant_roles\n\n```\nRedundant role '%role%'\n```\n\nSome HTML elements have default ARIA roles. Giving these elements an ARIA role that is already set by the browser [has no effect](https://www.w3.org/TR/using-aria/#aria-does-nothing) and is redundant.\n\n```svelte\n<!-- A11y: Redundant role 'button' -->\n<button role=\"button\">...</button>\n\n<!-- A11y: Redundant role 'img' -->\n<img role=\"img\" src=\"foo.jpg\" />\n```\n\n### a11y_no_static_element_interactions\n\n```\n`<%element%>` with a %handler% handler must have an ARIA role\n```\n\nElements like `<div>` with interactive handlers like `click` must have an ARIA role.\n\n<!-- prettier-ignore -->\n```svelte\n<!-- A11y: <div> with click handler must have an ARIA role -->\n<div onclick={() => ''}></div>\n```\n\n### a11y_positive_tabindex\n\n```\nAvoid tabindex values above zero\n```\n\nAvoid positive `tabindex` property values. This will move elements out of the expected tab order, creating a confusing experience for keyboard users.\n\n<!-- prettier-ignore -->\n```svelte\n<!-- A11y: avoid tabindex values above zero -->\n<div tabindex=\"1\"></div>\n```\n\n### a11y_role_has_required_aria_props\n\n```\nElements with the ARIA role \"%role%\" must have the following attributes defined: %props%\n```\n\nElements with ARIA roles must have all required attributes for that role.\n\n```svelte\n<!-- A11y: A11y: Elements with the ARIA role \"checkbox\" must have the following attributes defined: \"aria-checked\" -->\n<span role=\"checkbox\" aria-labelledby=\"foo\" tabindex=\"0\"></span>\n```\n\n### a11y_role_supports_aria_props\n\n```\nThe attribute '%attribute%' is not supported by the role '%role%'\n```\n\nElements with explicit or implicit roles defined contain only `aria-*` properties supported by that role.\n\n```svelte\n<!-- A11y: The attribute 'aria-multiline' is not supported by the role 'link'. -->\n<div role=\"link\" aria-multiline></div>\n\n<!-- A11y: The attribute 'aria-required' is not supported by the role 'listitem'. This role is implicit on the element <li>. -->\n<li aria-required></li>\n```\n\n### a11y_role_supports_aria_props_implicit\n\n```\nThe attribute '%attribute%' is not supported by the role '%role%'. This role is implicit on the element `<%name%>`\n```\n\nElements with explicit or implicit roles defined contain only `aria-*` properties supported by that role.\n\n```svelte\n<!-- A11y: The attribute 'aria-multiline' is not supported by the role 'link'. -->\n<div role=\"link\" aria-multiline></div>\n\n<!-- A11y: The attribute 'aria-required' is not supported by the role 'listitem'. This role is implicit on the element <li>. -->\n<li aria-required></li>\n```\n\n### a11y_unknown_aria_attribute\n\n```\nUnknown aria attribute 'aria-%attribute%'\n```\n\n```\nUnknown aria attribute 'aria-%attribute%'. Did you mean '%suggestion%'?\n```\n\nEnforce that only known ARIA attributes are used. This is based on the [WAI-ARIA States and Properties spec](https://www.w3.org/WAI/PF/aria-1.1/states_and_properties).\n\n```svelte\n<!-- A11y: Unknown aria attribute 'aria-labeledby' (did you mean 'labelledby'?) -->\n<input type=\"image\" aria-labeledby=\"foo\" />\n```\n\n### a11y_unknown_role\n\n```\nUnknown role '%role%'\n```\n\n```\nUnknown role '%role%'. Did you mean '%suggestion%'?\n```\n\nElements with ARIA roles must use a valid, non-abstract ARIA role. A reference to role definitions can be found at [WAI-ARIA](https://www.w3.org/TR/wai-aria/#role_definitions) site.\n\n<!-- prettier-ignore -->\n```svelte\n<!-- A11y: Unknown role 'toooltip' (did you mean 'tooltip'?) -->\n<div role=\"toooltip\"></div>\n```\n\n### attribute_avoid_is\n\n```\nThe \"is\" attribute is not supported cross-browser and should be avoided\n```\n\n### attribute_global_event_reference\n\n```\nYou are referencing `globalThis.%name%`. Did you forget to declare a variable with that name?\n```\n\n### attribute_illegal_colon\n\n```\nAttributes should not contain ':' characters to prevent ambiguity with Svelte directives\n```\n\n### attribute_invalid_property_name\n\n```\n'%wrong%' is not a valid HTML attribute. Did you mean '%right%'?\n```\n\n### attribute_quoted\n\n```\nQuoted attributes on components and custom elements will be stringified in a future version of Svelte. If this isn't what you want, remove the quotes\n```\n\n### bidirectional_control_characters\n\n```\nA bidirectional control character was detected in your code. These characters can be used to alter the visual direction of your code and could have unintended consequences\n```\n\nBidirectional control characters can alter the direction in which text appears to be in. For example, via control characters, you can make `defabc` look like `abcdef`. As a result, if you were to unknowingly copy and paste some code that has these control characters, they may alter the behavior of your code in ways you did not intend. See [trojansource.codes](https://trojansource.codes/) for more information.\n\n### bind_invalid_each_rest\n\n```\nThe rest operator (...) will create a new object and binding '%name%' with the original object will not work\n```\n\n### block_empty\n\n```\nEmpty block\n```\n\n### component_name_lowercase\n\n```\n`<%name%>` will be treated as an HTML element unless it begins with a capital letter\n```\n\n### css_unused_selector\n\n```\nUnused CSS selector \"%name%\"\n```\n\nSvelte traverses both the template and the `<style>` tag to find out which of the CSS selectors are not used within the template, so it can remove them.\n\nIn some situations a selector may target an element that is not 'visible' to the compiler, for example because it is part of an `{@html ...}` tag or you're overriding styles in a child component. In these cases, use [`:global`](/docs/svelte/global-styles) to preserve the selector as-is:\n\n```svelte\n<div class=\"post\">{@html content}</div>\n\n<style>\n  .post :global {\n    p {...}\n  }\n</style>\n```\n\n### custom_element_props_identifier\n\n```\nUsing a rest element or a non-destructured declaration with `$props()` means that Svelte can't infer what properties to expose when creating a custom element. Consider destructuring all the props or explicitly specifying the `customElement.props` option.\n```\n\n### element_implicitly_closed\n\n```\nThis element is implicitly closed by the following `%tag%`, which can cause an unexpected DOM structure. Add an explicit `%closing%` to avoid surprises.\n```\n\nIn HTML, some elements are implicitly closed by another element. For example, you cannot nest a `<p>` inside another `<p>`:\n\n```html\n<!-- this HTML... -->\n<p><p>hello</p>\n\n<!-- results in this DOM structure -->\n<p></p>\n<p>hello</p>\n```\n\nSimilarly, a parent element's closing tag will implicitly close all child elements, even if the `</` was a typo and you meant to create a _new_ element. To avoid ambiguity, it's always a good idea to have an explicit closing tag.\n\n### element_invalid_self_closing_tag\n\n```\nSelf-closing HTML tags for non-void elements are ambiguous — use `<%name% ...></%name%>` rather than `<%name% ... />`\n```\n\nIn HTML, there's [no such thing as a self-closing tag](https://jakearchibald.com/2023/against-self-closing-tags-in-html/). While this _looks_ like a self-contained element with some text next to it...\n\n```html\n<div>\n\t<span class=\"icon\" /> some text!\n</div>\n```\n\n...a spec-compliant HTML parser (such as a browser) will in fact parse it like this, with the text _inside_ the icon:\n\n```html\n<div>\n\t<span class=\"icon\"> some text! </span>\n</div>\n```\n\nSome templating languages (including Svelte) will 'fix' HTML by turning `<span />` into `<span></span>`. Others adhere to the spec. Both result in ambiguity and confusion when copy-pasting code between different contexts, so Svelte prompts you to resolve the ambiguity directly by having an explicit closing tag.\n\nTo automate this, run the dedicated migration:\n\n```sh\nnpx sv migrate self-closing-tags\n```\n\nIn a future version of Svelte, self-closing tags may be upgraded from a warning to an error.\n\n### event_directive_deprecated\n\n```\nUsing `on:%name%` to listen to the %name% event is deprecated. Use the event attribute `on%name%` instead\n```\n\nSee [the migration guide](v5-migration-guide#Event-changes) for more info.\n\n### export_let_unused\n\n```\nComponent has unused export property '%name%'. If it is for external reference only, please consider using `export const %name%`\n```\n\n### legacy_code\n\n```\n`%code%` is no longer valid — please use `%suggestion%` instead\n```\n\n### legacy_component_creation\n\n```\nSvelte 5 components are no longer classes. Instantiate them using `mount` or `hydrate` (imported from 'svelte') instead.\n```\n\nSee the [migration guide](v5-migration-guide#Components-are-no-longer-classes) for more info.\n\n### node_invalid_placement_ssr\n\n```\n%message%. When rendering this component on the server, the resulting HTML will be modified by the browser (by moving, removing, or inserting elements), likely resulting in a `hydration_mismatch` warning\n```\n\nHTML restricts where certain elements can appear. In case of a violation the browser will 'repair' the HTML in a way that breaks Svelte's assumptions about the structure of your components. Some examples:\n\n- `<p>hello <div>world</div></p>` will result in `<p>hello </p><div>world</div><p></p>` (the `<div>` autoclosed the `<p>` because `<p>` cannot contain block-level elements)\n- `<option><div>option a</div></option>` will result in `<option>option a</option>` (the `<div>` is removed)\n- `<table><tr><td>cell</td></tr></table>` will result in `<table><tbody><tr><td>cell</td></tr></tbody></table>` (a `<tbody>` is auto-inserted)\n\nThis code will work when the component is rendered on the client (which is why this is a warning rather than an error), but if you use server rendering it will cause hydration to fail.\n\n### non_reactive_update\n\n```\n`%name%` is updated, but is not declared with `$state(...)`. Changing its value will not correctly trigger updates\n```\n\nThis warning is thrown when the compiler detects the following:\n- a variable was declared without `$state` or `$state.raw`\n- the variable is reassigned\n- the variable is read in a reactive context\n\nIn this case, changing the value will not correctly trigger updates. Example:\n\n```svelte\n<script>\n\tlet reactive = $state('reactive');\n\tlet stale = 'stale';\n</script>\n\n<p>This value updates: {reactive}</p>\n<p>This value does not update: {stale}</p>\n\n<button onclick={() => {\n\tstale = 'updated';\n\treactive = 'updated';\n}}>update</button>\n```\n\nTo fix this, wrap your variable declaration with `$state`.\n\n### options_deprecated_accessors\n\n```\nThe `accessors` option has been deprecated. It will have no effect in runes mode\n```\n\n### options_deprecated_immutable\n\n```\nThe `immutable` option has been deprecated. It will have no effect in runes mode\n```\n\n### options_missing_custom_element\n\n```\nThe `customElement` option is used when generating a custom element. Did you forget the `customElement: true` compile option?\n```\n\n### options_removed_enable_sourcemap\n\n```\nThe `enableSourcemap` option has been removed. Source maps are always generated now, and tooling can choose to ignore them\n```\n\n### options_removed_hydratable\n\n```\nThe `hydratable` option has been removed. Svelte components are always hydratable now\n```\n\n### options_removed_loop_guard_timeout\n\n```\nThe `loopGuardTimeout` option has been removed\n```\n\n### options_renamed_ssr_dom\n\n```\n`generate: \"dom\"` and `generate: \"ssr\"` options have been renamed to \"client\" and \"server\" respectively\n```\n\n### perf_avoid_inline_class\n\n```\nAvoid 'new class' — instead, declare the class at the top level scope\n```\n\n### perf_avoid_nested_class\n\n```\nAvoid declaring classes below the top level scope\n```\n\n### reactive_declaration_invalid_placement\n\n```\nReactive declarations only exist at the top level of the instance script\n```\n\n### reactive_declaration_module_script_dependency\n\n```\nReassignments of module-level declarations will not cause reactive statements to update\n```\n\n### script_context_deprecated\n\n```\n`context=\"module\"` is deprecated, use the `module` attribute instead\n```\n\n```svelte\n<script ---context=\"module\"--- +++module+++>\n\tlet foo = 'bar';\n</script>\n```\n\n### script_unknown_attribute\n\n```\nUnrecognized attribute — should be one of `generics`, `lang` or `module`. If this exists for a preprocessor, ensure that the preprocessor removes it\n```\n\n### slot_element_deprecated\n\n```\nUsing `<slot>` to render parent content is deprecated. Use `{@render ...}` tags instead\n```\n\nSee [the migration guide](v5-migration-guide#Snippets-instead-of-slots) for more info.\n\n### state_referenced_locally\n\n```\nThis reference only captures the initial value of `%name%`. Did you mean to reference it inside a %type% instead?\n```\n\nThis warning is thrown when the compiler detects the following:\n\n- A reactive variable is declared\n- ...and later reassigned...\n- ...and referenced in the same scope\n\nThis 'breaks the link' to the original state declaration. For example, if you pass the state to a function, the function loses access to the state once it is reassigned:\n\n```svelte\n<!--- file: Parent.svelte --->\n<script>\n\timport { setContext } from 'svelte';\n\n\tlet count = $state(0);\n\n\t// warning: state_referenced_locally\n\tsetContext('count', count);\n</script>\n\n<button onclick={() => count++}>\n\tincrement\n</button>\n```\n\n```svelte\n<!--- file: Child.svelte --->\n<script>\n\timport { getContext } from 'svelte';\n\n\tconst count = getContext('count');\n</script>\n\n<!-- This will never update -->\n<p>The count is {count}</p>\n```\n\nTo fix this, reference the variable such that it is lazily evaluated. For the above example, this can be achieved by wrapping `count` in a function:\n\n```svelte\n<!--- file: Parent.svelte --->\n<script>\n\timport { setContext } from 'svelte';\n\n\tlet count = $state(0);\n\tsetContext('count', +++() => count+++);\n</script>\n\n<button onclick={() => count++}>\n\tincrement\n</button>\n```\n\n```svelte\n<!--- file: Child.svelte --->\n<script>\n\timport { getContext } from 'svelte';\n\n\tconst count = getContext('count');\n</script>\n\n<!-- This will update -->\n<p>The count is {+++count()+++}</p>\n```\n\nFor more info, see [Passing state into functions]($state#Passing-state-into-functions).\n\n### store_rune_conflict\n\n```\nIt looks like you're using the `$%name%` rune, but there is a local binding called `%name%`. Referencing a local variable with a `$` prefix will create a store subscription. Please rename `%name%` to avoid the ambiguity\n```\n\n### svelte_component_deprecated\n\n```\n`<svelte:component>` is deprecated in runes mode — components are dynamic by default\n```\n\nIn previous versions of Svelte, the component constructor was fixed when the component was rendered. In other words, if you wanted `<X>` to re-render when `X` changed, you would either have to use `<svelte:component this={X}>` or put the component inside a `{#key X}...{/key}` block.\n\nIn Svelte 5 this is no longer true — if `X` changes, `<X>` re-renders.\n\nIn some cases `<object.property>` syntax can be used as a replacement; a lowercased variable with property access is recognized as a component in Svelte 5.\n\nFor complex component resolution logic, an intermediary, capitalized variable may be necessary. E.g. in places where `@const` can be used:\n\n<!-- prettier-ignore -->\n```svelte\n{#each items as item}\n\t---<svelte:component this={item.condition ? Y : Z} />---\n\t+++{@const Component = item.condition ? Y : Z}+++\n\t+++<Component />+++\n{/each}\n```\n\nA derived value may be used in other contexts:\n\n<!-- prettier-ignore -->\n```svelte\n<script>\n\t// ...\n\tlet condition = $state(false);\n\t+++const Component = $derived(condition ? Y : Z);+++\n</script>\n\n---<svelte:component this={condition ? Y : Z} />---\n+++<Component />+++\n```\n\n### svelte_element_invalid_this\n\n```\n`this` should be an `{expression}`. Using a string attribute value will cause an error in future versions of Svelte\n```\n\n### svelte_self_deprecated\n\n```\n`<svelte:self>` is deprecated — use self-imports (e.g. `import %name% from './%basename%'`) instead\n```\n\nSee [the note in the docs](legacy-svelte-self) for more info.\n\n### unknown_code\n\n```\n`%code%` is not a recognised code\n```\n\n```\n`%code%` is not a recognised code (did you mean `%suggestion%`?)\n```",
    "svelte/runtime-errors": "## Client errors\n\n<!-- This file is generated by scripts/process-messages/index.js. Do not edit! -->\n\n### async_derived_orphan\n\n```\nCannot create a `$derived(...)` with an `await` expression outside of an effect tree\n```\n\nIn Svelte there are two types of reaction — [`$derived`](/docs/svelte/$derived) and [`$effect`](/docs/svelte/$effect). Deriveds can be created anywhere, because they run _lazily_ and can be [garbage collected](https://developer.mozilla.org/en-US/docs/Glossary/Garbage_collection) if nothing references them. Effects, by contrast, keep running eagerly whenever their dependencies change, until they are destroyed.\n\nBecause of this, effects can only be created inside other effects (or [effect roots](/docs/svelte/$effect#$effect.root), such as the one that is created when you first mount a component) so that Svelte knows when to destroy them.\n\nSome sleight of hand occurs when a derived contains an `await` expression: Since waiting until we read `{await getPromise()}` to call `getPromise` would be too late, we use an effect to instead call it proactively, notifying Svelte when the value is available. But since we're using an effect, we can only create asynchronous deriveds inside another effect.\n\n### bind_invalid_checkbox_value\n\n```\nUsing `bind:value` together with a checkbox input is not allowed. Use `bind:checked` instead\n```\n\n### bind_invalid_export\n\n```\nComponent %component% has an export named `%key%` that a consumer component is trying to access using `bind:%key%`, which is disallowed. Instead, use `bind:this` (e.g. `<%name% bind:this={component} />`) and then access the property on the bound component instance (e.g. `component.%key%`)\n```\n\n### bind_not_bindable\n\n```\nA component is attempting to bind to a non-bindable property `%key%` belonging to %component% (i.e. `<%name% bind:%key%={...}>`). To mark a property as bindable: `let { %key% = $bindable() } = $props()`\n```\n\n### component_api_changed\n\n```\nCalling `%method%` on a component instance (of %component%) is no longer valid in Svelte 5\n```\n\nSee the [migration guide](/docs/svelte/v5-migration-guide#Components-are-no-longer-classes) for more information.\n\n### component_api_invalid_new\n\n```\nAttempted to instantiate %component% with `new %name%`, which is no longer valid in Svelte 5. If this component is not under your control, set the `compatibility.componentApi` compiler option to `4` to keep it working.\n```\n\nSee the [migration guide](/docs/svelte/v5-migration-guide#Components-are-no-longer-classes) for more information.\n\n### derived_references_self\n\n```\nA derived value cannot reference itself recursively\n```\n\n### each_key_duplicate\n\n```\nKeyed each block has duplicate key at indexes %a% and %b%\n```\n\n```\nKeyed each block has duplicate key `%value%` at indexes %a% and %b%\n```\n\n### effect_in_teardown\n\n```\n`%rune%` cannot be used inside an effect cleanup function\n```\n\n### effect_in_unowned_derived\n\n```\nEffect cannot be created inside a `$derived` value that was not itself created inside an effect\n```\n\n### effect_orphan\n\n```\n`%rune%` can only be used inside an effect (e.g. during component initialisation)\n```\n\n### effect_pending_outside_reaction\n\n```\n`$effect.pending()` can only be called inside an effect or derived\n```\n\n### effect_update_depth_exceeded\n\n```\nMaximum update depth exceeded. This typically indicates that an effect reads and writes the same piece of state\n```\n\nIf an effect updates some state that it also depends on, it will re-run, potentially in a loop:\n\n```js\nlet count = $state(0);\n\n$effect(() => {\n\t// this both reads and writes `count`,\n\t// so will run in an infinite loop\n\tcount += 1;\n});\n```\n\n(Svelte intervenes before this can crash your browser tab.)\n\nThe same applies to array mutations, since these both read and write to the array:\n\n```js\nlet array = $state(['hello']);\n\n$effect(() => {\n\tarray.push('goodbye');\n});\n```\n\nNote that it's fine for an effect to re-run itself as long as it 'settles':\n\n```js\nlet array = ['a', 'b', 'c'];\n// ---cut---\n$effect(() => {\n\t// this is okay, because sorting an already-sorted array\n\t// won't result in a mutation\n\tarray.sort();\n});\n```\n\nOften when encountering this issue, the value in question shouldn't be state (for example, if you are pushing to a `logs` array in an effect, make `logs` a normal array rather than `$state([])`). In the rare cases where you really _do_ need to write to state in an effect — [which you should avoid]($effect#When-not-to-use-$effect) — you can read the state with [untrack](svelte#untrack) to avoid adding it as a dependency.\n\n### flush_sync_in_effect\n\n```\nCannot use `flushSync` inside an effect\n```\n\nThe `flushSync()` function can be used to flush any pending effects synchronously. It cannot be used if effects are currently being flushed — in other words, you can call it after a state change but _not_ inside an effect.\n\nThis restriction only applies when using the `experimental.async` option, which will be active by default in Svelte 6.\n\n### get_abort_signal_outside_reaction\n\n```\n`getAbortSignal()` can only be called inside an effect or derived\n```\n\n### hydration_failed\n\n```\nFailed to hydrate the application\n```\n\n### invalid_snippet\n\n```\nCould not `{@render}` snippet due to the expression being `null` or `undefined`. Consider using optional chaining `{@render snippet?.()}`\n```\n\n### lifecycle_legacy_only\n\n```\n`%name%(...)` cannot be used in runes mode\n```\n\n### props_invalid_value\n\n```\nCannot do `bind:%key%={undefined}` when `%key%` has a fallback value\n```\n\n### props_rest_readonly\n\n```\nRest element properties of `$props()` such as `%property%` are readonly\n```\n\n### rune_outside_svelte\n\n```\nThe `%rune%` rune is only available inside `.svelte` and `.svelte.js/ts` files\n```\n\n### set_context_after_init\n\n```\n`setContext` must be called when a component first initializes, not in a subsequent effect or after an `await` expression\n```\n\nThis restriction only applies when using the `experimental.async` option, which will be active by default in Svelte 6.\n\n### state_descriptors_fixed\n\n```\nProperty descriptors defined on `$state` objects must contain `value` and always be `enumerable`, `configurable` and `writable`.\n```\n\n### state_prototype_fixed\n\n```\nCannot set prototype of `$state` object\n```\n\n### state_unsafe_mutation\n\n```\nUpdating state inside `$derived(...)`, `$inspect(...)` or a template expression is forbidden. If the value should not be reactive, declare it without `$state`\n```\n\nThis error occurs when state is updated while evaluating a `$derived`. You might encounter it while trying to 'derive' two pieces of state in one go:\n\n```svelte\n<script>\n\tlet count = $state(0);\n\n\tlet even = $state(true);\n\n\tlet odd = $derived.by(() => {\n\t\teven = count % 2 === 0;\n\t\treturn !even;\n\t});\n</script>\n\n<button onclick={() => count++}>{count}</button>\n\n<p>{count} is even: {even}</p>\n<p>{count} is odd: {odd}</p>\n```\n\nThis is forbidden because it introduces instability: if `<p>{count} is even: {even}</p>` is updated before `odd` is recalculated, `even` will be stale. In most cases the solution is to make everything derived:\n\n```js\nlet count = 0;\n// ---cut---\nlet even = $derived(count % 2 === 0);\nlet odd = $derived(!even);\n```\n\nIf side-effects are unavoidable, use [`$effect`]($effect) instead.\n\n### svelte_boundary_reset_onerror\n\n```\nA `<svelte:boundary>` `reset` function cannot be called while an error is still being handled\n```\n\nIf a [`<svelte:boundary>`](https://svelte.dev/docs/svelte/svelte-boundary) has an `onerror` function, it must not call the provided `reset` function synchronously since the boundary is still in a broken state. Typically, `reset()` is called later, once the error has been resolved.\n\nIf it's possible to resolve the error inside the `onerror` callback, you must at least wait for the boundary to settle before calling `reset()`, for example using [`tick`](https://svelte.dev/docs/svelte/lifecycle-hooks#tick):\n\n```svelte\n<svelte:boundary onerror={async (error, reset) => {\n\tfixTheError();\n\t+++await tick();+++\n\treset();\n}}>\n\n</svelte:boundary>\n```\n\n\n## Server errors\n\n<!-- This file is generated by scripts/process-messages/index.js. Do not edit! -->\n\n### await_invalid\n\n```\nEncountered asynchronous work while rendering synchronously.\n```\n\nYou (or the framework you're using) called [`render(...)`](svelte-server#render) with a component containing an `await` expression. Either `await` the result of `render` or wrap the `await` (or the component containing it) in a [`<svelte:boundary>`](svelte-boundary) with a `pending` snippet.\n\n### html_deprecated\n\n```\nThe `html` property of server render results has been deprecated. Use `body` instead.\n```\n\n### lifecycle_function_unavailable\n\n```\n`%name%(...)` is not available on the server\n```\n\nCertain methods such as `mount` cannot be invoked while running in a server context. Avoid calling them eagerly, i.e. not during render.\n\n\n## Shared errors\n\n<!-- This file is generated by scripts/process-messages/index.js. Do not edit! -->\n\n### invalid_default_snippet\n\n```\nCannot use `{@render children(...)}` if the parent component uses `let:` directives. Consider using a named snippet instead\n```\n\nThis error would be thrown in a setup like this:\n\n```svelte\n<!--- file: Parent.svelte --->\n<List {items} let:entry>\n    <span>{entry}</span>\n</List>\n```\n\n```svelte\n<!--- file: List.svelte --->\n<script>\n    let { items, children } = $props();\n</script>\n\n<ul>\n    {#each items as item}\n        <li>{@render children(item)}</li>\n    {/each}\n</ul>\n```\n\nHere, `List.svelte` is using `{@render children(item)` which means it expects `Parent.svelte` to use snippets. Instead, `Parent.svelte` uses the deprecated `let:` directive. This combination of APIs is incompatible, hence the error.\n\n### invalid_snippet_arguments\n\n```\nA snippet function was passed invalid arguments. Snippets should only be instantiated via `{@render ...}`\n```\n\n### lifecycle_outside_component\n\n```\n`%name%(...)` can only be used during component initialisation\n```\n\nCertain lifecycle methods can only be used during component initialisation. To fix this, make sure you're invoking the method inside the _top level of the instance script_ of your component.\n\n```svelte\n<script>\n    import { onMount } from 'svelte';\n\n    function handleClick() {\n        // This is wrong\n        onMount(() => {})\n    }\n\n    // This is correct\n    onMount(() => {})\n</script>\n\n<button onclick={handleClick}>click me</button>\n```\n\n### snippet_without_render_tag\n\n```\nAttempted to render a snippet without a `{@render}` block. This would cause the snippet code to be stringified instead of its content being rendered to the DOM. To fix this, change `{snippet}` to `{@render snippet()}`.\n```\n\nA component throwing this error will look something like this (`children` is not being rendered):\n\n```svelte\n<script>\n    let { children } = $props();\n</script>\n\n{children}\n```\n\n...or like this (a parent component is passing a snippet where a non-snippet value is expected):\n\n```svelte\n<!--- file: Parent.svelte --->\n<ChildComponent>\n  {#snippet label()}\n    <span>Hi!</span>\n  {/snippet}\n</ChildComponent>\n```\n\n```svelte\n<!--- file: Child.svelte --->\n<script>\n  let { label } = $props();\n</script>\n\n<!-- This component doesn't expect a snippet, but the parent provided one -->\n<p>{label}</p>\n```\n\n### store_invalid_shape\n\n```\n`%name%` is not a store with a `subscribe` method\n```\n\n### svelte_element_invalid_this_value\n\n```\nThe `this` prop on `<svelte:element>` must be a string, if defined\n```",
    "svelte/runtime-warnings": "## Client warnings\n\n<!-- This file is generated by scripts/process-messages/index.js. Do not edit! -->\n\n### assignment_value_stale\n\n```\nAssignment to `%property%` property (%location%) will evaluate to the right-hand side, not the value of `%property%` following the assignment. This may result in unexpected behaviour.\n```\n\nGiven a case like this...\n\n```svelte\n<script>\n\tlet object = $state({ array: null });\n\n\tfunction add() {\n\t\t(object.array ??= []).push(object.array.length);\n\t}\n</script>\n\n<button onclick={add}>add</button>\n<p>items: {JSON.stringify(object.items)}</p>\n```\n\n...the array being pushed to when the button is first clicked is the `[]` on the right-hand side of the assignment, but the resulting value of `object.array` is an empty state proxy. As a result, the pushed value will be discarded.\n\nYou can fix this by separating it into two statements:\n\n```js\nlet object = { array: [0] };\n// ---cut---\nfunction add() {\n\tobject.array ??= [];\n\tobject.array.push(object.array.length);\n}\n```\n\n### await_reactivity_loss\n\n```\nDetected reactivity loss when reading `%name%`. This happens when state is read in an async function after an earlier `await`\n```\n\nSvelte's signal-based reactivity works by tracking which bits of state are read when a template or `$derived(...)` expression executes. If an expression contains an `await`, Svelte transforms it such that any state _after_ the `await` is also tracked — in other words, in a case like this...\n\n```js\nlet a = Promise.resolve(1);\nlet b = 2;\n// ---cut---\nlet total = $derived(await a + b);\n```\n\n...both `a` and `b` are tracked, even though `b` is only read once `a` has resolved, after the initial execution.\n\nThis does _not_ apply to an `await` that is not 'visible' inside the expression. In a case like this...\n\n```js\nlet a = Promise.resolve(1);\nlet b = 2;\n// ---cut---\nasync function sum() {\n\treturn await a + b;\n}\n\nlet total = $derived(await sum());\n```\n\n...`total` will depend on `a` (which is read immediately) but not `b` (which is not). The solution is to pass the values into the function:\n\n```js\nlet a = Promise.resolve(1);\nlet b = 2;\n// ---cut---\n/**\n * @param {Promise<number>} a\n * @param {number} b\n */\nasync function sum(a, b) {\n\treturn await a + b;\n}\n\nlet total = $derived(await sum(a, b));\n```\n\n### await_waterfall\n\n```\nAn async derived, `%name%` (%location%) was not read immediately after it resolved. This often indicates an unnecessary waterfall, which can slow down your app\n```\n\nIn a case like this...\n\n```js\nasync function one() { return 1 }\nasync function two() { return 2 }\n// ---cut---\nlet a = $derived(await one());\nlet b = $derived(await two());\n```\n\n...the second `$derived` will not be created until the first one has resolved. Since `await two()` does not depend on the value of `a`, this delay, often described as a 'waterfall', is unnecessary.\n\n(Note that if the values of `await one()` and `await two()` subsequently change, they can do so concurrently — the waterfall only occurs when the deriveds are first created.)\n\nYou can solve this by creating the promises first and _then_ awaiting them:\n\n```js\nasync function one() { return 1 }\nasync function two() { return 2 }\n// ---cut---\nlet aPromise = $derived(one());\nlet bPromise = $derived(two());\n\nlet a = $derived(await aPromise);\nlet b = $derived(await bPromise);\n```\n\n### binding_property_non_reactive\n\n```\n`%binding%` is binding to a non-reactive property\n```\n\n```\n`%binding%` (%location%) is binding to a non-reactive property\n```\n\n### console_log_state\n\n```\nYour `console.%method%` contained `$state` proxies. Consider using `$inspect(...)` or `$state.snapshot(...)` instead\n```\n\nWhen logging a [proxy](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy), browser devtools will log the proxy itself rather than the value it represents. In the case of Svelte, the 'target' of a `$state` proxy might not resemble its current value, which can be confusing.\n\nThe easiest way to log a value as it changes over time is to use the [`$inspect`](/docs/svelte/$inspect) rune. Alternatively, to log things on a one-off basis (for example, inside an event handler) you can use [`$state.snapshot`](/docs/svelte/$state#$state.snapshot) to take a snapshot of the current value.\n\n### event_handler_invalid\n\n```\n%handler% should be a function. Did you mean to %suggestion%?\n```\n\n### hydration_attribute_changed\n\n```\nThe `%attribute%` attribute on `%html%` changed its value between server and client renders. The client value, `%value%`, will be ignored in favour of the server value\n```\n\nCertain attributes like `src` on an `<img>` element will not be repaired during hydration, i.e. the server value will be kept. That's because updating these attributes can cause the image to be refetched (or in the case of an `<iframe>`, for the frame to be reloaded), even if they resolve to the same resource.\n\nTo fix this, either silence the warning with a [`svelte-ignore`](basic-markup#Comments) comment, or ensure that the value stays the same between server and client. If you really need the value to change on hydration, you can force an update like this:\n\n```svelte\n<script>\n\tlet { src } = $props();\n\n\tif (typeof window !== 'undefined') {\n\t\t// stash the value...\n\t\tconst initial = src;\n\n\t\t// unset it...\n\t\tsrc = undefined;\n\n\t\t$effect(() => {\n\t\t\t// ...and reset after we've mounted\n\t\t\tsrc = initial;\n\t\t});\n\t}\n</script>\n\n<img {src} />\n```\n\n### hydration_html_changed\n\n```\nThe value of an `{@html ...}` block changed between server and client renders. The client value will be ignored in favour of the server value\n```\n\n```\nThe value of an `{@html ...}` block %location% changed between server and client renders. The client value will be ignored in favour of the server value\n```\n\nIf the `{@html ...}` value changes between the server and the client, it will not be repaired during hydration, i.e. the server value will be kept. That's because change detection during hydration is expensive and usually unnecessary.\n\nTo fix this, either silence the warning with a [`svelte-ignore`](basic-markup#Comments) comment, or ensure that the value stays the same between server and client. If you really need the value to change on hydration, you can force an update like this:\n\n```svelte\n<script>\n\tlet { markup } = $props();\n\n\tif (typeof window !== 'undefined') {\n\t\t// stash the value...\n\t\tconst initial = markup;\n\n\t\t// unset it...\n\t\tmarkup = undefined;\n\n\t\t$effect(() => {\n\t\t\t// ...and reset after we've mounted\n\t\t\tmarkup = initial;\n\t\t});\n\t}\n</script>\n\n{@html markup}\n```\n\n### hydration_mismatch\n\n```\nHydration failed because the initial UI does not match what was rendered on the server\n```\n\n```\nHydration failed because the initial UI does not match what was rendered on the server. The error occurred near %location%\n```\n\nThis warning is thrown when Svelte encounters an error while hydrating the HTML from the server. During hydration, Svelte walks the DOM, expecting a certain structure. If that structure is different (for example because the HTML was repaired by the DOM because of invalid HTML), then Svelte will run into issues, resulting in this warning.\n\nDuring development, this error is often preceeded by a `console.error` detailing the offending HTML, which needs fixing.\n\n### invalid_raw_snippet_render\n\n```\nThe `render` function passed to `createRawSnippet` should return HTML for a single element\n```\n\n### legacy_recursive_reactive_block\n\n```\nDetected a migrated `$:` reactive block in `%filename%` that both accesses and updates the same reactive value. This may cause recursive updates when converted to an `$effect`.\n```\n\n### lifecycle_double_unmount\n\n```\nTried to unmount a component that was not mounted\n```\n\n### ownership_invalid_binding\n\n```\n%parent% passed property `%prop%` to %child% with `bind:`, but its parent component %owner% did not declare `%prop%` as a binding. Consider creating a binding between %owner% and %parent% (e.g. `bind:%prop%={...}` instead of `%prop%={...}`)\n```\n\nConsider three components `GrandParent`, `Parent` and `Child`. If you do `<GrandParent bind:value>`, inside `GrandParent` pass on the variable via `<Parent {value} />` (note the missing `bind:`) and then do `<Child bind:value>` inside `Parent`, this warning is thrown.\n\nTo fix it, `bind:` to the value instead of just passing a property (i.e. in this example do `<Parent bind:value />`).\n\n### ownership_invalid_mutation\n\n```\nMutating unbound props (`%name%`, at %location%) is strongly discouraged. Consider using `bind:%prop%={...}` in %parent% (or using a callback) instead\n```\n\nConsider the following code:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport Child from './Child.svelte';\n\tlet person = $state({ name: 'Florida', surname: 'Man' });\n</script>\n\n<Child {person} />\n```\n\n```svelte\n<!--- file: Child.svelte --->\n<script>\n\tlet { person } = $props();\n</script>\n\n<input bind:value={person.name}>\n<input bind:value={person.surname}>\n```\n\n`Child` is mutating `person` which is owned by `App` without being explicitly \"allowed\" to do so. This is strongly discouraged since it can create code that is hard to reason about at scale (\"who mutated this value?\"), hence the warning.\n\nTo fix it, either create callback props to communicate changes, or mark `person` as [`$bindable`]($bindable).\n\n### select_multiple_invalid_value\n\n```\nThe `value` property of a `<select multiple>` element should be an array, but it received a non-array value. The selection will be kept as is.\n```\n\nWhen using `<select multiple value={...}>`, Svelte will mark all selected `<option>` elements as selected by iterating over the array passed to `value`. If `value` is not an array, Svelte will emit this warning and keep the selected options as they are.\n\nTo silence the warning, ensure that `value`:\n\n- is an array for an explicit selection\n- is `null` or `undefined` to keep the selection as is\n\n### state_proxy_equality_mismatch\n\n```\nReactive `$state(...)` proxies and the values they proxy have different identities. Because of this, comparisons with `%operator%` will produce unexpected results\n```\n\n`$state(...)` creates a [proxy](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) of the value it is passed. The proxy and the value have different identities, meaning equality checks will always return `false`:\n\n```svelte\n<script>\n\tlet value = { foo: 'bar' };\n\tlet proxy = $state(value);\n\n\tvalue === proxy; // always false\n</script>\n```\n\nTo resolve this, ensure you're comparing values where both values were created with `$state(...)`, or neither were. Note that `$state.raw(...)` will _not_ create a state proxy.\n\n### state_proxy_unmount\n\n```\nTried to unmount a state proxy, rather than a component\n```\n\n`unmount` was called with a state proxy:\n\n```js\nimport { mount, unmount } from 'svelte';\nimport Component from './Component.svelte';\nlet target = document.body;\n// ---cut---\nlet component = $state(mount(Component, { target }));\n\n// later...\nunmount(component);\n```\n\nAvoid using `$state` here. If `component` _does_ need to be reactive for some reason, use `$state.raw` instead.\n\n### svelte_boundary_reset_noop\n\n```\nA `<svelte:boundary>` `reset` function only resets the boundary the first time it is called\n```\n\nWhen an error occurs while rendering the contents of a [`<svelte:boundary>`](https://svelte.dev/docs/svelte/svelte-boundary), the `onerror` handler is called with the error plus a `reset` function that attempts to re-render the contents.\n\nThis `reset` function should only be called once. After that, it has no effect — in a case like this, where a reference to `reset` is stored outside the boundary, clicking the button while `<Contents />` is rendered will _not_ cause the contents to be rendered again.\n\n```svelte\n<script>\n\tlet reset;\n</script>\n\n<button onclick={reset}>reset</button>\n\n<svelte:boundary onerror={(e, r) => (reset = r)}>\n\t<!-- contents -->\n\n\t{#snippet failed(e)}\n\t\t<p>oops! {e.message}</p>\n\t{/snippet}\n</svelte:boundary>\n```\n\n### transition_slide_display\n\n```\nThe `slide` transition does not work correctly for elements with `display: %value%`\n```\n\nThe [slide](/docs/svelte/svelte-transition#slide) transition works by animating the `height` of the element, which requires a `display` style like `block`, `flex` or `grid`. It does not work for:\n\n- `display: inline` (which is the default for elements like `<span>`), and its variants like `inline-block`, `inline-flex` and `inline-grid`\n- `display: table` and `table-[name]`, which are the defaults for elements like `<table>` and `<tr>`\n- `display: contents`\n\n\n## Shared warnings\n\n<!-- This file is generated by scripts/process-messages/index.js. Do not edit! -->\n\n### dynamic_void_element_content\n\n```\n`<svelte:element this=\"%tag%\">` is a void element — it cannot have content\n```\n\nElements such as `<input>` cannot have content, any children passed to these elements will be ignored.\n\n### state_snapshot_uncloneable\n\n```\nValue cannot be cloned with `$state.snapshot` — the original value was returned\n```\n\n```\nThe following properties cannot be cloned with `$state.snapshot` — the return value contains the originals:\n\n%properties%\n```\n\n`$state.snapshot` tries to clone the given value in order to return a reference that no longer changes. Certain objects may not be cloneable, in which case the original value is returned. In the following example, `property` is cloned, but `window` is not, because DOM elements are uncloneable:\n\n```js\nconst object = $state({ property: 'this is cloneable', window })\nconst snapshot = $state.snapshot(object);\n```",
    "svelte/legacy-overview": "Svelte 5 introduced some significant changes to Svelte's API, including [runes](what-are-runes), [snippets](snippet) and event attributes. As a result, some Svelte 3/4 features are deprecated (though supported for now, unless otherwise specified) and will eventually be removed. We recommend that you incrementally [migrate your existing code](v5-migration-guide).\n\nThe following pages document these features for\n\n- people still using Svelte 3/4\n- people using Svelte 5, but with components that haven't yet been migrated\n\nSince Svelte 3/4 syntax still works in Svelte 5, we will distinguish between _legacy mode_ and _runes mode_. Once a component is in runes mode (which you can opt into by using runes, or by explicitly setting the `runes: true` compiler option), legacy mode features are no longer available.\n\nIf you're exclusively interested in the Svelte 3/4 syntax, you can browse its documentation at [v4.svelte.dev](https://v4.svelte.dev).",
    "svelte/legacy-let": "In runes mode, reactive state is explicitly declared with the [`$state` rune]($state).\n\nIn legacy mode, variables declared at the top level of a component are automatically considered _reactive_. Reassigning or mutating these variables (`count += 1` or `object.x = y`) will cause the UI to update.\n\n```svelte\n<script>\n\tlet count = 0;\n</script>\n\n<button on:click={() => count += 1}>\n\tclicks: {count}\n</button>\n```\n\nBecause Svelte's legacy mode reactivity is based on _assignments_, using array methods like `.push()` and `.splice()` won't automatically trigger updates. A subsequent assignment is required to 'tell' the compiler to update the UI:\n\n```svelte\n<script>\n\tlet numbers = [1, 2, 3, 4];\n\n\tfunction addNumber() {\n\t\t// this method call does not trigger an update\n\t\tnumbers.push(numbers.length + 1);\n\n\t\t// this assignment will update anything\n\t\t// that depends on `numbers`\n\t\tnumbers = numbers;\n\t}\n</script>\n```",
    "svelte/legacy-reactive-assignments": "In runes mode, reactions to state updates are handled with the [`$derived`]($derived) and [`$effect`]($effect) runes.\n\nIn legacy mode, any top-level statement (i.e. not inside a block or a function) can be made reactive by prefixing it with a `$:` [label](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label). These statements run after other code in the `<script>` and before the component markup is rendered, then whenever the values that they depend on change.\n\n```svelte\n<script>\n\tlet a = 1;\n\tlet b = 2;\n\n\t// this is a 'reactive statement', and it will re-run\n\t// when `a`, `b` or `sum` change\n\t$: console.log(`${a} + ${b} = ${sum}`);\n\n\t// this is a 'reactive assignment' — `sum` will be\n\t// recalculated when `a` or `b` change. It is\n\t// not necessary to declare `sum` separately\n\t$: sum = a + b;\n</script>\n```\n\nStatements are ordered _topologically_ by their dependencies and their assignments: since the `console.log` statement depends on `sum`, `sum` is calculated first even though it appears later in the source.\n\nMultiple statements can be combined by putting them in a block:\n\n```js\n// @noErrors\n$: {\n\t// recalculate `total` when `items` changes\n\ttotal = 0;\n\n\tfor (const item of items) {\n\t\ttotal += item.value;\n\t}\n}\n```\n\nThe left-hand side of a reactive assignments can be an identifier, or it can be a destructuring assignment:\n\n```js\n// @noErrors\n$: ({ larry, moe, curly } = stooges);\n```\n\n## Understanding dependencies\n\nThe dependencies of a `$:` statement are determined at compile time — they are whichever variables are referenced (but not assigned to) inside the statement.\n\nIn other words, a statement like this will _not_ re-run when `count` changes, because the compiler cannot 'see' the dependency:\n\n```js\n// @noErrors\nlet count = 0;\nlet double = () => count * 2;\n\n$: doubled = double();\n```\n\nSimilarly, topological ordering will fail if dependencies are referenced indirectly: `z` will never update, because `y` is not considered 'dirty' when the update occurs. Moving `$: z = y` below `$: setY(x)` will fix it:\n\n```svelte\n<script>\n\tlet x = 0;\n\tlet y = 0;\n\n\t$: z = y;\n\t$: setY(x);\n\n\tfunction setY(value) {\n\t\ty = value;\n\t}\n</script>\n```\n\n## Browser-only code\n\nReactive statements run during server-side rendering as well as in the browser. This means that any code that should only run in the browser must be wrapped in an `if` block:\n\n```js\n// @noErrors\n$: if (browser) {\n\tdocument.title = title;\n}\n```",
    "svelte/legacy-export-let": "In runes mode, [component props](basic-markup#Component-props) are declared with the [`$props`]($props) rune, allowing parent components to pass in data.\n\nIn legacy mode, props are marked with the `export` keyword, and can have a default value:\n\n```svelte\n<script>\n\texport let foo;\n\texport let bar = 'default value';\n\n\t// Values that are passed in as props\n\t// are immediately available\n\tconsole.log({ foo });\n</script>\n```\n\nThe default value is used if it would otherwise be `undefined` when the component is created.\n\n> [!NOTE] Unlike in runes mode, if the parent component changes a prop from a defined value to `undefined`, it does not revert to the initial value.\n\nProps without default values are considered _required_, and Svelte will print a warning during development if no value is provided, which you can squelch by specifying `undefined` as the default value:\n\n```js\nexport let foo +++= undefined;+++\n```\n\n## Component exports\n\nAn exported `const`, `class` or `function` declaration is _not_ considered a prop — instead, it becomes part of the component's API:\n\n```svelte\n<!--- file: Greeter.svelte--->\n<script>\n\texport function greet(name) {\n\t\talert(`hello ${name}!`);\n\t}\n</script>\n```\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport Greeter from './Greeter.svelte';\n\n\tlet greeter;\n</script>\n\n<Greeter bind:this={greeter} />\n\n<button on:click={() => greeter.greet('world')}>\n\tgreet\n</button>\n```\n\n## Renaming props\n\nThe `export` keyword can appear separately from the declaration. This is useful for renaming props, for example in the case of a reserved word:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\t/** @type {string} */\n\tlet className;\n\n\t// creates a `class` property, even\n\t// though it is a reserved word\n\texport { className as class };\n</script>\n```",
    "svelte/legacy-$$props-and-$$restProps": "In runes mode, getting an object containing all the props that were passed in is easy, using the [`$props`]($props) rune.\n\nIn legacy mode, we use `$$props` and `$$restProps`:\n\n- `$$props` contains all the props that were passed in, including ones that are not individually declared with the `export` keyword\n- `$$restProps` contains all the props that were passed in _except_ the ones that were individually declared\n\nFor example, a `<Button>` component might need to pass along all its props to its own `<button>` element, except the `variant` prop:\n\n```svelte\n<script>\n\texport let variant;\n</script>\n\n<button {...$$restProps} class=\"variant-{variant} {$$props.class ?? ''}\">\n\tclick me\n</button>\n\n<style>\n\t.variant-danger {\n\t\tbackground: red;\n\t}\n</style>\n```\n\nIn Svelte 3/4 using `$$props` and `$$restProps` creates a modest performance penalty, so they should only be used when needed.",
    "svelte/legacy-on": "In runes mode, event handlers are just like any other attribute or prop.\n\nIn legacy mode, we use the `on:` directive:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\tlet count = 0;\n\n\t/** @param {MouseEvent} event */\n\tfunction handleClick(event) {\n\t\tcount += 1;\n\t}\n</script>\n\n<button on:click={handleClick}>\n\tcount: {count}\n</button>\n```\n\nHandlers can be declared inline with no performance penalty:\n\n```svelte\n<button on:click={() => (count += 1)}>\n\tcount: {count}\n</button>\n```\n\nAdd _modifiers_ to element event handlers with the `|` character.\n\n```svelte\n<form on:submit|preventDefault={handleSubmit}>\n\t<!-- the `submit` event's default is prevented,\n\t     so the page won't reload -->\n</form>\n```\n\nThe following modifiers are available:\n\n- `preventDefault` — calls `event.preventDefault()` before running the handler\n- `stopPropagation` — calls `event.stopPropagation()`, preventing the event reaching the next element\n- `stopImmediatePropagation` - calls `event.stopImmediatePropagation()`, preventing other listeners of the same event from being fired.\n- `passive` — improves scrolling performance on touch/wheel events (Svelte will add it automatically where it's safe to do so)\n- `nonpassive` — explicitly set `passive: false`\n- `capture` — fires the handler during the _capture_ phase instead of the _bubbling_ phase\n- `once` — remove the handler after the first time it runs\n- `self` — only trigger handler if `event.target` is the element itself\n- `trusted` — only trigger handler if `event.isTrusted` is `true`. I.e. if the event is triggered by a user action.\n\nModifiers can be chained together, e.g. `on:click|once|capture={...}`.\n\nIf the `on:` directive is used without a value, the component will _forward_ the event, meaning that a consumer of the component can listen for it.\n\n```svelte\n<button on:click>\n\tThe component itself will emit the click event\n</button>\n```\n\nIt's possible to have multiple event listeners for the same event:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\tlet count = 0;\n\n\tfunction increment() {\n\t\tcount += 1;\n\t}\n\n\t/** @param {MouseEvent} event */\n\tfunction log(event) {\n\t\tconsole.log(event);\n\t}\n</script>\n\n<button on:click={increment} on:click={log}>\n\tclicks: {count}\n</button>\n```\n\n## Component events\n\nComponents can dispatch events by creating a _dispatcher_ when they are initialised:\n\n```svelte\n<!--- file: Stepper.svelte -->\n<script>\n\timport { createEventDispatcher } from 'svelte';\n\tconst dispatch = createEventDispatcher();\n</script>\n\n<button on:click={() => dispatch('decrement')}>decrement</button>\n<button on:click={() => dispatch('increment')}>increment</button>\n```\n\n`dispatch` creates a [`CustomEvent`](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent). If a second argument is provided, it becomes the `detail` property of the event object.\n\nA consumer of this component can listen for the dispatched events:\n\n```svelte\n<script>\n\timport Stepper from './Stepper.svelte';\n\n\tlet n = 0;\n</script>\n\n<Stepper\n\ton:decrement={() => n -= 1}\n\ton:increment={() => n += 1}\n/>\n\n<p>n: {n}</p>\n```\n\nComponent events do not bubble — a parent component can only listen for events on its immediate children.\n\nOther than `once`, modifiers are not valid on component event handlers.\n\n> [!NOTE]\n> If you're planning an eventual migration to Svelte 5, use callback props instead. This will make upgrading easier as `createEventDispatcher` is deprecated:\n>\n> ```svelte\n> <!--- file: Stepper.svelte --->\n> <script>\n> \texport let decrement;\n> \texport let increment;\n> </script>\n>\n> <button on:click={decrement}>decrement</button>\n> <button on:click={increment}>increment</button>\n> ```",
    "svelte/legacy-slots": "In Svelte 5, content can be passed to components in the form of [snippets](snippet) and rendered using [render tags](@render).\n\nIn legacy mode, content inside component tags is considered _slotted content_, which can be rendered by the component using a `<slot>` element:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport Modal from './Modal.svelte';\n</script>\n\n<Modal>This is some slotted content</Modal>\n```\n\n```svelte\n<!--- file: Modal.svelte --->\n<div class=\"modal\">\n\t<slot></slot>\n</div>\n```\n\n> [!NOTE] If you want to render a regular `<slot>` element, you can use `<svelte:element this={'slot'} />`.\n\n## Named slots\n\nA component can have _named_ slots in addition to the default slot. On the parent side, add a `slot=\"...\"` attribute to an element, component or [`<svelte:fragment>`](legacy-svelte-fragment) directly inside the component tags.\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport Modal from './Modal.svelte';\n\n\tlet open = true;\n</script>\n\n{#if open}\n\t<Modal>\n\t\tThis is some slotted content\n\n\t\t+++<div slot=\"buttons\">+++\n\t\t\t<button on:click={() => open = false}>\n\t\t\t\tclose\n\t\t\t</button>\n\t\t+++</div>+++\n\t</Modal>\n{/if}\n```\n\nOn the child side, add a corresponding `<slot name=\"...\">` element:\n\n```svelte\n<!--- file: Modal.svelte --->\n<div class=\"modal\">\n\t<slot></slot>\n\t<hr>\n\t+++<slot name=\"buttons\"></slot>+++\n</div>\n```\n\n## Fallback content\n\nIf no slotted content is provided, a component can define fallback content by putting it inside the `<slot>` element:\n\n```svelte\n<slot>\n\tThis will be rendered if no slotted content is provided\n</slot>\n```\n\n## Passing data to slotted content\n\nSlots can be rendered zero or more times and can pass values _back_ to the parent using props. The parent exposes the values to the slot template using the `let:` directive.\n\n```svelte\n<!--- file: FancyList.svelte --->\n<ul>\n\t{#each items as data}\n\t\t<li class=\"fancy\">\n\t\t\t<!-- 'item' here... -->\n\t\t\t<slot item={process(data)} />\n\t\t</li>\n\t{/each}\n</ul>\n```\n\n```svelte\n<!--- file: App.svelte --->\n<!-- ...corresponds to 'item' here: -->\n<FancyList {items} let:item={processed}>\n\t<div>{processed.text}</div>\n</FancyList>\n```\n\nThe usual shorthand rules apply — `let:item` is equivalent to `let:item={item}`, and `<slot {item}>` is equivalent to `<slot item={item}>`.\n\nNamed slots can also expose values. The `let:` directive goes on the element with the `slot` attribute.\n\n```svelte\n<!--- file: FancyList.svelte --->\n<ul>\n\t{#each items as item}\n\t\t<li class=\"fancy\">\n\t\t\t<slot name=\"item\" item={process(data)} />\n\t\t</li>\n\t{/each}\n</ul>\n\n<slot name=\"footer\" />\n```\n\n```svelte\n<!--- file: App.svelte --->\n<FancyList {items}>\n\t<div slot=\"item\" let:item>{item.text}</div>\n\t<p slot=\"footer\">Copyright (c) 2019 Svelte Industries</p>\n</FancyList>\n```",
    "svelte/legacy-$$slots": "In runes mode, we know which [snippets](snippet) were provided to a component, as they're just normal props.\n\nIn legacy mode, the way to know if content was provided for a given slot is with the `$$slots` object, whose keys are the names of the slots passed into the component by the parent.\n\n```svelte\n<!--- file: Card.svelte --->\n<div>\n\t<slot name=\"title\" />\n\t{#if $$slots.description}\n\t\t<!-- This <hr> and slot will render only if `slot=\"description\"` is provided. -->\n\t\t<hr />\n\t\t<slot name=\"description\" />\n\t{/if}\n</div>\n```\n\n```svelte\n<!--- file: App.svelte --->\n<Card>\n\t<h1 slot=\"title\">Blog Post Title</h1>\n\t<!-- No slot named \"description\" was provided so the optional slot will not be rendered. -->\n</Card>\n```",
    "svelte/legacy-svelte-fragment": "The `<svelte:fragment>` element allows you to place content in a [named slot](legacy-slots) without wrapping it in a container DOM element. This keeps the flow layout of your document intact.\n\n```svelte\n<!--- file: Widget.svelte --->\n<div>\n\t<slot name=\"header\">No header was provided</slot>\n\t<p>Some content between header and footer</p>\n\t<slot name=\"footer\" />\n</div>\n```\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport Widget from './Widget.svelte';\n</script>\n\n<Widget>\n\t<h1 slot=\"header\">Hello</h1>\n\t<svelte:fragment slot=\"footer\">\n\t\t<p>All rights reserved.</p>\n\t\t<p>Copyright (c) 2019 Svelte Industries</p>\n\t</svelte:fragment>\n</Widget>\n```\n\n> [!NOTE]\n> In Svelte 5+, this concept is obsolete, as snippets don't create a wrapping element",
    "svelte/legacy-svelte-component": "In runes mode, `<MyComponent>` will re-render if the value of `MyComponent` changes. See the [Svelte 5 migration guide](/docs/svelte/v5-migration-guide#svelte:component-is-no-longer-necessary) for an example.\n\nIn legacy mode, it won't — we must use `<svelte:component>`, which destroys and recreates the component instance when the value of its `this` expression changes:\n\n```svelte\n<svelte:component this={MyComponent} />\n```\n\nIf `this` is falsy, no component is rendered.",
    "svelte/legacy-svelte-self": "The `<svelte:self>` element allows a component to include itself, recursively.\n\nIt cannot appear at the top level of your markup; it must be inside an if or each block or passed to a component's slot to prevent an infinite loop.\n\n```svelte\n<script>\n\texport let count;\n</script>\n\n{#if count > 0}\n\t<p>counting down... {count}</p>\n\t<svelte:self count={count - 1} />\n{:else}\n\t<p>lift-off!</p>\n{/if}\n```\n\n> [!NOTE]\n> This concept is obsolete, as components can import themselves:\n> ```svelte\n> <!--- file: App.svelte --->\n> <script>\n> \timport Self from './App.svelte'\n> \texport let count;\n> </script>\n>\n> {#if count > 0}\n> \t<p>counting down... {count}</p>\n> \t<Self count={count - 1} />\n> {:else}\n> \t<p>lift-off!</p>\n> {/if}\n> ```",
    "svelte/legacy-component-api": "In Svelte 3 and 4, the API for interacting with a component is different than in Svelte 5. Note that this page does _not_ apply to legacy mode components in a Svelte 5 application.\n\n## Creating a component\n\n```ts\n// @noErrors\nconst component = new Component(options);\n```\n\nA client-side component — that is, a component compiled with `generate: 'dom'` (or the `generate` option left unspecified) is a JavaScript class.\n\n```ts\n// @noErrors\nimport App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n\tprops: {\n\t\t// assuming App.svelte contains something like\n\t\t// `export let answer`:\n\t\tanswer: 42\n\t}\n});\n```\n\nThe following initialisation options can be provided:\n\n| option    | default     | description                                                                                          |\n| --------- | ----------- | ---------------------------------------------------------------------------------------------------- |\n| `target`  | **none**    | An `HTMLElement` or `ShadowRoot` to render to. This option is required                               |\n| `anchor`  | `null`      | A child of `target` to render the component immediately before                                       |\n| `props`   | `{}`        | An object of properties to supply to the component                                                   |\n| `context` | `new Map()` | A `Map` of root-level context key-value pairs to supply to the component                             |\n| `hydrate` | `false`     | See below                                                                                            |\n| `intro`   | `false`     | If `true`, will play transitions on initial render, rather than waiting for subsequent state changes |\n\nExisting children of `target` are left where they are.\n\nThe `hydrate` option instructs Svelte to upgrade existing DOM (usually from server-side rendering) rather than creating new elements. It will only work if the component was compiled with the [`hydratable: true` option](/docs/svelte-compiler#compile). Hydration of `<head>` elements only works properly if the server-side rendering code was also compiled with `hydratable: true`, which adds a marker to each element in the `<head>` so that the component knows which elements it's responsible for removing during hydration.\n\nWhereas children of `target` are normally left alone, `hydrate: true` will cause any children to be removed. For that reason, the `anchor` option cannot be used alongside `hydrate: true`.\n\nThe existing DOM doesn't need to match the component — Svelte will 'repair' the DOM as it goes.\n\n```ts\n/// file: index.js\n// @noErrors\nimport App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.querySelector('#server-rendered-html'),\n\thydrate: true\n});\n```\n\n> [!NOTE]\n> In Svelte 5+, use [`mount`](svelte#mount) instead\n\n## `$set`\n\n```ts\n// @noErrors\ncomponent.$set(props);\n```\n\nProgrammatically sets props on an instance. `component.$set({ x: 1 })` is equivalent to `x = 1` inside the component's `<script>` block.\n\nCalling this method schedules an update for the next microtask — the DOM is _not_ updated synchronously.\n\n```ts\n// @noErrors\ncomponent.$set({ answer: 42 });\n```\n\n> [!NOTE]\n> In Svelte 5+, use `$state` instead to create a component props and update that\n>\n> ```js\n> // @noErrors\n> let props = $state({ answer: 42 });\n> const component = mount(Component, { props });\n> // ...\n> props.answer = 24;\n> ```\n\n## `$on`\n\n```ts\n// @noErrors\ncomponent.$on(ev, callback);\n```\n\nCauses the `callback` function to be called whenever the component dispatches an `event`.\n\nA function is returned that will remove the event listener when called.\n\n```ts\n// @noErrors\nconst off = component.$on('selected', (event) => {\n\tconsole.log(event.detail.selection);\n});\n\noff();\n```\n\n> [!NOTE]\n> In Svelte 5+, pass callback props instead\n\n## `$destroy`\n\n```js\n// @noErrors\ncomponent.$destroy();\n```\n\nRemoves a component from the DOM and triggers any `onDestroy` handlers.\n\n> [!NOTE]\n> In Svelte 5+, use [`unmount`](svelte#unmount) instead\n\n## Component props\n\n```js\n// @noErrors\ncomponent.prop;\n```\n\n```js\n// @noErrors\ncomponent.prop = value;\n```\n\nIf a component is compiled with `accessors: true`, each instance will have getters and setters corresponding to each of the component's props. Setting a value will cause a _synchronous_ update, rather than the default async update caused by `component.$set(...)`.\n\nBy default, `accessors` is `false`, unless you're compiling as a custom element.\n\n```js\n// @noErrors\nconsole.log(component.count);\ncomponent.count += 1;\n```\n\n> [!NOTE]\n> In Svelte 5+, this concept is obsolete. If you want to make properties accessible from the outside, `export` them\n\n## Server-side component API\n\n```js\n// @noErrors\nconst result = Component.render(...)\n```\n\nUnlike client-side components, server-side components don't have a lifespan after you render them — their whole job is to create some HTML and CSS. For that reason, the API is somewhat different.\n\nA server-side component exposes a `render` method that can be called with optional props. It returns an object with `head`, `html`, and `css` properties, where `head` contains the contents of any `<svelte:head>` elements encountered.\n\nYou can import a Svelte component directly into Node using `svelte/register`.\n\n```js\n// @noErrors\nrequire('svelte/register');\n\nconst App = require('./App.svelte').default;\n\nconst { head, html, css } = App.render({\n\tanswer: 42\n});\n```\n\nThe `.render()` method accepts the following parameters:\n\n| parameter | default | description                                        |\n| --------- | ------- | -------------------------------------------------- |\n| `props`   | `{}`    | An object of properties to supply to the component |\n| `options` | `{}`    | An object of options                               |\n\nThe `options` object takes in the following options:\n\n| option    | default     | description                                                              |\n| --------- | ----------- | ------------------------------------------------------------------------ |\n| `context` | `new Map()` | A `Map` of root-level context key-value pairs to supply to the component |\n\n```js\n// @noErrors\nconst { head, html, css } = App.render(\n\t// props\n\t{ answer: 42 },\n\t// options\n\t{\n\t\tcontext: new Map([['context-key', 'context-value']])\n\t}\n);\n```\n\n> [!NOTE]\n> In Svelte 5+, use [`render`](svelte-server#render) instead"
  }
}