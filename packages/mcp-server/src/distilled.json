{
	"generated_at": "2025-10-11T00:58:02.509Z",
	"model": "claude-sonnet-4-5-20250929",
	"total_sections": 173,
	"successful_summaries": 173,
	"summaries": {
		"cli/overview": "# Svelte CLI (`sv`)\n\nToolkit for creating and maintaining Svelte applications.\n\n## Usage\n\n```sh\nnpx sv <command> <args>\n```\n\nUses local installation if available, otherwise downloads latest version. Works with other package managers (`pnpx` for pnpm, etc.).",
		"cli/faq": "# Svelte CLI (`sv`)\n\n## Running `sv` CLI\n\n```bash\nnpm:  npx sv create\npnpm: pnpx sv create / pnpm dlx sv create\nBun:  bunx sv create\nDeno: deno run npm:sv create\nYarn: yarn dlx sv create\n```\n\n## Troubleshooting\n\n**`npx sv` not working**: Package managers may run local tools instead of registry packages (common with npm/yarn).\n\nKnown issues:\n- `npx sv create` does nothing ([#472](https://github.com/sveltejs/cli/issues/472))\n- `sv` conflicts with `runit` ([#259](https://github.com/sveltejs/cli/issues/259))\n- Windows PowerShell: `sv` conflicts with `Set-Variable` ([#317](https://github.com/sveltejs/cli/issues/317))",
		"cli/sv-create": "# sv create\n\nSets up a new SvelteKit project.\n\n## Usage\n\n```sh\nnpx sv create [options] [path]\n```\n\n## Options\n\n### `--from-playground <url>`\nCreate project from a [playground](/playground) URL. Downloads files, detects dependencies, sets up complete project structure.\n\n```sh\nnpx sv create --from-playground=\"https://svelte.dev/playground/hello-world\"\n```\n\n### `--template <name>`\n- `minimal` — barebones scaffolding\n- `demo` — showcase app with word guessing game (works without JS)\n- `library` — Svelte library template with `svelte-package`\n\n### `--types <option>`\n- `ts` — `.ts` files and `lang=\"ts\"` in `.svelte` components\n- `jsdoc` — [JSDoc syntax](https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html) for types\n\n### `--no-types`\nDisable typechecking (not recommended)\n\n### `--",
		"cli/sv-add": "# sv add\n\nAdds functionality to existing projects.\n\n## Usage\n\n```sh\nnpx sv add\nnpx sv add [add-ons]\n```\n\nSelect multiple space-separated add-ons or use interactive prompt.\n\n## Options\n\n- `-C`, `--cwd` — project root path\n- `--no-git-check` — skip dirty files check\n- `--install` — install deps with specified package manager\n- `--no-install` — skip dependency installation\n\n## Official add-ons\n\n- `devtools-json`\n- `drizzle`\n- `eslint`\n- `lucia`\n- `mdsvex`\n- `paraglide`\n- `playwright`\n- `prettier`\n- `storybook`\n- `sveltekit-adapter`\n- `tailwindcss`\n- `vitest`",
		"cli/sv-check": "# sv check\n\nFinds errors and warnings: unused CSS, a11y hints, JS/TS compiler errors.\n\nRequires Node 16+.\n\n## Installation\n\n```sh\nnpm i -D svelte-check\n```\n\n## Usage\n\n```sh\nnpx sv check\n```\n\n## Options\n\n### `--workspace <path>`\nPath to workspace. Checks all subdirectories except `node_modules` and `--ignore` paths.\n\n### `--output <format>`\nDisplay format: `human`, `human-verbose`, `machine`, `machine-verbose`\n\n### `--watch`\nWatch mode for changes.\n\n### `--preserveWatchOutput`\nDon't clear screen in watch mode.\n\n### `--tsconfig <path>`\nPath to `tsconfig`/`jsconfig`. Only files matching `files`/`include`/`exclude` are checked. Reports TS/JS errors. If omitted, searches upward from project directory.\n\n### `--no-tsconfig`\nOnly check `.svelte` files, ignore `.js`/`.ts` files.\n\n### `--ignore <paths>`",
		"cli/sv-migrate": "# sv migrate\n\nMigrates Svelte(Kit) codebases using [`svelte-migrate`](https://www.npmjs.com/package/svelte-migrate). Search for `@migration` tasks after running.\n\n## Usage\n\n```sh\nnpx sv migrate\n# or specify migration\nnpx sv migrate [migration]\n```\n\n## Migrations\n\n- **`app-state`** - Migrates `$app/stores` → `$app/state` in `.svelte` files\n- **`svelte-5`** - Upgrades Svelte 4 → 5 (runes, new syntax)\n- **`self-closing-tags`** - Fixes self-closing non-void elements\n- **`svelte-4`** - Upgrades Svelte 3 → 4\n- **`sveltekit-2`** - Upgrades SvelteKit 1 → 2\n- **`package`** - Upgrades `@sveltejs/package` v1 → v2\n- **`routes`** - Upgrades pre",
		"cli/devtools-json": "# devtools-json Add-on\n\nInstalls [`vite-plugin-devtools-json`](https://github.com/ChromeDevTools/vite-plugin-devtools-json/) - serves `/.well-known/appspecific/com.chrome.devtools.json` to enable [Chrome DevTools workspaces](https://developer.chrome.com/docs/devtools/workspaces) for editing source files in browser.\n\n> [!NOTE]\n> Enables feature for all dev server users. Allows browser to read/write all files in directory. Chrome's AI Assistance may send data to Google.\n\n## Alternatives\n\n**Disable in browser:** Visit `chrome://flags`, disable \"DevTools Project Settings\" and \"DevTools Automatic Workspace Folders\".\n\n**Suppress server notice:** Handle request in `handle` hook:\n\n```js\n/// file: src/hooks.server.js\nimport { dev } from '$app/environment';\n\nexport function handle({ event, resolve }) {\n\tif (dev && event.url.pathname === '/.well-known/appspecific/com.chrome",
		"cli/drizzle": "# Drizzle ORM\n\nTypeScript ORM with relational and SQL-like APIs, serverless-ready.\n\n## Setup\n\n```sh\nnpx sv add drizzle\n```\n\nProvides:\n- Database access in server files\n- `.env` for credentials\n- Lucia auth compatibility\n- Optional Docker config for local DB\n\n## Options\n\n### database\n\n```sh\nnpx sv add drizzle=database:postgresql\n```\n\n- `postgresql` — most popular open source\n- `mysql` — popular open source\n- `sqlite` — file-based, no server needed\n\n### client\n\nSQL client (depends on database):\n\n```sh\nnpx sv add drizzle=database:postgresql+client:postgres.js\n```\n\n- **postgresql**: `postgres.js`, `neon`\n- **mysql**: `mysql2`, `planetscale`\n- **sqlite**: `better-sqlite3`, `libsql`, `turso`\n\nCan swap for [other Drizzle-compatible drivers](https://orm.drizzle.team/docs/connect-overview#next-steps) after setup.\n\n###",
		"cli/eslint": "# ESLint\n\n[ESLint](https://eslint.org/) finds and fixes problems in your code.\n\n## Usage\n\n```sh\nnpx sv add eslint\n```\n\n## What you get\n\n- `eslint-plugin-svelte` and dependencies installed\n- `eslint.config.js` file\n- Updated `.vscode/settings.json`\n- TypeScript and Prettier integration (if installed)",
		"cli/lucia": "# Lucia Auth\n\n## Usage\n\n```sh\nnpx sv add lucia\n```\n\n## What you get\n\n- Auth setup for SvelteKit + Drizzle following [Lucia auth guide](https://lucia-auth.com/)\n- Optional demo registration/login pages\n\n## Options\n\n### demo\n\nInclude demo registration and login pages.\n\n```sh\nnpx sv add lucia=demo:yes\n```",
		"cli/mdsvex": "# mdsvex\n\n[mdsvex](https://mdsvex.pngwn.io) is a markdown preprocessor for Svelte - MDX for Svelte. Use Svelte components in markdown or markdown in Svelte components.\n\n## Usage\n\n```sh\nnpx sv add mdsvex\n```\n\nInstalls and configures mdsvex in `svelte.config.js`.",
		"cli/paraglide": "# Paraglide i18n\n\n[Paraglide](https://inlang.com/m/gerre34r/library-inlang-paraglideJs) - compiler-based i18n with tree-shakable messages, type-safety, no async waterfalls.\n\n## Setup\n\n```sh\nnpx sv add paraglide\n```\n\nAuto-configures:\n- Inlang project settings\n- Vite plugin\n- SvelteKit `reroute` and `handle` hooks\n- `text-direction` and `lang` attributes in `app.html`\n- `.gitignore` updates\n- Optional demo page\n\n## Options\n\n**languageTags** - IETF BCP 47 language tags:\n```sh\nnpx sv add paraglide=\"languageTags:en,es\"\n```\n\n**demo** - Generate demo page:\n```sh\nnpx sv add paraglide=\"demo:yes\"\n```",
		"cli/playwright": "# Playwright\n\nBrowser testing with [Playwright](https://playwright.dev).\n\n## Usage\n\n```sh\nnpx sv add playwright\n```\n\n## What you get\n\n- Scripts in `package.json`\n- Playwright config file\n- Updated `.gitignore`\n- Demo test",
		"cli/prettier": "# Prettier\n\nOpinionated code formatter.\n\n## Usage\n\n```sh\nnpx sv add prettier\n```\n\n## What you get\n\n- Scripts in `package.json`\n- `.prettierignore` and `.prettierrc` files\n- ESLint config updates (if using ESLint)",
		"cli/storybook": "# Storybook\n\nComponent workshop for Svelte/SvelteKit.\n\n## Setup\n\n```sh\nnpx sv add storybook\n```\n\nInstalls [Storybook for SvelteKit](https://storybook.js.org/docs/get-started/frameworks/sveltekit) or [Storybook for Svelte & Vite](https://storybook.js.org/docs/get-started/frameworks/svelte-vite) with default config, SvelteKit module mocking, and automatic link handling.",
		"cli/sveltekit-adapter": "# SvelteKit Adapters\n\nAdapters enable deployment to various platforms.\n\n## Usage\n\n```sh\nnpx sv add sveltekit-adapter\n```\n\nInstalls and configures chosen adapter in `svelte.config.js`.\n\n## Adapter Options\n\n- `auto` — auto-selects adapter, less configurable\n- `node` — standalone Node server\n- `static` — static site generator (SSG)\n- `vercel` — deploy to Vercel\n- `cloudflare` — deploy to Cloudflare\n- `netlify` — deploy to Netlify\n\n```sh\nnpx sv add sveltekit-adapter=adapter:node\n```",
		"cli/tailwind": "# Tailwind CSS\n\n## Setup\n\n```sh\nnpx sv add tailwindcss\n```\n\nInstalls Tailwind following [official SvelteKit guide](https://tailwindcss.com/docs/installation/framework-guides/sveltekit), includes Vite plugin, updates `app.css` and `+layout.svelte` (SvelteKit) or `App.svelte` (Vite), integrates with Prettier if present.\n\n## Options\n\nAdd plugins:\n\n```sh\nnpx sv add tailwindcss=\"plugins:typography\"\n```\n\n- `typography` — [`@tailwindcss/typography`](https://github.com/tailwindlabs/tailwindcss-typography)\n- `forms` — [`@tailwindcss/forms`](https://github.com/tailwindlabs/tailwindcss-forms)",
		"cli/vitest": "# Vitest\n\n[Vitest](https://vitest.dev/) is a Vite-native testing framework.\n\n## Usage\n\n```sh\nnpx sv add vitest\n```\n\nInstalls packages, adds scripts to `package.json`, configures client/server-aware testing for Svelte in Vite config, includes demo tests.",
		"kit/introduction": "# SvelteKit Introduction\n\n## What is SvelteKit?\n\nFramework for building robust, performant web apps using Svelte. Similar to Next (React) or Nuxt (Vue).\n\n## SvelteKit vs Svelte\n\n**Svelte**: UI component compiler that renders components to JavaScript/CSS.\n\n**SvelteKit**: Full app framework providing:\n- Router\n- [Build optimizations](https://vitejs.dev/guide/features.html#build-optimizations)\n- [Offline support](service-workers)\n- [Preloading](link-options#data-sveltekit-preload-data)\n- [Configurable rendering](page-options): [SSR](glossary#SSR), [CSR](glossary#CSR), [prerendering](glossary#Prerendering)\n- [Image optimization](images)\n- [Vite](https://vitejs.dev/) + [HMR](https://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/config.md#hot)\n\nSee",
		"kit/creating-a-project": "# SvelteKit Quick Start\n\n## Setup\n\n```sh\nnpx sv create my-app\ncd my-app\nnpm run dev\n```\n\nScaffolds project in `my-app`, starts dev server at `localhost:5173`. See [CLI docs](/docs/cli/overview) and [integrations page](./integrations) for tooling options.\n\n## Core Concepts\n\n- Each page = Svelte component\n- Add files to `src/routes` for pages\n- Server-rendered first visit, then client-side app\n\n## Editor\n\nUse [VS Code](https://code.visualstudio.com/download) + [Svelte extension](https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode). [Other editors supported](https://sveltesociety.dev/resources#editor-support).",
		"kit/project-types": "# SvelteKit Rendering & Deployment\n\n## Default Rendering\n\nFirst page: SSR (server-side rendering)  \nSubsequent pages: CSR (client-side rendering)  \nImproves SEO and eliminates page flash on navigation.\n\n## Static Site Generation (SSG)\n\nUse [`adapter-static`](adapter-static) to prerender entire site, or use [prerender option](page-options#prerender) for specific pages with another adapter.\n\nFor large sites: Use [ISR with `adapter-vercel`](adapter-vercel#Incremental-Static-Regeneration) to avoid long builds.\n\n## Single-Page App (SPA)\n\nCSR only. [Build SPAs](single-page-apps) with SvelteKit. Skip `server` file docs if using separate backend.\n\n## Multi-Page App (MPA)\n\nNot typical for SvelteKit. Use [`csr = false`](page-options#csr) to remove JS or [`data-sveltekit-reload`](link-options#data-sveltekit-reload) for server-rendere",
		"kit/project-structure": "# SvelteKit Project Structure\n\n## Directory Structure\n\n```tree\nmy-project/\n├ src/\n│ ├ lib/\n│ │ ├ server/          # Server-only code\n│ │ └ [lib files]      # Utilities/components via $lib alias\n│ ├ params/            # Param matchers\n│ ├ routes/            # App routes\n│ ├ app.html           # Page template\n│ ├ error.html         # Error page\n│ ├ hooks.client.js\n│ ├ hooks.server.js\n│ ├ service-worker.js\n│ └ tracing.server.js  # Observability (runs before app)\n├ static/              # Static assets (robots.txt, etc.)\n├ tests/               # Playwright tests\n├ package.json\n├ svelte.config.js\n├ tsconfig.json\n└ vite.config.js\n```\n\n## Key Files\n\n### app.html\nPage template with placeholders:",
		"kit/web-standards": "# Web Standards\n\nSvelteKit builds on standard Web APIs available in modern browsers and non-browser environments.\n\n## Fetch APIs\n\n`fetch` available in hooks, server routes, and browser.\n\n**Special server-side `fetch`:**\n- In `load` functions, server hooks, and API routes: invokes endpoints directly during SSR without HTTP calls\n- Preserves credentials automatically\n- Allows relative requests\n- Outside `load`: must explicitly pass `cookie`/`authorization` headers\n\n### Request\n\nAccess via `event.request` in hooks and server routes.\n\n```js\n// Get posted data\nrequest.json()\nrequest.formData()\n```\n\n### Response\n\nReturned from `await fetch(...)` and `+server.js` handlers.\n\n### Headers\n\nRead `request.headers`, set `response.headers`:\n\n```js\n/// file: src/routes/what-is-my-user-agent/+server.js\nimport { json } from '@sveltejs/kit';\n\n/** @type {import('./$types').RequestHandler} */\nexport function GET({ request }) {\n\t// log all headers",
		"kit/routing": "# SvelteKit Routing\n\n## Filesystem-based Router\n\nRoutes defined by directories in `src/routes`:\n- `src/routes` → root route\n- `src/routes/about` → `/about`\n- `src/routes/blog/[slug]` → `/blog/hello-world` (dynamic parameter)\n\n**Key rules:**\n- All files run on server\n- All files run on client except `+server`\n- `+layout` and `+error` apply to subdirectories\n\n## +page\n\n### +page.svelte\n\nDefines a page. Renders on server (SSR) initially, then client (CSR) for navigation.\n\n```svelte\n<!--- file: src/routes/+page.svelte --->\n<h1>Hello and welcome to my site!</h1>\n<a href=\"/about\">About my site</a>\n```\n\nUse `<a>` elements for navigation, not framework components.\n\nReceives data from `load` via `data` prop:\n\n```svelte\n<!--- file: src/routes/blog/[slug]/+page.sv",
		"kit/load": "# Loading Data\n\n## Page data\n\n`+page.js` exports a `load` function whose return value is available to `+page.svelte` via `data` prop:\n\n```js\n/// file: src/routes/blog/[slug]/+page.js\n/** @type {import('./$types').PageLoad} */\nexport function load({ params }) {\n\treturn {\n\t\tpost: {\n\t\t\ttitle: `Title for ${params.slug} goes here`,\n\t\t\tcontent: `Content for ${params.slug} goes here`\n\t\t}\n\t};\n}\n```\n\n```svelte\n<!--- file: src/routes/blog/[slug]/+page.svelte --->\n<script>\n\t/** @type {import('./$types').PageProps} */\n\tlet { data } = $props();\n</script>\n\n<h1>{data.post.title}</h1>\n<div>{@html data.post.content}</div>\n```\n\n`+page.js` runs on both server and browser (unless `export const ssr = false`).\n\n`+page.server.js",
		"kit/form-actions": "# Form Actions\n\n## Default Actions\n\nExport `default` action from `+page.server.js`:\n\n```js\n/// file: src/routes/login/+page.server.js\n/** @satisfies {import('./$types').Actions} */\nexport const actions = {\n\tdefault: async (event) => {\n\t\t// TODO log the user in\n\t}\n};\n```\n\nInvoke with `<form>` (no JS needed):\n\n```svelte\n<!--- file: src/routes/login/+page.svelte --->\n<form method=\"POST\">\n\t<label>\n\t\tEmail\n\t\t<input name=\"email\" type=\"email\">\n\t</label>\n\t<label>\n\t\tPassword\n\t\t<input name=\"password\" type=\"password\">\n\t</label>\n\t<button>Log in</button>\n</form>\n```\n\nFrom other pages, use `action` attribute:\n\n```html\n<form method=\"POST\" action=\"/login\">\n```\n\n> Actions always use `POST` requests.\n\n## Named Actions\n\nMultiple actions per page:\n\n```js\n/// file: src",
		"kit/page-options": "# Page Options\n\nSvelteKit renders components server-side first, sends HTML to client, then hydrates for interactivity. Control this per-page via exports from `+page.js`, `+page.server.js`, `+layout.js`, or `+layout.server.js`. Child layouts/pages override parent values.\n\n## prerender\n\nGenerate static HTML at build time.\n\n```js\n/// file: +page.js/+page.server.js/+server.js\nexport const prerender = true;\n```\n\nOr prerender everything except specific pages:\n\n```js\n/// file: +page.js/+page.server.js/+server.js\nexport const prerender = false;\n```\n\nUse `'auto'` to prerender but keep in SSR manifest:\n\n```js\n/// file: +page.js/+page.server.js/+server.js\nexport const prerender = 'auto';\n```\n\nPrerenderer crawls from root, following `<a>` links. Configure entry points via `config.kit.prerender.entries` or `entries` function.",
		"kit/state-management": "# State Management\n\n## Avoid shared state on the server\n\nServers are shared by multiple users. **Never store data in shared variables.**\n\n```js\n// @errors: 7034 7005\n/// file: +page.server.js\nlet user; // NEVER DO THIS!\n\n/** @type {import('./$types').PageServerLoad} */\nexport function load() {\n\treturn { user };\n}\n\n/** @satisfies {import('./$types').Actions} */\nexport const actions = {\n\tdefault: async ({ request }) => {\n\t\tconst data = await request.formData();\n\n\t\t// NEVER DO THIS!\n\t\tuser = {\n\t\t\tname: data.get('name'),\n\t\t\tembarrassingSecret: data.get('secret')\n\t\t};\n\t}\n}\n```\n\n**Solution:** Authenticate using `cookies` and persist to a database.\n\n## No side-effects in load\n\n`load` functions must be pure. Don't write to stores or global state:\n\n```js\n/// file: +page.js\n// @filename: ambient.d.ts\ndeclare module '$lib/user' {",
		"kit/remote-functions": "# Remote Functions\n\n**Experimental feature** - Enable in `svelte.config.js`:\n\n```js\n/// file: svelte.config.js\nconst config = {\n\tkit: {\n\t\texperimental: {\n\t\t\tremoteFunctions: true\n\t\t}\n\t},\n\tcompilerOptions: {\n\t\texperimental: {\n\t\t\tasync: true // for await in components\n\t\t}\n\t}\n};\n```\n\nType-safe client-server communication. Functions always run on server, can access server-only modules. Export from `.remote.js` or `.remote.ts` files in `src` directory.\n\nFour types: `query`, `form`, `command`, `prerender`.\n\n## query\n\nRead dynamic data from server:\n\n```js\n/// file: src/routes/blog/data.remote.js\nimport { query } from '$app/server';\nimport * as db from '$lib/server/database';\n\nexport const getPosts = query(async () => {\n\tconst posts = await db.sql`\n\t\tSELECT title, slug FROM post\n\t\tORDER BY published_at DESC\n\t`;\n\treturn posts;",
		"kit/building-your-app": "# Building\n\nBuild happens in two stages via `vite build`:\n1. Vite creates optimized production build (server, browser, service worker). Prerendering runs here.\n2. Adapter tunes build for target environment.\n\n## During build\n\nCode in `+page/layout(.server).js` executes during build. Prevent execution with `building` check:\n\n```js\nimport { building } from '$app/environment';\nimport { setupMyDatabase } from '$lib/server/database';\n\nif (!building) {\n\tsetupMyDatabase();\n}\n\nexport function load() {\n\t// ...\n}\n```\n\n## Preview\n\n`vite preview` runs production build locally in Node. Not perfect reproduction - adapter-specific features like `platform` object don't apply.",
		"kit/adapters": "# Adapters\n\nAdapters are plugins that transform your built SvelteKit app for specific deployment targets.\n\n## Official Adapters\n\n- `@sveltejs/adapter-cloudflare` - Cloudflare Workers/Pages\n- `@sveltejs/adapter-netlify` - Netlify\n- `@sveltejs/adapter-node` - Node servers\n- `@sveltejs/adapter-static` - Static site generation (SSG)\n- `@sveltejs/adapter-vercel` - Vercel\n\nCommunity adapters available at `/packages#sveltekit-adapters`.\n\n## Usage\n\nConfigure in `svelte.config.js`:\n\n```js\n/// file: svelte.config.js\n// @filename: ambient.d.ts\ndeclare module 'svelte-adapter-foo' {\n\tconst adapter: (opts: any) => import('@sveltejs/kit').Adapter;\n\texport default adapter;\n}\n\n// @filename: index.js\n// ---cut---\nimport adapter from 'svelte-adapter-foo';\n\n/** @type {import",
		"kit/adapter-auto": "# adapter-auto\n\nAuto-installs correct adapter for supported environments on deploy.\n\n## Supported Platforms\n\n- `@sveltejs/adapter-cloudflare` - Cloudflare Pages\n- `@sveltejs/adapter-netlify` - Netlify\n- `@sveltejs/adapter-vercel` - Vercel\n- `svelte-adapter-azure-swa` - Azure Static Web Apps\n- `svelte-kit-sst` - AWS via SST\n- `@sveltejs/adapter-node` - Google Cloud Run\n\n## Best Practices\n\nInstall specific adapter to `devDependencies` once target environment is chosen (improves CI install times, adds to lockfile).\n\n## Configuration\n\n`adapter-auto` takes no options. To configure (e.g., `{ edge: true }`), install the specific adapter directly.",
		"kit/adapter-node": "# adapter-node\n\nGenerates standalone Node server. Install: `npm i -D @sveltejs/adapter-node`\n\n## Usage\n\n```js\n// @errors: 2307\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-node';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter()\n\t}\n};\n\nexport default config;\n```\n\n## Deploying\n\nBuild with `npm run build` (creates `build/` by default). Deploy requires:\n- Output directory\n- `package.json`\n- Production `node_modules` (run `npm ci --omit dev`)\n\nStart: `node build`\n\n**Dev dependencies** are bundled via Rollup. **Dependencies** are externalized. Control via `package.json` placement.\n\n### Compressing responses\n\nUse reverse proxy compression for better performance (Node is single-threaded). If using custom server middleware, use `@polka/compression` (supports streaming, unlike `compression` package).\n\n## Environment variables\n\n**",
		"kit/adapter-static": "# adapter-static\n\nPrerender entire site as static files for SSG. For mixed prerendering/SSR, use different adapter with [`prerender` option](page-options#prerender).\n\n## Usage\n\n```bash\nnpm i -D @sveltejs/adapter-static\n```\n\n```js\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-static';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\tpages: 'build',        // output directory for pages\n\t\t\tassets: 'build',       // output directory for assets\n\t\t\tfallback: undefined,   // SPA fallback page (e.g. '404.html')\n\t\t\tprecompress: false,    // generate .br and .gz files\n\t\t\tstrict: true          // error if pages not prerendered\n\t\t})\n\t}\n};\n\nexport default config;\n```\n\n```js\n/// file: src/routes/+layout.js\n// Prerender all pages (not needed if using fallback/",
		"kit/single-page-apps": "# Single-page apps (SPA)\n\n## Overview\n\nCreate a fully client-rendered SPA by specifying a fallback page that serves any non-prerendered URLs.\n\n> [!NOTE] **Performance Impact**: SPA mode forces multiple network round trips (HTML → JS → data) before showing content. This delays startup, harms SEO/Core Web Vitals, and breaks without JavaScript. Mitigate by prerendering pages or use SSR adapters instead.\n\n## Usage\n\n**1. Disable SSR:**\n\n```js\n/// file: src/routes/+layout.js\nexport const ssr = false;\n```\n\n**2. Configure adapter-static:**\n\n```js\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-static';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\tfallback: '200.html' // may differ from host to host\n\t\t})\n\t}\n};\n\nexport default config;\n```\n\nThe `fallback` page is an HTML",
		"kit/adapter-cloudflare": "# Cloudflare Adapter\n\nDeploy to Cloudflare Workers or Pages using `adapter-cloudflare`.\n\n## Comparisons\n\n- `adapter-cloudflare` – full SvelteKit support; builds for Workers Static Assets & Pages\n- `adapter-cloudflare-workers` – deprecated\n- `adapter-static` – client-side only; compatible with Workers & Pages\n\n## Usage\n\n```bash\nnpm i -D @sveltejs/adapter-cloudflare\n```\n\n```js\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-cloudflare';\n\nexport default {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\tconfig: undefined,\n\t\t\tplatformProxy: {\n\t\t\t\tconfigPath: undefined,\n\t\t\t\tenvironment: undefined,\n\t\t\t\tpersist: undefined\n\t\t\t},\n\t\t\tfallback: 'plaintext',\n\t\t\troutes: {\n\t\t\t\tinclude: ['/*'],\n\t\t\t\texclude: ['<all>']\n\t\t\t}\n\t\t})\n\t}\n};\n```\n\n## Options\n\n### config\nPath to Wrangler config file (if not using default `w",
		"kit/adapter-cloudflare-workers": "# adapter-cloudflare-workers\n\n> **DEPRECATED**: Use [`adapter-cloudflare`](adapter-cloudflare) instead. Cloudflare Workers Sites is being deprecated in favor of Workers with Static Assets.\n\nDeploys to [Cloudflare Workers](https://workers.cloudflare.com/) with [Workers Sites](https://developers.cloudflare.com/workers/configuration/sites/).\n\n## Usage\n\n```js\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-cloudflare-workers';\n\nexport default {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\t// options\n\t\t})\n\t}\n};\n```\n\n## Options\n\n- **config**: Path to Wrangler config file (if not using default `wrangler.jsonc`, `wrangler.json`, or `wrangler.toml`)\n- **platformProxy**: Preferences for emulated `platform.env` local bindings. See [getPlatformProxy docs](https://developers.cloudflare.com/workers/wrangler/api/#parameters-1)\n\n##",
		"kit/adapter-netlify": "# Netlify Adapter\n\nDeploy SvelteKit to Netlify using [`adapter-netlify`](https://github.com/sveltejs/kit/tree/main/packages/adapter-netlify). Auto-installed with `adapter-auto`.\n\n## Setup\n\nInstall: `npm i -D @sveltejs/adapter-netlify`\n\n```js\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-netlify';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\t// Edge Function (Deno) vs Node-based functions\n\t\t\tedge: false,\n\n\t\t\t// Split app into multiple functions (not available if edge: true)\n\t\t\tsplit: false\n\t\t})\n\t}\n};\n\nexport default config;\n```\n\nCreate `netlify.toml`:\n\n```toml\n[build]\n\tcommand = \"npm run build\"\n\tpublish = \"build\"\n```\n\n**Note:** `build.publish` determines static asset location. Default is `\"build\"`. Must",
		"kit/adapter-vercel": "# Vercel Adapter\n\n## Installation\n\n```bash\nnpm i -D @sveltejs/adapter-vercel\n```\n\n```js\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-vercel';\n\nexport default {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\t// options here\n\t\t})\n\t}\n};\n```\n\nAuto-installed with `adapter-auto`.\n\n## Deployment Configuration\n\nConfigure via adapter options or `export const config` in `+server.js`, `+page(.server).js`, `+layout(.server).js`:\n\n```js\n/// file: about/+page.js\n/** @type {import('@sveltejs/adapter-vercel').Config} */\nexport const config = {\n\tsplit: true\n};\n```\n\n### All Functions\n- `runtime`: `'edge'` | `'nodejs18.x'` | `'nodejs20.x'` | `'nodejs22.x'` (deprecated, use Vercel dashboard)\n- `regions`: array of [regions](https://vercel.com/docs/",
		"kit/writing-adapters": "# Building Adapters\n\n## Adapter API\n\nAdapters implement this structure:\n\n```js\n// @errors: 2322\n// @filename: ambient.d.ts\ntype AdapterSpecificOptions = any;\n\n// @filename: index.js\n// ---cut---\n/** @param {AdapterSpecificOptions} options */\nexport default function (options) {\n\t/** @type {import('@sveltejs/kit').Adapter} */\n\tconst adapter = {\n\t\tname: 'adapter-package-name',\n\t\tasync adapt(builder) {\n\t\t\t// adapter implementation\n\t\t},\n\t\tasync emulate() {\n\t\t\treturn {\n\t\t\t\tasync platform({ config, prerender }) {\n\t\t\t\t\t// the returned object becomes `event.platform` during dev, build and\n\t\t\t\t\t// preview. Its shape is that of `App.Platform`\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tsupports: {\n\t\t\tread: ({ config, route }) => {\n\t\t\t\t// Return `true` if the route with the given `config` can use `read`\n\t\t\t\t// from `$app/server` in production, return `",
		"kit/advanced-routing": "# Advanced Routing\n\n## Rest Parameters\n\nUnknown number of segments using `[...param]`:\n\n```sh\n/[org]/[repo]/tree/[branch]/[...file]\n```\n\nRequest `/sveltejs/kit/tree/main/documentation/docs/04-advanced-routing.md` gives:\n\n```js\n{\n\torg: 'sveltejs',\n\trepo: 'kit',\n\tbranch: 'main',\n\tfile: 'documentation/docs/04-advanced-routing.md'\n}\n```\n\n**Note:** `src/routes/a/[...rest]/z/+page.svelte` matches `/a/z` (no parameter), `/a/b/z`, etc. Validate rest parameters using matchers.\n\n### 404 Pages\n\nUse rest params for custom 404s:\n\n```tree\nsrc/routes/\n├ marx-brothers/\n│ ├ [...path]/\n│ ├ chico/\n│ ├ harpo/\n│ ├ groucho/\n│ └ +error.svelte",
		"kit/hooks": "# Hooks\n\nApp-wide functions that SvelteKit calls in response to specific events.\n\nThree optional files:\n- `src/hooks.server.js` — server hooks\n- `src/hooks.client.js` — client hooks  \n- `src/hooks.js` — universal hooks (both client and server)\n\nCode runs at app startup, useful for initializing database clients.\n\n> Configure location with [`config.kit.files.hooks`](configuration#files).\n\n## Server hooks\n\n### handle\n\nRuns on every server [request](web-standards#Fetch-APIs-Request) (including [prerendering](page-options#prerender)). Receives `event` and `resolve` function. Modify responses or bypass SvelteKit.\n\n```js\n/// file: src/hooks.server.js\n/** @type {import('@sveltejs/kit').Handle} */\nexport async function handle({ event, resolve }) {\n\tif (event.url.pathname.startsWith('/custom')) {\n\t\treturn new Response('custom response');\n\t}\n\n\tconst response = await resolve(event);\n\treturn",
		"kit/errors": "# Errors\n\n## Error Objects\n\nSvelteKit distinguishes between **expected** and **unexpected** errors. Both are `{ message: string }` objects by default.\n\n## Expected Errors\n\nCreated with `error()` helper from `@sveltejs/kit`:\n\n```js\n/// file: src/routes/blog/[slug]/+page.server.js\nimport { error } from '@sveltejs/kit';\nimport * as db from '$lib/server/database';\n\n/** @type {import('./$types').PageServerLoad} */\nexport async function load({ params }) {\n\tconst post = await db.getPost(params.slug);\n\n\tif (!post) {\n\t\terror(404, {\n\t\t\tmessage: 'Not found'\n\t\t});\n\t}\n\n\treturn { post };\n}\n```\n\nSets response status and renders nearest `+error.svelte` component:\n\n```svelte\n<!--- file: src/routes/+error.svelte --->\n<script>\n\timport { page } from '$app/state';\n</script>\n\n<h1>{page.error.",
		"kit/link-options": "# Link Options\n\nUse `<a>` elements for navigation. SvelteKit intercepts clicks on internal links and handles routing client-side.\n\nCustomize link behavior with `data-sveltekit-*` attributes on `<a>` or parent elements. Also applies to `<form method=\"GET\">`.\n\n## data-sveltekit-preload-data\n\nPreload page data before click by detecting hover/touch events.\n\n**Values:**\n- `\"hover\"` - preload on mouse hover (desktop) or `touchstart` (mobile)\n- `\"tap\"` - preload on `touchstart` or `mousedown` only\n\n```html\n<body data-sveltekit-preload-data=\"hover\">\n\t<div style=\"display: contents\">%sveltekit.body%</div>\n</body>\n```\n\n```html\n<a data-sveltekit-preload-data=\"tap\" href=\"/stonks\">\n\tGet current stonk values\n</a>\n```\n\n> Ignored if `navigator.connection.saveData` is `true`.\n\n##",
		"kit/service-workers": "# Service Workers\n\nService workers proxy network requests, enabling offline support and faster navigation via precaching.\n\n## Setup\n\n- Create `src/service-worker.js` (or `src/service-worker/index.js`) - auto-bundled and registered\n- Customize [location](configuration#files) or [disable auto-registration](configuration#serviceWorker) if needed\n\nDefault registration:\n```js\nif ('serviceWorker' in navigator) {\n\taddEventListener('load', function () {\n\t\tnavigator.serviceWorker.register('./path/to/service-worker.js');\n\t});\n}\n```\n\n## `$service-worker` Module\n\nProvides:\n- Paths to static assets, build files, prerendered pages\n- App version string (for cache naming)\n- Deployment `base` path\n- Vite `define` config applied\n\n## Example: Offline Caching\n\nEagerly caches built app + static files, lazily caches other requests.\n\n```js\n/// file: src/service-worker.js\n/// <reference no-default-lib=\"true\"/>\n/// <reference lib",
		"kit/server-only-modules": "# Server-only modules\n\nSvelteKit prevents accidental import of sensitive server code into client bundles.\n\n## Private environment variables\n\n`$env/static/private` and `$env/dynamic/private` can only be imported in server modules like `hooks.server.js` or `+page.server.js`.\n\n## Server-only utilities\n\n`$app/server` module (contains `read()` for filesystem access) only works on server.\n\n## Your modules\n\nMake modules server-only by:\n- Adding `.server` to filename: `secrets.server.js`\n- Placing in `$lib/server`: `$lib/server/secrets.js`\n\n## How it works\n\n```js\n/// file: $lib/server/secrets.js\nexport const atlantisCoordinates = [/* redacted */];\n```\n\n```js\n/// file: src/routes/utils.js\nexport { atlantisCoordinates } from '$lib/server/secrets.js';\nexport const add = (a, b) => a + b;\n```\n\n```html\n/// file: src/routes/+page.sv",
		"kit/snapshots": "# Snapshots\n\nPreserve ephemeral DOM state (scroll positions, input values) across navigation.\n\n## Usage\n\nExport `snapshot` object with `capture` and `restore` methods from `+page.svelte` or `+layout.svelte`:\n\n```svelte\n<!--- file: +page.svelte --->\n<script>\n\tlet comment = $state('');\n\n\t/** @type {import('./$types').Snapshot<string>} */\n\texport const snapshot = {\n\t\tcapture: () => comment,\n\t\trestore: (value) => comment = value\n\t};\n</script>\n\n<form method=\"POST\">\n\t<label for=\"comment\">Comment</label>\n\t<textarea id=\"comment\" bind:value={comment} />\n\t<button>Post comment</button>\n</form>\n```\n\n- `capture`: Called before page updates, returns value stored in browser history\n- `restore`: Called when navigating back, receives stored value\n\n## Constraints\n\n- Data must be JSON serializable (persisted to `sessionStorage`)\n- Avoid large objects - retained in memory for session duration",
		"kit/shallow-routing": "# Shallow Routing\n\nCreate history entries without navigation. Useful for modals that users can dismiss by navigating back.\n\n## Basic Usage\n\nUse `pushState` and `replaceState` to associate state with history entries:\n\n```svelte\n<!--- file: +page.svelte --->\n<script>\n\timport { pushState } from '$app/navigation';\n\timport { page } from '$app/state';\n\timport Modal from './Modal.svelte';\n\n\tfunction showModal() {\n\t\tpushState('', {\n\t\t\tshowModal: true\n\t\t});\n\t}\n</script>\n\n{#if page.state.showModal}\n\t<Modal close={() => history.back()} />\n{/if}\n```\n\nModal dismisses via back button or `close` callback calling `history.back()`.\n\n## API\n\n- **`pushState(url, state)`**: First arg is URL relative to current (use `''` to stay on current). Second arg is page state accessible via `page.state`.\n- **`replaceState(url, state)`**: Same as `pushState` but doesn",
		"kit/observability": "# OpenTelemetry Tracing\n\n**Experimental** - Enable in `svelte.config.js`:\n\n```js\n/// file: svelte.config.js\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\texperimental: {\n\t\t\ttracing: {\n\t\t\t\tserver: true\n\t\t\t},\n\t\t\tinstrumentation: {\n\t\t\t\tserver: true\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport default config;\n```\n\n## What Gets Traced\n\n- `handle` hook and `sequence` functions\n- Server `load` functions (including universal `load` on server)\n- Form actions\n- Remote functions\n\n## Augmenting Spans\n\nAccess `root` and `current` spans via `event.tracing`:\n\n```js\n/// file: $lib/authenticate.ts\nimport { getRequestEvent } from '$app/server';\nimport { getAuthenticatedUser } from '$lib/auth-core';\n\nasync function authenticate() {\n\tconst user = await getAuthenticatedUser();\n\tconst event = getRequestEvent();",
		"kit/packaging": "# Packaging Svelte Libraries\n\nUse `@sveltejs/package` to build component libraries. Structure is same as SvelteKit apps, but `src/lib` is public-facing (published), `src/routes` is for docs/demos.\n\n## Building\n\n`svelte-package` command generates `dist` directory containing:\n- All files from `src/lib` (Svelte preprocessed, TS transpiled to JS)\n- Type definitions (`d.ts` files) next to implementations (requires `typescript >= 4.0.0`)\n\n## package.json Configuration\n\n### name\n```json\n{\n\t\"name\": \"your-library\"\n}\n```\n\n### license\n```json\n{\n\t\"license\": \"MIT\"\n}\n```\nInclude `LICENSE` file.\n\n### files\n```json\n{\n\t\"files\": [\"dist\"]\n}\n```\nSpecifies what npm publishes. Use `.npmignore` to exclude unnecessary files.\n\n### exports\n```json\n{\n\t\"exports\": {\n\t\t\".\": {\n\t\t\t\"types\": \"./dist/index.d.",
		"kit/auth": "# Auth\n\nAuthentication verifies user identity via credentials. Authorization determines allowed actions.\n\n## Sessions vs Tokens\n\n**Sessions:**\n- IDs stored in database\n- Can be immediately revoked\n- Requires DB query per request\n\n**JWT:**\n- Not checked against datastore\n- Cannot be immediately revoked\n- Better latency, reduced DB load\n\n## Integration Points\n\nCheck auth [cookies](@sveltejs-kit#Cookies) in [server hooks](hooks#Server-hooks). Store user info in [`locals`](hooks#Server-hooks-locals) after credential validation.\n\n## Guides\n\n[Lucia](https://lucia-auth.com/) provides session-based auth examples for SvelteKit.\n\nAdd to projects:\n- New: `npx sv create`\n- Existing: `npx sv add lucia`\n\nAuth is tightly coupled to web frameworks (validation, errors, routing). SvelteKit-specific guides like Lucia are preferable to generic JS auth libraries that bundle multiple frameworks.",
		"kit/performance": "# Performance\n\n## Built-in Optimizations\n\nSvelteKit automatically provides:\n- Code-splitting\n- Asset preloading\n- File hashing for caching\n- Request coalescing (groups server `load` fetches into one HTTP request)\n- Parallel loading (universal `load` functions fetch simultaneously)\n- Data inlining (server `fetch` replays in browser without new request)\n- Conservative invalidation (only re-runs `load` when needed)\n- Prerendering\n- Link preloading\n\n## Diagnosing Issues\n\n**Tools:**\n- [PageSpeed Insights](https://pagespeed.web.dev/)\n- [WebPageTest](https://www.webpagetest.org/)\n- Browser devtools: Lighthouse, Network, Performance tabs\n\n**Important:** Test in preview mode after building, not dev mode.\n\n**Instrumenting:** Use [OpenTelemetry](https://opentelemetry.io/) or [Server-Timing headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Server-Timing) to debug",
		"kit/icons": "# CSS & Svelte Icons\n\n## CSS Icons\nUse [Iconify](https://icon-sets.iconify.design/) for CSS-based icons. Supports [Tailwind](https://iconify.design/docs/usage/css/tailwind/) and [UnoCSS](https://iconify.design/docs/usage/css/unocss/) plugins. No imports needed in `.svelte` files.\n\n## Svelte Icon Libraries\n**Avoid** libraries with one `.svelte` file per icon (thousands of files slow Vite's dependency optimization). Especially problematic with mixed umbrella + subpath imports. See [vite-plugin-svelte FAQ](https://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/faq.md#what-is-going-on-with-vite-and-pre-bundling-dependencies).",
		"kit/images": "# Svelte Images\n\n## Vite Built-in Handling\n\nVite automatically processes imported assets, adding hashes for caching and inlining small assets.\n\n```svelte\n<script>\n\timport logo from '$lib/assets/logo.png';\n</script>\n\n<img alt=\"The project logo\" src={logo} />\n```\n\n## @sveltejs/enhanced-img\n\nPlugin for automatic image optimization: generates `avif`/`webp`, sets `width`/`height`, creates multiple sizes, strips EXIF.\n\n**Note:** Only optimizes files available at build time, not dynamic CDN/CMS images.\n\n### Setup\n\n```sh\nnpm i -D @sveltejs/enhanced-img\n```\n\n```js\nimport { sveltekit } from '@sveltejs/kit/vite';\nimport { enhancedImages } from '@sveltejs/enhanced-img';\nimport { defineConfig } from 'vite';\n\nexport default defineConfig({\n\tplugins: [\n\t\tenhancedImages(), // must come before SvelteKit\n\t\tsveltekit",
		"kit/accessibility": "# Accessibility\n\nSvelteKit provides accessible defaults. Svelte's compile-time accessibility checks apply automatically.\n\n## Route Announcements\n\n**Problem**: Client-side routing doesn't reload pages, so screen readers don't announce page changes.\n\n**Solution**: SvelteKit injects a live region that announces the `<title>` after navigation.\n\n**Required**: Every page needs a unique, descriptive title:\n\n```svelte\n<!--- file: src/routes/+page.svelte --->\n<svelte:head>\n\t<title>Todo List</title>\n</svelte:head>\n```\n\n## Focus Management\n\n**Default behavior**: After navigation/form submission, SvelteKit focuses `<body>` (or elements with `autofocus` attribute).\n\n**Custom focus**:\n\n```js\nimport { afterNavigate } from '$app/navigation';\n\nafterNavigate(() => {\n\t/** @type {HTMLElement | null} */\n\tconst to_focus = document.querySelector('.focus-me');\n\tto_focus?.focus();\n});\n```\n\n**Gotcha**: `goto` accepts",
		"kit/seo": "# SEO\n\n## Out of the box\n\n### SSR\nSearch engines index SSR content more reliably. SvelteKit uses SSR by default—keep it enabled unless necessary.\n\n### Performance\n[Core Web Vitals](https://web.dev/vitals/#core-web-vitals) impact rankings. Use [hybrid rendering](glossary#Hybrid-app) and [optimize images](images). Test with [PageSpeed Insights](https://pagespeed.web.dev/) or [Lighthouse](https://developers.google.com/web/tools/lighthouse).\n\n### Normalized URLs\nSvelteKit redirects trailing slashes based on [`trailingSlash`](page-options#trailingSlash) config to avoid duplicate URLs.\n\n## Manual setup\n\n### &lt;title&gt; and &lt;meta&gt;\nEvery page needs unique `<title>` and `<meta name=\"description\">` in [`<svelte:head>`](../svelte/svelte-head). See [Lighthouse SEO audits](https://web.dev/lighthouse-seo/).\n\n**Pattern:**",
		"kit/faq": "# SvelteKit FAQ\n\n## Resources\n\nSee [Svelte FAQ](../svelte/faq) and [`vite-plugin-svelte` FAQ](https://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/faq.md).\n\n## Including package.json data\n\n```ts\n/// file: svelte.config.js\nimport pkg from './package.json' with { type: 'json' };\n```\n\n## Package inclusion errors\n\nCheck packaging compatibility at [publint.dev](https://publint.dev/).\n\n**Key packaging requirements:**\n- `exports` overrides `main`/`module` and prevents deep imports\n- ESM files: `.mjs` or use `\"type\": \"module\"` (then CJS needs `.cjs`)\n- `main` should be CJS or ESM following above rules\n- Svelte components: distribute as uncompiled `.svelte` files with preprocessed JS/CSS as ESM\n- Use [`svelte-package`](./packaging) for Svelte libraries\n\nESM versions work best. CJS dependencies",
		"kit/integrations": "# Integrations\n\n## `vitePreprocess`\n\nEnables Vite-supported CSS flavors: PostCSS, SCSS, Less, Stylus, SugarSS. Included by default in TypeScript projects.\n\n```js\n// svelte.config.js\nimport { vitePreprocess } from '@sveltejs/vite-plugin-svelte';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n  preprocess: [vitePreprocess()]\n};\n\nexport default config;\n```\n\n**TypeScript:** Svelte 5 supports type syntax natively. For complex TypeScript syntax, use `vitePreprocess({ script: true })`.\n\n## Add-ons\n\nRun `npx sv add` to setup integrations:\n- prettier, eslint, vitest, playwright\n- lucia (auth), tailwind, drizzle (DB)\n- paraglide (i18n), mdsvex (markdown), storybook\n\n## Packages\n\nSee [packages page](/packages) or [sveltesociety.dev](https://sv",
		"kit/debugging": "# Debugging\n\nUse [`@debug`](../svelte/@debug) tag or breakpoints in dev tools/IDEs to debug Svelte/SvelteKit projects (frontend & backend).\n\nAssumes Node.js runtime.\n\n## Visual Studio Code\n\n### Built-in Debug Terminal\n\n1. `CMD/Ctrl` + `Shift` + `P` → \"Debug: JavaScript Debug Terminal\"\n2. Run project: `npm run dev`\n3. Set breakpoints in source files\n4. Trigger breakpoints\n\n### Launch via Debug Pane\n\nCreate `.vscode/launch.json`:\n\n```json\n{\n\t\"version\": \"0.2.0\",\n\t\"configurations\": [\n\t\t{\n\t\t\t\"command\": \"npm run dev\",\n\t\t\t\"name\": \"Run development server\",\n\t\t\t\"request\": \"launch\",\n\t\t\t\"type\": \"node-terminal\"\n\t\t}\n\t]\n}\n```\n\nOr auto-generate: \"Run and Debug\" pane → \"Node.js...\" → select run script → `F5`\n\nDocs: <https://code.visualstudio.com/",
		"kit/migrating-to-sveltekit-2": "# SvelteKit v2 Migration Guide\n\nUpgrade to latest 1.x first, then [Svelte 4](../svelte/v4-migration-guide). Use `npx sv migrate sveltekit-2` to auto-migrate.\n\n## `redirect` and `error` - Don't throw\n\n```js\nimport { error } from '@sveltejs/kit'\n\n// Before\nthrow error(500, 'something went wrong');\n\n// After\nerror(500, 'something went wrong');\n```\n\nInside `try` blocks, use `isHttpError` and `isRedirect` from `@sveltejs/kit` to distinguish them.\n\n## Cookies require `path`\n\n```js\nexport function load({ cookies }) {\n\tcookies.set(name, value, { path: '/' });\n\treturn { response }\n}\n```\n\nMost common: `path: '/'`. Options: `''` (current path), `'.'` (current dir), or any path.\n\n## Top-level promises not auto-awaited\n\nUse `await` and `Promise.all`:\n\n```",
		"kit/migrating": "# Migrating from Sapper to SvelteKit\n\n## package.json\n\n### type: \"module\"\nAdd `\"type\": \"module\"` to `package.json`.\n\n### dependencies\nRemove `polka`, `express`, and middleware like `sirv` or `compression`.\n\n### devDependencies\nReplace `sapper` with `@sveltejs/kit` and an [adapter](adapters).\n\n### scripts\n- `sapper build` → `vite build` (with Node adapter)\n- `sapper export` → `vite build` (with static adapter)\n- `sapper dev` → `vite dev`\n- `node __sapper__/build` → `node build`\n\n## Project files\n\n### Configuration\nReplace `webpack.config.js`/`rollup.config.js` with `svelte.config.js`. Move preprocessor options to `config.preprocess`. Add an [adapter](adapters).\n\nFor non-Vite filetypes, add Vite equivalents to [Vite config](project-structure#Project-files-vite.config",
		"kit/additional-resources": "# SvelteKit Resources\n\n## FAQs\n- See [SvelteKit FAQ](faq), [Svelte FAQ](../svelte/faq), and [`vite-plugin-svelte` FAQ](https://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/faq.md)\n\n## Examples\nOfficial:\n- [`sveltejs/realworld`](https://github.com/sveltejs/realworld) - blog site\n- [HackerNews clone](https://github.com/sveltejs/sites/tree/master/sites/hn.svelte.dev)\n- [`svelte.dev`](https://github.com/sveltejs/svelte.dev)\n\nCommunity: [#sveltekit](https://github.com/topics/sveltekit), [#sveltekit-template](https://github.com/topics/sveltekit-template), [Svelte Society](https://sveltesociety.dev/templates?category=sveltekit)\n\n## Support\n[Discord](/chat",
		"kit/glossary": "# SvelteKit Rendering\n\n## Terms\n\n**CSR (Client-side rendering)** - Page generation in browser using JavaScript. Default on. Disable with `csr = false` page option.\n\n**SSR (Server-side rendering)** - Page generation on server. Default on. Improves performance and SEO. Disable with `ssr = false` page option.\n\n**Hybrid app** - SvelteKit's default: initial HTML from server (SSR), then client-side updates (CSR) on navigation.\n\n**Hydration** - Process where Svelte attaches event listeners to server-rendered HTML and initializes components with transmitted data. Disabled when `csr = false`.\n\n**Prerendering** - Computing pages at build time, saving HTML. Users must get same content. Pages with actions cannot be prerendered. Control with `prerender` page option or config.\n\n**SSG (Static Site Generation)** - Every page prerendered. Use `adapter-static` or set all pages to prerender.\n\n**ISR (Incremental Static Regeneration)** - Generate static pages on-",
		"kit/@sveltejs-kit": "# SvelteKit Server API Reference\n\n## Imports\n\n```js\nimport {\n\tServer,\n\tVERSION,\n\terror,\n\tfail,\n\tisActionFailure,\n\tisHttpError,\n\tisRedirect,\n\tjson,\n\tnormalizeUrl,\n\tredirect,\n\ttext\n} from '@sveltejs/kit';\n```\n\n## Core Functions\n\n### error\nThrows HTTP error with status code and optional message. Causes SvelteKit to return error response without invoking `handleError`. Don't catch the thrown error.\n\n```dts\nfunction error(status: number, body: App.Error): never;\nfunction error(status: number, body?: { message: string } extends App.Error ? App.Error | string | undefined : never): never;\n```\n\n### redirect\nRedirects a request. Don't catch the thrown redirect.\n\nCommon status codes:\n- `303`: redirect as GET (often after form POST)\n- `307`: redirect keeps request method\n- `308`: permanent redirect, keeps method, SEO transferred\n\n```dts\nfunction redirect(status: 300",
		"kit/@sveltejs-kit-hooks": "# sequence\n\nHelper for chaining multiple `handle` functions middleware-style.\n\n```js\nimport { sequence } from '@sveltejs/kit/hooks';\n```\n\n## Behavior\n\n- `transformPageChunk`: applied in **reverse order**, merged\n- `preload`: applied in **forward order**, first wins (subsequent ignored)\n- `filterSerializedResponseHeaders`: same as `preload` (first wins)\n\n## Example\n\n```js\n/// file: src/hooks.server.js\nimport { sequence } from '@sveltejs/kit/hooks';\n\n/** @type {import('@sveltejs/kit').Handle} */\nasync function first({ event, resolve }) {\n\tconsole.log('first pre-processing');\n\tconst result = await resolve(event, {\n\t\ttransformPageChunk: ({ html }) => {\n\t\t\t// transforms are applied in reverse order\n\t\t\tconsole.log('first transform');\n\t\t\treturn html;\n\t\t},\n\t\tpreload: () => {\n\t\t\t// this one wins as it's the first defined in the chain\n\t\t\tconsole.log('first preload');\n\t\t\treturn true;",
		"kit/@sveltejs-kit-node-polyfills": "# Node Polyfills\n\n## installPolyfills\n\nMakes web APIs available as globals: `crypto`, `File`\n\n```js\nimport { installPolyfills } from '@sveltejs/kit/node/polyfills';\n\ninstallPolyfills();\n```",
		"kit/@sveltejs-kit-node": "# @sveltejs/kit/node\n\nNode.js adapter utilities for converting between Node.js and Web APIs.\n\n## API\n\n### createReadableStream\n*Since 2.4.0*\n\nConverts file on disk to readable stream.\n\n```ts\nfunction createReadableStream(file: string): ReadableStream;\n```\n\n### getRequest\n\nConverts Node.js `IncomingMessage` to Web `Request`.\n\n```ts\nfunction getRequest({\n\trequest,\n\tbase,\n\tbodySizeLimit\n}: {\n\trequest: import('http').IncomingMessage;\n\tbase: string;\n\tbodySizeLimit?: number;\n}): Promise<Request>;\n```\n\n### setResponse\n\nConverts Web `Response` to Node.js `ServerResponse`.\n\n```ts\nfunction setResponse(\n\tres: import('http').ServerResponse,\n\tresponse: Response\n): Promise<void>;\n```",
		"kit/@sveltejs-kit-vite": "# SvelteKit Vite Plugin\n\n## sveltekit\n\nReturns SvelteKit Vite plugins.\n\n```js\nimport { sveltekit } from '@sveltejs/kit/vite';\n```\n\n```ts\nfunction sveltekit(): Promise<import('vite').Plugin[]>;\n```",
		"kit/$app-environment": "# $app/environment\n\n```js\nimport { browser, building, dev, version } from '$app/environment';\n```\n\n## browser\n`true` if app runs in browser.\n\n```dts\nconst browser: boolean;\n```\n\n## building\n`true` during build step and prerendering.\n\n```dts\nconst building: boolean;\n```\n\n## dev\n`true` if dev server is running. Not guaranteed to match `NODE_ENV` or `MODE`.\n\n```dts\nconst dev: boolean;\n```\n\n## version\nValue of `config.kit.version.name`.\n\n```dts\nconst version: string;\n```",
		"kit/$app-forms": "# $app/forms\n\n```js\nimport { applyAction, deserialize, enhance } from '$app/forms';\n```\n\n## applyAction\n\nUpdates `form` property and `page.status` with given data. Redirects to error page on error.\n\n```dts\nfunction applyAction<\n\tSuccess extends Record<string, unknown> | undefined,\n\tFailure extends Record<string, unknown> | undefined\n>(\n\tresult: import('@sveltejs/kit').ActionResult<Success, Failure>\n): Promise<void>;\n```\n\n## deserialize\n\nDeserializes form submission response.\n\n```js\nimport { deserialize } from '$app/forms';\n\nasync function handleSubmit(event) {\n\tconst response = await fetch('/form?/action', {\n\t\tmethod: 'POST',\n\t\tbody: new FormData(event.target)\n\t});\n\n\tconst result = deserialize(await response.text());\n\t// ...\n}\n```\n\n```dts\nfunction deserialize<\n\tSuccess extends Record<string, unknown> | undefined,\n\tFailure extends Record<string",
		"kit/$app-navigation": "# $app/navigation\n\n```js\nimport {\n\tafterNavigate,\n\tbeforeNavigate,\n\tdisableScrollHandling,\n\tgoto,\n\tinvalidate,\n\tinvalidateAll,\n\tonNavigate,\n\tpreloadCode,\n\tpreloadData,\n\tpushState,\n\trefreshAll,\n\treplaceState\n} from '$app/navigation';\n```\n\n## afterNavigate\n\nRuns callback on mount and after every navigation. Must be called during component initialization. Active while component is mounted.\n\n```dts\nfunction afterNavigate(\n\tcallback: (navigation: import('@sveltejs/kit').AfterNavigate) => void\n): void;\n```\n\n## beforeNavigate\n\nIntercepts navigation before it happens. Call `cancel()` to prevent navigation. For `'leave'` navigations, `cancel()` triggers browser unload dialog. `navigation.to.route.id` is `null` for non-SvelteKit routes. `navigation.willUnload` is `true` for document unloads. Must be called during component initialization.\n\n```dts\nfunction",
		"kit/$app-paths": "# $app/paths\n\n```js\nimport { asset, assets, base, resolve, resolveRoute } from '$app/paths';\n```\n\n## asset\n\nResolves asset URLs from `static` directory by prefixing with `config.kit.paths.assets` or base path. During SSR, base path is relative to current page.\n\n```svelte\n<script>\n\timport { asset } from '$app/paths';\n</script>\n\n<img alt=\"a potato\" src={asset('/potato.jpg')} />\n```\n\n```dts\nfunction asset(file: Asset): string;\n```\n\n## assets\n\n**Deprecated:** Use `asset()` instead.\n\nAbsolute path matching `config.kit.paths.assets`. Replaced with `'/_svelte_kit_assets'` during dev/preview.\n\n```dts\nlet assets: '' | `https://${string}` | `http://${string}` | '/_svelte_kit_assets';\n```\n\n## base\n\n**Deprecated:** Use `resolve()` instead.\n\nString matching `config.kit.paths.base`.\n\n```",
		"kit/$app-server": "# $app/server\n\n```js\nimport {\n  command,\n  form,\n  getRequestEvent,\n  prerender,\n  query,\n  read\n} from '$app/server';\n```\n\n## command\n\nCreates a remote command. Called from browser, executes on server via `fetch`.\n\n```dts\n// No input\nfunction command<Output>(\n  fn: () => Output\n): RemoteCommand<void, Output>;\n\n// Unchecked validation\nfunction command<Input, Output>(\n  validate: 'unchecked',\n  fn: (arg: Input) => Output\n): RemoteCommand<Input, Output>;\n\n// Schema validation\nfunction command<Schema extends StandardSchemaV1, Output>(\n  validate: Schema,\n  fn: (arg: StandardSchemaV1.InferOutput<Schema>) => Output\n): RemoteCommand<StandardSchemaV1.InferInput<Schema>, Output>;\n```\n\nSee [Remote functions](/docs/kit/remote-functions#command).\n\n## form\n\nCreates a form object to spread onto `<form>` element.\n\n```dts",
		"kit/$app-state": "# $app/state\n\nThree read-only state objects for SvelteKit apps. Added in 2.12 (use `$app/stores` for earlier versions).\n\n```js\nimport { navigating, page, updated } from '$app/state';\n```\n\n## navigating\n\nIn-progress navigation object with `from`, `to`, `type` and (if `type === 'popstate'`) `delta`. `null` when no navigation occurring or during SSR.\n\n```dts\nconst navigating:\n\t| import('@sveltejs/kit').Navigation\n\t| {\n\t\t\tfrom: null;\n\t\t\tto: null;\n\t\t\ttype: null;\n\t\t\twillUnload: null;\n\t\t\tdelta: null;\n\t\t\tcomplete: null;\n\t  };\n```\n\n## page\n\nReactive object with current page info:\n- Combined `data` from all pages/layouts\n- Current `form` prop value\n- Page state from `goto`, `pushState`, `replaceState`\n- Metadata: URL, route, params, error\n\n```svelte\n<!--- file: +layout.svelte -",
		"kit/$app-stores": "# $app/stores\n\n**DEPRECATED**: Use `$app/state` instead (SvelteKit 2.12+)\n\nStore-based equivalents of `$app/state` exports.\n\n```js\nimport { getStores, navigating, page, updated } from '$app/stores';\n```\n\n## getStores\n\n```dts\nfunction getStores(): {\n\tpage: typeof page;\n\tnavigating: typeof navigating;\n\tupdated: typeof updated;\n};\n```\n\n## navigating\n\nReadable store. Value is `Navigation` object with `from`, `to`, `type` and (if `type === 'popstate'`) `delta` properties during navigation, `null` otherwise.\n\n**Server**: Subscribe only during component initialization  \n**Browser**: Subscribe anytime\n\n```dts\nconst navigating: import('svelte/store').Readable<\n\timport('@sveltejs/kit').Navigation | null\n>;\n```\n\n## page\n\nReadable store containing page data.\n\n**Server**: Subscribe only during component initialization  \n**Browser**: Subscribe anytime\n\n```dts\nconst page:",
		"kit/$app-types": "# $app/types\n\nGenerated types for routes in your app (available since SvelteKit 2.26).\n\n```js\nimport type { RouteId, RouteParams, LayoutParams } from '$app/types';\n```\n\n## Asset\n\nUnion of all filenames in `static` directory + wildcard for imported asset paths.\n\n```dts\ntype Asset = '/favicon.png' | '/robots.txt' | (string & {});\n```\n\n## RouteId\n\nUnion of all route IDs. Used for `page.route.id` and `event.route.id`.\n\n```dts\ntype RouteId = '/' | '/my-route' | '/my-other-route/[param]';\n```\n\n## Pathname\n\nUnion of all valid pathnames.\n\n```dts\ntype Pathname = '/' | '/my-route' | `/my-other-route/${string}` & {};\n```\n\n## ResolvedPathname\n\nLike `Pathname` but possibly prefixed with base path. Used for `page.url.pathname`.\n\n```dts\ntype ResolvedPathname = `",
		"kit/$env-dynamic-private": "# $env/dynamic/private\n\nRuntime access to private environment variables (server-side only).\n\n## Usage\n\n```ts\nimport { env } from '$env/dynamic/private';\nconsole.log(env.DEPLOYMENT_SPECIFIC_VARIABLE);\n```\n\n## Key Points\n\n- Equivalent to `process.env` (e.g., with adapter-node)\n- **Server-side only** - cannot import in client code\n- Includes variables that:\n  - Do NOT start with `config.kit.env.publicPrefix`\n  - DO start with `config.kit.env.privatePrefix` (if configured)\n- In dev: always includes `.env` variables\n- In prod: behavior depends on adapter",
		"kit/$env-dynamic-public": "# $env/dynamic/public\n\nRuntime access to public environment variables (prefixed with `PUBLIC_` by default).\n\n**⚠️ Gotcha:** Sends all public env vars to client → larger network requests. Prefer `$env/static/public` when possible.\n\n```ts\nimport { env } from '$env/dynamic/public';\nconsole.log(env.PUBLIC_DEPLOYMENT_SPECIFIC_VARIABLE);\n```",
		"kit/$env-static-private": "# $env/static/private\n\nEnvironment variables loaded from `.env` files and `process.env`. Server-side only.\n\n## Key Characteristics\n\n- **Static injection**: Values injected at build time (enables dead code elimination)\n- **Private only**: Excludes variables with `config.kit.env.publicPrefix`\n- **Includes**: Variables with `config.kit.env.privatePrefix` (if configured)\n- **Server-side only**: Cannot import into client-side code\n\n## Usage\n\n```ts\nimport { API_KEY } from '$env/static/private';\n```\n\n## Best Practices\n\n**Declare all variables** in `.env` even if empty:\n\n```\nMY_FEATURE_FLAG=\"\"\n```\n\n**Override from command line**:\n\n```sh\nMY_FEATURE_FLAG=\"enabled\" npm run dev\n```\n\n## vs $env/dynamic/private\n\n- Static: Build-time injection, optimizable\n- Dynamic: Runtime values, no optimization",
		"kit/$env-static-public": "# $env/static/public\n\nLike `$env/static/private`, but only includes env vars starting with `config.kit.env.publicPrefix` (default: `PUBLIC_`). Safe for client-side code.\n\nValues replaced at build time.\n\n```ts\nimport { PUBLIC_BASE_URL } from '$env/static/public';\n```",
		"kit/$lib": "# $lib Import Alias\n\nSvelteKit provides `$lib` alias for importing from `src/lib`.\n\n**Configure in config file** via `config.kit.files.lib`\n\n```svelte\n<!--- file: src/lib/Component.svelte --->\nA reusable component\n```\n\n```svelte\n<!--- file: src/routes/+page.svelte --->\n<script>\n    import Component from '$lib/Component.svelte';\n</script>\n\n<Component />\n```",
		"kit/$service-worker": "# $service-worker Module\n\nOnly available to [service workers](/docs/kit/service-workers).\n\n```js\nimport { base, build, files, prerendered, version } from '$service-worker';\n```\n\n## base\n```dts\nconst base: string;\n```\nBase path of deployment. Equivalent to `config.kit.paths.base`, calculated from `location.pathname`. Works correctly in subdirectories.\n\n**Note:** No `assets` export since service workers can't be used with `config.kit.paths.assets`.\n\n## build\n```dts\nconst build: string[];\n```\nArray of Vite-generated file URLs for caching with `cache.addAll(build)`. Empty in development.\n\n## files\n```dts\nconst files: string[];\n```\nArray of URLs from static directory (`config.kit.files.assets`). Customize via [`config.kit.serviceWorker.files`](/docs/kit/configuration#serviceWorker).\n\n## prerendered\n```dts\nconst prerendered: string[];\n```\nArray of prerendered page/endpoint pathnames",
		"kit/configuration": "# SvelteKit Configuration\n\nConfiguration lives in `svelte.config.js` at project root.\n\n```js\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-auto';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter()\n\t}\n};\n\nexport default config;\n```\n\n## adapter\n- **default:** `undefined`\n- Runs during `vite build`, converts output for different platforms\n\n## alias\n- **default:** `{}`\n- Replace values in `import` statements, auto-passed to Vite and TypeScript\n\n```js\n/// file: svelte.config.js\nconst config = {\n\tkit: {\n\t\talias: {\n\t\t\t'my-file': 'path/to/my-file.js',\n\t\t\t'my-directory': 'path/to/my-directory',\n\t\t\t'my-directory/*': 'path/to/my-directory/*'\n\t\t}\n\t}\n};\n```\n\n> Built-in `$lib",
		"kit/cli": "# SvelteKit CLI\n\n## Commands\n\nSvelteKit uses Vite CLI (via npm scripts):\n- `vite dev` — dev server\n- `vite build` — production build\n- `vite preview` — preview production locally\n\n## svelte-kit sync\n\nCreates `tsconfig.json` and generated types (importable as `./$types` in routes).\n\nRuns automatically as `prepare` script during npm lifecycle. Rarely needs manual execution.",
		"kit/types": "# Generated Types\n\n## Auto-generated `$types`\n\nSvelteKit generates `.d.ts` files for each endpoint/page to avoid manual typing of `params`:\n\n```js\n/// file: src/routes/[foo]/[bar]/[baz]/+server.js\n/** @type {import('./$types').RequestHandler} */\nexport async function GET({ params }) {\n\t// params is typed as { foo: string; bar: string; baz: string }\n}\n```\n\n```js\n/// file: src/routes/[foo]/[bar]/[baz]/+page.js\n/** @type {import('./$types').PageLoad} */\nexport async function load({ params, fetch }) {\n\t// params is typed automatically\n}\n```\n\n**Available types from `$types`:**\n- `RequestHandler` - for endpoints\n- `PageLoad` / `LayoutLoad` - for load functions\n- `PageData` / `LayoutData` - return types of load functions\n- `ActionData` - union of all action return values\n- `PageProps` - defines `data: PageData",
		"mcp/overview": "# Svelte MCP Server\n\nHelps LLMs write better Svelte code via documentation and static analysis.\n\n## Setup\n\nChoose based on MCP version and client (Claude Code, Codex CLI, GitHub Copilot):\n- **Local**: `@sveltejs/mcp`\n- **Remote**: `https://mcp.svelte.dev/mcp`\n\nSee [local-setup](local-setup) or [remote-setup](remote-setup).\n\n## Usage\n\nAdd to `AGENTS.md` or `CLAUDE.md`:\n\n```md\nYou are able to use the Svelte MCP server, where you have access to comprehensive Svelte 5 and SvelteKit documentation. Here's how to use the available tools effectively:\n\n## Available MCP Tools:\n\n### 1. list-sections\n\nUse this FIRST to discover all available documentation sections. Returns a structured list with titles, use_cases, and paths.\nWhen asked about Svelte or SvelteKit topics, ALWAYS use this tool at the start of the chat to find relevant sections.\n\n### 2. get-documentation",
		"mcp/local-setup": "# Svelte MCP Server Setup\n\nInstall via npm: `@sveltejs/mcp`\n\nRun with: `npx -y @sveltejs/mcp`\n\n## Client Configurations\n\n### Claude Code\n```bash\nclaude mcp add -t stdio -s [scope] svelte -- npx -y @sveltejs/mcp\n```\n`[scope]`: `user`, `project`, or `local`\n\n### Claude Desktop\nSettings > Developer > Edit Config, add to `claude_desktop_config.json`:\n```json\n{\n\t\"mcpServers\": {\n\t\t\"svelte\": {\n\t\t\t\"command\": \"npx\",\n\t\t\t\"args\": [\"-y\", \"@sveltejs/mcp\"]\n\t\t}\n\t}\n}\n```\n\n### Codex CLI\nAdd to `config.toml` (default: `~/.codex/config.toml`):\n```toml\n[mcp_servers.svelte]\ncommand = \"npx\"\nargs = [\"-y\", \"@sveltejs/mcp\"]\n```\n\n### Gemini CLI",
		"mcp/remote-setup": "# MCP Server Setup\n\nRemote MCP server: `https://mcp.svelte.dev/mcp`\n\n## Claude Code\n\n```bash\nclaude mcp add -t http -s [scope] svelte https://mcp.svelte.dev/mcp\n```\n`scope`: `user`, `project`, or `local`\n\n## Claude Desktop\n\nSettings > Connectors > Add Custom Connector\n- Name: `svelte`\n- URL: `https://mcp.svelte.dev/mcp`\n\n## Codex CLI\n\nAdd to `~/.codex/config.toml`:\n\n```toml\nexperimental_use_rmcp_client = true\n[mcp_servers.svelte]\nurl = \"https://mcp.svelte.dev/mcp\"\n```\n\n## Gemini CLI\n\n```bash\ngemini mcp add -t http -s [scope] svelte https://mcp.svelte.dev/mcp\n```\n`scope`: `user`, `project`, or `local`\n\n## OpenCode\n\n```bash\nopencode mcp add\n```\nSelect",
		"mcp/tools": "# Svelte 5 & SvelteKit Documentation (Condensed)\n\n## Core Concepts\n\n### Runes\nRunes are global signals for reactivity. No imports needed.\n\n**$state** - Reactive state\n```svelte\n<script>\nlet count = $state(0);\nlet obj = $state({ value: 0 });\n</script>\n\n<button onclick={() => count++}>{count}</button>\n```\n\n**$derived** - Computed values\n```svelte\n<script>\nlet count = $state(0);\nlet doubled = $derived(count * 2);\n// For complex logic:\nlet result = $derived.by(() => {\n  return count * 2 + 10;\n});\n</script>\n```\n\n**$effect** - Side effects\n```svelte\n<script>\nlet count = $state(0);\n\n$effect(() => {\n  console.log(`count is ${count}`);\n  \n  return () => {\n    // cleanup\n  };\n});\n</script>\n```\n\n**$props** - Component",
		"mcp/resources": "# Svelte 5 Documentation (Condensed)\n\n## Runes\n\n### $state\nReactive state declaration.\n\n```svelte\n<script>\nlet count = $state(0);\nlet obj = $state({ value: 0 });\n</script>\n\n<button onclick={() => count++}>{count}</button>\n```\n\n**Deep reactivity**: Objects/arrays are reactive by default.\n\n**$state.raw**: Non-reactive state for large data structures.\n\n```svelte\nlet data = $state.raw([...]);\n```\n\n**$state.snapshot**: Get non-reactive snapshot of reactive state.\n\n```svelte\nlet counter = $state({ count: 0 });\n$effect(() => {\n  console.log($state.snapshot(counter));\n});\n```\n\n### $derived\nComputed values that update when dependencies change.\n\n```svelte\nlet count = $state(0);\nlet doubled = $derived(count * 2);\n```\n\n**$derived.by**: For complex computations.\n\n```svelte\nlet numbers = $state([1, 2,",
		"mcp/prompts": "# Svelte 5 MCP Server Documentation\n\n## Available Prompts\n\n### svelte-task\n\nUse this prompt for any Svelte-related development task. It instructs the LLM on:\n\n- **Available documentation sections** - Complete list of docs organized by topic (CLI, Kit, Svelte core)\n- **Tool usage** - When and how to invoke `get_documentation`, `svelte-autofixer`, and `playground-link`\n- **Workflow** - Must run autofixer until no issues remain before sharing code\n- **Playground generation** - Offer to create playground link with `App.svelte` entry point after code is finalized\n\n**Key workflow:**\n1. Write Svelte code\n2. Run `svelte-autofixer` on all code\n3. Fix any issues/suggestions\n4. Repeat steps 2-3 until clean\n5. Optionally generate playground link\n\n**Documentation categories available:**\n- **CLI tools**: `sv create`, `sv add`, `sv check`, `sv migrate`, integrations (Drizzle, ESLint, Playwright,",
		"svelte/overview": "# Svelte 5 Reference\n\nSvelte compiles declarative components (HTML, CSS, JS) into optimized JavaScript. Use for components to full-stack apps with SvelteKit.\n\n## Basic Component\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\tfunction greet() {\n\t\talert('Welcome to Svelte!');\n\t}\n</script>\n\n<button onclick={greet}>click me</button>\n\n<style>\n\tbutton {\n\t\tfont-size: 2em;\n\t}\n</style>\n```\n\n## Key Syntax Rules\n\n- **Events**: Use `onclick` not `on:click` (no colon)\n- **Runes**: Global, no imports needed\n- **$state**: Always use `let`, never `const`\n- **$derived with functions**: Must use `$derived.by(() => ...)`\n- **Error boundaries**: Only catch rendering errors and top-level `$effect` errors, NOT event handlers",
		"svelte/getting-started": "# Getting Started\n\n## SvelteKit (Recommended)\n\nOfficial framework powered by Vite. Create project:\n\n```sh\nnpx sv create myapp\ncd myapp\nnpm install\nnpm run dev\n```\n\n## Alternatives\n\n**Vite standalone:**\n```sh\nnpm create vite@latest\n# Select 'svelte' option\n```\n- Generates HTML/JS/CSS in `dist` directory\n- Need to add routing library separately\n- Used for SPAs (also possible with SvelteKit)\n\n**Other bundlers:** Plugins available, but Vite recommended.\n\n## Tooling\n\n- **VS Code:** Official Svelte extension\n- **CLI:** `sv check` for type checking\n- **Other editors:** See sveltesociety.dev/resources\n\n## Help\n\n- Discord chatroom\n- Stack Overflow (tag: svelte)",
		"svelte/svelte-files": "# Components\n\nComponents are written in `.svelte` files. All three sections are optional:\n\n```svelte\n<script module>\n\t// module-level logic (rarely used)\n</script>\n\n<script>\n\t// instance-level logic\n</script>\n\n<!-- markup -->\n\n<style>\n\t/* styles */\n</style>\n```\n\n## `<script>`\n\nContains JavaScript/TypeScript (`lang=\"ts\"`) that runs per component instance. Top-level variables are accessible in markup.\n\nUse runes for props and reactivity (covered next section).\n\n## `<script module>`\n\nRuns once when module first evaluates, not per instance.\n\n```svelte\n<script module>\n\tlet total = 0;\n</script>\n\n<script>\n\ttotal += 1;\n\tconsole.log(`instantiated ${total} times`);\n</script>\n```\n\n- Can `export` bindings (become module exports)\n- Cannot `export default` (component is default export)\n- Variables accessible in component, but not vice versa\n\n> **Note:** For TypeScript imports from module blocks in `.ts",
		"svelte/svelte-js-files": "# `.svelte.js` and `.svelte.ts` files\n\nSvelte operates on `.svelte.js` and `.svelte.ts` files in addition to `.svelte` files.\n\n**Key points:**\n- Behave like regular `.js`/`.ts` modules but can use runes\n- Useful for reusable reactive logic or sharing reactive state\n- **Cannot export reassigned state** (see `$state` limitations)\n- Runes don't need importing (globals)\n\n**Use cases:**\n- Reusable reactive logic\n- Sharing reactive state across app",
		"svelte/what-are-runes": "# Runes\n\nRunes are `$`-prefixed keywords that control the Svelte compiler. They look like functions but are language keywords.\n\n```js\nlet message = $state('hello');\n```\n\n**Key differences from functions:**\n- No import needed (globals)\n- Not values (can't assign/pass as arguments)\n- Only valid in specific positions\n\n**Syntax rules:**\n- Use `let` for `$state()`, never `const`\n- `$derived` with functions requires `$derived.by(() => ...)`\n- No colon in event modifiers: use `onclick` not `on:click`",
		"svelte/$state": "# $state\n\nCreates reactive state that updates the UI when changed.\n\n```svelte\n<script>\n\tlet count = $state(0);\n</script>\n\n<button onclick={() => count++}>\n\tclicks: {count}\n</button>\n```\n\n`count` is just a number - update it like any variable.\n\n## Deep state\n\nArrays and plain objects become deeply reactive proxies. Updates trigger granular UI changes.\n\n```js\nlet todos = $state([\n\t{\n\t\tdone: false,\n\t\ttext: 'add more todos'\n\t}\n]);\n\n// triggers updates for this specific property\ntodos[0].done = !todos[0].done;\n\n// new objects are also proxified\ntodos.push({\n\tdone: false,\n\ttext: 'eat lunch'\n});\n```\n\n**Gotcha:** Destructuring breaks reactivity (evaluated at destructure time):\n\n```js\nlet { done, text } = todos[0];\n\n// this will NOT affect the value of `done`\ntodos[0].done = !todos[0].done;\n```\n\nProxification stops",
		"svelte/$derived": "# Derived State\n\n## `$derived`\n\nCreates reactive derived values that update when dependencies change:\n\n```svelte\n<script>\n\tlet count = $state(0);\n\tlet doubled = $derived(count * 2);\n</script>\n\n<button onclick={() => count++}>\n\t{doubled}\n</button>\n\n<p>{count} doubled is {doubled}</p>\n```\n\n**Key rules:**\n- Expression must be side-effect free (no `count++`)\n- Can mark class fields as `$derived`\n- Without `$derived`, values don't update when dependencies change\n\n## `$derived.by`\n\nFor complex derivations requiring multiple statements:\n\n```svelte\n<script>\n\tlet numbers = $state([1, 2, 3]);\n\tlet total = $derived.by(() => {\n\t\tlet total = 0;\n\t\tfor (const n of numbers) {\n\t\t\ttotal += n;\n\t\t}\n\t\treturn total;\n\t});\n</script>\n\n<button onclick={() => numbers.push(numbers.length + 1)}>\n\t{numbers.join",
		"svelte/$effect": "# Effects\n\nEffects run when state updates. Only run in browser, not SSR.\n\n**Don't update state inside effects** - leads to complexity and infinite loops. See alternatives below.\n\n## `$effect`\n\nRuns after component mounts and after state changes (batched in microtask).\n\n```svelte\n<script>\n\tlet size = $state(50);\n\tlet color = $state('#ff3e00');\n\tlet canvas;\n\n\t$effect(() => {\n\t\tconst context = canvas.getContext('2d');\n\t\tcontext.clearRect(0, 0, canvas.width, canvas.height);\n\t\t// re-runs when `color` or `size` change\n\t\tcontext.fillStyle = color;\n\t\tcontext.fillRect(0, 0, size, size);\n\t});\n</script>\n\n<canvas bind:this={canvas} width=\"100\" height=\"100\"></canvas>\n```\n\n### Teardown functions\n\nReturn function to cleanup before re-run or component destroy:\n\n```svelte\n<script>\n\tlet count = $state(0);\n\tlet milliseconds",
		"svelte/$props": "# Props\n\nPass props to components like attributes:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport MyComponent from './MyComponent.svelte';\n</script>\n\n<MyComponent adjective=\"cool\" />\n```\n\nReceive props with `$props` rune (destructuring is common):\n\n```svelte\n<!--- file: MyComponent.svelte --->\n<script>\n\tlet { adjective } = $props();\n</script>\n\n<p>this component is {adjective}</p>\n```\n\n## Fallback values\n\nUse destructuring for defaults when prop is unset or `undefined`:\n\n```js\nlet { adjective = 'happy' } = $props();\n```\n\n> [!NOTE] Fallback values are not turned into reactive state proxies\n\n## Renaming props\n\nRename props for invalid identifiers or keywords:\n\n```js\nlet { super: trouper = 'lights are gonna find me' } = $props();\n```\n\n## Rest props\n\nGet remaining props with rest property:\n\n```js\nlet { a, b,",
		"svelte/$bindable": "# Component Bindings\n\nProps normally flow parent → child. With `$bindable`, data can flow child → parent. Use sparingly.\n\n## Basic Usage\n\nMark prop as bindable with `$bindable()` rune:\n\n```svelte\n/// file: FancyInput.svelte\n<script>\n\tlet { value = $bindable(), ...props } = $props();\n</script>\n\n<input bind:value={value} {...props} />\n\n<style>\n\tinput {\n\t\tfont-family: 'Comic Sans MS';\n\t\tcolor: deeppink;\n\t}\n</style>\n```\n\nParent uses `bind:` directive:\n\n```svelte\n/// file: App.svelte\n<script>\n\timport FancyInput from './FancyInput.svelte';\n\n\tlet message = $state('hello');\n</script>\n\n<FancyInput bind:value={message} />\n<p>{message}</p>\n```\n\n## Fallback Values\n\nParent can pass normal prop without `bind:`. Provide fallback for when no prop passed:\n\n```js",
		"svelte/$inspect": "# $inspect\n\nDev-only rune (noop in production). Re-runs when arguments change. Tracks reactive state deeply.\n\n```svelte\n<script>\n\tlet count = $state(0);\n\tlet message = $state('hello');\n\n\t$inspect(count, message); // console.logs when count or message change\n</script>\n\n<button onclick={() => count++}>Increment</button>\n<input bind:value={message} />\n```\n\n## $inspect(...).with\n\nCustom callback instead of `console.log`. First arg is `\"init\"` or `\"update\"`.\n\n```svelte\n<script>\n\tlet count = $state(0);\n\n\t$inspect(count).with((type, count) => {\n\t\tif (type === 'update') {\n\t\t\tdebugger; // or console.trace, etc\n\t\t}\n\t});\n</script>\n\n<button onclick={() => count++}>Increment</button>\n```\n\n**Tip:** Pass `console.trace` to find change origin:\n\n```js\n// @errors: 2304\n$inspect(stuff).",
		"svelte/$host": "# $host Rune\n\nProvides access to the host element when compiling a component as a custom element.\n\n## Usage\n\n```svelte\n/// file: Stepper.svelte\n<svelte:options customElement=\"my-stepper\" />\n\n<script>\n\tfunction dispatch(type) {\n\t\t$host().dispatchEvent(new CustomEvent(type));\n\t}\n</script>\n\n<button onclick={() => dispatch('decrement')}>decrement</button>\n<button onclick={() => dispatch('increment')}>increment</button>\n```\n\n```svelte\n/// file: App.svelte\n<script>\n\timport './Stepper.svelte';\n\n\tlet count = $state(0);\n</script>\n\n<my-stepper\n\tondecrement={() => count -= 1}\n\tonincrement={() => count += 1}\n></my-stepper>\n\n<p>count: {count}</p>\n```",
		"svelte/basic-markup": "# Svelte 5 Markup\n\n## Tags\n\nLowercase tags = HTML elements. Capitalized/dot notation = components.\n\n```svelte\n<script>\n\timport Widget from './Widget.svelte';\n</script>\n\n<div>\n\t<Widget />\n</div>\n```\n\n## Element Attributes\n\nWork like HTML. Values can contain or be JavaScript expressions.\n\n```svelte\n<input type=checkbox />\n<a href=\"page/{p}\">page {p}</a>\n<button disabled={!clickable}>...</button>\n```\n\n**Boolean attributes**: included if truthy, excluded if falsy.\n**Other attributes**: included unless nullish (`null`/`undefined`).\n\n```svelte\n<input required={false} placeholder=\"This input field is not required\" />\n<div title={null}>This div has no title attribute</div>\n```\n\n**Shorthand**: `{name}` replaces `name={name}`.\n\n```svelte\n<button {disabled}>...</button>\n```\n\n## Component Props\n\nSame rules as attributes. Use shorthand and spread.\n\n```sv",
		"svelte/if": "# Conditional Rendering\n\n## {#if} blocks\n\n```svelte\n{#if expression}...{/if}\n{#if expression}...{:else if expression}...{/if}\n{#if expression}...{:else}...{/if}\n```\n\nConditionally render content:\n\n```svelte\n{#if answer === 42}\n\t<p>what was the question?</p>\n{/if}\n```\n\nChain conditions with `{:else if}` and `{:else}`:\n\n```svelte\n{#if porridge.temperature > 100}\n\t<p>too hot!</p>\n{:else if 80 > porridge.temperature}\n\t<p>too cold!</p>\n{:else}\n\t<p>just right!</p>\n{/if}\n```\n\n**Note:** Blocks can wrap elements or text within elements.",
		"svelte/each": "# Each Blocks\n\n## Basic Syntax\n\n```svelte\n{#each expression as name}...{/each}\n{#each expression as name, index}...{/each}\n```\n\nIterates over arrays, array-like objects (with `length`), or iterables (Map, Set) — anything usable with `Array.from`.\n\n```svelte\n<h1>Shopping list</h1>\n<ul>\n\t{#each items as item}\n\t\t<li>{item.name} x {item.qty}</li>\n\t{/each}\n</ul>\n```\n\nWith index (like `array.map()` second argument):\n\n```svelte\n{#each items as item, i}\n\t<li>{i + 1}: {item.name} x {item.qty}</li>\n{/each}\n```\n\n## Keyed Each Blocks\n\n```svelte\n{#each expression as name (key)}...{/each}\n{#each expression as name, index (key)}...{/each}\n```\n\nKey must uniquely identify each item. Sv",
		"svelte/key": "# `{#key}` Block\n\n## Syntax\n```svelte\n{#key expression}...{/key}\n```\n\n## Usage\n\nDestroys and recreates contents when expression changes.\n\n**Reinstantiate components:**\n```svelte\n{#key value}\n\t<Component />\n{/key}\n```\n\n**Replay transitions on value change:**\n```svelte\n{#key value}\n\t<div transition:fade>{value}</div>\n{/key}\n```",
		"svelte/await": "# {#await} Block\n\nBranches on Promise states: pending, fulfilled, rejected.\n\n## Syntax\n\n```svelte\n{#await expression}...{:then name}...{:catch name}...{/await}\n{#await expression}...{:then name}...{/await}\n{#await expression then name}...{/await}\n{#await expression catch name}...{/await}\n```\n\n## Examples\n\n**Full syntax:**\n```svelte\n{#await promise}\n\t<!-- promise is pending -->\n\t<p>waiting for the promise to resolve...</p>\n{:then value}\n\t<!-- promise was fulfilled or not a Promise -->\n\t<p>The value is {value}</p>\n{:catch error}\n\t<!-- promise was rejected -->\n\t<p>Something went wrong: {error.message}</p>\n{/await}\n```\n\n**Omit catch:**\n```svelte\n{#await promise}\n\t<p>waiting for the promise to resolve...</p>\n{:then value}\n\t<p>The value is {value}</p>",
		"svelte/snippet": "# Snippets\n\n## Syntax\n\n```svelte\n{#snippet name()}...{/snippet}\n{#snippet name(param1, param2, paramN)}...{/snippet}\n```\n\nSnippets create reusable markup chunks. Parameters support defaults and destructuring, but not rest parameters.\n\n## Basic Usage\n\n```svelte\n{#snippet figure(image)}\n\t<figure>\n\t\t<img src={image.src} alt={image.caption} width={image.width} height={image.height} />\n\t\t<figcaption>{image.caption}</figcaption>\n\t</figure>\n{/snippet}\n\n{#each images as image}\n\t{#if image.href}\n\t\t<a href={image.href}>\n\t\t\t{@render figure(image)}\n\t\t</a>\n\t{:else}\n\t\t{@render figure(image)}\n\t{/if}\n{/each}\n```\n\n## Scope\n\nSnippets can reference values from `<script>` or `{#each}` blocks:\n\n```svelte\n<script>",
		"svelte/@render": "# Render\n\nRender [snippets](snippet) with `{@render ...}` tag.\n\n```svelte\n{#snippet sum(a, b)}\n\t<p>{a} + {b} = {a + b}</p>\n{/snippet}\n\n{@render sum(1, 2)}\n{@render sum(3, 4)}\n{@render sum(5, 6)}\n```\n\nExpression can be identifier or arbitrary JS:\n\n```svelte\n{@render (cool ? coolSnippet : lameSnippet)()}\n```\n\n## Optional snippets\n\nUse optional chaining for potentially undefined snippets (e.g., props):\n\n```svelte\n{@render children?.()}\n```\n\nOr `{#if}` with `:else` for fallback:\n\n```svelte\n{#if children}\n\t{@render children()}\n{:else}\n\t<p>fallback content</p>\n{/if}\n```",
		"svelte/@html": "# {@html} Tag\n\n## Basic Usage\n\n```svelte\n<article>\n\t{@html content}\n</article>\n```\n\n**⚠️ Security:** Escape strings or use trusted values only to prevent XSS attacks. Never render unsanitized content.\n\n## Limitations\n\n- Expression must be valid standalone HTML (won't work: `{@html '<div>'}content{@html '</div>'}`)\n- Does not compile Svelte code\n\n## Styling\n\nContent is invisible to Svelte scoped styles. Use `:global` modifier:\n\n```svelte\n<article>\n\t{@html content}\n</article>\n\n<style>\n\tarticle :global {\n\t\ta { color: hotpink }\n\t\timg { width: 100% }\n\t}\n</style>\n```",
		"svelte/@attach": "# Attachments\n\nFunctions that run in an effect when an element mounts or when state updates. Can return cleanup function.\n\nAvailable in Svelte 5.29+.\n\n## Basic usage\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\t/** @type {import('svelte/attachments').Attachment} */\n\tfunction myAttachment(element) {\n\t\tconsole.log(element.nodeName); // 'DIV'\n\n\t\treturn () => {\n\t\t\tconsole.log('cleaning up');\n\t\t};\n\t}\n</script>\n\n<div {@attach myAttachment}>...</div>\n```\n\nMultiple attachments allowed per element.\n\n## Attachment factories\n\nReturn an attachment from a function:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport tippy from 'tippy.js';\n\n\tlet content = $state('Hello!');\n\n\t/**\n\t * @param {string} content\n\t * @returns {import('svelte/attachments').Attachment}\n\t */\n\tfunction tooltip(content",
		"svelte/@const": "# {@const}\n\nDefines a local constant inside blocks.\n\n```svelte\n{#each boxes as box}\n\t{@const area = box.width * box.height}\n\t{box.width} * {box.height} = {area}\n{/each}\n```\n\n**Restriction:** Only allowed as immediate child of `{#if}`, `{#each}`, `{#snippet}`, `<Component />`, or `<svelte:boundary>`.",
		"svelte/@debug": "# {@debug}\n\nLogs variable values when they change and pauses execution if devtools open.\n\n## Usage\n\n```svelte\n<script>\n\tlet user = {\n\t\tfirstname: 'Ada',\n\t\tlastname: 'Lovelace'\n\t};\n</script>\n\n{@debug user}\n\n<h1>Hello {user.firstname}!</h1>\n```\n\n## Syntax Rules\n\n**Accepts:** Comma-separated variable names only\n**Rejects:** Expressions, property access, array indices, operators\n\n```svelte\n<!-- ✓ Valid -->\n{@debug user}\n{@debug user1, user2, user3}\n\n<!-- ✗ Invalid -->\n{@debug user.firstname}\n{@debug myArray[0]}\n{@debug !isReady}\n{@debug typeof user === 'object'}\n```\n\n## No Arguments\n\n`{@debug}` without arguments triggers on any state change:\n\n```svelte\n{@debug}\n```",
		"svelte/bind": "# Svelte 5 Bindings\n\n## Basic Syntax\n\n`bind:property={expression}` allows data to flow from child to parent. Shorthand when names match:\n\n```svelte\n<input bind:value={value} />\n<input bind:value />\n```\n\nMost bindings are two-way. Some are readonly. Svelte creates event listeners that update bound values.\n\n## Function Bindings\n\nPerform validation/transformation with `bind:property={get, set}`:\n\n```svelte\n<input bind:value={\n\t() => value,\n\t(v) => value = v.toLowerCase()}\n/>\n```\n\nFor readonly bindings, use `null` for get:\n\n```svelte\n<div\n\tbind:clientWidth={null, redraw}\n\tbind:clientHeight={null, redraw}\n>...</div>\n```\n\n## `<input bind:value>`\n\nBinds input's `value` property:\n\n```svelte\n<script>\n\tlet message = $state('hello');\n</script>\n\n<input bind:value={message} />\n<p>{",
		"svelte/use": "# Actions\n\n> **NOTE:** Svelte 5.29+ recommends [attachments](@attach) instead - more flexible and composable.\n\nActions are functions called when an element mounts. Use `use:` directive. Typically use `$effect` for cleanup:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\t/** @type {import('svelte/action').Action} */\n\tfunction myaction(node) {\n\t\t// node mounted in DOM\n\n\t\t$effect(() => {\n\t\t\t// setup goes here\n\n\t\t\treturn () => {\n\t\t\t\t// teardown goes here\n\t\t\t};\n\t\t});\n\t}\n</script>\n\n<div use:myaction>...</div>\n```\n\n## With Arguments\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\t/** @type {import('svelte/action').Action} */\n\tfunction myaction(node, data) {\n\t\t// ...\n\t}\n</script>\n\n<div use:myaction={data}>...</div>\n```\n\n**Key:** Action called once only (not SS",
		"svelte/transition": "# Transitions\n\nTransitions trigger when elements enter/leave DOM due to state changes. All elements in a transitioning block stay in DOM until all transitions complete.\n\n`transition:` = bidirectional (can reverse mid-transition)\n\n```svelte\n<script>\n\timport { fade } from 'svelte/transition';\n\n\tlet visible = $state(false);\n</script>\n\n<button onclick={() => visible = !visible}>toggle</button>\n\n{#if visible}\n\t<div transition:fade>fades in and out</div>\n{/if}\n```\n\n## Local vs Global\n\n**Local** (default): plays only when own block created/destroyed\n**Global**: plays when any parent block changes\n\n```svelte\n{#if x}\n\t{#if y}\n\t\t<p transition:fade>fades in and out only when y changes</p>\n\n\t\t<p transition:fade|global>fades in and out when x or y change</p>\n\t{/if}\n{/if}\n```\n\n## Built-in Transitions\n\nImport from `svelte/transition` module.",
		"svelte/in-and-out": "# `in:` and `out:` Directives\n\nIndependent transitions that don't reverse. `in:` plays alongside `out:` if block is outroed during transition. Aborted out transitions restart from scratch.\n\n```svelte\n<script>\n  import { fade, fly } from 'svelte/transition';\n  \n  let visible = $state(false);\n</script>\n\n<label>\n  <input type=\"checkbox\" bind:checked={visible}>\n  visible\n</label>\n\n{#if visible}\n\t<div in:fly={{ y: 200 }} out:fade>flies in, fades out</div>\n{/if}\n```",
		"svelte/animate": "# Animations\n\nAnimations trigger when keyed each block contents are re-ordered. They do NOT run on add/remove, only when existing item indices change. Must be on immediate child of keyed each block.\n\n## Basic Usage\n\n```svelte\n<!-- When `list` is reordered the animation will run -->\n{#each list as item, index (item)}\n\t<li animate:flip>{item}</li>\n{/each}\n```\n\n## Animation Parameters\n\n```svelte\n{#each list as item, index (item)}\n\t<li animate:flip={{ delay: 500 }}>{item}</li>\n{/each}\n```\n\n## Custom Animation Functions\n\n**Signature:**\n```js\nanimation = (node: HTMLElement, { from: DOMRect, to: DOMRect }, params: any) => {\n\tdelay?: number,\n\tduration?: number,\n\teasing?: (t: number) => number,\n\tcss?: (t: number, u: number) => string,\n\ttick?: (t: number, u: number) => void\n}\n```\n\n- `from",
		"svelte/style": "# style: directive\n\nShorthand for setting styles on elements.\n\n## Basic Usage\n\n```svelte\n<!-- These are equivalent -->\n<div style:color=\"red\">...</div>\n<div style=\"color: red;\">...</div>\n```\n\n## With Expressions\n\n```svelte\n<div style:color={myColor}>...</div>\n```\n\n## Shorthand Form\n\n```svelte\n<div style:color>...</div>\n```\n\n## Multiple Styles\n\n```svelte\n<div style:color style:width=\"12rem\" style:background-color={darkMode ? 'black' : 'white'}>...</div>\n```\n\n## Important Modifier\n\n```svelte\n<div style:color|important=\"red\">...</div>\n```\n\n## Precedence\n\n`style:` directives always take precedence over `style` attributes, even with `!important`:\n\n```svelte\n<div style:color=\"red\" style=\"color: blue\">This will be red</div>\n<div style:color=\"red\" style=\"color: blue !important\">This will still be red</div>",
		"svelte/class": "# Classes\n\n## `class` Attribute\n\n### Primitives\n```svelte\n<div class={large ? 'large' : 'small'}>...</div>\n```\n\n> Falsy values stringified (`class=\"false\"`), except `undefined`/`null` omit attribute.\n\n### Objects (5.16+)\nUses [clsx](https://github.com/lukeed/clsx). Truthy keys added:\n\n```svelte\n<script>\n\tlet { cool } = $props();\n</script>\n\n<!-- results in `class=\"cool\"` if `cool` is truthy,\n     `class=\"lame\"` otherwise -->\n<div class={{ cool, lame: !cool }}>...</div>\n```\n\n### Arrays (5.16+)\nTruthy values combined:\n\n```svelte\n<!-- if `faded` and `large` are both truthy, results in\n     `class=\"saturate-0 opacity-50 scale-200\"` -->\n<div class={[faded && 'saturate-0 opacity-50', large &&",
		"svelte/await-expressions": "# Async in Svelte 5\n\n## Setup\n\nEnable experimental async feature (required until Svelte 6):\n\n```js\n/// file: svelte.config.js\nexport default {\n\tcompilerOptions: {\n\t\texperimental: {\n\t\t\tasync: true\n\t\t}\n\t}\n};\n```\n\n## Usage\n\nUse `await` in three places:\n- Top level of `<script>`\n- Inside `$derived(...)` declarations\n- Inside markup\n\n## Synchronized Updates\n\nUI updates wait for async work to complete, preventing inconsistent states:\n\n```svelte\n<script>\n\tlet a = $state(1);\n\tlet b = $state(2);\n\n\tasync function add(a, b) {\n\t\tawait new Promise((f) => setTimeout(f, 500)); // artificial delay\n\t\treturn a + b;\n\t}\n</script>\n\n<input type=\"number\" bind:value={a}>\n<input type=\"number\" bind:value={b}>\n\n<p>{a} + {b} = {await add(a, b)}</p>\n```\n\nWhen `",
		"svelte/scoped-styles": "# Styles\n\n## Scoped CSS\n\nCSS in `<style>` is scoped by default via hash-based class (e.g. `svelte-123xyz`).\n\n```svelte\n<style>\n\tp {\n\t\t/* only affects <p> in this component */\n\t\tcolor: burlywood;\n\t}\n</style>\n```\n\n## Specificity\n\nScoped selectors get +0-1-0 specificity from scoping class. Component `p` selector beats global `p` selector even if global loads later.\n\nMultiple scoping classes use `:where(.svelte-xyz123)` after first occurrence to avoid further specificity increase.\n\n## Scoped keyframes\n\n`@keyframes` names are scoped. `animation` rules auto-adjusted.\n\n```svelte\n<style>\n\t.bouncy {\n\t\tanimation: bounce 10s;\n\t}\n\n\t/* keyframes only accessible in this component */\n\t@keyframes bounce {\n\t\t/* ... */\n\t}\n</style>\n```",
		"svelte/global-styles": "# :global Styles\n\n## :global(...) Modifier\n\nApply styles globally to specific selectors:\n\n```svelte\n<style>\n\t:global(body) {\n\t\t/* applies to <body> */\n\t\tmargin: 0;\n\t}\n\n\tdiv :global(strong) {\n\t\t/* applies to all <strong> elements, in any component,\n\t\t   that are inside <div> elements belonging\n\t\t   to this component */\n\t\tcolor: goldenrod;\n\t}\n\n\tp:global(.big.red) {\n\t\t/* applies to all <p> elements belonging to this component\n\t\t   with `class=\"big red\"`, even if it is applied\n\t\t   programmatically (for example by a library) */\n\t}\n</style>\n```\n\n**Global keyframes:** Prepend with `-global-`, which gets removed at compile time:\n\n```svelte\n<style>\n\t@keyframes -global-my-animation-name {\n\t\t/* code goes here */\n\t}\n</style>\n```\n\n## :global Block\n\nApply styles globally to multiple selectors:\n\n```sv",
		"svelte/custom-properties": "# CSS Custom Properties\n\n## Passing to Components\n\nPass CSS custom properties (static or dynamic) to components:\n\n```svelte\n<Slider\n\tbind:value\n\tmin={0}\n\tmax={100}\n\t--track-color=\"black\"\n\t--thumb-color=\"rgb({r} {g} {b})\"\n/>\n```\n\n**How it works:** Desugars to a wrapper element with inline styles:\n\n```svelte\n<svelte-css-wrapper style=\"display: contents; --track-color: black; --thumb-color: rgb({r} {g} {b})\">\n\t<Slider\n\t\tbind:value\n\t\tmin={0}\n\t\tmax={100}\n\t/>\n</svelte-css-wrapper>\n```\n\nFor SVG elements, uses `<g>` instead of `<svelte-css-wrapper>`.\n\n## Using in Components\n\nRead custom properties with `var()` and fallbacks:\n\n```svelte\n<style>\n\t.track {\n\t\tbackground: var(--track-color, #aaa);\n\t}\n\n\t.",
		"svelte/nested-style-elements": "# Styles\n\n## Top-level `<style>` tag\n- Only **one** top-level `<style>` per component\n- Gets scoped and processed\n\n## Nested `<style>` tags\n- Can nest `<style>` inside elements/logic blocks\n- **Not scoped or processed** - inserted as-is into DOM\n- Styles apply globally\n\n```svelte\n<div>\n\t<style>\n\t\t/* this style tag will be inserted as-is */\n\t\tdiv {\n\t\t\t/* this will apply to all `<div>` elements in the DOM */\n\t\t\tcolor: red;\n\t\t}\n\t</style>\n</div>\n```",
		"svelte/svelte-boundary": "# `<svelte:boundary>`\n\nWalls off parts of your app to:\n- Show UI while `await` expressions resolve\n- Handle rendering/effect errors and show fallback UI\n\n> **Note:** Only catches errors during rendering and at top level of `$effect`. Does NOT catch errors in event handlers, `setTimeout`, or async work.\n\nWhen boundary handles an error, existing content is removed.\n\n## Properties\n\n### `pending`\n\nShows snippet until all `await` expressions inside boundary resolve. Only shown on first render, not subsequent updates (use `$effect.pending()` for those).\n\n```svelte\n<svelte:boundary>\n\t<p>{await delayed('hello!')}</p>\n\n\t{#snippet pending()}\n\t\t<p>loading...</p>\n\t{/snippet}\n</svelte:boundary>\n```\n\n### `failed`\n\nRenders when error thrown inside boundary. Receives `error` and `reset` function:\n\n```svelte\n<svelte:boundary>\n\t<FlakyComponent />\n\n\t{#snippet failed(error, reset)}\n\t\t<button onclick={reset}>oops! try",
		"svelte/svelte-window": "# `<svelte:window>`\n\nAdd event listeners to `window` without cleanup or SSR checks. Must be at component top level.\n\n## Events\n\n```svelte\n<script>\n\tfunction handleKeydown(event) {\n\t\talert(`pressed the ${event.key} key`);\n\t}\n</script>\n\n<svelte:window onkeydown={handleKeydown} />\n```\n\n## Bindings\n\nBindable properties:\n- `innerWidth` (readonly)\n- `innerHeight` (readonly)\n- `outerWidth` (readonly)\n- `outerHeight` (readonly)\n- `scrollX`\n- `scrollY`\n- `online` (readonly, alias for `window.navigator.onLine`)\n- `devicePixelRatio` (readonly)\n\n```svelte\n<svelte:window bind:scrollY={y} />\n```\n\n**Gotcha:** Initial binding values don't trigger scroll (accessibility). Only subsequent changes scroll. To scroll on render, use `scrollTo()` in `$effect`.",
		"svelte/svelte-document": "# `<svelte:document>`\n\n```svelte\n<svelte:document onevent={handler} />\n<svelte:document bind:prop={value} />\n```\n\nAdds event listeners to `document` for events that don't fire on `window` (e.g., `visibilitychange`). Also supports [actions](use).\n\n**Requirements:**\n- Must be at top level of component\n- Cannot be inside blocks or elements\n\n**Example:**\n```svelte\n<svelte:document onvisibilitychange={handleVisibilityChange} use:someAction />\n```\n\n**Bindable properties (readonly):**\n- `activeElement`\n- `fullscreenElement`\n- `pointerLockElement`\n- `visibilityState`",
		"svelte/svelte-body": "# `<svelte:body>`\n\n```svelte\n<svelte:body onevent={handler} />\n```\n\nAdds event listeners to `document.body` for events that don't fire on `window` (e.g., `mouseenter`, `mouseleave`). Also supports [actions](use).\n\n**Constraints:**\n- Must be at top level of component\n- Cannot be inside blocks or elements\n\n**Example:**\n```svelte\n<svelte:body onmouseenter={handleMouseenter} onmouseleave={handleMouseleave} use:someAction />\n```",
		"svelte/svelte-head": "# `<svelte:head>`\n\nInserts elements into `document.head`. During SSR, `head` content is exposed separately from `body`.\n\n**Rules:**\n- Must be at top level of component\n- Cannot be inside blocks or elements\n\n```svelte\n<svelte:head>\n\t<title>Hello world!</title>\n\t<meta name=\"description\" content=\"This is where the description goes for SEO\" />\n</svelte:head>\n```",
		"svelte/svelte-element": "# `<svelte:element>`\n\nRenders dynamic elements unknown at author time (e.g., from CMS).\n\n```svelte\n<svelte:element this={expression} />\n```\n\n## Key Points\n\n- Properties and event listeners are applied to the element\n- Only `bind:this` binding supported (built-in bindings don't work)\n- If `this` is nullish, element and children won't render\n- `this` must be valid DOM element tag (not `#text`, `svelte:head`, etc.)\n\n## Gotchas\n\n**Void elements with children throw runtime error in dev:**\n\n```svelte\n<script>\n\tlet tag = $state('hr');\n</script>\n\n<svelte:element this={tag}>\n\tThis text cannot appear inside an hr element\n</svelte:element>\n```\n\n**Explicit namespace when needed:**\n\n```svelte\n<svelte:element this={tag} xmlns=\"http://www.w3.org/2000/svg\" />\n```",
		"svelte/svelte-options": "# `<svelte:options>`\n\n```svelte\n<svelte:options option={value} />\n```\n\nSpecifies per-component compiler options.\n\n## Options\n\n- `runes={true}` — force runes mode\n- `runes={false}` — force legacy mode\n- `namespace=\"...\"` — `\"html\"` (default), `\"svg\"`, or `\"mathml\"`\n- `customElement={...}` — [custom element options](custom-elements#Component-options). String value sets `tag` option\n- `css=\"injected\"` — inject styles inline: `<style>` tag in `head` (SSR) or via JS (client)\n\n## Example\n\n```svelte\n<svelte:options customElement=\"my-custom-element\" />\n```",
		"svelte/stores": "# Stores\n\nA store is an object that allows reactive access to a value via a store contract. The `svelte/store` module provides minimal store implementations.\n\n## `$` prefix syntax\n\nAccess store values in components by prefixing with `$`. Svelte auto-subscribes/unsubscribes.\n\n```svelte\n<script>\n\timport { writable } from 'svelte/store';\n\n\tconst count = writable(0);\n\tconsole.log($count); // logs 0\n\n\tcount.set(1);\n\tconsole.log($count); // logs 1\n\n\t$count = 2;\n\tconsole.log($count); // logs 2\n</script>\n```\n\n**Rules:**\n- Store must be declared at top level (not inside `if` or functions)\n- Local variables must NOT have `$` prefix\n- Assignments to `$`-prefixed variables call the store's `.set` method\n\n## When to use stores\n\nIn Svelte 5, runes replace most store use cases:\n\n**Use runes for:**\n- Extracting logic: Use",
		"svelte/context": "# Context\n\nAllows components to access values from parent components without prop-drilling.\n\n## Basic Usage\n\nParent sets context with `setContext(key, value)`:\n\n```svelte\n<!--- file: Parent.svelte --->\n<script>\n\timport { setContext } from 'svelte';\n\n\tsetContext('my-context', 'hello from Parent.svelte');\n</script>\n```\n\nChild retrieves with `getContext`:\n\n```svelte\n<!--- file: Child.svelte --->\n<script>\n\timport { getContext } from 'svelte';\n\n\tconst message = getContext('my-context');\n</script>\n\n<h1>{message}, inside Child.svelte</h1>\n```\n\nKey and value can be any JavaScript value.\n\n**Available functions:** `setContext`, `getContext`, `hasContext`, `getAllContexts`\n\n## Context with Reactive State\n\nStore reactive state in context:\n\n```svelte\n<script>\n\timport { setContext } from 'svelte';\n\timport Child from './Child.svelte';\n\n\tlet counter = $",
		"svelte/lifecycle-hooks": "# Component Lifecycle\n\nIn Svelte 5, lifecycle = creation + destruction. Updates aren't component-level; only affected render effects react to state changes.\n\n## `onMount`\n\nRuns callback when component mounts to DOM. Must be called during component initialization. Doesn't run on server.\n\n```svelte\n<script>\n\timport { onMount } from 'svelte';\n\n\tonMount(() => {\n\t\tconsole.log('the component has mounted');\n\t});\n</script>\n```\n\n**Cleanup:** Return a function to run on unmount.\n\n```svelte\n<script>\n\timport { onMount } from 'svelte';\n\n\tonMount(() => {\n\t\tconst interval = setInterval(() => {\n\t\t\tconsole.log('beep');\n\t\t}, 1000);\n\n\t\treturn () => clearInterval(interval);\n\t});\n</script>\n```\n\n> Only works with synchronous functions. `async` functions return a `Promise`.\n\n## `onDestroy`\n\nRuns immediately before component unmounts. Only lifecycle hook that runs server-side.\n\n```svelte\n<script",
		"svelte/imperative-component-api": "# Svelte Lifecycle Functions\n\n## `mount`\n\nCreates and mounts a component to a target element:\n\n```js\n// @errors: 2322\nimport { mount } from 'svelte';\nimport App from './App.svelte';\n\nconst app = mount(App, {\n\ttarget: document.querySelector('#app'),\n\tprops: { some: 'property' }\n});\n```\n\n**Key points:**\n- Can mount multiple components per page\n- Effects (including `onMount`, actions) don't run during `mount`\n- Use `flushSync()` to force pending effects to run\n\n## `unmount`\n\nRemoves a mounted/hydrated component:\n\n```js\nimport { mount, unmount } from 'svelte';\nimport App from './App.svelte';\n\nconst app = mount(App, { target: document.body });\n\n// later\nunmount(app, { outro: true });\n```\n\n- `options.outro: true` plays transitions before removal\n- Returns `Promise` that resolves after transitions (if `outro: true`) or immediately\n\n## `render`",
		"svelte/testing": "# Testing\n\nSvelte is unopinionated about testing frameworks. Use Vitest, Jasmine, Cypress, Playwright, etc. for unit, integration, and E2E tests.\n\n## Unit and Component Tests with Vitest\n\n### Setup\n\nInstall Vitest:\n```sh\nnpm install -D vitest\n```\n\nConfigure `vite.config.js`:\n```js\n/// file: vite.config.js\nimport { defineConfig } from 'vitest/config';\n\nexport default defineConfig({\n\t// Tell Vitest to use `browser` entry points in package.json\n\tresolve: process.env.VITEST\n\t\t? { conditions: ['browser'] }\n\t\t: undefined\n});\n```\n\n### Unit Tests\n\nTest `.js/.ts` files with runes:\n\n```js\n/// file: multiplier.svelte.test.js\nimport { flushSync } from 'svelte';\nimport { expect, test } from 'vitest';\nimport { multiplier } from './multiplier.svelte.js';\n\ntest('Multiplier', () => {\n\tlet",
		"svelte/typescript": "# TypeScript in Svelte\n\n## `<script lang=\"ts\">`\n\nAdd `lang=\"ts\"` to use TypeScript:\n\n```svelte\n<script lang=\"ts\">\n\tlet name: string = 'world';\n\n\tfunction greet(name: string) {\n\t\talert(`Hello, ${name}!`);\n\t}\n</script>\n\n<button onclick={(e: Event) => greet(e.target.innerText)}>\n\t{name as string}\n</button>\n```\n\n**Limitations:** Only type-only features work (types, interfaces). Not supported:\n- Enums\n- Constructor modifiers (`private`, `protected`, `public`) with initializers\n- Non-stage-4 ECMAScript features\n\nFor these, use a preprocessor.\n\n## Preprocessor Setup\n\n### SvelteKit/Vite\n\nScaffold with `npx sv create` (TypeScript option) or `npm create vite@latest` (svelte-ts).\n\n```ts\n/// file: svelte.config.js\nimport { vitePreprocess } from '@sveltejs",
		"svelte/custom-elements": "# Custom Elements (Web Components)\n\nCompile Svelte components to custom elements using `customElement: true` compiler option. Specify tag name with `<svelte:options>`. Access host element via `$host` rune.\n\n```svelte\n<svelte:options customElement=\"my-element\" />\n\n<script>\n\tlet { name = 'world' } = $props();\n</script>\n\n<h1>Hello {name}!</h1>\n<slot />\n```\n\n## Defining Elements\n\nOmit tag name for inner components. Define later using static `element` property:\n\n```js\n// @noErrors\nimport MyElement from './MyElement.svelte';\n\ncustomElements.define('my-element', MyElement.element);\n```\n\n## Usage\n\nUse as regular DOM elements. Props exposed as properties and attributes:\n\n```js\n// @noErrors\nconst el = document.querySelector('my-element');\nconsole.log(el.name);\nel.name = 'everybody';\n```\n\n**Note:** Must explicitly list all props. `let props = $props()` without declaring in",
		"svelte/v4-migration-guide": "# Svelte 3 to 4 Migration Guide\n\n**Note:** This is Svelte 4 documentation. For Svelte 5, syntax and patterns differ significantly (runes, event handlers, etc.).\n\n## Minimum Requirements\n\n- Node 16+\n- SvelteKit 1.20.4+\n- `vite-plugin-svelte` 2.4.1+ (Vite without SvelteKit)\n- webpack 5+ and `svelte-loader` 3.1.8+ (webpack)\n- `rollup-plugin-svelte` 7.1.5+ (Rollup)\n- TypeScript 5+ (recommended)\n\n## Bundler Configuration\n\nBundlers must specify `browser` condition for frontend bundles:\n- **Rollup**: Set `browser: true` in `@rollup/plugin-node-resolve`\n- **webpack**: Add `\"browser\"` to `conditionNames` array\n\n## CJS Removal\n\nNo more CommonJS output. `svelte/register` hook removed. Use bundlers to convert ESM to",
		"svelte/v5-migration-guide": "# Svelte 5 Migration Guide\n\n## Reactivity Syntax Changes\n\n### `let` → `$state`\n\n```svelte\n<script>\n\tlet count = $state(0);\n</script>\n```\n\n`$state` creates reactive variables. No wrapper needed - read/write directly.\n\n### `$:` → `$derived`/`$effect`\n\n**Derivations:**\n```svelte\n<script>\n\tlet count = $state(0);\n\tconst double = $derived(count * 2);\n</script>\n```\n\n**Side effects:**\n```svelte\n<script>\n\tlet count = $state(0);\n\n\t$effect(() => {\n\t\tif (count > 5) {\n\t\t\talert('Count is too high!');\n\t\t}\n\t});\n</script>\n```\n\n### `export let` → `$props`\n\n```svelte\n<script>\n\tlet { optional = 'unset', required } = $props();\n</script>\n```\n\n**Renaming & rest props:**\n```svelte\n<script>",
		"svelte/faq": "# Svelte FAQ\n\n## Getting Started\n\n- Start with [interactive tutorial](/tutorial) - 5-10 min to start, 1.5 hrs for full tutorial\n- [Reference docs](/docs/svelte) for syntax\n- Support: [Discord](/chat), [Reddit](https://www.reddit.com/r/sveltejs/), [Stack Overflow](https://stackoverflow.com/questions/tagged/svelte)\n- [Svelte Society resources](https://sveltesociety.dev/resources) for books/videos\n\n## Tooling\n\n**VS Code**: [Official extension](https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode)\n\n**Formatting**: [prettier-plugin-svelte](https://www.npmjs.com/package/prettier-plugin-svelte)\n\n**Documentation**: Use JSDoc comments with `@component` tag:\n\n````svelte\n<script>\n\t/** What should we call the user? */\n\texport let name = 'world';\n</script>\n\n<!--\n@component\nHere's some documentation for this",
		"svelte/svelte": "# Svelte 5 API Reference\n\n## Lifecycle Functions\n\n### onMount\nRuns once after component mounts to DOM. Returns cleanup function if provided synchronously. Doesn't run during SSR.\n\n```ts\nfunction onMount<T>(fn: () => NotFunction<T> | Promise<NotFunction<T>> | (() => any)): void;\n```\n\n### onDestroy\nRuns before component unmounts. Only lifecycle function that runs server-side.\n\n```ts\nfunction onDestroy(fn: () => any): void;\n```\n\n### ~~afterUpdate~~ → Use `$effect`\n### ~~beforeUpdate~~ → Use `$effect.pre`\n\n## Component Mounting\n\n### mount\nMounts component to target, returns exports/props. Plays transitions by default.\n\n```ts\nfunction mount<Props, Exports>(\n  component: Component<Props, Exports, any>,\n  options: MountOptions<Props>\n): Exports;\n```\n\n**MountOptions:**\n- `target`: Document | Element | ShadowRoot (required)\n- `anchor?",
		"svelte/svelte-action": "# Actions (Legacy - superseded by attachments)\n\n## Action\n\nType interface for functions called when an element is created.\n\n**Basic usage:**\n```ts\nexport const myAction: Action<HTMLDivElement, { someProperty: boolean } | undefined> = (node, param = { someProperty: true }) => {\n\t// ...\n}\n```\n\n- `Action<HTMLDivElement>` or `Action<HTMLDivElement, undefined>` = no parameters accepted\n- Can return object with `update` and `destroy` methods\n- Can type additional attributes and events (see `ActionReturn`)\n\n**Type signature:**\n```dts\ninterface Action<\n\tElement = HTMLElement,\n\tParameter = undefined,\n\tAttributes extends Record<string, any> = Record<never, any>\n> {\n\t<Node extends Element>(\n\t\t...args: undefined extends Parameter\n\t\t\t? [node: Node, parameter?: Parameter]\n\t\t\t: [node: Node, parameter: Parameter]\n\t): void | ActionReturn<Parameter, Attributes>;\n}\n```\n\n## ActionReturn\n\nReturn type for actions. Both properties optional:",
		"svelte/svelte-animate": "# svelte/animate\n\n## flip\n\nAnimates element position changes by calculating start/end positions and translating x/y values. FLIP = First, Last, Invert, Play.\n\n```js\nimport { flip } from 'svelte/animate';\n```\n\n```dts\nfunction flip(\n\tnode: Element,\n\t{ from, to }: { from: DOMRect; to: DOMRect },\n\tparams?: FlipParams\n): AnimationConfig;\n```\n\n## Types\n\n**AnimationConfig**\n```dts\ninterface AnimationConfig {\n\tdelay?: number;\n\tduration?: number;\n\teasing?: (t: number) => number;\n\tcss?: (t: number, u: number) => string;\n\ttick?: (t: number, u: number) => void;\n}\n```\n\n**FlipParams**\n```dts\ninterface FlipParams {\n\tdelay?: number;\n\tduration?: number | ((len: number) => number);\n\teasing?: (t: number) => number;\n}\n```",
		"svelte/svelte-attachments": "# Attachments API\n\n## createAttachmentKey\n\nCreates a symbol key for programmatic attachments (alternative to `{@attach ...}`). Useful for library authors.\n\n```svelte\n<script>\n\timport { createAttachmentKey } from 'svelte/attachments';\n\n\tconst props = {\n\t\tclass: 'cool',\n\t\tonclick: () => alert('clicked'),\n\t\t[createAttachmentKey()]: (node) => {\n\t\t\tnode.textContent = 'attached!';\n\t\t}\n\t};\n</script>\n\n<button {...props}>click me</button>\n```\n\n```dts\nfunction createAttachmentKey(): symbol;\n```\n\n## fromAction\n\nConverts an action to an attachment with same behavior. Second argument must be a function that returns the action's argument.\n\n```svelte\n<!-- with an action -->\n<div use:foo={bar}>...</div>\n\n<!-- with an attachment -->\n<div {@attach fromAction(foo, () => bar)}>...</div>\n```\n\n```dts\nfunction fromAction<E extends EventTarget, T>(",
		"svelte/svelte-compiler": "# Svelte Compiler API\n\n```js\nimport {\n\tVERSION,\n\tcompile,\n\tcompileModule,\n\tmigrate,\n\tparse,\n\tpreprocess,\n\twalk\n} from 'svelte/compiler';\n```\n\n## Core Functions\n\n### `compile(source, options)`\nConverts `.svelte` source into a JavaScript module.\n\n```dts\nfunction compile(source: string, options: CompileOptions): CompileResult;\n```\n\n### `compileModule(source, options)`\nCompiles JavaScript with runes into a module.\n\n```dts\nfunction compileModule(source: string, options: ModuleCompileOptions): CompileResult;\n```\n\n### `parse(source, options)`\nParses component and returns AST.\n\n```dts\n// Modern AST (use modern: true)\nfunction parse(source: string, options: {\n\tfilename?: string;\n\tmodern: true;\n\tloose?: boolean;\n}): AST.Root;\n\n// Legacy AST (default in Svelte 5)\nfunction parse(source: string, options",
		"svelte/svelte-easing": "# svelte/easing\n\nEasing functions for transitions/animations. All take `t: number` (0-1) and return `number`.\n\n```js\nimport {\n\tbackIn, backInOut, backOut,\n\tbounceIn, bounceInOut, bounceOut,\n\tcircIn, circInOut, circOut,\n\tcubicIn, cubicInOut, cubicOut,\n\telasticIn, elasticInOut, elasticOut,\n\texpoIn, expoInOut, expoOut,\n\tlinear,\n\tquadIn, quadInOut, quadOut,\n\tquartIn, quartInOut, quartOut,\n\tquintIn, quintInOut, quintOut,\n\tsineIn, sineInOut, sineOut\n} from 'svelte/easing';\n```\n\n**Available functions:**\n- `linear` - No easing\n- `quad`, `cubic`, `quart`, `quint` - Polynomial easing\n- `sine` - Sinusoidal easing\n- `expo` - Exponential easing",
		"svelte/svelte-events": "# svelte/events\n\n## on\n\nAttaches event handler and returns cleanup function. Preserves correct order with declarative handlers (like `onclick`) which use event delegation.\n\n```js\nimport { on } from 'svelte/events';\n```\n\n**Signatures:**\n\n```ts\n// Window events\nfunction on<Type extends keyof WindowEventMap>(\n\twindow: Window,\n\ttype: Type,\n\thandler: (this: Window, event: WindowEventMap[Type]) => any,\n\toptions?: AddEventListenerOptions\n): () => void;\n\n// Document events\nfunction on<Type extends keyof DocumentEventMap>(\n\tdocument: Document,\n\ttype: Type,\n\thandler: (this: Document, event: DocumentEventMap[Type]) => any,\n\toptions?: AddEventListenerOptions\n): () => void;\n\n// HTML element events\nfunction on<Element extends HTMLElement, Type extends keyof HTMLElementEventMap>(\n\telement: Element,\n\ttype: Type,\n\thandler: (this: Element, event: HTMLElementEventMap[Type]) => any,\n\toptions?:",
		"svelte/svelte-legacy": "# svelte/legacy\n\nMigration utilities for Svelte 4 → 5. All deprecated, use temporarily only.\n\n```js\nimport {\n\tasClassComponent,\n\tcreateBubbler,\n\tcreateClassComponent,\n\thandlers,\n\tnonpassive,\n\tonce,\n\tpassive,\n\tpreventDefault,\n\trun,\n\tself,\n\tstopImmediatePropagation,\n\tstopPropagation,\n\ttrusted\n} from 'svelte/legacy';\n```\n\n## Component Compatibility\n\n### asClassComponent\nConverts Svelte 5 component function to Svelte 4 class component constructor.\n\n```dts\nfunction asClassComponent<Props, Exports, Events, Slots>(\n\tcomponent: SvelteComponent<Props, Events, Slots> | Component<Props>\n): ComponentType<SvelteComponent<Props, Events, Slots> & Exports>;\n```\n\n### createClassComponent\nCreates Svelte 4 compatible component from options + component function.\n\n```dts\nfunction createClassComponent<Props, Exports, Events,",
		"svelte/svelte-motion": "# svelte/motion\n\n```js\nimport { Spring, Tween, prefersReducedMotion, spring, tweened } from 'svelte/motion';\n```\n\n## Spring\n\nWrapper for spring-like animated values. Changes to `spring.target` animate `spring.current` over time using `stiffness` and `damping`.\n\n```svelte\n<script>\n\timport { Spring } from 'svelte/motion';\n\n\tconst spring = new Spring(0);\n</script>\n\n<input type=\"range\" bind:value={spring.target} />\n<input type=\"range\" bind:value={spring.current} disabled />\n```\n\n### Constructor\n```dts\nnew Spring(value: T, options?: SpringOpts)\n```\n\n### Static Methods\n```dts\nSpring.of<U>(fn: () => U, options?: SpringOpts): Spring<U>\n```\nBinds spring value to `fn` return value. Must be called in effect root (e.g., component init).\n\n```svelte\n<script>\n\timport { Spring } from 'sv",
		"svelte/svelte-reactivity-window": "# svelte/reactivity/window\n\nReactive versions of `window` values. Each has a `.current` property usable in templates, `$derived`, and `$effect` without manual event listeners.\n\n```svelte\n<script>\n\timport { innerWidth, innerHeight } from 'svelte/reactivity/window';\n</script>\n\n<p>{innerWidth.current}x{innerHeight.current}</p>\n```\n\n## Available Exports\n\n```js\nimport {\n\tdevicePixelRatio,\n\tinnerHeight,\n\tinnerWidth,\n\tonline,\n\touterHeight,\n\touterWidth,\n\tscreenLeft,\n\tscreenTop,\n\tscrollX,\n\tscrollY\n} from 'svelte/reactivity/window';\n```\n\nAll values are `undefined` on server.\n\n## API\n\n- **`devicePixelRatio.current`** - `window.devicePixelRatio`. Chrome responds to zoom, Firefox/Safari don't.\n- **`innerHeight.current`** - `window.innerHeight`\n- **`innerWidth.current`**",
		"svelte/svelte-reactivity": "# Svelte Reactivity\n\nReactive versions of built-ins (`Map`, `Set`, `URL`) and utilities for handling reactivity.\n\n```js\nimport {\n\tMediaQuery,\n\tSvelteDate,\n\tSvelteMap,\n\tSvelteSet,\n\tSvelteURL,\n\tSvelteURLSearchParams,\n\tcreateSubscriber\n} from 'svelte/reactivity';\n```\n\n## MediaQuery\n\nCreates reactive media query with `current` property.\n\n**Warning:** No SSR value available - use CSS if possible to avoid hydration issues.\n\n```svelte\n<script>\n\timport { MediaQuery } from 'svelte/reactivity';\n\n\tconst large = new MediaQuery('min-width: 800px');\n</script>\n\n<h1>{large.current ? 'large screen' : 'small screen'}</h1>\n```\n\n```dts\nconstructor(query: string, fallback?: boolean | undefined);\n```\n\n## SvelteDate\n\nReactive `Date` object. Reading in effects/derived causes re-evaluation on changes.",
		"svelte/svelte-server": "# Server Rendering\n\n## render\n\n```js\nimport { render } from 'svelte/server';\n```\n\n**Server-only.** Requires `server` compiler option.\n\nReturns object with `body` and `head` properties for server-rendering.\n\n### Type Signature\n\n```dts\nfunction render<\n\tComp extends SvelteComponent<any> | Component<any>,\n\tProps extends ComponentProps<Comp> = ComponentProps<Comp>\n>(\n\t...args: {} extends Props\n\t\t? [\n\t\t\t\tcomponent: Comp extends SvelteComponent<any>\n\t\t\t\t\t? ComponentType<Comp>\n\t\t\t\t\t: Comp,\n\t\t\t\toptions?: {\n\t\t\t\t\tprops?: Omit<Props, '$$slots' | '$$events'>;\n\t\t\t\t\tcontext?: Map<any, any>;\n\t\t\t\t\tidPrefix?: string;\n\t\t\t\t}\n\t\t\t]\n\t\t: [\n\t\t\t\tcomponent: Comp extends SvelteComponent<any>\n\t\t\t\t\t? ComponentType<Comp>\n\t\t\t\t\t: Comp,\n\t\t\t\toptions: {\n\t\t\t\t\tprops: Omit<Props, '$$slots' | '$$",
		"svelte/svelte-store": "# Svelte Stores\n\n```js\nimport {\n\tderived,\n\tfromStore,\n\tget,\n\treadable,\n\treadonly,\n\ttoStore,\n\twritable\n} from 'svelte/store';\n```\n\n## Core Store Types\n\n### writable\nCreate store with read/write access.\n\n```dts\nfunction writable<T>(\n\tvalue?: T,\n\tstart?: StartStopNotifier<T>\n): Writable<T>;\n```\n\n### readable\nCreate read-only store.\n\n```dts\nfunction readable<T>(\n\tvalue?: T,\n\tstart?: StartStopNotifier<T>\n): Readable<T>;\n```\n\n### derived\nDerive value from one or more stores.\n\n```dts\n// Sync version\nfunction derived<S extends Stores, T>(\n\tstores: S,\n\tfn: (values: StoresValues<S>) => T,\n\tinitial_value?: T\n): Readable<T>;\n\n// Async version with set/update\nfunction derived<S extends Stores, T>(\n\tstores",
		"svelte/svelte-transition": "# svelte/transition\n\n```js\nimport { blur, crossfade, draw, fade, fly, scale, slide } from 'svelte/transition';\n```\n\n## Transitions\n\n### blur\nAnimates blur filter + opacity.\n\n```dts\nfunction blur(\n\tnode: Element,\n\t{ delay, duration, easing, amount, opacity }?: BlurParams\n): TransitionConfig;\n```\n\n### fade\nAnimates opacity from 0→current (in) or current→0 (out).\n\n```dts\nfunction fade(\n\tnode: Element,\n\t{ delay, duration, easing }?: FadeParams\n): TransitionConfig;\n```\n\n### fly\nAnimates x, y positions + opacity.\n\n```dts\nfunction fly(\n\tnode: Element,\n\t{ delay, duration, easing, x, y, opacity }?: FlyParams\n): TransitionConfig;\n```\n\n### scale\nAnimates scale + opacity.\n\n```dts\nfunction scale(\n\tnode: Element,\n\t{ delay, duration, easing, start, opacity }?: Sc",
		"svelte/compiler-errors": "# Svelte 5 Error Reference\n\n## Animations\n\n**animation_duplicate** - Element can only have one `animate:` directive\n\n**animation_invalid_placement** / **animation_missing_key** - `animate:` must be on the only child of a keyed `{#each}` block\n\n## Attributes\n\n**attribute_contenteditable_dynamic** - `contenteditable` must be static when using two-way binding\n\n**attribute_contenteditable_missing** - `contenteditable` required for `textContent`, `innerHTML`, `innerText` bindings\n\n**attribute_invalid_event_handler** - Event attributes must be JS expressions, not strings\n\n**attribute_invalid_multiple** - `multiple` must be static on `<select>` with two-way binding\n\n**attribute_invalid_type** - `type` must be static on `<input>` with two-way binding\n\n**attribute_invalid_sequence_expression** - Sequence expressions need parentheses in runes mode\n\n**attribute_unquoted_sequence** - `{...}` in attributes must be quoted unless it's the only value",
		"svelte/compiler-warnings": "# Svelte 5 Warnings\n\n## Disabling Warnings\n\n```svelte\n<!-- svelte-ignore a11y_autofocus -->\n<input autofocus />\n\n<!-- Multiple rules, with note -->\n<!-- svelte-ignore a11y_click_events_have_key_events, a11y_no_static_element_interactions (because of reasons) -->\n<div onclick>...</div>\n```\n\n## Accessibility (a11y)\n\n### a11y_accesskey\nAvoid `accesskey` - creates accessibility complications.\n\n### a11y_aria_activedescendant_has_tabindex\nElement with `aria-activedescendant` needs `tabindex`.\n\n### a11y_aria_attributes\nReserved elements (`meta`, `html`, `script`, `style`) can't have `aria-*` attributes.\n\n### a11y_autocomplete_valid\nInvalid `autocomplete` value for input type.\n\n### a11y_autofocus\nAvoid `autofocus` - causes usability issues.\n\n### a11y_click_events_have_",
		"svelte/runtime-errors": "# Svelte 5 Error Reference\n\n## Client Errors\n\n### async_derived_orphan\n`$derived(...)` with `await` must be inside an effect tree. Effects run eagerly until destroyed, so they can only be created inside other effects or effect roots (like component mount).\n\n### bind_invalid_checkbox_value\nUse `bind:checked` with checkboxes, not `bind:value`.\n\n### bind_invalid_export\nCan't use `bind:key` on component exports. Use `bind:this` then access the property:\n```svelte\n<Component bind:this={component} />\n<!-- then: component.key -->\n```\n\n### bind_not_bindable\nTo make a prop bindable: `let { key = $bindable() } = $props()`\n\n### component_api_changed / component_api_invalid_new\nComponents are no longer classes in Svelte 5. Can't use `new Component()` or call methods on instances.\n\n### derived_references_self\nA `$derived` cannot reference itself recursively.\n\n### each_key_duplicate\nDuplicate keys in",
		"svelte/runtime-warnings": "# Svelte 5 Client & Shared Warnings\n\n## Client Warnings\n\n### assignment_value_stale\nAssignment to property will evaluate to RHS, not the resulting value after assignment.\n\n```svelte\n<script>\n\tlet object = $state({ array: null });\n\n\tfunction add() {\n\t\t(object.array ??= []).push(object.array.length);\n\t}\n</script>\n\n<button onclick={add}>add</button>\n<p>items: {JSON.stringify(object.items)}</p>\n```\n\nArray pushed to is `[]` on RHS, but `object.array` becomes empty state proxy. Fix by separating:\n\n```js\nlet object = { array: [0] };\n// ---cut---\nfunction add() {\n\tobject.array ??= [];\n\tobject.array.push(object.array.length);\n}\n```\n\n### await_reactivity_loss\nState read after `await` in async function loses reactivity tracking.\n\n```js\n// ❌ b not tracked\nasync function sum() {\n\treturn await",
		"svelte/legacy-overview": "# Legacy Features (Svelte 3/4)\n\n> **Note**: These features work in Svelte 5 **legacy mode only**. Once a component uses runes or sets `runes: true`, these are unavailable. See [v4.svelte.dev](https://v4.svelte.dev) for full Svelte 3/4 docs.\n\n## Mode Detection\n\n- **Runes mode**: Component uses runes (`$state`, `$derived`, etc.) or has `runes: true` compiler option\n- **Legacy mode**: No runes used, legacy features available\n\n## Key Differences\n\nSvelte 5 changes:\n- [Runes](what-are-runes) replace reactive declarations\n- [Snippets](snippet) replace slots (in some cases)\n- Event attributes (`onclick`) replace directives (`on:click`)\n\n## Migration\n\nFeatures documented here are:\n- Deprecated in Svelte 5\n- Will be removed in future versions\n- Should be [migrated incrementally](v5-migration-guide)",
		"svelte/legacy-let": "# Legacy Mode Reactivity\n\n## Reactive Variables\n\nTop-level variables are automatically reactive. Reassigning/mutating triggers UI updates.\n\n```svelte\n<script>\n\tlet count = 0;\n</script>\n\n<button on:click={() => count += 1}>\n\tclicks: {count}\n</button>\n```\n\n## Array Methods Gotcha\n\n`.push()`, `.splice()` etc. don't trigger updates. Requires reassignment:\n\n```svelte\n<script>\n\tlet numbers = [1, 2, 3, 4];\n\n\tfunction addNumber() {\n\t\t// this method call does not trigger an update\n\t\tnumbers.push(numbers.length + 1);\n\n\t\t// this assignment will update anything\n\t\t// that depends on `numbers`\n\t\tnumbers = numbers;\n\t}\n</script>\n```",
		"svelte/legacy-reactive-assignments": "# Reactive Statements (Legacy Mode)\n\n> **Note:** In runes mode, use [`$derived`]($derived) and [`$effect`]($effect) instead.\n\n## Basic Usage\n\nTop-level statements prefixed with `$:` run after other code and before rendering, then re-run when dependencies change.\n\n```svelte\n<script>\n\tlet a = 1;\n\tlet b = 2;\n\n\t// this is a 'reactive statement', and it will re-run\n\t// when `a`, `b` or `sum` change\n\t$: console.log(`${a} + ${b} = ${sum}`);\n\n\t// this is a 'reactive assignment' — `sum` will be\n\t// recalculated when `a` or `b` change. It is\n\t// not necessary to declare `sum` separately\n\t$: sum = a + b;\n</script>\n```\n\nStatements are ordered topologically by dependencies. `sum` calculates first despite appearing later.\n\n## Multiple Statements\n\n```js\n// @noErrors\n$: {\n\t//",
		"svelte/legacy-export-let": "# Legacy Props (Pre-Runes)\n\n## Basic Props\n\nProps use `export` keyword with optional defaults:\n\n```svelte\n<script>\n\texport let foo;\n\texport let bar = 'default value';\n\n\t// Values that are passed in as props\n\t// are immediately available\n\tconsole.log({ foo });\n</script>\n```\n\n**Key differences from runes mode:**\n- Default value used only if prop is initially `undefined`\n- If parent changes prop to `undefined`, it does NOT revert to default\n- Props without defaults are required (Svelte warns in dev)\n- Silence warning: `export let foo = undefined;`\n\n## Component Exports\n\nExported `const`, `class`, or `function` become component API (not props):\n\n```svelte\n<!--- file: Greeter.svelte--->\n<script>\n\texport function greet(name) {\n\t\talert(`hello ${name}!`);\n\t}\n</script>\n```\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport Greeter from",
		"svelte/legacy-$$props-and-$$restProps": "# Legacy Props (`$$props` and `$$restProps`)\n\n**Runes mode:** Use [`$props`]($props) rune\n\n**Legacy mode:** Use `$$props` and `$$restProps`\n\n- `$$props` - all props passed in (including undeclared ones)\n- `$$restProps` - all props except those declared with `export`\n\n## Example\n\n```svelte\n<script>\n\texport let variant;\n</script>\n\n<button {...$$restProps} class=\"variant-{variant} {$$props.class ?? ''}\">\n\tclick me\n</button>\n\n<style>\n\t.variant-danger {\n\t\tbackground: red;\n\t}\n</style>\n```\n\n**Performance:** `$$props` and `$$restProps` have modest performance penalty in Svelte 3/4. Use only when needed.",
		"svelte/legacy-on": "# Event Handlers\n\n## Runes Mode (Svelte 5)\nEvent handlers are regular attributes/props. No special syntax needed.\n\n## Legacy Mode\n\n### Basic Usage\n```svelte\n<script>\n\tlet count = 0;\n\n\t/** @param {MouseEvent} event */\n\tfunction handleClick(event) {\n\t\tcount += 1;\n\t}\n</script>\n\n<button on:click={handleClick}>\n\tcount: {count}\n</button>\n```\n\nInline handlers (no performance penalty):\n```svelte\n<button on:click={() => (count += 1)}>\n\tcount: {count}\n</button>\n```\n\n### Event Modifiers\nUse `|` character:\n```svelte\n<form on:submit|preventDefault={handleSubmit}>\n\t<!-- page won't reload -->\n</form>\n```\n\n**Available modifiers:**\n- `preventDefault` — calls `event.preventDefault()`\n- `stopPropagation` — prevents event bubbling\n- `stopImmediatePropagation` — prevents other listeners\n- `passive",
		"svelte/legacy-slots": "# Legacy Slots\n\nContent inside component tags is _slotted content_, rendered using `<slot>`:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport Modal from './Modal.svelte';\n</script>\n\n<Modal>This is some slotted content</Modal>\n```\n\n```svelte\n<!--- file: Modal.svelte --->\n<div class=\"modal\">\n\t<slot></slot>\n</div>\n```\n\n> **Note:** To render actual `<slot>` element: `<svelte:element this={'slot'} />`\n\n## Named Slots\n\nUse `slot=\"...\"` attribute on parent, `<slot name=\"...\">` on child:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport Modal from './Modal.svelte';\n\n\tlet open = true;\n</script>\n\n{#if open}\n\t<Modal>\n\t\tThis is some slotted content\n\n\t\t<div slot=\"buttons\">\n\t\t\t<button on:click={() => open = false}>\n\t\t\t\tclose",
		"svelte/legacy-$$slots": "# $$slots (Legacy Mode)\n\nIn runes mode, snippets are props. In legacy mode, use `$$slots` to check if slot content was provided.\n\n## Usage\n\n`$$slots` object contains keys for each slot passed by parent.\n\n```svelte\n<!--- file: Card.svelte --->\n<div>\n\t<slot name=\"title\" />\n\t{#if $$slots.description}\n\t\t<!-- This <hr> and slot will render only if `slot=\"description\"` is provided. -->\n\t\t<hr />\n\t\t<slot name=\"description\" />\n\t{/if}\n</div>\n```\n\n```svelte\n<!--- file: App.svelte --->\n<Card>\n\t<h1 slot=\"title\">Blog Post Title</h1>\n\t<!-- No slot named \"description\" was provided so the optional slot will not be rendered. -->\n</Card>\n```",
		"svelte/legacy-svelte-fragment": "# `<svelte:fragment>`\n\nAllows placing content in a [named slot](legacy-slots) without a wrapper DOM element.\n\n```svelte\n<!--- file: Widget.svelte --->\n<div>\n\t<slot name=\"header\">No header was provided</slot>\n\t<p>Some content between header and footer</p>\n\t<slot name=\"footer\" />\n</div>\n```\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport Widget from './Widget.svelte';\n</script>\n\n<Widget>\n\t<h1 slot=\"header\">Hello</h1>\n\t<svelte:fragment slot=\"footer\">\n\t\t<p>All rights reserved.</p>\n\t\t<p>Copyright (c) 2019 Svelte Industries</p>\n\t</svelte:fragment>\n</Widget>\n```\n\n**Note:** In Svelte 5+, use snippets instead (no wrapper element needed).",
		"svelte/legacy-svelte-component": "# `<svelte:component>`\n\n## Runes Mode\n`<MyComponent>` re-renders automatically when `MyComponent` value changes. `<svelte:component>` not needed.\n\n## Legacy Mode\nRequired to destroy/recreate component when value changes:\n\n```svelte\n<svelte:component this={MyComponent} />\n```\n\nIf `this` is falsy, nothing renders.",
		"svelte/legacy-svelte-self": "# `<svelte:self>`\n\nAllows recursive component inclusion. Must be inside `{#if}`, `{#each}`, or slot to prevent infinite loops.\n\n```svelte\n<script>\n\texport let count;\n</script>\n\n{#if count > 0}\n\t<p>counting down... {count}</p>\n\t<svelte:self count={count - 1} />\n{:else}\n\t<p>lift-off!</p>\n{/if}\n```\n\n**Note:** Obsolete - components can import themselves directly:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport Self from './App.svelte'\n\texport let count;\n</script>\n\n{#if count > 0}\n\t<p>counting down... {count}</p>\n\t<Self count={count - 1} />\n{:else}\n\t<p>lift-off!</p>\n{/if}\n```",
		"svelte/legacy-component-api": "# Legacy Component API (Svelte 3/4)\n\n> **Note:** This does NOT apply to Svelte 5 components or legacy mode in Svelte 5 apps.\n\n## Creating a Component\n\n```ts\nconst component = new Component(options);\n```\n\nClient-side components are JavaScript classes:\n\n```ts\nimport App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n\tprops: {\n\t\tanswer: 42\n\t}\n});\n```\n\n### Options\n\n| option    | default     | description                                                                                          |\n| --------- | ----------- | ---------------------------------------------------------------------------------------------------- |\n| `target`  | **required**| `HTMLElement` or `ShadowRoot` to render to                                                           |\n| `anchor`  | `null`      | Child of `target` to render before                                                                   |\n| `props`   | `{}`        | Properties to supply                                                                                 |\n| `context` | `new Map()` | Root-level context key-value pairs"
	},
	"content_hashes": {
		"cli/overview": "24ce88570619713523dd675b54cf5ed810fc787f91c44295ed66cba88b586ab2",
		"cli/faq": "130b9862c1e56e7c289f7f350cf63c2bbd06b5895cecf2408d7018b30308596b",
		"cli/sv-create": "8ebe2ab8a05f73d57b6c20ca062694fafa17afebcf6228eadb28c9e2269532dc",
		"cli/sv-add": "febb2db174bb74aafadba071d03e60be32affd39256488dd9d7bf039bc99e55c",
		"cli/sv-check": "998117f78c8d13cda5aa9b8584f47306aedab8b4c5748b633f8282c994e5314d",
		"cli/sv-migrate": "8f0638858fb871b313d3aa7d15b3a82167e59fc2243f7991ca9d784c88abe728",
		"cli/devtools-json": "f68617102d58bc74cfa894254a3ec53950a69f62888477314dee5f2e8fa7d08c",
		"cli/drizzle": "f402220ec1272ddd283bd16b0116a4e584f9d7ff32cf31cd61e1b87467863bae",
		"cli/eslint": "881091b7857f92188ab98fba009cc7229414966a5f784550522a32c08dff8bc7",
		"cli/lucia": "9bdc0d65fea53e3f6709f02bbc6e7b5e14b815874f267d71fec6401fa2bb0de1",
		"cli/mdsvex": "4c9a3d8a661325d45b04ae511bb07fb8fb3853ef6e9ddba905e11ff10096aa44",
		"cli/paraglide": "3052be60f590bfdb3ebdd3232c5d4cea47b45004238eed25c14062451b8084ab",
		"cli/playwright": "255bc17601b4545fcf76dd9639b8d0a07bc9c1967e0bc8b0f8a4c67747fa27ad",
		"cli/prettier": "b6eaf065c2dd9a529b58aa848b81ca0aa48a61286093697007f101b18a64a3f4",
		"cli/storybook": "266ccae29ef911b2b3dc3d5c85e087d35bd20cd040ce0ce3b759cda057a6dbec",
		"cli/sveltekit-adapter": "8fa56b7fc75c856ec28ff0e6b05c3c290869c3f6701f469f4cf6d748b45c43fe",
		"cli/tailwind": "06f78477ba2df15fe0c5ee5698cb47e9bdbb558ad4e9c73a5c3a89be4935b22c",
		"cli/vitest": "49e0d37ae9a4a8af6d098ad0189d479ec7c07dc31a2fa3e7c8237e457c0e4f8b",
		"kit/introduction": "28c0756c4179d9be8a3feb146ed139feb260e78f0226078d5c4829fd4a303e67",
		"kit/creating-a-project": "65828935583402267d681f4609d04a2485f71c5d0a35fd4362f54f781bfabfc9",
		"kit/project-types": "4730fd90c7bb1459d1f8987fbeecdea5df42b538dc03b1b9b35ae68df4d959f0",
		"kit/project-structure": "fbc465d2744567cee3507e7b39c743cb9cac6c489c3349d6cc95ce1ced8b1435",
		"kit/web-standards": "a54c4c2d97f8c50e4c1170dd6059a125a9f7c79f7c0484a348a24e015cccf4ea",
		"kit/routing": "1fac22ea79cc9370e259adc2031f2259b53a655b9f1539506bb08f463a95aa2a",
		"kit/load": "986bf651baa6157301c3d5de873ddb3533a5df9397d995c7a079e8c7ddcbd496",
		"kit/form-actions": "781ffd55a5d4d05b5766ef6367d4cf353425f611d5f0876959796212a2ff14c8",
		"kit/page-options": "c1275054c96c6044352bc457415d3c258c9a6af48db862003e1b9ee6c7c908c5",
		"kit/state-management": "502db80d327820e8785301688f2351459179ad995e50dce8f4755f5d5d0ac6bd",
		"kit/remote-functions": "7a12920dc5b3f9760c3a1a0e6be3347c24ed700da95ac407ad3e9fb1c670f0cc",
		"kit/building-your-app": "20c5e2c2106bed1b052e037729b4410d12bf96e3d3bbb7fcbba346a308db00e8",
		"kit/adapters": "dd1909dd7297d3cef2a9489b7ce49036f8e559401d2504ee916d7f464fb21822",
		"kit/adapter-auto": "d09059d0117e2fa4ceb66650f47c3649420e1597452b0650905068df9a5ce5b1",
		"kit/adapter-node": "7f6046c4d9907006e0be9ecd7f291848953051ef85271483fb2baaa13c7d87dd",
		"kit/adapter-static": "c2e7be2cc09d0828a62ea843483efa0b74518b704699a3527b2c6098db8e17b5",
		"kit/single-page-apps": "47fe9184df8e8eaaa22970aee1200fba02b6c1b478a6ffc26d1935635c8e0daa",
		"kit/adapter-cloudflare": "2a64107ce88e5ccb39615688412c5a8186980655673a5133a2dc50659ed5aab3",
		"kit/adapter-cloudflare-workers": "424a8fbee22b74c59c30125f8e2843e292b8a64fd0e16df43ea5ca9c2750298c",
		"kit/adapter-netlify": "b43920d5588573a3ae22b71f4e60a19114725fa252239cc35e332965b5716bc3",
		"kit/adapter-vercel": "05cff8e507f64d37be03750fa719a4195ab4984ce8c9f381ea2209d8410497e9",
		"kit/writing-adapters": "e4c68eec588c6b4e5e7a53d96a4b85e26f3112458c430e90e7cdb2b20cf520d1",
		"kit/advanced-routing": "a91ec9444fd4dac8ff8cf13b2461e4dbbe2567e665e190bda29785537a0656e3",
		"kit/hooks": "e30ecbd21e7f29c16b42345b06b3e15be22796b158bde3256818121eaca18d66",
		"kit/errors": "fd8a2a2627a43141247d881fddc6e35c9cadec80014e97356249cafc1c3a6d9d",
		"kit/link-options": "37f95fa6c1b1af1a91ab62f4aa6b299e5462b6e5c1b58e0b02d8c1115e86cded",
		"kit/service-workers": "b662bafc6116274744cdea6d4ab9ef1eff2f0155dd7b3d9cef7d02a2d618701e",
		"kit/server-only-modules": "e5f80d7c5f350e7ca6e631bb893e83280ba3745a099a6942789def4919d41fd5",
		"kit/snapshots": "fdb47bf4216c38e9a8de0ddf2bb0608d35b762f30c7ee8602de53a6d0d9e4a0a",
		"kit/shallow-routing": "30d4b3b2ef8fbb921b5c176c1d147413f366dceb8fcbafc14ca63481c14cd3d4",
		"kit/observability": "47d603f5c605f5b4afcdfb22dc9b2f5fd145ae5c6d2a1f7ff42ab97a6bba8768",
		"kit/packaging": "249a22b2cb633f2bb1e63d1ff0d85c85b9cba64d4421853cb81e9aed5a96153e",
		"kit/auth": "728a3b639a4c2cca049cbf55aea37373856f3fa6deb435f42362fa91073ad5f4",
		"kit/performance": "ab69e26e699e8e7bfa669dc8f497f46f3dd9cec8f6c41226795e6932b6f145f7",
		"kit/icons": "d677885a338c1e579a8ea6dfe39ae10a1d20818089f7ef8652f90285a9121da8",
		"kit/images": "e6957eb17b5a7628e402f75388d221a51e1f26e6a1ad0593d7fd66d6eac88fea",
		"kit/accessibility": "9886bfa33757fc6070b2fb5257d392ef4222d5f904f12769d2c1393681f60d95",
		"kit/seo": "bc9620fd9e0647862de12ac97acdcf0c8b612235dd1c2181b0167cd5d8f1895b",
		"kit/faq": "57a5a8cab8696e3856d8ccc1f352d7ddebaf62a54c41f73de449e78cdd8d4a53",
		"kit/integrations": "995541eea85cab10811d69a6f2fdb0cb17d8ca4dfa0a955e3e6b99c78b53cfe8",
		"kit/debugging": "2dfd5e91bcb6371dd6596d2a6aafbd75fa4f289c859a06378f83db47ede02573",
		"kit/migrating-to-sveltekit-2": "1e14881387117aba2fd8652f0e61179cbe48d6d0b56dd79764b9a11fbf593ec6",
		"kit/migrating": "02f0dd45b5813c1f34d447c3a410e3a6a563ea2ec54fb06481be7ec690b97f81",
		"kit/additional-resources": "c6ff893413728f3165d5d6fa12c6ce81b36cfb867701f4ed8f5a46e50a28c4c2",
		"kit/glossary": "243f61f794e383efa48c4226e0a0e1d64f7e43e2049351cb02b007c95f6034ad",
		"kit/@sveltejs-kit": "4c3efcfc5179bbf05d87c22fefdf1444e96961d389cc0e61291ac94b7d93c8ab",
		"kit/@sveltejs-kit-hooks": "0fe8e4e985961ea67a721ed432c8c559c17ff09c1bda37b4b54239475c1ed47e",
		"kit/@sveltejs-kit-node-polyfills": "9f6bf38e1d0aa53cc055c8de2505ee5a80113b2db4d4db4a8cc9f9c68cf0b58c",
		"kit/@sveltejs-kit-node": "5bc0958d92037a982c4ffa47f11cd5e5ec6b91f503009fd644ac705c68247b79",
		"kit/@sveltejs-kit-vite": "7b8684d54b4cd2420d329536695d29c5d77891ed3f5062ff529f01524b0d8b33",
		"kit/$app-environment": "4bb0aee3c952ded3112422be5bc69c34b960cc73819d4b4d3b55ca3558aa2d45",
		"kit/$app-forms": "61a344004d71b921bb3c7d39a2afd9af4de5226a9e960b314838041b0792ea7f",
		"kit/$app-navigation": "92e632af18b1b9717fa6416f3eb410155f370c7ac7232077cbbbbec57fb9360a",
		"kit/$app-paths": "2c92cb88bf3b4a2dfbb29506edf4edcd4fb38b16a58c7d59efbca8cb3b53dcce",
		"kit/$app-server": "50c53e4f8851a489c0bdad479c58a82203188c5735d8ff36794172cf44f2695a",
		"kit/$app-state": "1d33d98725276564f912f1566a723235d26ddc24dc11381a2a05e3202db69e91",
		"kit/$app-stores": "f05e079b15bee2c561005f7f3b500f735a89c087da5778ad9390f2a1854fe3ec",
		"kit/$app-types": "9c5b3e9e428f9bd437b288e45679452960f46ebeace6f2a0f3da763b6a1ab9cd",
		"kit/$env-dynamic-private": "019a9b64f30a4407631d56554f2124061ad16b424888752186bdc961edf59eae",
		"kit/$env-dynamic-public": "39f6ff446965be224e528d14c9bfbb71f5fd9809f71db575bca6333d6427e941",
		"kit/$env-static-private": "526b80041929480f89ca948c02878aa8df669ae5380416bc30dc2d181869a6b3",
		"kit/$env-static-public": "5054a554cdd0a781ac5b5649aba92040556f87ad77cd1cc53fa939f544ac9515",
		"kit/$lib": "98d7b3ec9b4fba7e8d40b0c9a0845228d874bc037610abc12b346787557709ad",
		"kit/$service-worker": "d8a7b705cc0fde5e80ac381d5dc325ae689bd5a28c255eee4802396b2c0276db",
		"kit/configuration": "263d0373bf4da8181fb77b01a8ddc367cac7e101552bb6f252a48bcbee8139b6",
		"kit/cli": "690b0bd6cddbf1b1d2cb52a2956a757a515ca4e4b41ae6c85b37d94b8d1ade84",
		"kit/types": "1519bf5d3bdc6324a7da937d64624f6b2caed779c3e4091ac4439769beaa3453",
		"mcp/overview": "2f120bae00baa384aefc093eea0e3298e2e8fbda1ffa1c55c8ae956b83f28976",
		"mcp/local-setup": "615547482fc28ae62e5287f79124618b275f62017bfff511466f2326271b5bb9",
		"mcp/remote-setup": "af2dd1872f26a220838def57ae5d6f4424affb9d3f1d53ca570c021bb93d658d",
		"mcp/tools": "ccf68183cc4b6801a6aeeb575bfbdbdebd1af305624fe6cf64de3dbbeb9e025f",
		"mcp/resources": "381b5a3256eda7e8e09f8e8760dba1d0c542a49f4961c203f3f9ad10c1f5d638",
		"mcp/prompts": "84327e4e2d5b97a1fe3c8a693ab0f20a94dc068abb8d80bdde64dc09e7431b32",
		"svelte/overview": "7700ca74f439e7c3d397f6ceeed70aed59cf177894a30b475ed601778e9e8042",
		"svelte/getting-started": "80bbf8f2ea3580febd3e20296fdf63f29997e26e727774c2fc6080456bee4f52",
		"svelte/svelte-files": "8971b9003e5ce6898894a01615b5816c7a95191b5e327af53ce31b49844d6f0a",
		"svelte/svelte-js-files": "b6a481a0ba8e3498533a27d6ff34c4caf46b319716729e80b4e0abe98e90ae0d",
		"svelte/what-are-runes": "d52254d2631c5014d33de163a8ac8f3a011f3921397633bb2a9aeb90510b3479",
		"svelte/$state": "7d8c804721e60d4902109ebebea5cf3920f61af7c7613b1530406b27a1bdc105",
		"svelte/$derived": "b85bac4b7541f9eec5050c4afe11efa120c8d83de07073357769de328a2b9d70",
		"svelte/$effect": "fc928d4d5daafec1b06b7b143492524cf0ec5059b2ecf6cc88b56539e3d08375",
		"svelte/$props": "8b0e924f115db23113867c70863f8b24ec843f285fede30d54ede21fb7c3b83f",
		"svelte/$bindable": "60375b28577bc285815809c5bb85dec0a5e123bf3eda0da374d4c0cb28d9a377",
		"svelte/$inspect": "014b8f124d82cca846a14096588de250c09469b52f4bc0380fad45ec572ea0e3",
		"svelte/$host": "37a9fb749359688e1d68e03bef6833a67beb7ab695a5faeb73ed1d6ad1867c5f",
		"svelte/basic-markup": "7aebf6ad9be00b337d4018ddf768c11e1e8e13e9a8952c7ddc743d6cc1cca428",
		"svelte/if": "e4da4ed94902fa904fa168b50bb68d838f94a2c2be4faa5fef00b3dbbcc61645",
		"svelte/each": "e8d75f3a210da756db04881c81499027a6be5f875a0747fd4c01c4cc1f37a01b",
		"svelte/key": "5df663b8f1ada229fd771e5dc64bf5ad96ca21e27f6bd8c5b499d7b5fed5da35",
		"svelte/await": "ba40da73575717b3005d8c3f4fadf1dc47d4369229b1f1b98a9962dc5f05df3f",
		"svelte/snippet": "96f1853f3ca164532427e0c881b647b252ffb94cd3559505d8cf41ddd5279973",
		"svelte/@render": "fefc529a277b207668ec7171bdd044117b96792ed19903e0f6a0c35d1a184780",
		"svelte/@html": "37ffb87f829e7b36b521ee5e99f5956d76baf449e32661c5f7156f805e1fc82f",
		"svelte/@attach": "9bef203823fe4795129e280d37830b068bb9a6e805ccbadcf8509a3c0ee6151a",
		"svelte/@const": "e79a941a3e248400ed19fc410bdcca1e1dfd50b5e9f21b2d8224ef176e3e75cc",
		"svelte/@debug": "f57a6ce04733ab2e2af63b2d59344414e7b5130bdec00274e3542dcb468c8a21",
		"svelte/bind": "025daf253af040a560d79a8e5efee56f2d2922c55ab80fead24623d86c36d1d3",
		"svelte/use": "adb10f7ef6a316db21b32a2bc2cea079abe37c48bb33cdebf9db91592115bf23",
		"svelte/transition": "e916f804688a8d4dc7d6f34b2d5862595aa5a4a10daede17861d370eec873050",
		"svelte/in-and-out": "d1dc82a686f09fc6dec814a8ce824e40757c4b857b147a69e6c84bf93b0bcc17",
		"svelte/animate": "0320580f745ba93cb536ecbef5e10c227caad60fefae5dadc9dd52166a9453d7",
		"svelte/style": "a7e861bea29058120c83982fdc8b421dea565032f2940e18fa068df6a73eb061",
		"svelte/class": "15318e5a8d676aa840f71229a3f3e432883a7bbd00c4ef2b28e4fd4db755584d",
		"svelte/await-expressions": "01dc0a2118fd8a2cd649c737e097635a013576f85b473a752756ccaf92aa27e8",
		"svelte/scoped-styles": "c4ade79680ca0bda7e157be5fcafdb063002bacc79a5f9c1e8530ec4b479df7f",
		"svelte/global-styles": "52b1090dfdbff596c3f19264277df4b0d2b3a063e3ee3f42610b23c629ccac02",
		"svelte/custom-properties": "b0d4f8432380284735838ea0ab48812dc37665dec364908d3dc2c82fcb5179d9",
		"svelte/nested-style-elements": "86f7e79c3532f5a2e88f6cbfd3c2d4496f3c42858b799e6f47dd32409055ec29",
		"svelte/svelte-boundary": "a1ffd2ced1122092b06c7a5c3e2b66d127daa632a9888f8987de1438d24a2af4",
		"svelte/svelte-window": "95f83adf2a83e810917df66ec3ae64a083e20f79b9bae25a63693edad6186930",
		"svelte/svelte-document": "ea8eafada6dd22a1ca36a6d2b7c2ebd996620dd809bd29f1cf2e23912c9f2fb4",
		"svelte/svelte-body": "6d42bb102657242d2745658e8394df8e948384c93896bb1a38eba628129580e0",
		"svelte/svelte-head": "7d7ed49de4b8eaed5a7c2a3741c9c97d7f07f1c61d609cf95ea4642d7d9519fc",
		"svelte/svelte-element": "dbc2894d1a4df3bbc010e14fe8acaf47cab1e47595083549bcbe03ef6d70c0f8",
		"svelte/svelte-options": "361ae053b401b5748092545e79387c1fd204a0c05e0c97af476dd5c2b6459a05",
		"svelte/stores": "6af05349fa2e56cf97baf52bfdad4baa56205a07676bbbbf83ba9cc11b4f74c9",
		"svelte/context": "5aced025a25892c041d22e2942d5c793cab49425dbb79aa24c6e8bda6f831e52",
		"svelte/lifecycle-hooks": "4cb4967ff252980753a385d7400aeecd6e7e7e5d49853b07e6ce9ac5c21f226b",
		"svelte/imperative-component-api": "f65ba0880e127ea497167efeae5f6250233b35764549b81ba338f5e172fa4a84",
		"svelte/testing": "b186d594536788db689e45f5d006effa5bb0852539751a9f469c33f871ffbb07",
		"svelte/typescript": "0a7109270bbf8fb388e51e38b868f46c532d54ba3a7ae3304b0b369ec9f03c30",
		"svelte/custom-elements": "a74ef3bc373c0cf5d7d439accf11d398b3180f3e44fe576b1e68dd2813b6484d",
		"svelte/v4-migration-guide": "d78c974770bab180bfa50f8465ddd08d29dc3355d7d8da4aa2f892f68a8dcbae",
		"svelte/v5-migration-guide": "6e92e90f8b5086a7b1eda8d498e995650d4f93ef05ec35c89e24909c21f623bb",
		"svelte/faq": "e935b0651782fde2cb138dac2586fbb3627fddc08cdd7a8b00d1d09a5b63ff8d",
		"svelte/svelte": "bd2a9bcc3babc4dd148ae71ddb437d9c6e359c516f0823e14cd02fa99be3b37a",
		"svelte/svelte-action": "dd41790ddfa6ad8763c566bf81abcefd47bf1d82465e77224034507d65ef7dd2",
		"svelte/svelte-animate": "4b96afa6848acf81497770d69b655df3c7472b546f3024dcc25521ec14e585ed",
		"svelte/svelte-attachments": "4da23f36026be101db0440d9357e84d765b58cca00678548f52139a133913e9a",
		"svelte/svelte-compiler": "6815a77b9d14d476a4d4bc6ad589e5436ca3f8c897952eb858ee359ebba59f49",
		"svelte/svelte-easing": "452e4c4f8485a8047c3320c58fb4df07acaa8c7bd6171828f0b55673a05f2b22",
		"svelte/svelte-events": "06c912902e80d19cb1ca7e2eac03ca7138d0f9a39547f5ee51115196d483e948",
		"svelte/svelte-legacy": "b285c8859ed7403616829e2dcbf1a81982942182f8039a1acbba1a0082b54804",
		"svelte/svelte-motion": "c64243c31d2187b9fa41c16697fe3a5f204603382be53b6a6d8aef27ab4142e6",
		"svelte/svelte-reactivity-window": "48a9e5dba5564bddaac94a0d7ba4c8d5f8e2480cdebb19ba71288936bc76bdf1",
		"svelte/svelte-reactivity": "4ff4d515986a45e575bfa8d64e09e5f6b61a9f35e79035f7507cd502b9431d4f",
		"svelte/svelte-server": "bb027c8e6c0aa48a77349a49671f0bd60fec07b7c0150f1498e4a18e5f90288b",
		"svelte/svelte-store": "6f99d25bd75333042c6aa1377e33d5cc51aabf48b660eda5756f08d7d3b7a9b2",
		"svelte/svelte-transition": "e57769d1e309aa9f2fa4d591ac2fb7d73aedf232a437b975e7845352a3ad9909",
		"svelte/compiler-errors": "88172d54e4e4a1b094b8ec526fa84e0a9ee3a0cbfcbe90de6a09c580c48c3a0f",
		"svelte/compiler-warnings": "885adaa867ffd525b695b32b87789cf2d9bde741d45c13dd153dd5519233fd4b",
		"svelte/runtime-errors": "59035d3cf75f6af6fdd94fcf22c42cb66e892adf4d55a81801072c53f3dabcac",
		"svelte/runtime-warnings": "93b6ee308fd13add66bc7621659c22580eef4d6614bf78f0a130879ae5d8ec64",
		"svelte/legacy-overview": "f999cc193b4ecf36cbfb99b52107a55aa7b841b6e01ea5e0229799abd90933dc",
		"svelte/legacy-let": "3660721b3cd7cdcb60b77450bd87b6ded93eb7d47aee9950db994d3450d07739",
		"svelte/legacy-reactive-assignments": "ca81836b396d9f6d4df34707ea79ed177bdd2d93dd3b43e37137dfca37396d31",
		"svelte/legacy-export-let": "0223ca4f538116da46d27840653a11c352d88ad2f5eb8cc9a50a5b590001aad3",
		"svelte/legacy-$$props-and-$$restProps": "8d91d694b70547a915cc2360ea1c63e7b9dcd29fd0fedfc04b2fb3ade6c152a7",
		"svelte/legacy-on": "7dde3692ea5c91bbcf1d86ff91fce1966df0952d2cf153f3fab6fa1a55774330",
		"svelte/legacy-slots": "05d8524ab20b47d5f07e67f0634d425cf892715c68cf635b134d6b19e397bbb8",
		"svelte/legacy-$$slots": "d3aa2e8e480a9593259ad1d5dec43a605ed28bb92e7007d0713f60a398803d7c",
		"svelte/legacy-svelte-fragment": "aaa2a5b2fbb72fa2dfe5f10cdb2287863cf99d9590a634b43e28336da1a89e54",
		"svelte/legacy-svelte-component": "3c2d5fb89cfe5657950d279a4189ab1f877dac99e8afca187fc5952eecb39ae0",
		"svelte/legacy-svelte-self": "afc8f5667bd3643e206f1bd4298ee5e259ca0b5e8cf7b2fb7b9afd692b66ad78",
		"svelte/legacy-component-api": "9bd8fde41aa9e006091751b16d3de14b28471733534e08dfba99d745db78fac6"
	}
}
